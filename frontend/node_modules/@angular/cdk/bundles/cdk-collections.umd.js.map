{"version":3,"file":"cdk-collections.umd.js","sources":["../../../../../../src/cdk/collections/data-source.ts","../../../../../../src/cdk/collections/array-data-source.ts","../../../../../../src/cdk/collections/selection-model.ts","../../../../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../../../../src/cdk/collections/public-api.ts","../../../../../../src/cdk/collections/index.ts"],"names":["__extends","isObservable","observableOf","Subject","__values","Injectable"],"mappings":";;;;;;IAAA;AACA;AACI;AAEC;AAAO;AACI;AAGD;AAGf;AAEM,QAFN;AAAwB,SAmBvB;AACD,QADA,iBAAC;AAED,IAFA,CAAC,IAAA;AACD,IACA;AACA,aAAgB,YAAY,CAAC,KAAU;AAAI;AAC2B;AACM;AACxB,QAClD,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,CAAC;AACtD,IAAA,CAAC;AACD;AAAC,ICvCD;AACA;AACI;AAEC;AAAO;AACI;AAGD;AAAQ,IAIvB;AACA;AACK,QADmCA,yCAAa;AAAC,QACpD,yBAAoB,KAAkE;AACxF,YADE,YACE,iBAAO,SACR;AACH,YAHsB,WAAK,GAAL,KAAK,CAA6D;AAAC;AAIpF,SAFF;AACH,QACE,iCAAO,GAAP;AAAc,YACZ,OAAOC,iBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAGC,OAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5E,SAAG;AAEH,QAAE,oCAAU,GAAV,eAAe;AAChB,QAAD,sBAAC;AACA,IADD,CAVA,CAAwC,UAAU;AAAI;AAAC,ICbvD;AACA;AACI;AAEC;AAAO;AACI;AAGD;AAAf,IAEA;AACA;AAEA;AAAA;AACqB,QAwBnB,wBACU,SAAiB,EACzB,uBAA6B,EACrB,YAAmB;AAC/B,YAJE,iBAeC;AACH,YAfY,0BAAA,EAAA,iBAAiB;AAC3B,YACU,6BAAA,EAAA,mBAAmB;AAC/B,YAHY,cAAS,GAAT,SAAS,CAAQ;AAAC,YAElB,iBAAY,GAAZ,YAAY,CAAO;AAAC;AAEU,YA5BhC,eAAU,GAAG,IAAI,GAAG,EAAK,CAAC;AACpC;AAES,YAAC,sBAAiB,GAAQ,EAAE,CAAC;AACtC;AAES,YAAC,oBAAe,GAAQ,EAAE,CAAC;AACpC;AAEE,YAYA,YAAO,GAAgC,IAAIC,YAAO,EAAE,CAAC;AACvD,YAMI,IAAI,uBAAuB,IAAI,uBAAuB,CAAC,MAAM,EAAE;AACnE,gBAAM,IAAI,SAAS,EAAE;AACrB,oBAAQ,uBAAuB,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;AAC5E,iBAAO;AAAC,qBAAK;AACb,oBAAQ,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,iBAAO;AACP;AAES,gBAAH,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;AACtC,aAAK;AACL,SAAG;AACH,QA3BE,sBAAI,oCAAQ;AAAI;AAEf,iBAFD;AAAc,gBACZ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACzB,oBAAM,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;AAC5D,iBAAK;AACL,gBACI,OAAO,IAAI,CAAC,SAAS,CAAC;AAC1B,aAAG;AAEH;AAA8B;AACpB,WAHP;AACH;AACW;AACD;AAAY,QAsBpB,+BAAM,GAAN;AAAc,YAAd,iBAIC;AACH,YALS,gBAAc;AAAC,iBAAf,UAAc,EAAd,qBAAc,EAAd,IAAc;AAAI,gBAAlB,2BAAc;AAAC;AACnB,YAAD,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACxC,YAAI,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;AACvD,YAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC5B,SAAG;AAEH;AACM;AAEA;AAAY,QAAhB,iCAAQ,GAAR;AAAc,YAAd,iBAIC;AACH,YALW,gBAAc;AAAC,iBAAf,UAAc,EAAd,qBAAc,EAAd,IAAc;AAAI,gBAAlB,2BAAc;AAAC;AACrB,YAAD,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACxC,YAAI,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;AACzD,YAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC5B,SAAG;AAEH;AACM;AAEA;AAAY,QAAhB,+BAAM,GAAN,UAAO,KAAQ;AAAI,YACjB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACvE,SAAG;AAEH;AACM;AAEA;AACN,QADE,8BAAK,GAAL;AAAc,YACZ,IAAI,CAAC,UAAU,EAAE,CAAC;AACtB,YAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC5B,SAAG;AAEH;AACM;AAEA;AAAY,QAAhB,mCAAU,GAAV,UAAW,KAAQ;AAAI,YACrB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACtC,SAAG;AAEH;AACM;AAEA;AAAY,QAAhB,gCAAO,GAAP;AAAc,YACZ,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC;AACtC,SAAG;AAEH;AACM;AAEA;AAAY,QAAhB,iCAAQ,GAAR;AAAc,YACZ,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;AAC3B,SAAG;AAEH;AACM;AAEA;AAAY,QAAhB,6BAAI,GAAJ,UAAK,SAAkC;AAAI,YACzC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;AACzC,gBAAM,IAAI,CAAC,SAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACtC,aAAK;AACL,SAAG;AAEH;AACM;AAEA;AAAY,QAAhB,4CAAmB,GAAnB;AAAc,YACZ,OAAO,IAAI,CAAC,SAAS,CAAC;AAC1B,SAAG;AAEH;AACM,QAAI,yCAAgB,GAAxB;AAAc;AACoC,YAChD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC1B,YACI,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;AACtE,gBAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AACxB,oBAAQ,MAAM,EAAE,IAAI;AACpB,oBAAQ,KAAK,EAAE,IAAI,CAAC,eAAe;AACnC,oBAAQ,OAAO,EAAE,IAAI,CAAC,iBAAiB;AACvC,iBAAO,CAAC,CAAC;AACT,gBACM,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;AAClC,gBAAM,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAChC,aAAK;AACL,SAAG;AAEH;AACM,QAAI,sCAAa,GAArB,UAAsB,KAAQ;AAChC,YAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;AACjC,gBAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AAC3B,oBAAQ,IAAI,CAAC,UAAU,EAAE,CAAC;AAC1B,iBAAO;AACP,gBACM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACjC,gBACM,IAAI,IAAI,CAAC,YAAY,EAAE;AAC7B,oBAAQ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzC,iBAAO;AACP,aAAK;AACL,SAAG;AAEH;AACM,QAAI,wCAAe,GAAvB,UAAwB,KAAQ;AAClC,YAAI,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;AAChC,gBAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACpC,gBACM,IAAI,IAAI,CAAC,YAAY,EAAE;AAC7B,oBAAQ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3C,iBAAO;AACP,aAAK;AACL,SAAG;AAEH;AACM,QAAI,mCAAU,GAAlB;AAAc,YAAd,iBAIC;AACH,YAJI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;AACzB,gBAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;AACpE,aAAK;AACL,SAAG;AAEH;AACM;AACM;AAEA;AAAY,QAAd,+CAAsB,GAA9B,UAA+B,MAAW;AAC5C,YAAI,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AAC9C,gBAAM,MAAM,uCAAuC,EAAE,CAAC;AACtD,aAAK;AACL,SAAG;AACF,QAAD,qBAAC;AAED,IAFA,CAAC,IAAA;AACD,IAcA;AACA;AACI;AACI;AAEA;AAAR,aAAgB,uCAAuC;AACvD,QAAE,OAAO,KAAK,CAAC,yEAAyE,CAAC,CAAC;AAC1F,IAAA,CAAC;AACD;AAAC,ICjMD;AACA;AACI;AACI;AACI;AAEC;AAAO;AACI;AAEA;AAAxB;AAC+B,QAD/B;AACK,YACK,eAAU,GAAwC,EAAE,CAAC;AAC/D,SA4BC;AACD;AAAY;AAA8E;AAAqC;AAAyC;AAAY,QAvBlL,0CAAM,GAAN,UAAO,EAAU,EAAE,IAAY;AACjC;AAAyB;AAAkB,gBAAvC,KAAqB,IAAA,KAAAC,eAAA,IAAI,CAAC,UAAU,CAAA,gBAAA,4BAAE;AAC1C,oBADS,IAAI,QAAQ,WAAA;AAAE,oBACjB,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;AACzB,iBAAK;AACL;AAGG;AACI;AAAsB;AAC5B;AAED;AAAkB;AAED;AAAc,SAT5B;AAEH;AACM;AACM;AAEA;AAAY,QAAtB,0CAAM,GAAN,UAAO,QAA2C;AAAI,YAAtD,iBAOC;AACH,YAPI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnC,YAAI,OAAO;AACL,gBAAA,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,UAA6C;AAAI,oBACzF,OAAO,QAAQ,KAAK,UAAU,CAAC;AACvC,iBAAO,CAAC,CAAC;AACT,aAAK,CAAC;AACN,SAAG;AAEH,QAAE,+CAAW,GAAX;AAAc,YACZ,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AACzB,SAAG,CA7BU;qEADZC,aAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC,jHAClB;;;;;gDAKgB;AAC9B,wCA9BA;AAAE,KAuBF;AAAK;AAAC,ICvBN;AACA;AACI;AAEC;AAAO;AACI;AAGD,OAFZ;AACH;AACA,ICRA;AACA;AAEA,OADG;AACH;AACA;AACiB;AAAqC;AAA6C;AAAmE;AAA+F;AAAyC;AAAC;AAAmE;AAAC;AAAM","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\n    super();\n  }\n\n  connect(): Observable<T[] | ReadonlyArray<T>> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  changed: Subject<SelectionChange<T>> = new Subject();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true) {\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   */\n  select(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   */\n  deselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   */\n  toggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   */\n  clear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './array-data-source';\nexport * from './collection-viewer';\nexport * from './data-source';\nexport * from './selection-model';\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n} from './unique-selection-dispatcher';\nexport * from './tree-adapter';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}