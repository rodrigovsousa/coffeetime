{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@nuvem/angular-base/lib/block-ui/block-ui.service.ts","ng://@nuvem/angular-base/lib/block-ui/block-ui.interceptor.ts","ng://@nuvem/angular-base/lib/version-tag/version-tag.component.ts","ng://@nuvem/angular-base/lib/version-tag/version-tag.module.ts","ng://@nuvem/angular-base/lib/security/authentication/authentication.ts","ng://@nuvem/angular-base/lib/security/authentication/logout.directive.ts","ng://@nuvem/angular-base/lib/security/authentication/user.directive.ts","ng://@nuvem/angular-base/lib/security/authentication/login-success.component.ts","ng://@nuvem/angular-base/lib/security/authentication/authorization/authorization.ts","ng://@nuvem/angular-base/lib/security/authentication/authorization/has-role.directive.ts","ng://@nuvem/angular-base/lib/security/authentication/hide-while-login.component.ts","ng://@nuvem/angular-base/lib/security/config/auth-config.ts","ng://@nuvem/angular-base/lib/security/authentication/authorization/authorization.service.ts","ng://@nuvem/angular-base/lib/security/authentication/authentication.service.ts","ng://@nuvem/angular-base/lib/security/authentication/not-authenticated-error-provider.service.ts","ng://@nuvem/angular-base/lib/error/providers/error.provider.ts","ng://@nuvem/angular-base/lib/security/token/token.ts","ng://@nuvem/angular-base/lib/security/token/jwt-auth.interceptor.ts","ng://@nuvem/angular-base/lib/security/token/jwt-token.service.ts","ng://@nuvem/angular-base/lib/security/security.module.ts","ng://@nuvem/angular-base/lib/security/authentication/auth.guard.ts","ng://@nuvem/angular-base/lib/form-notification/types/form-notification.type.ts","ng://@nuvem/angular-base/lib/accessibility/accessibility.service.ts","ng://@nuvem/angular-base/lib/accessibility/accessibility.module.ts","ng://@nuvem/angular-base/lib/common-mask/common-mask.service.ts","ng://@nuvem/angular-base/lib/common-mask/common-mask.module.ts","ng://@nuvem/angular-base/lib/error/error.service.ts","ng://@nuvem/angular-base/lib/error/providers/notification.provider.ts","ng://@nuvem/angular-base/lib/error/types/application-problem.type.ts","ng://@nuvem/angular-base/lib/error/services/http-application-problem-error.service.ts","ng://@nuvem/angular-base/lib/error/types/http-generic-error.type.ts","ng://@nuvem/angular-base/lib/error/services/http-generic-error.service.ts","ng://@nuvem/angular-base/lib/error/error.module.ts","ng://@nuvem/angular-base/lib/error/services/notification.service.ts","ng://@nuvem/angular-base/lib/error/services/error-stack.service.ts","ng://@nuvem/angular-base/lib/error/services/error-stack-provider.service.ts","ng://@nuvem/angular-base/lib/pipes/cep.pipe.ts","ng://@nuvem/angular-base/lib/pipes/cpf.pipe.ts","ng://@nuvem/angular-base/lib/pipes/cnpj.pipe.ts","ng://@nuvem/angular-base/lib/pipes/pipe.regex.ts","ng://@nuvem/angular-base/lib/pipes/pipe.limit.ts","ng://@nuvem/angular-base/lib/pipes/pipe.module.ts","ng://@nuvem/angular-base/lib/clipboard/clipboard.service.ts","ng://@nuvem/angular-base/lib/clipboard/clipboard.directive.ts","ng://@nuvem/angular-base/lib/clipboard/clipboard.module.ts","ng://@nuvem/angular-base/lib/directives/unmask.directive.ts","ng://@nuvem/angular-base/lib/directives/only-numbers.directive.ts","ng://@nuvem/angular-base/lib/directives/directives.module.ts","ng://@nuvem/angular-base/lib/form-notification/types/field-form-notification.type.ts","ng://@nuvem/angular-base/lib/form-notification/services/form-notification.service.ts","ng://@nuvem/angular-base/lib/form-notification/services/form-notification-error-provider.service.ts","ng://@nuvem/angular-base/lib/form-notification/types/clean-form-notification.type.ts","ng://@nuvem/angular-base/lib/form-notification/interceptor/form-notification.interceptor.ts","ng://@nuvem/angular-base/lib/form-notification/components/form-notification-superclass.component.ts","ng://@nuvem/angular-base/lib/form-notification/form-notification.module.ts","ng://@nuvem/angular-base/lib/form-notification/providers/form-notification.provider.ts","ng://@nuvem/angular-base/lib/form-utils/injectable-superclass.ts","ng://@nuvem/angular-base/lib/form-utils/directive-superclass.ts","ng://@nuvem/angular-base/lib/form-utils/form-control-superclass.ts","ng://@nuvem/angular-base/lib/form-utils/wrapped-form-control-superclass.ts","ng://@nuvem/angular-base/lib/security/authentication/security.bootstrap.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","BlockUiService","subject","Subject","loaderStatus","asObservable","show","next","status","hide","Injectable","providedIn","BlockUiInterceptor","service","intercept","req","_this","isMutation","method","handle","pipe","tap","event","HttpResponse","err","indexOf","VersionTagComponent","ngOnInit","Input","Component","selector","template","VersionTagModule","NgModule","imports","CommonModule","RouterModule","declarations","exports","LogoutDirective","authenticationService","click","logout","Authentication","HostListener","Directive","UserDirective","el","isAuthenticated","user","getUser","nativeElement","innerHTML","name","ElementRef","LoginSuccessComponent","login","HasRoleDirective","templateRef","viewContainer","authorization","authentication","hasRole","clear","loginNotifications","unsubscribe","getLoginNotifications","subscribe","createEmbeddedView","ngOnDestroy","TemplateRef","ViewContainerRef","Authorization","HideWhileLoginComponent","hostComponent","auth","blockUiService","loadingContent","waitingLogin","ngAfterContentInit","ngAfterViewInit","children","style","display","AUTH_CONFIG","InjectionToken","AuthorizationService","_super","call","role","roles","some","userRole","checkRole","config","storage","getItem","userStorageIndex","redirect","window","location","href","loginUrl","AuthenticationService","http","BehaviorSubject","getUserDetails","setUser","removeItem","logoutUrl","get","baseUrl","detailsUrl","setItem","JSON","stringify","parse","filter","value","Inject","args","HttpClient","NotAuthenticatedErrorProvider","shouldHandle","error","HttpErrorResponse","JWTAuthInterceptor","token","request","hasToken","setTokenInHeader","extractTokenFromHeaders","headers","storeToken","Token","JWTTokenService","JWTTokenService_1","HEADER_STRING","tokenStorageIndex","toString","clone","HttpHeaders","_a","TOKEN_PREFIX","SecurityModule","forRoot","ngModule","SecurityModule_1","providers","provide","useValue","useClass","HTTP_INTERCEPTORS","multi","HttpClientModule","ErrorProvider","AuthGuard","canActivate","route","state","canActivateChild","FormNotificationType","AccessbilityService","rendererFactory","fontSize","renderer","createRenderer","enableHighContrast","addClass","document","body","disableHighContrast","removeClass","increaseFontSize","setStyle","querySelector","decreaseFontSize","addAccessibilityIcons","elements","addAccessibilityMessages","msg","type","severity","toLowerCase","RendererFactory2","AccessbilityModule","CommonMaskService","DATE_SEPARATOR","dateMask","$event","date","replace","substr","CommonMaskModule","ErrorService","handleError","forEach","e","ErrorHandler","title","detail","instance","stacktrace","cause","HttpApplicationProblemErrorService","notification","ngZone","run","addErrorProblem","ApplicationProblemType","NotificationProvider","NgZone","code","HttpGenericErrorService","generic","getErrorByCode","addErrorMessage","GENERIC_ERRORS","undefined","HttpGenericErrorType","statusText","message","401","403","404","500","502","503","504","ErrorModule","NotificationService","console","problem","ErrorStackService","genericErrorService","errors","ReplaySubject","localStorage","getErrorsSubjects","namedError","createNamedError","persistedErrors","shift","push","fullMessage","createdAt","Date","errorId","getErrorId","url","genericError","correlationId","errorKey","keys","every","toUpperCase","ErrorStackProviderService","errorStackService","CepPipe","transform","substring","Pipe","CpfPipe","CnpjPipe","RegexPipe","regex","regexPrint","LimitPipe","limit","ellipsis","PipeModule","ClipboardService","copy","text","isRTL","documentElement","getAttribute","fake","createElement","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","appendChild","select","execCommand","removeChild","ClipboardDirective","onClipboard","EventEmitter","clipboard","emit","Output","ClipboardModule","UnmaskDirective","elementRef","model","subscriber","control","valueChanges","newValue","RegExp","appUnmask","setValue","emitEvent","emitModelToViewChange","emitViewToModelChange","NgControl","OnlyNumbersDirective","specialKeys","onKeyDown","concat","String","match","preventDefault","DIRECTIVES","DirectivesModule","form","FieldFormNotification","field","FIELD","FormNotification","FormNotificationService","formNotifications","notifications","violation","CLEAN","notify","FormNotificationErrorProvider","formNotificationService","violations","fieldErrors","values","CleanFormNotification","FormNotificationInterceptor","FormNotificationComponentSuperclass","subscription","FormNotificationBaseModule","FormNotificationProvider","InjectableSuperclass","subscriptions","Subscription","destructionSubject","destruction$","subscribeTo","observable","complete","add","bind","fn","DirectiveSuperclass","injector","inputChanges$","changeDetectorRef","ChangeDetectorRef","ngOnChanges","changes","Set","getOwnPropertyNames","getInput$","has","startWith","map","bindToInstance","value$","markForCheck","noop","FormControlSuperclass","apply","emitOutgoingValue","onTouched","isDisabled","writeValue","handleIncomingValue","registerOnChange","registerOnTouched","setDisabledState","WrappedFormControlSuperclass","formControl","FormControl","innerToOuter","markAsTouched","outerToInner","disable","enable","authenticated","notAuthenticated","isAuthenticated$1","includes","loginSuccessRoute","NG_VALUE_ACCESSOR","useExisting"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { BlockUiStatus } from './block-ui.status';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * Class BlockUiService\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BlockUiService {\n\n    /**\n     * subject property\n     * @private\n     * @type {Subject<BlockUiStatus>}\n     */\n    private subject = new Subject<BlockUiStatus>();\n\n    /**\n     * loaderStatus property\n     * @public\n     * @type {Observable}\n     */\n    loaderStatus = this.subject.asObservable();\n\n    /**\n     * constructor method\n     * @constructor\n     */\n    constructor() { }\n\n    /**\n     * show methods\n     * @returns void\n     */\n    show() {\n        this.subject.next(<BlockUiStatus>{ status: true });\n    }\n\n    /**\n     * hide methods\n     * @returns void\n     */\n    hide() {\n        this.subject.next(<BlockUiStatus>{ status: false });\n    }\n}\n","import { Observable } from 'rxjs';\nimport { HttpEvent, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { Injectable } from \"@angular/core\";\nimport { tap } from 'rxjs/operators';\nimport { BlockUiService } from './block-ui.service';\n\n/**\n * Class BlockUiInterceptor\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BlockUiInterceptor implements HttpInterceptor {\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {BlockUiService} service \n     */\n    constructor(private service: BlockUiService) {}\n\n    /**\n     * intercept method\n     * @public \n     * @param {HttpRequest<any>} req\n     * @param {HttpHandler} next\n     * @return Observable<HttpEvent<any>>\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        if (this.isMutation(req.method)) {\n            this.service.show();\n        }\n\n        return next.handle(req).pipe(\n            tap(\n                (event: HttpEvent<any>) => {\n                    if (event instanceof HttpResponse) {\n                        this.service.hide();\n                    }\n                },\n                (err: any) => {\n                    this.service.hide();\n                }\n            )\n        );\n    }\n    /**\n     * isMutation method\n     * @private\n     * @param {string} method\n     * @return boolean\n     */\n    private isMutation(method: string): boolean {\n        const mutationsMethods = [\n            'DELETE',\n            'PATCH',\n            'POST',\n            'PUT'\n        ];\n\n        return mutationsMethods.indexOf(method) !== -1;\n    }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n/**\n * Componente responsÃ¡vel por expor o seletor <app-version-tag></app-version-tag> para reuso\n * @class\n */\n@Component({\n    selector: 'app-version-tag',\n    templateUrl: './version-tag.component.html'\n})\nexport class VersionTagComponent implements OnInit {\n\n    /**\n     * Propriedade de para definiÃ§Ã£o para classe CSS\n     * @public\n     * @type {string}\n     */\n    @Input() cssClass: string;\n\n    /**\n     * Propriedade para definiÃ§Ã£o de versÃ£o\n     * @public\n     * @type {string}\n     */\n    version: string;\n\n    /**\n     * Metodo executado ao carregar o componente responsÃ¡vel por carregar o arquivo 'package.json'\n     * @return void\n     */\n    ngOnInit() {\n    }\n}\n","import { VersionTagComponent } from './version-tag.component';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n/**\n * O componente VersionTag exibe o atributo `version` do arquivo `package.json` do sistema,\n * com o intuito de informar o usuÃ¡rio a versÃ£o atual da aplicaÃ§Ã£o. Inicialmente foi feito para\n * ser utilizado no rodapÃ© das aplicaÃ§Ãµes conforme o exemplo a seguir.\n * @module\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    declarations: [\n        VersionTagComponent\n    ],\n    exports: [\n        VersionTagComponent\n    ]\n})\nexport class VersionTagModule {\n}\n","import { User } from \"./user\";\nimport { Observable } from \"rxjs\";\n\n/**\n * Classe abstrata para serviÃ§o de autenticaÃ§Ã£o\n * @class\n */\nexport abstract class Authentication<U extends User> {\n\n    /**\n     * Metodo responsÃ¡vel por checar se o usuÃ¡rio esta autenticado na aplicaÃ§Ã£o\n     * @returns boolean\n     * @abstract\n     * @public\n     */\n    abstract isAuthenticated(): boolean;\n\n    /**\n     * Metodo responsÃ¡vel pelo login da aplicaÃ§Ã£o\n     * @public\n     */\n    abstract login();\n\n    /**\n     * Metodo responsÃ¡vel pelo logou da aplicaÃ§Ã£o\n     * @public\n     * @returns void\n     */\n    abstract logout();\n\n    /**\n     * Metodo responsÃ¡vel por obter os dados do usuÃ¡rio logado\n     * @public\n     * @return User\n     */\n    abstract getUser(): U;\n\n    abstract redirect();\n\n    abstract getLoginNotifications(): Observable<User>;\n\n}\n","import { Directive, HostListener } from \"@angular/core\";\nimport { Authentication } from \"./authentication\";\nimport { User } from \"./user\";\n\n@Directive({ selector: '[logout]' })\nexport class LogoutDirective {\n\n    constructor(private authenticationService: Authentication<User>) { }\n\n    @HostListener('click')\n    click(): void {\n        this.authenticationService.logout();\n    }\n\n}\n","import { Directive, ElementRef, Input, OnInit } from \"@angular/core\";\nimport { User } from \"./user\";\nimport { Authentication } from \"./authentication\";\n\n@Directive({ selector: '[user]' })\nexport class UserDirective implements OnInit {\n\n    @Input()\n    user: string;\n\n    constructor(private el: ElementRef, private authenticationService: Authentication<User>) { }\n\n    ngOnInit(): void {\n        if (this.authenticationService.isAuthenticated()) {\n            let user = this.authenticationService.getUser();\n            this.el.nativeElement.innerHTML += this.user ? user[this.user] : user.name;\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Componente de login que serÃ¡ chamado quando a aplicaÃ§Ã£o for logada com sucesso. \n * DeverÃ¡ ser criada uma rota para esse componente.\n * @class\n */\n@Component({\n    selector: 'app-login-success',\n    template: ''\n})\nexport class LoginSuccessComponent implements OnInit {\n\n  constructor(private authenticationService: Authentication<User>) { }\n\n  ngOnInit(): void {\n    this.authenticationService.login();\n  }\n\n}\n","\n/**\n * Classe abstrata para serviÃ§o de autorizaÃ§Ã£o\n * @class\n */\nexport abstract class Authorization {\n\n    /**\n     * MÃ©todos responsÃ¡vel por identificar as regras de acesso\n     * @public\n     * @abstract\n     * @param {any} role\n     * @returns boolean\n     */\n    abstract hasRole(role: any): boolean;\n\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Authorization } from './authorization';\nimport { Authentication } from '../authentication';\nimport { User } from '../user';\nimport { Subscription } from 'rxjs';\n\n/**\n * HasRoleDirective diretiva para checagem da existÃªncia de permissÃµes de acesso para o usuÃ¡rio logado.\n * @class\n */\n@Directive( {\n    selector: '[hasRole]'\n})\nexport class HasRoleDirective implements OnDestroy {\n\n    private loginNotifications: Subscription;\n\n    /**\n     * MÃ©todo construtor responsÃ¡vel por carregar o serviÃ§o de autorizaÃ§Ã£o e serviÃ§o de identificaÃ§Ã£o de mudanÃ§a\n     * @param {TemplateRef<any>} templateRef\n     * @param {ViewContainerRef} viewContainer\n     * @param {Authorization} authorization\n     * @param {Authentication<User>} authentication\n     */\n    constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef,\n        private authorization: Authorization,\n        private authentication: Authentication<User>) { }\n\n    /**\n     * Propriedade para identificar regras de acesso aos itens\n     * @type {string}\n     */\n    @Input() set hasRole(hasRole: string | string[]) {\n        this.viewContainer.clear();\n        if (hasRole) {\n            if (this.loginNotifications) this.loginNotifications.unsubscribe();\n            this.loginNotifications = this.authentication.getLoginNotifications().subscribe(() => {\n                if (this.authorization.hasRole(hasRole)) {\n                    this.viewContainer.clear();\n                    this.viewContainer.createEmbeddedView(this.templateRef);\n                }\n            });\n        } else {\n            this.viewContainer.createEmbeddedView(this.templateRef);\n        }\n    }\n\n\n    ngOnDestroy(): void {\n        this.loginNotifications.unsubscribe();\n    }\n\n}\n","import { Component, ElementRef, OnDestroy, OnInit, Input, AfterViewInit, AfterContentInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Authentication } from './authentication';\nimport { User } from './user';\nimport { BlockUiService } from '../../block-ui/block-ui.service';\n\n/**\n * \n * Componente HideWhileLoginComponent, utilizado para nÃ£o apresentar a tela da aplicaÃ§Ã£o enquanto a fase de login nÃ£o terminou.\n * \n * @class\n */\n@Component({\n    selector: '[hide-while-login]',\n    templateUrl: './hide-while-login.component.html'\n})\nexport class HideWhileLoginComponent implements OnInit, AfterViewInit, AfterContentInit, OnDestroy {\n\n    /**\n     * Carrega conteÃºdo\n     * @type {loadingString}\n     */\n    @Input()\n    public loadingContent: string = \"\";\n\n    private loginNotifications: Subscription;\n\n    public waitingLogin: boolean = false;\n\n    /**\n     * constructor method\n     * @param {ElementRef} hostComponent\n     * @param {AbstractAuthentication} auth\n     * @param {BlockUiService} blockUiService\n     * @constructor\n     */\n    constructor(\n        private hostComponent: ElementRef,\n        private auth: Authentication<User>,\n        private blockUiService: BlockUiService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.waitingLogin = !this.auth.isAuthenticated();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.auth.isAuthenticated()) {\n            this.blockUiService.show();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (!this.auth.isAuthenticated()) {\n            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {\n                this.hostComponent.nativeElement.children[i].style.display = 'none';\n            }\n        }\n        \n        this.loginNotifications = this.auth.getLoginNotifications().subscribe(() => {\n            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {\n                this.hostComponent.nativeElement.children[i].style.display = 'inherit';\n            }\n            this.waitingLogin = false;\n            this.blockUiService.hide();\n        });\n    }\n\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.loginNotifications.unsubscribe();\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Interface para dados de configuraÃ§Ã£o AuthConfig\n * @interface\n */\nexport interface AuthConfig {\n\n    /**\n     * Propriedade para URL base\n     * @type {sring}\n     */\n    baseUrl: string;\n\n    /**\n     * Propriedade para URL de login\n     * @type {sring}\n     */\n    loginUrl: string;\n\n    /**\n     * Rota de navegaÃ§Ã£o quando o usuÃ¡rio for logado com sucesso na aplicaÃ§Ã£o.\n     * @type {sring}\n     */\n    loginSuccessRoute: string;\n\n    /**\n     * Propriedade para URL de logOut\n     * @type {string}\n     */\n    logoutUrl: string;\n\n    /**\n     * Propriedade para URL de dados do usuÃ¡rio\n     * @type {string}\n     */\n    detailsUrl: string;\n\n    /**\n     * Propriedade para definiÃ£o de storage\n     * @type {Storage}\n     */\n    storage: Storage;\n\n    /**\n     * Propriedade para identificar o idice do usuÃ¡rio no storage\n     * @type {string}\n     */\n    userStorageIndex: string;\n\n    /**\n     * Propriedade para identificar o idice do token no storage\n     * @type {string}\n     */\n    tokenStorageIndex?: string;\n\n}\n\n/**\n * Constante de configuraÃ§Ã£o\n * @const\n */\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('auth.config');\n","\nimport { Injectable } from '@angular/core';\nimport { Authorization } from './authorization';\nimport { Authentication } from '../authentication';\nimport { User } from '../user';\n\n/**\n * ServiÃ§o de autorizaÃ§Ã£o \n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthorizationService extends Authorization {\n\n    /**\n     * MÃ©todo construtor para a injeÃ§Ã£o do serviÃ§o de configuraÃ§Ã£o AuthConfig\n     * @constructor\n     * @param {AuthConfig} config\n     */\n    constructor(private authenticationService: Authentication<User>) {\n        super();\n    }\n\n    /**\n     * MÃ©todo responsÃ¡vel por identificar as regras de acesso\n     * @public\n     * @param {any} role\n     * @returns boolean\n     */\n    hasRole(role: any): boolean {\n        if (role) {\n            const user = this.authenticationService.getUser();\n            if (role instanceof Array) {\n                return user.roles.some((userRole: string) => role.some((checkRole: string) => userRole === checkRole));\n            }\n            return user.roles.some((userRole: string) => userRole === role);\n        }\n        return true;\n    }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { AuthConfig, AUTH_CONFIG } from '../config/auth-config';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport { User } from './user';\nimport { Authentication } from './authentication';\nimport { HttpClient } from '@angular/common/http';\nimport { tap, filter } from 'rxjs/operators';\n\nexport function isAuthenticated(config: AuthConfig): boolean {\n    return null !== config.storage.getItem(config.userStorageIndex);\n};\n\nexport function redirect(config: AuthConfig): void {\n    window.location.href = config.loginUrl;;\n};\n\n/**\n * ServiÃ§o de autenticaÃ§Ã£o\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthenticationService<U extends User> extends Authentication<U> {\n\n    loginNotifications: BehaviorSubject<User> = new BehaviorSubject<User>(this.getUser());\n\n    constructor(@Inject(AUTH_CONFIG) private config: AuthConfig, private http: HttpClient) {\n        super();\n    }\n\n    /**\n     * MÃ©todo para verificar se o usuÃ¡rio esta autenticado na aplicaÃ§Ã£o\n     * @returns boolean\n     * @public\n     */\n    isAuthenticated(): boolean {\n        return isAuthenticated(this.config);\n    }\n\n    /**\n     * MÃ©todo responsÃ¡vel por realizar redirecionamentos\n     * @returns void\n     * @public\n     */\n    redirect() {\n        redirect(this.config);\n    }\n\n    /**\n     * MÃ©todo responsÃ¡vel pelo login da aplicaÃ§Ã£o\n     * @public\n     * @param {User} user\n     * @returns Observable<any>\n     */\n    login() {\n        this.getUserDetails()\n            .subscribe((user) => {\n                this.setUser(user);\n                this.loginNotifications.next(user)\n            });\n    }\n\n    /**\n     * MÃ©todo responsÃ¡vel pelo logou da aplicaÃ§Ã£o\n     * @public\n     * @returns void\n     */\n    logout() {\n        this.loginNotifications.next(null);\n        this.config.storage.removeItem(this.config.userStorageIndex);\n        window.location.href = this.config.logoutUrl;\n    }\n\n    /**\n     * MÃ©todo responsÃ¡vel por obter os dados do usuÃ¡rio logado\n     * @public\n     * @returns Observable<any>\n     */\n    public getUserDetails(): Observable<U> {\n        return this.http.get<U>(this.config.baseUrl + this.config.detailsUrl);\n    }\n\n    private setUser(user: U) {\n        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));\n    }\n\n    getUser(): U {\n        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));\n    }\n\n    getLoginNotifications(): Observable<User> {\n        return this.loginNotifications.pipe(filter((value) => value != null));\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorProvider } from '../../error/providers/error.provider';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Provedor de error para criaÃ§Ã£o de erros de notificaÃ§Ã£o.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NotAuthenticatedErrorProvider implements ErrorProvider {\n\n    constructor(private authenticationService: Authentication<User>) { }\n\n    /**\n     * MÃ©todo para identificar se o usuÃ¡rio estÃ¡ logado\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && error.status == 401;\n    }\n\n    /**\n     * MÃ©todo para redirecionar caso o usuÃ¡rio nÃ£o esteja\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        this.authenticationService.redirect();\n    }\n\n}\n","/**\n * Anstract class ErrorProvider\n * @class\n * @abstract\n */\nexport abstract class ErrorProvider {\n    /**\n     * Metodo responsÃ¡vel pela identificaÃ§Ã£o de erros\n     * @param {Error} error\n     * @returns Boolean\n     */\n    abstract shouldHandle(error: Error): Boolean;\n\n    /**\n     * Metodo pela adiÃ§Ã£o de erros\n     * @param {Error} error\n     * @returns void\n     */\n    abstract handle(error: Error): void;\n}\n","import { HttpRequest, HttpHeaders } from \"@angular/common/http\";\n\n/**\n * Classe abstrata para gerencia de tokens\n * @class\n */\nexport abstract class Token {\n\n    /**\n     * Metodo responsÃ¡vel pela extraÃ§Ã£o de tokes do heaedrs das requisiÃ§Ãµes\n     * @public\n     * @param {HttpHeaders} headers\n     * @returns strng\n     */\n    abstract extractTokenFromHeaders(headers: HttpHeaders): String;\n\n    /**\n     * Metodo responsÃ¡vel pela adiÃ§Ã£o dos tokens no storage\n     * @public\n     * @param {String} token\n     * @returns void\n     */\n    abstract storeToken(token: String);\n\n    /**\n     * Metodo responsÃ¡vel por injetar token no header das requisiÃ§Ãµes\n     * @public\n     * @param {HttpRequest<any>} request\n     * @returns HttpRequest<any>\n     */\n    abstract setTokenInHeader(request: HttpRequest<any>): HttpRequest<any>;\n\n    /**\n     * Metodo responsÃ¡vel por verificar a existencia de um token de autenticaÃ§Ã£o\n     * @returns boolean\n     * @public\n     */\n    abstract hasToken(): boolean;\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { tap } from 'rxjs/operators';\nimport { Token } from \"./token\";\n\n/**\n * ImplementaÃ§Ã£o de classe para interceptar e tratar requisiÃ§Ãµes http/https\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class JWTAuthInterceptor implements HttpInterceptor {\n\n    /**\n     * Metodo construtor responsÃ¡vel por injetar serviÃ§o de autenticaÃ§Ã£o\n     * @constructor\n     * @param {AbstractAuthentication} auth\n     */\n    constructor(private token: Token) {}\n\n    /**\n     * Metodo responsÃ¡vel por interceptar requisiÃ§Ãµes HTTP/HTTPS\n     * @public\n     * @param {HttpRequest<any>} request\n     * @param {HttpHandler} next\n     * @returns Observable<HttpEvent<any>>\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.token.hasToken()) {\n            request = this.token.setTokenInHeader(request);\n        }\n        return next.handle(request)\n            .pipe(\n                tap((event: HttpEvent<any>) => {\n                    if (event instanceof HttpResponse) {\n                        const token: String = this.token.extractTokenFromHeaders(event.headers);\n                        if (null !== token) this.token.storeToken(token);\n                    }\n                    return event;\n                })\n            );\n    }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpRequest, HttpHeaders } from \"@angular/common/http\";\nimport { Token } from './token';\nimport { AuthConfig, AUTH_CONFIG } from '../config/auth-config';\n\n/**\n * InplementaÃ§Ã£o de serviÃ§o JWTTokenService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class JWTTokenService extends Token {\n\n    /**\n     * TOKEN_PREFIX  property\n     * @type {string}\n     */\n    public static readonly TOKEN_PREFIX = \"Bearer\";\n\n    /**\n     * HEADER_STRING property\n     * @type {string}\n     */\n    public static readonly HEADER_STRING = \"Authorization\";\n\n    /**\n     * Metodo construtor responsÃ¡vel por injetar as configuraÃ§Ãµes de autenticaÃ§Ã£o\n     * @constructor\n     * @param {AuthConfig} config\n     */\n    constructor(@Inject(AUTH_CONFIG) private config: AuthConfig) {\n        super();\n    }\n    /**\n     * Metodo responsÃ¡vel pela extraÃ§Ã£o de tokes do heaedrs das requisiÃ§Ãµes\n     * @public\n     * @param {HttpHeaders} headers\n     * @returns string\n     */\n    extractTokenFromHeaders(headers: HttpHeaders): String {\n        return headers.get(JWTTokenService.HEADER_STRING);\n    }\n\n    /**\n     * Metodo responsÃ¡vel pela adiÃ§Ã£o dos tokens no storage\n     * @public\n     * @param {String} token\n     * @returns void\n     */\n    storeToken(token: String) {\n        this.config.storage.setItem(\n            this.config.tokenStorageIndex,\n            token.toString()\n        );\n    }\n\n    /**\n     * Metodo responsÃ¡vel por injetar token no header das requisiÃ§Ãµes\n     * @public\n     * @param {HttpRequest<any>} request\n     * @returns HttpRequest<any>\n     */\n    setTokenInHeader(request: HttpRequest<any>): HttpRequest<any> {\n        const req: HttpRequest<any> = request.clone({\n            headers: new HttpHeaders({\n                [JWTTokenService.HEADER_STRING]: this.config.storage.getItem(this.config.tokenStorageIndex)\n            })\n        });\n        return req;\n    }\n\n    /**\n     * Metodo responsÃ¡vel por verificar a existencia de um token de autenticaÃ§Ã£o\n     * @returns boolean\n     * @public\n     */\n    hasToken(): boolean {\n        return null !== this.config.storage.getItem(this.config.tokenStorageIndex);\n    }\n\n}\n\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LogoutDirective } from './authentication/logout.directive';\nimport { UserDirective } from './authentication/user.directive';\nimport { LoginSuccessComponent } from './authentication/login-success.component';\nimport { HasRoleDirective } from './authentication/authorization/has-role.directive';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HideWhileLoginComponent } from './authentication/hide-while-login.component';\nimport { AUTH_CONFIG, AuthConfig } from './config/auth-config';\nimport { AuthorizationService } from './authentication/authorization/authorization.service';\nimport { AuthenticationService } from './authentication/authentication.service';\nimport { Authorization } from './authentication/authorization/authorization';\nimport { Authentication } from './authentication/authentication';\nimport { NotAuthenticatedErrorProvider } from './authentication/not-authenticated-error-provider.service';\nimport { ErrorProvider } from '../error/providers/error.provider';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { JWTAuthInterceptor } from './token/jwt-auth.interceptor';\nimport { Token } from './token/token';\nimport { JWTTokenService } from './token/jwt-token.service';\n\n/**\n * O modulo de seguranÃ§a contem funcionalidades para autenticaÃ§Ã£o, autorizaÃ§Ã£o, redirecionamento \n * para login, gerenciamento de tokens JWT e obtenÃ§Ã£o e armazenamento de dados de usuÃ¡rio.\n * @class\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        HttpClientModule\n    ],\n    declarations: [\n        LogoutDirective,\n        UserDirective,\n        LoginSuccessComponent,\n        HasRoleDirective,\n        HideWhileLoginComponent\n    ],\n    providers: [\n        AuthorizationService,\n        AuthenticationService,\n        { provide: ErrorProvider, useClass: NotAuthenticatedErrorProvider, multi: true },\n        { provide: Authorization, useClass: AuthorizationService },\n        { provide: Authentication, useClass: AuthenticationService }\n    ],\n    exports: [\n        LogoutDirective,\n        UserDirective,\n        LoginSuccessComponent,\n        HasRoleDirective,\n        HideWhileLoginComponent\n    ]\n})\nexport class SecurityModule {\n\n    /**\n     * forRoot method\n     * @public\n     * @static\n     * @returns ModuleWithProviders\n     */\n    static forRoot(config: AuthConfig): ModuleWithProviders {\n        return { \n            ngModule: SecurityModule, \n            providers: [\n                { provide: AUTH_CONFIG, useValue: config },\n                config.tokenStorageIndex ? \n                  [ \n                    { provide: Token, useClass: JWTTokenService },\n                    { provide: HTTP_INTERCEPTORS, useClass: JWTAuthInterceptor, multi: true }\n                  ] : []\n            ]\n        };\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Guard que verifica se usuÃ¡rio estÃ¡ autenticado antes do usuÃ¡rio acessar uma rota. \n * Se for verificar que o usuÃ¡rio nÃ£o estÃ¡ autenticado, Ã© feito um redirecionamento para o login.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n    /**\n     * MÃ©todo construtor responsÃ¡vel pela injeÃ§Ã£o do serviÃ§o de autenticaÃ§Ã£o\n     * @constructor\n     * @param {Authentication} auth\n     */\n    constructor(private authenticationService: Authentication<User>) {}\n\n    /**\n     * MÃ©todo responsÃ¡vel por identificar se o usuÃ¡rio estÃ¡ autenticado\n     * @public\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns boolean\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        if (this.authenticationService.isAuthenticated()) {\n            return true;\n        }\n        this.authenticationService.redirect();\n        return false;\n    }\n\n    /**\n     * MÃ©todo responsÃ¡vel por atuar somente em rotas filhas de modo independente\n     * @public\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns boolean\n     */\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(route, state);\n    }\n\n}\n","\nenum FormNotificationType { CLEAN, FIELD }\n\n/**\n * Class modelo para validaÃ§Ã£o de formulÃ¡rios\n * @class\n */\nclass FormNotification {\n\n    /**\n     * Metodo construtor para validaÃ§Ã£o de formulÃ¡rios\n     * @param {string} form\n     * @param {FormNotificationType} type\n     */\n    constructor(\n        public form: string, \n        public type: FormNotificationType) {\n    }\n\n}\n\nexport { FormNotificationType, FormNotification }\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\n/**\n * AccessbilityService ServiÃ§o de acessibilidade, este serviÃ§o prove recursos de contraste\n * de tela e controle do tamanho da fonte apresentadas na tela.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AccessbilityService {\n\n    private renderer: Renderer2\n\n    constructor(rendererFactory: RendererFactory2) {\n        this.renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    /**\n     * Propriedade que define tamanho da fonte\n     * @type {number}\n     */\n    private fontSize: number = 1.0;\n\n    /**\n     * Medoto para habilitar contraste\n     * @public\n     * @returns void\n     */\n    enableHighContrast() {\n        this.renderer.addClass(document.body, 'contraste');\n    }\n\n    /**\n     * Metodo para desabilitar contraste\n     * @public\n     * @returns void\n     */\n    disableHighContrast() {\n        this.renderer.removeClass(document.body, 'contraste');\n    }\n\n    /**\n     * Metodo utilizado para aumentar o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n    increaseFontSize() {\n        this.fontSize += 0.1;\n        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n\n    /**\n     * Metodo utilizado para diminuir o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n    decreaseFontSize() {\n        this.fontSize -= 0.1;\n        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n\n    addAccessibilityIcons() {\n        const elements = document.querySelector('.ui-button-icon-left, ui-button-icon-righ');\n\n        if (elements) {\n            this.renderer.setStyle(elements, 'aria-hidden', true);\n        }\n    }\n\n    addAccessibilityMessages(msg: {severity: string}) {\n        let type = 'polite';\n        if (msg.severity.toLowerCase() !== 'custom' && msg.severity.toLowerCase() !== 'success') {\n            type = 'assertive';\n        }\n\n        this.renderer.setStyle(document.querySelector('p-toast, p-growl'), 'aria-live', type);\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from  '@angular/core';\nimport { CommonModule } from  '@angular/common';\nimport { AccessbilityService } from './accessibility.service';\n/**\n * AccessbilityModule expÃµe o servico AccessbilityService para o uso de outras aplicaÃ§Ãµes\n * @module\n */\n@NgModule({\n    imports: [CommonModule],\n    providers: [AccessbilityService],\n    exports: []\n})\nexport class AccessbilityModule {\n}\n","import { Injectable } from '@angular/core';\n\n/**\n *\n * Class CommonMaskService serviÃ§o para inserÃ§Ã£o de mascara de data em campos input\n * @class \n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommonMaskService {\n\n    /**\n     * DATE_SEPARATOR property\n     * @type {string}\n     */\n    private readonly DATE_SEPARATOR = '/';\n\n    /**\n     * Metodo para formatar valor digitado no padrÃ£o dd/mm/yyyy\n     * @param $event\n     * @returns void\n     */\n    dateMask($event) {\n        if ($event.target.value) {\n            let date = $event.target.value.replace(/[^0-9]/g, '').substr(0, 8);\n            \n            if (date.length >= 3) {\n              date = date.replace(/^(\\d{2})(\\d{1,2})/, '$1' + this.DATE_SEPARATOR + '$2');\n            }\n            \n            if (date.length >= 6) {\n              date = date.replace(/^(\\S{5})(\\d{1,4})/, '$1' + this.DATE_SEPARATOR + '$2');\n            }\n\n            $event.target.value = date;\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonMaskService } from './common-mask.service';\n/**\n * CommonMaskModule expÃµe o servico CommonMaskService para o uso de outras aplicaÃ§Ãµes\n * @class\n */\n@NgModule({\n    imports: [],\n    declarations: [],\n    providers: [\n        CommonMaskService\n    ],\n    exports: []\n})\nexport class CommonMaskModule {\n}\n","import { ErrorHandler, Inject, Injectable } from '@angular/core';\nimport { ErrorProvider } from './providers/error.provider';\n\n/**\n * Class ErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorService extends ErrorHandler {\n\n    /**\n     * Metodo construtor responÃ¡vel por injetar o serviÃ§o ErrorProvider\n     * @param {ErrorProvider} providers\n     */\n    constructor(@Inject(ErrorProvider) private providers: ErrorProvider[]) {\n        super();\n    }\n\n    /**\n     * Metodo responsÃ¡vel por idetificar e obter os erros lanÃ§ados de requisiÃ§Ãµes http/https\n     * @param {Error} error\n     * @returns void\n     */\n    handleError(error: Error) {\n        try {\n            this.providers.forEach(p => {\n                if (p.shouldHandle(error)) {\n                    p.handle(error);\n                }\n            });\n        } catch (e) {\n        }\n        super.handleError(error);\n    }\n}\n","import { ApplicationProblemType } from '../types/application-problem.type';\n\n/**\n * Abstract provider NotificationProvider\n * @abstract\n * @class\n */\nexport abstract class NotificationProvider {\n\n    /**\n     * Metodo para adicionar menssagem de erro\n     * @param {string} message\n     * @param {string} title\n     * @returns void\n     */\n    abstract addErrorMessage(message: string, title?: string): void;\n\n    /**\n     * Metodo para adiÃ§Ã£o de erros\n     * @param {ApplicationProblemType} problem\n     * @returns void\n     */\n    abstract addErrorProblem(problem: ApplicationProblemType): void;\n\n}\n","/**\n * Classe modelo ApplicationProblemType\n * @class\n */\nexport class ApplicationProblemType {\n\n    /**\n     * constructor method\n     * @param {string} type\n     * @param {string} title\n     * @param {string} detail\n     * @param {Number} status\n     * @param {string} instance\n     * @param {Array<string>} stacktrace\n     * @param {ApplicationProblemType} cause\n     * @constructor\n     */\n    constructor(\n        public type: string | 'about:blank',\n        public title: string,\n        public detail?: string,\n        public status?: Number,\n        public instance?: string,\n        public stacktrace?: Array<string>,\n        public cause?: ApplicationProblemType) {\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NotificationProvider } from '../providers/notification.provider';\nimport { ApplicationProblemType } from '../types/application-problem.type';\nimport { ErrorProvider } from '../providers/error.provider';\n\n/**\n * ServiÃ§o HttpApplicationProblemErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class HttpApplicationProblemErrorService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsÃ¡vel por injetar serviÃ§o NotificationProvider\n     * @param {NotificationProvider} notification\n     * @constructor\n     */\n    constructor(private notification: NotificationProvider, private ngZone: NgZone) { }\n\n    /**\n     * Metodo responsÃ¡vel pela identificaÃ§Ã£o de erros\n     * @public \n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && \n            error.headers.get('Content-Type') === 'application/problem+json' && \n            error.error;\n    }\n\n    /**\n     * Metodo pela adiÃ§Ã£o de erros\n     * @public \n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        this.ngZone.run(() => { \n            this.notification.addErrorProblem(\n                new ApplicationProblemType(\n                    error.error.type,\n                    error.error.title,\n                    error.error.detail,\n                    error.error.status,\n                    error.error.instance));\n        });\n    }\n}","\n/**\n * Classe modelo HttpGenericErrorType\n * @class\n */\nexport class HttpGenericErrorType {\n\n    /**\n     * constructor method\n     * @param {Number} code\n     * @param {string} title\n     * @param {string} detail\n     * @constructor\n     */\n    constructor(\n        public code: Number,\n        public title: string,\n        public detail: string) {\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NotificationProvider } from '../providers/notification.provider';\nimport { HttpGenericErrorType } from '../types/http-generic-error.type';\nimport { ErrorProvider } from '../providers/error.provider';\n\n/**\n * ServiÃ§o HttpGenericErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class HttpGenericErrorService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsÃ¡velpor injetar o serviÃ§o NotificationProvider\n     * @param {NotificationProvider} notification\n     * @constructor\n     */\n    constructor(private notification: NotificationProvider, private ngZone: NgZone) { }\n\n    /**\n     * Metodo responsÃ¡vel pela identificaÃ§Ã£o de erros\n     * @public\n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && \n            !(error.headers.get('Content-Type') === 'application/problem+json' && \n            error.error);\n    }\n\n    /**\n     * Metodo pela adiÃ§Ã£o de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        const generic = this.getErrorByCode(error);\n        this.ngZone.run(() => { \n            this.notification.addErrorMessage(generic.detail, generic.title);\n        });\n    }\n\n    /**\n     * Metodo para obter erros a partir de um cÃ³digo\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns HttpGenericErrorType\n     */\n    public getErrorByCode(error: HttpErrorResponse): HttpGenericErrorType {\n        const generic = GENERIC_ERRORS[error.status];\n\n        if (generic === undefined) {\n            return new HttpGenericErrorType(\n                error.status,\n                error.statusText,\n                error.message\n            );\n        }\n\n        return generic;\n    }\n\n}\n/**\n * Constante que define tipos de erros bÃ¡sicos\n * @const GENERIC_ERRORS\n */\nexport const GENERIC_ERRORS = {\n    401: new HttpGenericErrorType(401,\n        'NÃ£o Autenticado',\n        'Essa requisiÃ§Ã£o requer um usuÃ¡rio autenticado.'),\n\n    403: new HttpGenericErrorType(403,\n        'Proibido',\n        'Essa requisiÃ§Ã£o requer uma permissÃ£o no servidor da aplicaÃ§Ã£o que o usuÃ¡rio nÃ£o possui.'),\n\n    404: new HttpGenericErrorType(404,\n        'NÃ£o encontrado',\n        'Essa requisiÃ§Ã£o nÃ£o pode ser encontrada.'),\n\n    500: new HttpGenericErrorType(500,\n        'Erro desconhecido',\n        'O servidor encontrou uma condiÃ§Ã£o inesperada.'),\n\n    502: new HttpGenericErrorType(502,\n        'Bad Gateway',\n        'O servidor recebeu uma resposta invÃ¡lida de um serviÃ§o que utilizou para cumprir a requisiÃ§Ã£o'),\n\n    503: new HttpGenericErrorType(503,\n        'ServiÃ§o IndisponÃ­vel',\n        'O servidor nÃ£o pode atender a requisiÃ§Ã£o nesse momento. Esta Ã© uma condiÃ§Ã£o temporÃ¡ria, tente novamente mais tarde'),\n\n    504: new HttpGenericErrorType(504,\n        'Gateway Timeout',\n        'O servidor nÃ£o conseguiu receber uma resposta a tempo esperado por um serviÃ§o que utilizou para cumprir a requisiÃ§Ã£o')\n};\n","import { ErrorHandler, NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ErrorService } from './error.service';\nimport { ErrorProvider } from './providers/error.provider';\nimport { HttpApplicationProblemErrorService } from './services/http-application-problem-error.service';\nimport { HttpGenericErrorService } from './services/http-generic-error.service';\n\n/**\n * O modulo ErrorModule contem funcionalidades para a captura e apresentaÃ§Ã£o dos erros que possam ocorrer na aplicaÃ§Ã£o.\n * @module\n */\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        {\n            provide: ErrorProvider,\n            useClass: HttpGenericErrorService,\n            multi: true\n        },\n        {\n            provide: ErrorProvider,\n            useClass: HttpApplicationProblemErrorService,\n            multi: true\n        },\n        {\n            provide: ErrorHandler,\n            useClass: ErrorService,\n        },\n    ]\n})\nexport class ErrorModule {\n}\n","import { ApplicationProblemType } from '../types/application-problem.type';\nimport { NotificationProvider}  from '../providers/notification.provider';\nimport { Injectable } from '@angular/core';\n\n/**\n * Class NotificationService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NotificationService extends NotificationProvider {\n\n    /**\n     * Metodo responsÃ¡vel po adicionar mensagem de erro\n     * @param {string} message\n     * @param {string} title\n     * @returns void\n     */\n    addErrorMessage(message: string, title?: string): void {\n        console.error(title + ' ' + message);\n    }\n\n    /**\n     * Metodo responsÃ¡vel por adicionar o detalhamento do erro no console\n     * @param {ApplicationProblemType} problem\n     * @returns void\n     */\n    addErrorProblem(problem: ApplicationProblemType): void {\n        console.error(problem.title + ' ' + problem.detail);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { NamedErrorType } from '../types/named-error.type';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpGenericErrorService } from '../services/http-generic-error.service';\n\n/**\n * ServiÃ§o de erros ErrorStackService\n * @class \n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorStackService {\n\n    /**\n     * Propriedade errors\n     * @type {ReplaySubject<NamedErrorType>}\n     */\n    errors: ReplaySubject<NamedErrorType> = new ReplaySubject<NamedErrorType>();\n\n    /**\n     * metodo construtor injeta serviÃ§o generico de erros\n     * @param {HttpGenericErrorService} genericErrorService\n     * @constructor\n     */\n    constructor(private genericErrorService: HttpGenericErrorService) {\n        if (null === localStorage.getItem('errorStack')) {\n            localStorage.setItem('errorStack', JSON.stringify([]));\n        }\n\n        this.getErrorsSubjects().forEach((error: NamedErrorType) => {\n            this.errors.next(error);\n        });\n    }\n\n    /**\n     * Metodo responsÃ¡vel por criar erro do tipo HttpResponse\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    create(error: HttpErrorResponse) {\n        const namedError = this.createNamedError(error);\n\n        const persistedErrors: NamedErrorType[] = this.getErrorsSubjects();\n\n        if (persistedErrors.length >= 15) {\n            persistedErrors.shift();\n        }\n\n        persistedErrors.push(namedError);\n\n        localStorage.setItem('errorStack', JSON.stringify(persistedErrors));\n\n        this.errors.next(namedError);\n    }\n\n    /**\n     * Metodo responsÃ¡vel por obter o conteÃºdo dos erros emitidos\n     * @private\n     * @returns NamedErrorType[]\n     */\n    private getErrorsSubjects(): NamedErrorType[] {\n        return JSON.parse(localStorage.getItem('errorStack'));\n    }\n\n    /**\n     * Metodo responsÃ¡vel por itentifica o tipo de erro lanÃ§ado\n     * @private\n     * @param {HttpErrorResponse} error\n     * @returns NamedErrorType\n     */\n    private createNamedError(error: HttpErrorResponse): NamedErrorType {\n        let fullMessage: string;\n        let namedError: NamedErrorType;\n        let createdAt: Date = new Date();\n        let errorId = this.getErrorId(error);\n        let title: string | null;\n\n        if (error.headers.get('Content-Type') === 'application/problem+json') {\n            fullMessage = `X-Correlation-ID: ${errorId}\n                           createdAt: ${createdAt}\n                           status: ${error.status}\n                           url: ${error.url}\n                           body: ${error.error.detail}\n                           stacktrace: ${error.error.stacktrace}\n                           cause: ${error.error.cause}`;\n\n            title = error.error.title;\n\n        } else {\n            const genericError = this.genericErrorService.getErrorByCode(error);\n\n            fullMessage = `X-Correlation-ID: ${errorId}\n                           createdAt: ${createdAt}\n                           status: ${error.status}\n                           url: ${error.url}\n                           body: ${genericError.detail}`;\n\n            title = genericError.title;\n        }\n\n        namedError = {\n            message: title,\n            createdAt: createdAt,\n            correlationId: errorId,\n            fullMessage: fullMessage\n        };\n\n        return namedError;\n    }\n\n    /**\n     * Metodo responsÃ¡vel por obter o identificador do erro\n     * @private \n     * @param {HttpErrorResponse} error\n     * @returns string\n     */\n    private getErrorId(error: HttpErrorResponse): string {\n        let errorKey: string | null;\n\n        error.headers.keys().every(key => {\n            if (key.toUpperCase() === 'X-CORRELATION-ID') {\n                errorKey = key;\n                return false;\n            }\n            return true;\n        });\n\n        return errorKey ? error.headers.get(errorKey) : null;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ErrorProvider } from '../providers/error.provider';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorStackService } from './error-stack.service';\n\n/**\n * Class ErrorStackProviderService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorStackProviderService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsÃ¡vel por injetar o serviso de erros\n     * @param {ErrorStackService} errorStackService\n     */\n    constructor(private errorStackService: ErrorStackService) {}\n\n    /**\n     * Metodo responsÃ¡vel pela identificaÃ§Ã£o de erros\n     * @param {Error} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error): Boolean {\n        return error instanceof HttpErrorResponse;\n    }\n\n    /**\n     * Metodo pela adiÃ§Ã£o de erros\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse) {\n        this.errorStackService.create(error);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CEP para valores.\n * \n * Usage:\n * {{ value | cep }}\n*/\n\n@Pipe({\n  name: 'cep'\n})\n\nexport class CepPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if ( value === null) {\n      return '-';\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 5) + '-' + value.substring(5, 8);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CPF para valores.\n * \n * Usage:\n * {{ value | cpf }}\n*/\n\n@Pipe({\n  name: 'cpf'\n})\n\nexport class CpfPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (value === null || value.length !== 11) {\n      return value;\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 3) + '.' +\n      value.substring(3, 6) + '.' +\n      value.substring(6, 9) + '-' +\n      value.substring(9, 11);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CNPJ para valores.\n * \n * Usage:\n * {{ value | cnpj }}\n*/\n\n@Pipe({\n  name: 'cnpj'\n})\n\nexport class CnpjPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (value === null || value.length !== 14) {\n      return value;\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 2) + '.' +\n      value.substring(2, 5) + '.' +\n      value.substring(5, 8) + '/' +\n      value.substring(8, 12) + '-' +\n      value.substring(12, 14);\n    }\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n *\n * Cria PIPE de valores com regra definida em expressÃ£o regex\n * Usage:\n * {{ value | regex:arg1:arg2 }}\n*/\n\n@Pipe({\n    name: 'regex'\n})\n\nexport class RegexPipe implements PipeTransform {\n\n    transform(value: any, regex: any, regexPrint: any): any {\n        return value.replace(regex, regexPrint);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE para valores com restriÃ§Ã£o de valores a serem apresentados.\n * \n * Usage:\n * {{ value | limit:20 }}\n * {{ value | limit:20:\"...\" }}\n*/\n\n@Pipe({\n    name: 'limit'\n})\n\nexport class LimitPipe implements PipeTransform {\n\n    transform(value: string, limit = 25, ellipsis = '...') {\n        return value.length > limit\n            ? `${value.substr(0, limit)}${ellipsis}`\n            : value;\n    }\n}\n","\nimport { NgModule } from '@angular/core';\nimport { CpfPipe } from './cpf.pipe';\nimport { CepPipe } from './cep.pipe';\nimport { CnpjPipe } from './cnpj.pipe';\nimport { RegexPipe } from './pipe.regex';\nimport { LimitPipe } from './pipe.limit';\n\n/**\n *\n *  Export do mÃ³dulo\n */\n@NgModule({\n    imports: [],\n    declarations: [\n        CepPipe,\n        CpfPipe,\n        CnpjPipe,\n        RegexPipe,\n        LimitPipe,\n    ],\n    exports: [\n        CepPipe,\n        CpfPipe,\n        CnpjPipe,\n        RegexPipe,\n        LimitPipe,\n    ]\n})\nexport class PipeModule {}\n","import { Injectable } from '@angular/core';\n\n/**\n * Fornece metodo para copia de textos\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClipboardService {\n\n    /**\n     * Inspirado no clipboard.js, copia texto selecionado para Ã¡rea de trasferÃªncia\n     * @param {string} text\n     * @returns void\n     * @public\n     */\n    copy(text: string) {\n        const isRTL: boolean = document.documentElement.getAttribute('dir') === 'rtl';\n\n        // cria um elemento temporÃ¡rio, seta o foco, copia e remove em seguida\n        let fake: HTMLTextAreaElement = document.createElement('textarea');\n        fake.style.fontSize = '12pt';\n        fake.style.border = '0';\n        fake.style.padding = '0';\n        fake.style.margin = '0';\n        fake.style.position = 'absolute';\n        fake.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        let yPosition: number = window.pageYOffset || document.documentElement.scrollTop;\n\n        fake.style.top = `${yPosition}px`;\n        fake.setAttribute('readonly', '');\n        fake.value = text;\n\n        document.body.appendChild(fake);\n\n        fake.select();\n\n        document.execCommand('copy');\n        document.body.removeChild(fake);\n    }\n}\n","import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\nimport { ClipboardService } from './clipboard.service';\n\n@Directive({\n    selector: '[clipboard]'\n})\n/**\n * Diretiva que expÃµe seletor para o uso do clipbord\n * @class\n */\nexport class ClipboardDirective {\n\n    /**\n     * clipboard variable\n     * @type {string}\n     */\n    @Input()\n    clipboard: string;\n\n    /**\n     * onClipboard variable\n     * @type {EventEmitter<boolean>}\n     */\n    @Output()\n    onClipboard: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     * constructor method\n     * @param {ClipboardService} service\n     * @constructor\n     */\n    constructor(private service: ClipboardService) {}\n\n    @HostListener('click')\n    /**\n     * copy method\n     * @event click\n     * @returns void\n     */\n    copy() {\n        try {\n            this.service.copy(this.clipboard);\n            this.onClipboard.emit(true);\n        } catch (e) {\n            this.onClipboard.emit(false);\n            throw e;\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ClipboardDirective } from './clipboard.directive';\nimport { ClipboardService } from './clipboard.service';\n\n/**\n * ClipboardModule expÃµe o servico ClipboardService para o uso de outras aplicaÃ§Ãµes\n * @module\n */\n@NgModule({\n  imports: [],\n  declarations: [\n    ClipboardDirective,\n  ],\n  providers: [\n    ClipboardService\n  ],\n  exports: [\n    ClipboardDirective,\n  ]\n})\nexport class ClipboardModule {\n}\n","import { Directive, ElementRef, OnInit, Input, OnDestroy } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n/**\n *\n * UnmaskDirective diretiva para remoÃ§Ã£o de mascaras de valores numericos\n * @class\n */\n@Directive({\n    selector: '[unmask]'\n})\nexport class UnmaskDirective implements OnInit, OnDestroy {\n\n    /**\n     * Propriedade a para realizar a formataÃ§Ã£o expressÃ£o regular\n     * @type {string} appUnmask\n     */\n    @Input() appUnmask: string;\n\n    /**\n     * Cria canal de escuta para a diretiva\n     * @type {Subscription} subscriber\n     */\n    private subscriber;\n\n    /**\n     * constructor method\n     * @param {ElementRef} elementRef\n     * @param {NgControl} model\n     * @constructor\n     */\n    constructor(private elementRef: ElementRef, private model: NgControl) { }\n\n    /**\n     * Metodo executado no carregamento da diretiva, executa verificaÃ§Ã£o do valor e remove as mascaras baseado em um aexpressÃ£o regular\n     * @returns void\n     */\n    ngOnInit(): void {\n        this.subscriber = this.model.control.valueChanges.subscribe(\n            () => {\n                const newValue = this.elementRef.nativeElement.value.replace(new RegExp(this.appUnmask), '');\n                this.model.control.setValue(\n                    newValue,\n                    {\n                        emitEvent: false,\n                        emitModelToViewChange: false,\n                        emitViewToModelChange: false\n                    }\n                );\n            }\n        );\n    }\n\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.subscriber.unsubscribe();\n    }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n/**\n * OnlyNumbersDirective diretiva para que sejam permitidos somente nÃºmeros\n * @class\n */\n@Directive({\n    selector: 'input[onlyNumbers]'\n})\nexport class OnlyNumbersDirective {\n\n    /**\n     * Propriedade que carrega expressÃ£o regular para numeros\n     * @type {RegExp}\n     */\n    private regex: RegExp = new RegExp(/[^0-9]$/g);\n\n    /**\n     * Propriedade que lista opÃ§Ãµes aceitas alÃ©m de nÃºsmeros\n     * @type {Array<string>}\n     */\n    private specialKeys: Array<string> = [\n        'Backspace',\n        'Delete',\n        'Tab',\n        'End',\n        'Home',\n        'ArrowLeft',\n        'ArrowRight'\n    ];\n\n    /**\n     * @param {ElementRef} el\n     * @constructor\n     */\n    constructor(private el: ElementRef) { }\n\n    /**\n     * Metodo executado para os evento KeyDown do teclado executa verificaÃ§Ã£o do valor digitado\n     * @param {KeyboardEvent} event\n     * @returns void\n     */\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n\n        const current: string = this.el.nativeElement.value;\n        const next: string = current.concat(event.key);\n\n        if (this.specialKeys.indexOf(event.key) !== -1) {\n            return;\n        }\n\n        if (next && String(next).match(this.regex)) {\n            event.preventDefault();\n        }\n    }\n\n}\n","import { UnmaskDirective } from './unmask.directive';\nimport { OnlyNumbersDirective } from './only-numbers.directive';\nimport { NgModule } from '@angular/core';\n\n/**\n * DIRECTIVES constant\n * @constant\n */\nconst DIRECTIVES = [\n    OnlyNumbersDirective,\n    UnmaskDirective\n];\n\n/**\n * ExpÃµe directivas para reuso em outras palicaÃ§Ãµes\n * @module\n */\n@NgModule({\n    declarations: DIRECTIVES,\n    exports: DIRECTIVES\n})\nexport class DirectivesModule {}\n","import { FormNotification, FormNotificationType } from \"./form-notification.type\";\n\n/**\n * Class modelo para validaÃ§Ã£o de campos de formulÃ¡rios\n * @class\n */\nexport class FieldFormNotification extends FormNotification {\n\n    /**\n     * MÃ©todo construtor para validaÃ§Ã£o de campos de formulÃ¡rios\n     * @param {string} form\n     * @param {string} field\n     * @param {string} message\n     */\n    constructor(\n        form: string,\n        public field: string,\n        public message: string) {\n        super(form, FormNotificationType.FIELD);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { FormNotification, FormNotificationType } from '../types/form-notification.type';\nimport { filter } from 'rxjs/operators';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n/**\n * ServiÃ§o á¹ara tratar notificaÃ§Ãµes em formulÃ¡rios\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationService {\n\n    /**\n     * @type {Subject<FormNotification>()}\n     */\n    formNotifications: Subject<FormNotification> =\n        new Subject<FormNotification>();\n\n    /**\n     * MÃ©todo para criaÃ§Ã£o de inscriÃ§Ã£o de campos presentes nos formulÃ¡rios\n     * @param {string} field\n     * @returns Observable<ResponseHandle>\n     */\n    notifications(form: String, field: String): Observable<FormNotification> {\n        return this.formNotifications.pipe(filter(\n            (violation: FormNotification) => {\n                return (!form || violation.form === form) && (violation.type === FormNotificationType.CLEAN || (\n                    violation instanceof FieldFormNotification &&\n                    violation.field === field))\n            }\n        ));\n    }\n\n    notify(notification: FormNotification) {\n        this.formNotifications.next(notification);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormNotificationService } from './form-notification.service';\nimport { ErrorProvider } from '../../error/providers/error.provider';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n/**\n * Provedor de error para criaÃ§Ã£o de erros de notificaÃ§Ã£o.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationErrorProvider implements ErrorProvider {\n\n    /**\n     * MÃ©todo construtor\n     * @param {FormtNotificationService} formNotificationService\n     * @constructor\n     */\n    constructor(private formNotificationService: FormNotificationService) { }\n\n    /**\n     * MÃ©todo responsÃ¡vel pela identificaÃ§Ã£o de erros\n     * @public\n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse &&\n            error.headers.get('Content-Type') === 'application/problem+json' &&\n            error.error && (error.error.violations || error.error.fieldErrors);\n    }\n\n    /**\n     * MÃ©todo para emissÃ£o de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        if (error.error.violations) {\n            this.violation(error.url, error.error.violations);\n        }\n        if (error.error.fieldErrors) {\n            this.violation(error.url, error.error.fieldErrors);\n        }\n    }\n\n    /**\n     * MÃ©todo iteraÃ§Ã£o de violaÃ§Ãµes e emissÃ£o de erros\n     * @param values\n     */\n    violation(form: string, values: ({ field: string, message: string })[]) {\n        values.forEach(violation =>\n            this.formNotificationService.notify(\n                new FieldFormNotification(\n                    form, violation.field, violation.message)));\n    }\n\n}\n","import { FormNotification, FormNotificationType } from \"./form-notification.type\";\n\n/**\n * Class modelo para limpeza de validaÃ§Ã£o de formulÃ¡rios\n * @class\n */\nexport class CleanFormNotification extends FormNotification {\n\n    /**\n     * MÃ©todo construtor para limpeza de validaÃ§Ã£o de formulÃ¡rios\n     * @param {string} form\n     */\n    constructor(form: string) {\n        super(form, FormNotificationType.CLEAN);\n    }\n\n}\n","import {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest\n} from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\n\nimport { FormNotificationService } from \"../services/form-notification.service\";\nimport { CleanFormNotification } from \"../types/clean-form-notification.type\";\n\n/**\n * ImplementaÃ§Ã£o de classe para interceptar e tratar requisiÃ§Ãµes http/https\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationInterceptor implements HttpInterceptor {\n\n    /**\n     * MÃ©todo construtor\n     * @constructor\n     * @param {AbstractAuthentication} auth\n     */\n    constructor(private formNotificationService: FormNotificationService) {}\n\n    /**\n     * MÃ©todo responsÃ¡vel por interceptar requisiÃ§Ãµes HTTP/HTTPS\n     * @public\n     * @param {HttpRequest<any>} request\n     * @param {HttpHandler} next\n     * @returns Observable<HttpEvent<any>>\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        this.formNotificationService\n            .notify(new CleanFormNotification(request.url));\n        return next.handle(request);\n    }\n\n}\n","import { FormNotificationService } from '../services/form-notification.service';\nimport { Directive, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { FormNotification } from '../types/form-notification.type';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n@Directive({\n    selector: 'form-notification-component-superclass'\n})\nexport class FormNotificationComponentSuperclass implements OnInit, OnDestroy {\n\n    private subscription: Subscription;\n\n    @Input() name: String;\n\n    @Input() form: String;\n\n    message: String;\n\n    /**\n     * Metodo construtor responsavel por carregar o serviÃ§o de validaÃ§Ã£o\n     * @param formNotificationService\n     */\n    constructor(protected formNotificationService: FormNotificationService) {}\n\n    /**\n     * Metodo Inicial para subscriÃ§Ã£o no endpoint responsÃ¡vel por validar o formulÃ¡rio\n     */\n    ngOnInit(): void {\n        this.subscription = this.formNotificationService\n            .notifications(this.form, this.name)\n            .subscribe((notification: FormNotification) => {\n                if (notification instanceof FieldFormNotification) {\n                    this.message = notification.message;\n                } else {\n                    this.message = null;\n                }\n            });\n    }\n\n    /**\n     * Metodo responsavel por realizar a saida das subscriÃ§Ãµes do endpont de validaÃ§Ã£o\n     */\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FormNotificationErrorProvider } from './services/form-notification-error-provider.service';\nimport { FormNotificationService } from './services/form-notification.service';\nimport { ErrorProvider } from '../error/providers/error.provider';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormNotificationInterceptor } from './interceptor/form-notification.interceptor';\nimport { FormNotificationComponentSuperclass } from './components/form-notification-superclass.component';\n\n/**\n * MÃ³dulo para adicionar funcionalidade de notificaÃ§Ã£o de erros de formulÃ¡rios.\n * @module\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [ FormNotificationComponentSuperclass ],\n    exports: [ FormNotificationComponentSuperclass],\n    providers: [\n        FormNotificationService,\n        {\n            provide: ErrorProvider,\n            useClass: FormNotificationErrorProvider,\n            multi: true,\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: FormNotificationInterceptor,\n            multi: true,\n        },\n    ],\n})\nexport class FormNotificationBaseModule { }\n","import { ApplicationProblemType } from \"../../error/types/application-problem.type\";\nimport { FormNotification } from \"../types/form-notification.type\";\n\n/**\n * Class provider para definiÃ§Ã£o bÃ¡sica de tratamento de erros de formulÃ¡rios\n * @class\n */\nexport class FormNotificationProvider extends ApplicationProblemType {\n\n    /**\n     * Metodo construtor para validaÃ§Ã£o de formulÃ¡rios\n     * @param {string} type\n     * @param {string} title\n     * @param {string} detail\n     * @param {Number} status\n     * @param {string} instance\n     * @param {Array<string>} stacktrace\n     * @param {ApplicationProblemType} cause\n     * @param {FormViolation} violations\n     */\n    constructor(\n        type: string | 'about:blank',\n        title: string,\n        detail?: string,\n        status?: Number,\n        instance?: string,\n        stacktrace?: Array<string>,\n        cause?: ApplicationProblemType,\n        public violations?: FormNotification[]) {\n        super(type, title, detail, status, instance, stacktrace, cause);\n    }\n\n}\n","import { OnDestroy } from \"@angular/core\";\nimport { Observable, Subject, Subscription, Unsubscribable } from \"rxjs\";\n\n/**\n * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.\n *\n * ```ts\n * @Injectable()\n * // or @Component() (also consider DirectiveSuperclass)\n * // or @Directive() (also consider DirectiveSuperclass)\n * // or @Pipe()\n * class MyThing extends InjectableSuperclass {\n *   constructor(somethingObservable: Observable) {\n *     super();\n *     this.subscribeTo(somethingObservable);\n *   }\n *\n *   ngOnDestroy() {\n *     // if you override ngOnDestroy, be sure to call this too\n *     super.ngOnDestroy();\n *   }\n * }\n * ```\n */\nexport abstract class InjectableSuperclass implements Unsubscribable, OnDestroy {\n\n    private subscriptions = new Subscription();\n\n    destruction$: Observable<undefined>;\n\n    private destructionSubject = new Subject<undefined>();\n\n    constructor() {\n        this.destruction$ = this.destructionSubject.asObservable();\n    }\n\n    subscribeTo<T>(\n        observable: Observable<T>,\n        next?: (value: T) => void,\n        error?: (error: any) => void,\n        complete?: () => void,\n    ) {\n        this.subscriptions.add(\n            observable.subscribe(\n                this.bind(next),\n                this.bind(error),\n                this.bind(complete),\n            ),\n        );\n    }\n\n    unsubscribe() {\n        this.subscriptions.unsubscribe();\n        this.subscriptions = new Subscription();\n    }\n\n    private bind(fn?: (val?: any) => void) {\n        return fn?.bind(this);\n    }\n\n    ngOnDestroy() {\n        this.unsubscribe();\n        this.destructionSubject.next();\n        this.destructionSubject.complete();\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Injector,\n    SimpleChanges,\n} from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { filter, map, startWith } from \"rxjs/operators\";\nimport { InjectableSuperclass } from \"./injectable-superclass\";\n\n/**\n * Extend this when creating a directive (including a component, which is a kind of directive) to gain access to the helpers demonstrated below. **Warning:** You _must_ include a constructor in your subclass.\n *\n * ```ts\n * @Component({\n *   selector: \"s-color-text\",\n *   template: `\n *     <span [style.background]=\"color\">{{ color }}</span>\n *   `,\n *   // note that `bindToInstance()` works even with OnPush change detection\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n *  class ColorTextComponent extends DirectiveSuperclass {\n *   @Input() prefix?: string;\n *   @Input() prefix2?: string;\n *   color!: string;\n *\n *   // Even if you don't need extra arguments injector, you must still include a constructor. It is required for angular to provide `Injector`.\n *   constructor(\n *     @Inject(\"color$\") color$: Observable<string>,\n *     injector: Injector,\n *   ) {\n *     super(injector);\n *\n *     // combine everything to calculate `color` and keep it up to date\n *     this.bindToInstance(\n *       \"color\",\n *       combineLatest(\n *         this.getInput$(\"prefix\"),\n *         this.getInput$(\"prefix2\"),\n *         color$,\n *       ).pipe(map((parts) => parts.filter((p) => p).join(\"\"))),\n *     );\n *   }\n * }\n * ```\n */\nexport abstract class DirectiveSuperclass extends InjectableSuperclass {\n\n    /**\n     *  Emits the set of `@Input()` property names that change during each call to `ngOnChanges()`.\n     */\n    inputChanges$ = new Subject<any>();\n\n    protected changeDetectorRef: ChangeDetectorRef;\n\n    constructor(injector: Injector) {\n        super();\n        this.changeDetectorRef = injector.get(ChangeDetectorRef);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.inputChanges$.next(\n            new Set(Object.getOwnPropertyNames(changes) as Array<keyof this>),\n        );\n    }\n\n    /**\n     * @return an observable of the values for one of this directive's `@Input()` properties\n     */\n    getInput$<K extends keyof this>(key: K): Observable<this[K]> {\n        return this.inputChanges$.pipe(\n            filter((keys) => keys.has(key)),\n            startWith(undefined),\n            map(() => this[key]),\n        );\n    }\n\n    /**\n     * Binds an observable to one of this directive's instance variables. When the observable emits the instance variable will be updated, and change detection will be triggered to propagate any changes. Use this an an alternative to repeating `| async` multiple times in your template.\n     */\n    bindToInstance<K extends keyof this>(key: K, value$: Observable<this[K]>) {\n        this.subscribeTo(value$, (value) => {\n            this[key] = value;\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n}\n","import { Type } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { DirectiveSuperclass } from \"./directive-superclass\";\n\nexport function noop() { };\n\n/**\n * Use in the `providers` of a component that implements `ControlValueAccessor` to reduce some boilerplate.\n *\n * ```ts\n * @Component({ providers: [provideValueAccessor(MyFormControl)] }\n * class MyFormControl extends BaseFormControl {\n *   // ...\n * }\n * ```\n */\nexport function provideValueAccessor(type: Type<any>) {\n    return {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: type,\n        multi: true,\n    };\n}\n\n/**\n * Extend this when creating a form control to reduce some boilerplate. **Warning:** You _must_ include a constructor in your subclass.\n *\n * This example allows 2-way binding to a number via `[(ngModel)]`, `[formControl]`, or any other technique that leverages the `ControlValueAccessor` interface.\n * ```ts\n * @Component({\n *   template: `\n *     <button (click)=\"increment()\" [disabled]=\"isDisabled\">{{ counter }}</button>\n *   `,\n *   providers: [provideValueAccessor(CounterComponent)],\n * })\n * class CounterComponent extends FormControlSuperclass<number> {\n *   counter = 0;\n *\n *   // This looks unnecessary, but is required for Angular to provide `Injector`\n *   constructor(injector: Injector) {\n *     super(injector);\n *   }\n *\n *   handleIncomingValue(value: number) {\n *     this.counter = value;\n *   }\n *\n *   increment() {\n *     this.emitOutgoingValue(++this.counter);\n *     this.onTouched();\n *   }\n * }\n * ```\n */\nexport abstract class FormControlSuperclass<T> extends DirectiveSuperclass\n    implements ControlValueAccessor {\n    /** Call this to emit a new value when it changes. */\n    emitOutgoingValue: (value: T) => void = noop;\n\n    /** Call this to \"commit\" a change, traditionally done e.g. on blur. */\n    onTouched = noop;\n\n    /** You can bind to this in your template as needed. */\n    isDisabled = false;\n\n    /** Implement this to handle a new value coming in from outside. */\n    abstract handleIncomingValue(value: T): void;\n\n    /** Called as angular propagates value changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    writeValue(value: T) {\n        this.handleIncomingValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n    registerOnChange(fn: (value: T) => void) {\n        this.emitOutgoingValue = fn;\n    }\n\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n    registerOnTouched(fn: VoidFunction) {\n        this.onTouched = fn;\n    }\n\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    setDisabledState(isDisabled: boolean) {\n        this.isDisabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { Injector } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { FormControlSuperclass } from \"./form-control-superclass\";\n\nexport abstract class WrappedFormControlSuperclass<OuterType, InnerType = OuterType> extends FormControlSuperclass<OuterType> {\n\n    formControl = new FormControl();\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.subscribeTo(this.formControl.valueChanges, (value) => {\n            this.emitOutgoingValue(this.innerToOuter(value));\n        });\n        this.formControl.markAsTouched = () => {\n            this.onTouched();\n        };\n    }\n\n    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    handleIncomingValue(value: OuterType) {\n        this.formControl.setValue(this.outerToInner(value), { emitEvent: false });\n    }\n\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    setDisabledState(isDisabled: boolean) {\n        if (isDisabled) {\n            this.formControl.disable({ emitEvent: false });\n        } else {\n            this.formControl.enable({ emitEvent: false });\n        }\n        super.setDisabledState(this.isDisabled);\n    }\n\n    /** Override this to modify a value coming from the outside to the format needed within this component. */\n    protected outerToInner(value: OuterType): InnerType {\n        return (value as any) as InnerType;\n    }\n\n    /** Override this to modify a value coming from within this component to the format expected on the outside. */\n    protected innerToOuter(value: InnerType): OuterType {\n        return (value as any) as OuterType;\n    }\n}\n","import { AuthConfig } from \"../config/auth-config\";\nimport { isAuthenticated as ia, redirect } from \"./authentication.service\";\n\nexport function bootstrapSecurity(\n    config: AuthConfig, authenticated: () => void, isAuthenticated = ia, notAuthenticated = redirect) {\n    if (window.location.href.includes(config.loginSuccessRoute) || isAuthenticated(config)) {\n        authenticated();\n    } else {\n        notAuthenticated(config);\n    }\n}\n"]}