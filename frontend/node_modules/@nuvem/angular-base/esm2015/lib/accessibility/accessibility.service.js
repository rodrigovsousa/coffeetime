import { __decorate } from "tslib";
import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * AccessbilityService Serviço de acessibilidade, este serviço prove recursos de contraste
 * de tela e controle do tamanho da fonte apresentadas na tela.
 * @class
 */
let AccessbilityService = class AccessbilityService {
    constructor(rendererFactory) {
        /**
         * Propriedade que define tamanho da fonte
         * @type {number}
         */
        this.fontSize = 1.0;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * Medoto para habilitar contraste
     * @public
     * @returns void
     */
    enableHighContrast() {
        this.renderer.addClass(document.body, 'contraste');
    }
    /**
     * Metodo para desabilitar contraste
     * @public
     * @returns void
     */
    disableHighContrast() {
        this.renderer.removeClass(document.body, 'contraste');
    }
    /**
     * Metodo utilizado para aumentar o tamnho da fonte apresentada no display
     * @public
     * @returns void
     */
    increaseFontSize() {
        this.fontSize += 0.1;
        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');
    }
    /**
     * Metodo utilizado para diminuir o tamnho da fonte apresentada no display
     * @public
     * @returns void
     */
    decreaseFontSize() {
        this.fontSize -= 0.1;
        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');
    }
    addAccessibilityIcons() {
        const elements = document.querySelector('.ui-button-icon-left, ui-button-icon-righ');
        if (elements) {
            this.renderer.setStyle(elements, 'aria-hidden', true);
        }
    }
    addAccessibilityMessages(msg) {
        let type = 'polite';
        if (msg.severity.toLowerCase() !== 'custom' && msg.severity.toLowerCase() !== 'success') {
            type = 'assertive';
        }
        this.renderer.setStyle(document.querySelector('p-toast, p-growl'), 'aria-live', type);
    }
};
AccessbilityService.ctorParameters = () => [
    { type: RendererFactory2 }
];
AccessbilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AccessbilityService_Factory() { return new AccessbilityService(i0.ɵɵinject(i0.RendererFactory2)); }, token: AccessbilityService, providedIn: "root" });
AccessbilityService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], AccessbilityService);
export { AccessbilityService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzaWJpbGl0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL2FuZ3VsYXItYmFzZS8iLCJzb3VyY2VzIjpbImxpYi9hY2Nlc3NpYmlsaXR5L2FjY2Vzc2liaWxpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRXhFOzs7O0dBSUc7QUFJSCxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQUk1QixZQUFZLGVBQWlDO1FBSTdDOzs7V0FHRztRQUNLLGFBQVEsR0FBVyxHQUFHLENBQUM7UUFQM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBUUQ7Ozs7T0FJRztJQUNILGtCQUFrQjtRQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxtQkFBbUI7UUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsZ0JBQWdCO1FBQ1osSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsZ0JBQWdCO1FBQ1osSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1FBRXJGLElBQUksUUFBUSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN6RDtJQUNMLENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxHQUF1QjtRQUM1QyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUM7UUFDcEIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLFNBQVMsRUFBRTtZQUNyRixJQUFJLEdBQUcsV0FBVyxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRixDQUFDO0NBRUosQ0FBQTs7WUFqRWdDLGdCQUFnQjs7O0FBSnBDLG1CQUFtQjtJQUgvQixVQUFVLENBQUM7UUFDUixVQUFVLEVBQUUsTUFBTTtLQUNyQixDQUFDO0dBQ1csbUJBQW1CLENBcUUvQjtTQXJFWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIFJlbmRlcmVyRmFjdG9yeTIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBY2Nlc3NiaWxpdHlTZXJ2aWNlIFNlcnZpw6dvIGRlIGFjZXNzaWJpbGlkYWRlLCBlc3RlIHNlcnZpw6dvIHByb3ZlIHJlY3Vyc29zIGRlIGNvbnRyYXN0ZVxuICogZGUgdGVsYSBlIGNvbnRyb2xlIGRvIHRhbWFuaG8gZGEgZm9udGUgYXByZXNlbnRhZGFzIG5hIHRlbGEuXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQWNjZXNzYmlsaXR5U2VydmljZSB7XG5cbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcblxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5Mikge1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIHF1ZSBkZWZpbmUgdGFtYW5obyBkYSBmb250ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJpdmF0ZSBmb250U2l6ZTogbnVtYmVyID0gMS4wO1xuXG4gICAgLyoqXG4gICAgICogTWVkb3RvIHBhcmEgaGFiaWxpdGFyIGNvbnRyYXN0ZVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgZW5hYmxlSGlnaENvbnRyYXN0KCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGRvY3VtZW50LmJvZHksICdjb250cmFzdGUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGFyYSBkZXNhYmlsaXRhciBjb250cmFzdGVcbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGRpc2FibGVIaWdoQ29udHJhc3QoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ2NvbnRyYXN0ZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyB1dGlsaXphZG8gcGFyYSBhdW1lbnRhciBvIHRhbW5obyBkYSBmb250ZSBhcHJlc2VudGFkYSBubyBkaXNwbGF5XG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBpbmNyZWFzZUZvbnRTaXplKCkge1xuICAgICAgICB0aGlzLmZvbnRTaXplICs9IDAuMTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYubGF5b3V0LXdyYXBwZXInKSwgJ2ZvbnQtc2l6ZScsIHRoaXMuZm9udFNpemUgKyAnZW0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gdXRpbGl6YWRvIHBhcmEgZGltaW51aXIgbyB0YW1uaG8gZGEgZm9udGUgYXByZXNlbnRhZGEgbm8gZGlzcGxheVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgZGVjcmVhc2VGb250U2l6ZSgpIHtcbiAgICAgICAgdGhpcy5mb250U2l6ZSAtPSAwLjE7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmxheW91dC13cmFwcGVyJyksICdmb250LXNpemUnLCB0aGlzLmZvbnRTaXplICsgJ2VtJyk7XG4gICAgfVxuXG4gICAgYWRkQWNjZXNzaWJpbGl0eUljb25zKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51aS1idXR0b24taWNvbi1sZWZ0LCB1aS1idXR0b24taWNvbi1yaWdoJyk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGVsZW1lbnRzLCAnYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEFjY2Vzc2liaWxpdHlNZXNzYWdlcyhtc2c6IHtzZXZlcml0eTogc3RyaW5nfSkge1xuICAgICAgICBsZXQgdHlwZSA9ICdwb2xpdGUnO1xuICAgICAgICBpZiAobXNnLnNldmVyaXR5LnRvTG93ZXJDYXNlKCkgIT09ICdjdXN0b20nICYmIG1zZy5zZXZlcml0eS50b0xvd2VyQ2FzZSgpICE9PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgIHR5cGUgPSAnYXNzZXJ0aXZlJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigncC10b2FzdCwgcC1ncm93bCcpLCAnYXJpYS1saXZlJywgdHlwZSk7XG4gICAgfVxuXG59XG4iXX0=