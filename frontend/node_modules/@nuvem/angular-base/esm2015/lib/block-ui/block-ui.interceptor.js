import { __decorate } from "tslib";
import { HttpResponse } from '@angular/common/http';
import { Injectable } from "@angular/core";
import { tap } from 'rxjs/operators';
import { BlockUiService } from './block-ui.service';
import * as i0 from "@angular/core";
import * as i1 from "./block-ui.service";
/**
 * Class BlockUiInterceptor
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let BlockUiInterceptor = class BlockUiInterceptor {
    /**
     * constructor method
     * @constructor
     * @param {BlockUiService} service
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * intercept method
     * @public
     * @param {HttpRequest<any>} req
     * @param {HttpHandler} next
     * @return Observable<HttpEvent<any>>
     */
    intercept(req, next) {
        if (this.isMutation(req.method)) {
            this.service.show();
        }
        return next.handle(req).pipe(tap((event) => {
            if (event instanceof HttpResponse) {
                this.service.hide();
            }
        }, (err) => {
            this.service.hide();
        }));
    }
    /**
     * isMutation method
     * @private
     * @param {string} method
     * @return boolean
     */
    isMutation(method) {
        const mutationsMethods = [
            'DELETE',
            'PATCH',
            'POST',
            'PUT'
        ];
        return mutationsMethods.indexOf(method) !== -1;
    }
};
BlockUiInterceptor.ɵfac = function BlockUiInterceptor_Factory(t) { return new (t || BlockUiInterceptor)(ɵngcc0.ɵɵinject(BlockUiService)); };
BlockUiInterceptor.ctorParameters = () => [
    { type: BlockUiService }
];
BlockUiInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function BlockUiInterceptor_Factory() { return new BlockUiInterceptor(i0.ɵɵinject(i1.BlockUiService)); }, token: BlockUiInterceptor, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUiInterceptor, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: BlockUiService }]; }, null); })();
export { BlockUiInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9ibG9jay11aS9ibG9jay11aS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUF1QyxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQ7QUFHSTtBQUZKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7QUFBRyxJQUU5QjtBQUNKO0FBQ0E7QUFDQTtBQUF1QyxPQUNoQztBQUNQLElBQUksWUFBb0IsT0FBdUI7QUFBSSxRQUEzQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtBQUFDLElBQUUsQ0FBQztBQUNuRCxJQUNJO0FBQ0o7QUFDQTtBQUFlO0FBQ3FCO0FBQ0o7QUFDUyxPQUNsQztBQUNQLElBQUksU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7QUFBSSxRQUVsRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ3pDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNoQyxTQUFTO0FBQ1QsUUFDUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUN4QixHQUFHLENBQ0MsQ0FBQyxLQUFxQixFQUFFLEVBQUU7QUFDMUMsWUFBb0IsSUFBSSxLQUFLLFlBQVksWUFBWSxFQUFFO0FBQ3ZELGdCQUF3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVDLGFBQXFCO0FBQ3JCLFFBQWdCLENBQUMsRUFDRCxDQUFDLEdBQVEsRUFBRSxFQUFFO0FBQzdCLFlBQW9CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDeEMsUUFBZ0IsQ0FBQyxDQUNKLENBQ0osQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFZLFVBQVUsQ0FBQyxNQUFjO0FBQUksUUFDakMsTUFBTSxnQkFBZ0IsR0FBRztBQUNqQyxZQUFZLFFBQVE7QUFDcEIsWUFBWSxPQUFPO0FBQ25CLFlBQVksTUFBTTtBQUNsQixZQUFZLEtBQUs7QUFDakIsU0FBUyxDQUFDO0FBQ1YsUUFDUSxPQUFPLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2RCxJQUFJLENBQUM7QUFDTCxDQUFDOzRJQUFBO0FBQ0Q7QUFBNEMsWUE3Q1gsY0FBYztBQUFHO0FBRWxEO0FBVGEsa0JBQWtCLG9CQUg5QixVQUFVLENBQUMsVUFDUixVQUFVLEVBQUU7QUFBTSxNQUNyQixDQUFDLElBQ1c7R0FBa0IsQ0FtRDlCOzs7d0VBQ0Q7QUFBQyxTQXBEWSxrQkFBa0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJsb2NrVWlTZXJ2aWNlIH0gZnJvbSAnLi9ibG9jay11aS5zZXJ2aWNlJztcblxuLyoqXG4gKiBDbGFzcyBCbG9ja1VpSW50ZXJjZXB0b3JcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEJsb2NrVWlJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0Jsb2NrVWlTZXJ2aWNlfSBzZXJ2aWNlIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogQmxvY2tVaVNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBpbnRlcmNlcHQgbWV0aG9kXG4gICAgICogQHB1YmxpYyBcbiAgICAgKiBAcGFyYW0ge0h0dHBSZXF1ZXN0PGFueT59IHJlcVxuICAgICAqIEBwYXJhbSB7SHR0cEhhbmRsZXJ9IG5leHRcbiAgICAgKiBAcmV0dXJuIE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+XG4gICAgICovXG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNNdXRhdGlvbihyZXEubWV0aG9kKSkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnNob3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICAgICAgICB0YXAoXG4gICAgICAgICAgICAgICAgKGV2ZW50OiBIdHRwRXZlbnQ8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogaXNNdXRhdGlvbiBtZXRob2RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgKiBAcmV0dXJuIGJvb2xlYW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGlzTXV0YXRpb24obWV0aG9kOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgbXV0YXRpb25zTWV0aG9kcyA9IFtcbiAgICAgICAgICAgICdERUxFVEUnLFxuICAgICAgICAgICAgJ1BBVENIJyxcbiAgICAgICAgICAgICdQT1NUJyxcbiAgICAgICAgICAgICdQVVQnXG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIG11dGF0aW9uc01ldGhvZHMuaW5kZXhPZihtZXRob2QpICE9PSAtMTtcbiAgICB9XG59XG4iXX0=