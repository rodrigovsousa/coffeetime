import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Class BlockUiService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let BlockUiService = class BlockUiService {
    /**
     * constructor method
     * @constructor
     */
    constructor() {
        /**
         * subject property
         * @private
         * @type {Subject<BlockUiStatus>}
         */
        this.subject = new Subject();
        /**
         * loaderStatus property
         * @public
         * @type {Observable}
         */
        this.loaderStatus = this.subject.asObservable();
    }
    /**
     * show methods
     * @returns void
     */
    show() {
        this.subject.next({ status: true });
    }
    /**
     * hide methods
     * @returns void
     */
    hide() {
        this.subject.next({ status: false });
    }
};
BlockUiService.ɵfac = function BlockUiService_Factory(t) { return new (t || BlockUiService)(); };
BlockUiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BlockUiService_Factory() { return new BlockUiService(); }, token: BlockUiService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
export { BlockUiService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2Jsb2NrLXVpL2Jsb2NrLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztBQUMzQixJQWVJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJO0FBQWdCLFFBbEJoQjtBQUNKO0FBQ0k7QUFDSTtBQUVKLFdBREc7QUFDUCxRQUFZLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBaUIsQ0FBQztBQUNuRCxRQUNJO0FBQ0o7QUFDSTtBQUNJO0FBRUosV0FERztBQUNQLFFBQUksaUJBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQy9DLElBS29CLENBQUM7QUFDckIsSUFDSTtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFJO0FBQ1IsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMzRCxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQUk7QUFDUixRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFnQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzVELElBQUksQ0FBQztBQUNMLENBQUM7aUdBQUE7QUFDRDtBQXRDYSxjQUFjLG9CQUgxQixVQUFVLENBQUMsVUFDUixVQUFVLEVBQUU7QUFBTSxNQUNyQixDQUFDLElBQ1csY0FBYztBQXFDMUI7OztnREFDRDtBQUFDLFNBdENZLGNBQWM7QUFFM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbG9ja1VpU3RhdHVzIH0gZnJvbSAnLi9ibG9jay11aS5zdGF0dXMnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIENsYXNzIEJsb2NrVWlTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBCbG9ja1VpU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBzdWJqZWN0IHByb3BlcnR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7U3ViamVjdDxCbG9ja1VpU3RhdHVzPn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHN1YmplY3QgPSBuZXcgU3ViamVjdDxCbG9ja1VpU3RhdHVzPigpO1xuXG4gICAgLyoqXG4gICAgICogbG9hZGVyU3RhdHVzIHByb3BlcnR5XG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0eXBlIHtPYnNlcnZhYmxlfVxuICAgICAqL1xuICAgIGxvYWRlclN0YXR1cyA9IHRoaXMuc3ViamVjdC5hc09ic2VydmFibGUoKTtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBzaG93IG1ldGhvZHNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoPEJsb2NrVWlTdGF0dXM+eyBzdGF0dXM6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGlkZSBtZXRob2RzXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuc3ViamVjdC5uZXh0KDxCbG9ja1VpU3RhdHVzPnsgc3RhdHVzOiBmYWxzZSB9KTtcbiAgICB9XG59XG4iXX0=