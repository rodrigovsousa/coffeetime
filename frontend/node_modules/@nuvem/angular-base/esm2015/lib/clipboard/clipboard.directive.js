import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { ClipboardService } from './clipboard.service';
import * as ɵngcc0 from '@angular/core';
let ClipboardDirective = 
/**
 * Diretiva que expõe seletor para o uso do clipbord
 * @class
 */
class ClipboardDirective {
    /**
     * constructor method
     * @param {ClipboardService} service
     * @constructor
     */
    constructor(service) {
        this.service = service;
        /**
         * onClipboard variable
         * @type {EventEmitter<boolean>}
         */
        this.onClipboard = new EventEmitter();
    }
    /**
     * copy method
     * @event click
     * @returns void
     */
    copy() {
        try {
            this.service.copy(this.clipboard);
            this.onClipboard.emit(true);
        }
        catch (e) {
            this.onClipboard.emit(false);
            throw e;
        }
    }
};
ClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService)); };
ClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [["", "clipboard", ""]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClipboardDirective_click_HostBindingHandler() { return ctx.copy(); });
    } }, inputs: { clipboard: "clipboard" }, outputs: { onClipboard: "onClipboard" } });
ClipboardDirective.ctorParameters = () => [
    { type: ClipboardService }
];
__decorate([
    Input()
], ClipboardDirective.prototype, "clipboard", void 0);
__decorate([
    Output()
], ClipboardDirective.prototype, "onClipboard", void 0);
__decorate([
    HostListener('click')
], ClipboardDirective.prototype, "copy", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{
        type: Directive,
        args: [{
                selector: '[clipboard]'
            }]
    }], function () { return [{ type: ClipboardService }]; }, { onClipboard: [{
            type: Output
        }], copy: [{
            type: HostListener,
            args: ['click']
        }], clipboard: [{
            type: Input
        }] }); })();
export { ClipboardDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2NsaXBib2FyZC9jbGlwYm9hcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFTdkQsSUFBYSxrQkFBa0I7QUFKL0I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE1BQWEsa0JBQWtCO0FBQy9CLElBZUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUFvQixPQUF5QjtBQUFJLFFBQTdCLFlBQU8sR0FBUCxPQUFPLENBQWtCO0FBQUMsUUFaOUM7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQ0ksZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztBQUNyRSxJQU1vRCxDQUFDO0FBQ3JELElBT0ksQUFMQTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQUk7QUFDUixRQUFRLElBQUk7QUFDWixZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM5QyxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hDLFNBQVM7QUFBQyxRQUFBLE9BQU8sQ0FBQyxFQUFFO0FBQ3BCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekMsWUFBWSxNQUFNLENBQUMsQ0FBQztBQUNwQixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsQ0FBQzs7Ozt3RkFBQTtBQUNEO0FBQTRDLFlBbEJYLGdCQUFnQjtBQUFHO0FBZGhEO0FBQWEsSUFEWixLQUFLLEVBQUU7QUFDWixxREFBc0I7QUFPbEI7QUFBYSxJQURaLE1BQU0sRUFBRTtBQUNiLHVEQUFxRTtBQWVqRTtBQUNBLElBUEMsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUMxQiw4Q0FhSztBQXJDUSxrQkFBa0Isb0JBUDlCLFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRTtJQUFhLE1BQzFCLENBQUMsS0FDRjs7OztDQUdHLElBQ1Usa0JBQWtCLENBc0M5Qjs7Ozs7OztvQkFDRDtBQUFDLFNBdkNZLGtCQUFrQjtBQUUvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2xpcGJvYXJkU2VydmljZSB9IGZyb20gJy4vY2xpcGJvYXJkLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tjbGlwYm9hcmRdJ1xufSlcbi8qKlxuICogRGlyZXRpdmEgcXVlIGV4cMO1ZSBzZWxldG9yIHBhcmEgbyB1c28gZG8gY2xpcGJvcmRcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgQ2xpcGJvYXJkRGlyZWN0aXZlIHtcblxuICAgIC8qKlxuICAgICAqIGNsaXBib2FyZCB2YXJpYWJsZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBjbGlwYm9hcmQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIG9uQ2xpcGJvYXJkIHZhcmlhYmxlXG4gICAgICogQHR5cGUge0V2ZW50RW1pdHRlcjxib29sZWFuPn1cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBvbkNsaXBib2FyZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQHBhcmFtIHtDbGlwYm9hcmRTZXJ2aWNlfSBzZXJ2aWNlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBDbGlwYm9hcmRTZXJ2aWNlKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIC8qKlxuICAgICAqIGNvcHkgbWV0aG9kXG4gICAgICogQGV2ZW50IGNsaWNrXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGNvcHkoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZpY2UuY29weSh0aGlzLmNsaXBib2FyZCk7XG4gICAgICAgICAgICB0aGlzLm9uQ2xpcGJvYXJkLmVtaXQodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMub25DbGlwYm9hcmQuZW1pdChmYWxzZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19