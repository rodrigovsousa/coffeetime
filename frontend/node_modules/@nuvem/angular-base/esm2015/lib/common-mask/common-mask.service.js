import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 *
 * Class CommonMaskService serviço para inserção de mascara de data em campos input
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let CommonMaskService = class CommonMaskService {
    constructor() {
        /**
         * DATE_SEPARATOR property
         * @type {string}
         */
        this.DATE_SEPARATOR = '/';
    }
    /**
     * Metodo para formatar valor digitado no padrão dd/mm/yyyy
     * @param $event
     * @returns void
     */
    dateMask($event) {
        if ($event.target.value) {
            let date = $event.target.value.replace(/[^0-9]/g, '').substr(0, 8);
            if (date.length >= 3) {
                date = date.replace(/^(\d{2})(\d{1,2})/, '$1' + this.DATE_SEPARATOR + '$2');
            }
            if (date.length >= 6) {
                date = date.replace(/^(\S{5})(\d{1,4})/, '$1' + this.DATE_SEPARATOR + '$2');
            }
            $event.target.value = date;
        }
    }
};
CommonMaskService.ɵfac = function CommonMaskService_Factory(t) { return new (t || CommonMaskService)(); };
CommonMaskService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CommonMaskService_Factory() { return new CommonMaskService(); }, token: CommonMaskService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CommonMaskService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
export { CommonMaskService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLW1hc2suc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2NvbW1vbi1tYXNrL2NvbW1vbi1tYXNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFVLEdBQ1A7O0FBSUgsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7QUFDOUIsSUFEQTtBQUFnQixRQUVaO0FBQ0o7QUFDSTtBQUVKLFdBRE87QUFDUCxRQUFxQixtQkFBYyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxLQXFCQztBQUNELElBckJJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksUUFBUSxDQUFDLE1BQU07QUFDbkIsUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQ2pDLFlBQVksSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9FLFlBQ1ksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtBQUNsQyxnQkFBYyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMxRixhQUFhO0FBQ2IsWUFDWSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ2xDLGdCQUFjLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzFGLGFBQWE7QUFDYixZQUNZLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUN2QyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsQ0FBQzswR0FBQTtBQUNEO0FBN0JhLGlCQUFpQixvQkFIN0IsVUFBVSxDQUFDLFVBQ1YsVUFBVSxFQUFFO0FBQU0sT0FDbkIsQ0FBQyxJQUNXO0dBQWlCLENBNEI3Qjs7O2dEQUNEO0FBQUMsU0E3QlksaUJBQWlCO0FBRTlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqXG4gKiBDbGFzcyBDb21tb25NYXNrU2VydmljZSBzZXJ2acOnbyBwYXJhIGluc2Vyw6fDo28gZGUgbWFzY2FyYSBkZSBkYXRhIGVtIGNhbXBvcyBpbnB1dFxuICogQGNsYXNzIFxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ29tbW9uTWFza1NlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogREFURV9TRVBBUkFUT1IgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgREFURV9TRVBBUkFUT1IgPSAnLyc7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGFyYSBmb3JtYXRhciB2YWxvciBkaWdpdGFkbyBubyBwYWRyw6NvIGRkL21tL3l5eXlcbiAgICAgKiBAcGFyYW0gJGV2ZW50XG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGRhdGVNYXNrKCRldmVudCkge1xuICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgbGV0IGRhdGUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJykuc3Vic3RyKDAsIDgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGF0ZS5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICBkYXRlID0gZGF0ZS5yZXBsYWNlKC9eKFxcZHsyfSkoXFxkezEsMn0pLywgJyQxJyArIHRoaXMuREFURV9TRVBBUkFUT1IgKyAnJDInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGUubGVuZ3RoID49IDYpIHtcbiAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUucmVwbGFjZSgvXihcXFN7NX0pKFxcZHsxLDR9KS8sICckMScgKyB0aGlzLkRBVEVfU0VQQVJBVE9SICsgJyQyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUgPSBkYXRlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19