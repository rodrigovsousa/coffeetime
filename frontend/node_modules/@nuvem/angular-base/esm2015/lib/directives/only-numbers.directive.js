import { __decorate } from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
/**
 * OnlyNumbersDirective diretiva para que sejam permitidos somente números
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let OnlyNumbersDirective = class OnlyNumbersDirective {
    /**
     * @param {ElementRef} el
     * @constructor
     */
    constructor(el) {
        this.el = el;
        /**
         * Propriedade que carrega expressão regular para numeros
         * @type {RegExp}
         */
        this.regex = new RegExp(/[^0-9]$/g);
        /**
         * Propriedade que lista opções aceitas além de núsmeros
         * @type {Array<string>}
         */
        this.specialKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'End',
            'Home',
            'ArrowLeft',
            'ArrowRight'
        ];
    }
    /**
     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado
     * @param {KeyboardEvent} event
     * @returns void
     */
    onKeyDown(event) {
        const current = this.el.nativeElement.value;
        const next = current.concat(event.key);
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        if (next && String(next).match(this.regex)) {
            event.preventDefault();
        }
    }
};
OnlyNumbersDirective.ɵfac = function OnlyNumbersDirective_Factory(t) { return new (t || OnlyNumbersDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OnlyNumbersDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OnlyNumbersDirective, selectors: [["input", "onlyNumbers", ""]], hostBindings: function OnlyNumbersDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function OnlyNumbersDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } } });
OnlyNumbersDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    HostListener('keydown', ['$event'])
], OnlyNumbersDirective.prototype, "onKeyDown", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OnlyNumbersDirective, [{
        type: Directive,
        args: [{
                selector: 'input[onlyNumbers]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();
export { OnlyNumbersDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25seS1udW1iZXJzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2RpcmVjdGl2ZXMvb25seS1udW1iZXJzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7QUFDakMsSUFxQkk7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksWUFBb0IsRUFBYztBQUFJLFFBQWxCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQXhCbkM7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQVksVUFBSyxHQUFXLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25ELFFBQ0k7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQVksZ0JBQVcsR0FBa0I7QUFDekMsWUFBUSxXQUFXO0FBQ25CLFlBQVEsUUFBUTtBQUNoQixZQUFRLEtBQUs7QUFDYixZQUFRLEtBQUs7QUFDYixZQUFRLE1BQU07QUFDZCxZQUFRLFdBQVc7QUFDbkIsWUFBUSxZQUFZO0FBQ3BCLFNBQUssQ0FBQztBQUNOLElBSzBDLENBQUM7QUFDM0MsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUNJLFNBQVMsQ0FBQyxLQUFvQjtBQUNsQyxRQUNRLE1BQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztBQUM1RCxRQUFRLE1BQU0sSUFBSSxHQUFXLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELFFBQ1EsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDeEQsWUFBWSxPQUFPO0FBQ25CLFNBQVM7QUFDVCxRQUNRLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3BELFlBQVksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ25DLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxDQUNDOzs7O1dBQUE7QUFDRDtBQUE4QyxZQXZCbEIsVUFBVTtBQUFHO0FBUXJDO0FBQWEsSUFEWixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEMscURBWUs7QUE5Q1Esb0JBQW9CLG9CQUhoQyxTQUFTLENBQUMsVUFDUCxRQUFRLEVBQUU7V0FBb0IsTUFDakMsQ0FBQyxJQUNXOztBQUFvQixDQWdEaEM7Ozs7O29CQUNEO0FBQUMsU0FqRFksb0JBQW9CO0FBRWpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBPbmx5TnVtYmVyc0RpcmVjdGl2ZSBkaXJldGl2YSBwYXJhIHF1ZSBzZWphbSBwZXJtaXRpZG9zIHNvbWVudGUgbsO6bWVyb3NcbiAqIEBjbGFzc1xuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W29ubHlOdW1iZXJzXSdcbn0pXG5leHBvcnQgY2xhc3MgT25seU51bWJlcnNEaXJlY3RpdmUge1xuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgcXVlIGNhcnJlZ2EgZXhwcmVzc8OjbyByZWd1bGFyIHBhcmEgbnVtZXJvc1xuICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWdleDogUmVnRXhwID0gbmV3IFJlZ0V4cCgvW14wLTldJC9nKTtcblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIHF1ZSBsaXN0YSBvcMOnw7VlcyBhY2VpdGFzIGFsw6ltIGRlIG7DunNtZXJvc1xuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHByaXZhdGUgc3BlY2lhbEtleXM6IEFycmF5PHN0cmluZz4gPSBbXG4gICAgICAgICdCYWNrc3BhY2UnLFxuICAgICAgICAnRGVsZXRlJyxcbiAgICAgICAgJ1RhYicsXG4gICAgICAgICdFbmQnLFxuICAgICAgICAnSG9tZScsXG4gICAgICAgICdBcnJvd0xlZnQnLFxuICAgICAgICAnQXJyb3dSaWdodCdcbiAgICBdO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50UmVmfSBlbFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGV4ZWN1dGFkbyBwYXJhIG9zIGV2ZW50byBLZXlEb3duIGRvIHRlY2xhZG8gZXhlY3V0YSB2ZXJpZmljYcOnw6NvIGRvIHZhbG9yIGRpZ2l0YWRvXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblxuICAgICAgICBjb25zdCBjdXJyZW50OiBzdHJpbmcgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICAgIGNvbnN0IG5leHQ6IHN0cmluZyA9IGN1cnJlbnQuY29uY2F0KGV2ZW50LmtleSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3BlY2lhbEtleXMuaW5kZXhPZihldmVudC5rZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgJiYgU3RyaW5nKG5leHQpLm1hdGNoKHRoaXMucmVnZXgpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=