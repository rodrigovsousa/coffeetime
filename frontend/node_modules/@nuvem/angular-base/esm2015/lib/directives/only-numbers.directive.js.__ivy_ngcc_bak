import { __decorate } from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
/**
 * OnlyNumbersDirective diretiva para que sejam permitidos somente números
 * @class
 */
let OnlyNumbersDirective = class OnlyNumbersDirective {
    /**
     * @param {ElementRef} el
     * @constructor
     */
    constructor(el) {
        this.el = el;
        /**
         * Propriedade que carrega expressão regular para numeros
         * @type {RegExp}
         */
        this.regex = new RegExp(/[^0-9]$/g);
        /**
         * Propriedade que lista opções aceitas além de núsmeros
         * @type {Array<string>}
         */
        this.specialKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'End',
            'Home',
            'ArrowLeft',
            'ArrowRight'
        ];
    }
    /**
     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado
     * @param {KeyboardEvent} event
     * @returns void
     */
    onKeyDown(event) {
        const current = this.el.nativeElement.value;
        const next = current.concat(event.key);
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        if (next && String(next).match(this.regex)) {
            event.preventDefault();
        }
    }
};
OnlyNumbersDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    HostListener('keydown', ['$event'])
], OnlyNumbersDirective.prototype, "onKeyDown", null);
OnlyNumbersDirective = __decorate([
    Directive({
        selector: 'input[onlyNumbers]'
    })
], OnlyNumbersDirective);
export { OnlyNumbersDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25seS1udW1iZXJzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9vbmx5LW51bWJlcnMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEU7OztHQUdHO0FBSUgsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7SUFzQjdCOzs7T0FHRztJQUNILFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBeEJsQzs7O1dBR0c7UUFDSyxVQUFLLEdBQVcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFL0M7OztXQUdHO1FBQ0ssZ0JBQVcsR0FBa0I7WUFDakMsV0FBVztZQUNYLFFBQVE7WUFDUixLQUFLO1lBQ0wsS0FBSztZQUNMLE1BQU07WUFDTixXQUFXO1lBQ1gsWUFBWTtTQUNmLENBQUM7SUFNb0MsQ0FBQztJQUV2Qzs7OztPQUlHO0lBRUgsU0FBUyxDQUFDLEtBQW9CO1FBRTFCLE1BQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUNwRCxNQUFNLElBQUksR0FBVyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM1QyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0NBRUosQ0FBQTs7WUF0QjJCLFVBQVU7O0FBUWxDO0lBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FEQWFuQztBQTlDUSxvQkFBb0I7SUFIaEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG9CQUFvQjtLQUNqQyxDQUFDO0dBQ1csb0JBQW9CLENBZ0RoQztTQWhEWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIE9ubHlOdW1iZXJzRGlyZWN0aXZlIGRpcmV0aXZhIHBhcmEgcXVlIHNlamFtIHBlcm1pdGlkb3Mgc29tZW50ZSBuw7ptZXJvc1xuICogQGNsYXNzXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnaW5wdXRbb25seU51bWJlcnNdJ1xufSlcbmV4cG9ydCBjbGFzcyBPbmx5TnVtYmVyc0RpcmVjdGl2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wcmllZGFkZSBxdWUgY2FycmVnYSBleHByZXNzw6NvIHJlZ3VsYXIgcGFyYSBudW1lcm9zXG4gICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlZ2V4OiBSZWdFeHAgPSBuZXcgUmVnRXhwKC9bXjAtOV0kL2cpO1xuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgcXVlIGxpc3RhIG9ww6fDtWVzIGFjZWl0YXMgYWzDqW0gZGUgbsO6c21lcm9zXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgcHJpdmF0ZSBzcGVjaWFsS2V5czogQXJyYXk8c3RyaW5nPiA9IFtcbiAgICAgICAgJ0JhY2tzcGFjZScsXG4gICAgICAgICdEZWxldGUnLFxuICAgICAgICAnVGFiJyxcbiAgICAgICAgJ0VuZCcsXG4gICAgICAgICdIb21lJyxcbiAgICAgICAgJ0Fycm93TGVmdCcsXG4gICAgICAgICdBcnJvd1JpZ2h0J1xuICAgIF07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnRSZWZ9IGVsXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gZXhlY3V0YWRvIHBhcmEgb3MgZXZlbnRvIEtleURvd24gZG8gdGVjbGFkbyBleGVjdXRhIHZlcmlmaWNhw6fDo28gZG8gdmFsb3IgZGlnaXRhZG9cbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICAgIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnQ6IHN0cmluZyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgICAgY29uc3QgbmV4dDogc3RyaW5nID0gY3VycmVudC5jb25jYXQoZXZlbnQua2V5KTtcblxuICAgICAgICBpZiAodGhpcy5zcGVjaWFsS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCAmJiBTdHJpbmcobmV4dCkubWF0Y2godGhpcy5yZWdleCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==