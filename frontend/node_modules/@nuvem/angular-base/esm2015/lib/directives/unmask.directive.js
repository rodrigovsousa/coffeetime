import { __decorate } from "tslib";
import { Directive, ElementRef, OnInit, Input, OnDestroy } from '@angular/core';
import { NgControl } from '@angular/forms';
/**
 *
 * UnmaskDirective diretiva para remoção de mascaras de valores numericos
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
let UnmaskDirective = class UnmaskDirective {
    /**
     * constructor method
     * @param {ElementRef} elementRef
     * @param {NgControl} model
     * @constructor
     */
    constructor(elementRef, model) {
        this.elementRef = elementRef;
        this.model = model;
    }
    /**
     * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular
     * @returns void
     */
    ngOnInit() {
        this.subscriber = this.model.control.valueChanges.subscribe(() => {
            const newValue = this.elementRef.nativeElement.value.replace(new RegExp(this.appUnmask), '');
            this.model.control.setValue(newValue, {
                emitEvent: false,
                emitModelToViewChange: false,
                emitViewToModelChange: false
            });
        });
    }
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy() {
        this.subscriber.unsubscribe();
    }
};
UnmaskDirective.ɵfac = function UnmaskDirective_Factory(t) { return new (t || UnmaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl)); };
UnmaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: UnmaskDirective, selectors: [["", "unmask", ""]], inputs: { appUnmask: "appUnmask" } });
UnmaskDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl }
];
__decorate([
    Input()
], UnmaskDirective.prototype, "appUnmask", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UnmaskDirective, [{
        type: Directive,
        args: [{
                selector: '[unmask]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgControl }]; }, { appUnmask: [{
            type: Input
        }] }); })();
export { UnmaskDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tYXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2RpcmVjdGl2ZXMvdW5tYXNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBSUgsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtBQUFHLElBYzNCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUFvQixVQUFzQixFQUFVLEtBQWdCO0FBQUksUUFBcEQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQVMsVUFBSyxHQUFMLEtBQUssQ0FBVztBQUFDLElBQUcsQ0FBQztBQUM3RSxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFFBQVE7QUFBSyxRQUNULElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDdkQsR0FBRyxFQUFFO0FBQ2pCLFlBQWdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzdHLFlBQWdCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDdkIsUUFBUSxFQUNSO0FBQ3BCLGdCQUF3QixTQUFTLEVBQUUsS0FBSztBQUN4QyxnQkFBd0IscUJBQXFCLEVBQUUsS0FBSztBQUNwRCxnQkFBd0IscUJBQXFCLEVBQUUsS0FBSztBQUNwRCxhQUFxQixDQUNKLENBQUM7QUFDbEIsUUFBWSxDQUFDLENBQ0osQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN0QyxJQUFJLENBQUM7QUFDTCxDQUFDOztnSkFBQTtBQUNEO0FBQXlDLFlBOUJMLFVBQVU7QUFBSSxZQUFhLFNBQVM7QUFBRztBQWQ5RDtBQUFhLElBQXJCLEtBQUssRUFBRTtBQUFDLGtEQUFrQjtBQU5sQixlQUFlLG9CQUgzQixTQUFTLENBQUMsVUFDUCxRQUFRLEVBQUU7Q0FBVSxNQUN2QixDQUFDLElBQ1c7RUFBZSxDQWlEM0I7Ozs7O29CQUNEO0FBQUMsU0FsRFksZUFBZTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPbkluaXQsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKlxuICogVW5tYXNrRGlyZWN0aXZlIGRpcmV0aXZhIHBhcmEgcmVtb8Onw6NvIGRlIG1hc2NhcmFzIGRlIHZhbG9yZXMgbnVtZXJpY29zXG4gKiBAY2xhc3NcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdW5tYXNrXSdcbn0pXG5leHBvcnQgY2xhc3MgVW5tYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgYSBwYXJhIHJlYWxpemFyIGEgZm9ybWF0YcOnw6NvIGV4cHJlc3PDo28gcmVndWxhclxuICAgICAqIEB0eXBlIHtzdHJpbmd9IGFwcFVubWFza1xuICAgICAqL1xuICAgIEBJbnB1dCgpIGFwcFVubWFzazogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQ3JpYSBjYW5hbCBkZSBlc2N1dGEgcGFyYSBhIGRpcmV0aXZhXG4gICAgICogQHR5cGUge1N1YnNjcmlwdGlvbn0gc3Vic2NyaWJlclxuICAgICAqL1xuICAgIHByaXZhdGUgc3Vic2NyaWJlcjtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudFJlZn0gZWxlbWVudFJlZlxuICAgICAqIEBwYXJhbSB7TmdDb250cm9sfSBtb2RlbFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBtb2RlbDogTmdDb250cm9sKSB7IH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBleGVjdXRhZG8gbm8gY2FycmVnYW1lbnRvIGRhIGRpcmV0aXZhLCBleGVjdXRhIHZlcmlmaWNhw6fDo28gZG8gdmFsb3IgZSByZW1vdmUgYXMgbWFzY2FyYXMgYmFzZWFkbyBlbSB1bSBhZXhwcmVzc8OjbyByZWd1bGFyXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YnNjcmliZXIgPSB0aGlzLm1vZGVsLmNvbnRyb2wudmFsdWVDaGFuZ2VzLnN1YnNjcmliZShcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLmFwcFVubWFzayksICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNvbnRyb2wuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0RXZlbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRWaWV3VG9Nb2RlbENoYW5nZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbmdPbkRlc3Ryb3kgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4iXX0=