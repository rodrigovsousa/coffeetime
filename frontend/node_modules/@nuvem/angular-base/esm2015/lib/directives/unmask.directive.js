import { __decorate } from "tslib";
import { Directive, ElementRef, OnInit, Input, OnDestroy } from '@angular/core';
import { NgControl } from '@angular/forms';
/**
 *
 * UnmaskDirective diretiva para remoção de mascaras de valores numericos
 * @class
 */
let UnmaskDirective = class UnmaskDirective {
    /**
     * constructor method
     * @param {ElementRef} elementRef
     * @param {NgControl} model
     * @constructor
     */
    constructor(elementRef, model) {
        this.elementRef = elementRef;
        this.model = model;
    }
    /**
     * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular
     * @returns void
     */
    ngOnInit() {
        this.subscriber = this.model.control.valueChanges.subscribe(() => {
            const newValue = this.elementRef.nativeElement.value.replace(new RegExp(this.appUnmask), '');
            this.model.control.setValue(newValue, {
                emitEvent: false,
                emitModelToViewChange: false,
                emitViewToModelChange: false
            });
        });
    }
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy() {
        this.subscriber.unsubscribe();
    }
};
UnmaskDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl }
];
__decorate([
    Input()
], UnmaskDirective.prototype, "appUnmask", void 0);
UnmaskDirective = __decorate([
    Directive({
        selector: '[unmask]'
    })
], UnmaskDirective);
export { UnmaskDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tYXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy91bm1hc2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7Ozs7R0FJRztBQUlILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFjeEI7Ozs7O09BS0c7SUFDSCxZQUFvQixVQUFzQixFQUFVLEtBQWdCO1FBQWhELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFXO0lBQUksQ0FBQztJQUV6RTs7O09BR0c7SUFDSCxRQUFRO1FBQ0osSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUN2RCxHQUFHLEVBQUU7WUFDRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM3RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQ3ZCLFFBQVEsRUFDUjtnQkFDSSxTQUFTLEVBQUUsS0FBSztnQkFDaEIscUJBQXFCLEVBQUUsS0FBSztnQkFDNUIscUJBQXFCLEVBQUUsS0FBSzthQUMvQixDQUNKLENBQUM7UUFDTixDQUFDLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0NBQ0osQ0FBQTs7WUE3Qm1DLFVBQVU7WUFBaUIsU0FBUzs7QUFkM0Q7SUFBUixLQUFLLEVBQUU7a0RBQW1CO0FBTmxCLGVBQWU7SUFIM0IsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLFVBQVU7S0FDdkIsQ0FBQztHQUNXLGVBQWUsQ0FpRDNCO1NBakRZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE9uSW5pdCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqXG4gKiBVbm1hc2tEaXJlY3RpdmUgZGlyZXRpdmEgcGFyYSByZW1vw6fDo28gZGUgbWFzY2FyYXMgZGUgdmFsb3JlcyBudW1lcmljb3NcbiAqIEBjbGFzc1xuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t1bm1hc2tdJ1xufSlcbmV4cG9ydCBjbGFzcyBVbm1hc2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wcmllZGFkZSBhIHBhcmEgcmVhbGl6YXIgYSBmb3JtYXRhw6fDo28gZXhwcmVzc8OjbyByZWd1bGFyXG4gICAgICogQHR5cGUge3N0cmluZ30gYXBwVW5tYXNrXG4gICAgICovXG4gICAgQElucHV0KCkgYXBwVW5tYXNrOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBDcmlhIGNhbmFsIGRlIGVzY3V0YSBwYXJhIGEgZGlyZXRpdmFcbiAgICAgKiBAdHlwZSB7U3Vic2NyaXB0aW9ufSBzdWJzY3JpYmVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVyO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQHBhcmFtIHtFbGVtZW50UmVmfSBlbGVtZW50UmVmXG4gICAgICogQHBhcmFtIHtOZ0NvbnRyb2x9IG1vZGVsXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIG1vZGVsOiBOZ0NvbnRyb2wpIHsgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGV4ZWN1dGFkbyBubyBjYXJyZWdhbWVudG8gZGEgZGlyZXRpdmEsIGV4ZWN1dGEgdmVyaWZpY2HDp8OjbyBkbyB2YWxvciBlIHJlbW92ZSBhcyBtYXNjYXJhcyBiYXNlYWRvIGVtIHVtIGFleHByZXNzw6NvIHJlZ3VsYXJcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IHRoaXMubW9kZWwuY29udHJvbC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMuYXBwVW5tYXNrKSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuY29udHJvbC5zZXRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRFdmVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0TW9kZWxUb1ZpZXdDaGFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdFZpZXdUb01vZGVsQ2hhbmdlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuZ09uRGVzdHJveSBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbiJdfQ==