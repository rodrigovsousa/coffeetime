import { __decorate } from "tslib";
import { ErrorHandler, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ErrorService } from './error.service';
import { ErrorProvider } from './providers/error.provider';
import { HttpApplicationProblemErrorService } from './services/http-application-problem-error.service';
import { HttpGenericErrorService } from './services/http-generic-error.service';
/**
 * O modulo ErrorModule contem funcionalidades para a captura e apresentação dos erros que possam ocorrer na aplicação.
 * @module
 */
import * as ɵngcc0 from '@angular/core';
let ErrorModule = class ErrorModule {
};
ErrorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ErrorModule });
ErrorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ErrorModule_Factory(t) { return new (t || ErrorModule)(); }, providers: [
        {
            provide: ErrorProvider,
            useClass: HttpGenericErrorService,
            multi: true
        },
        {
            provide: ErrorProvider,
            useClass: HttpApplicationProblemErrorService,
            multi: true
        },
        {
            provide: ErrorHandler,
            useClass: ErrorService
        },
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ErrorModule, { imports: function () { return [CommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [
                    CommonModule
                ],
                providers: [
                    {
                        provide: ErrorProvider,
                        useClass: HttpGenericErrorService,
                        multi: true
                    },
                    {
                        provide: ErrorProvider,
                        useClass: HttpApplicationProblemErrorService,
                        multi: true
                    },
                    {
                        provide: ErrorHandler,
                        useClass: ErrorService
                    },
                ]
            }]
    }], null, null); })();
export { ErrorModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL2FuZ3VsYXItYmFzZS9saWIvZXJyb3IvZXJyb3IubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDdkcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFaEY7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUF1QkgsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztBQUN4QixDQUFDLENBQUE7QUFEWSxXQUFXLG9CQXRCdkIsUUFBUSxDQUFDLFVBQ04sWUFBWSxFQUFFLEVBQUU7U0FDaEIsT0FBTyxFQUFFLGNBQ0wsWUFBWSxVQUNmLFVBQ0QsU0FBUyxFQUFFLGNBQ1Asa0JBQ0ksT0FBTyxFQUFFLGFBQWE7O0FBQ3RCLFFBQVEsRUFBRSx1QkFBdUI7ZUFDakMsS0FBSyxFQUFFLElBQUksY0FDZDtPQUNEO0NBQ0ksT0FBTyxFQUFFOztFQUFhLGtCQUN0QixRQUFRLEVBQUU7NEJBQWtDLGtCQUM1QyxLQUFLLEVBQUUsSUFBSTthQUNkO0dBQ0Q7O0FBQ0ksT0FBTyxFQUFFLFlBQVk7SUFDckIsUUFBUSxFQUFFLFlBQVk7TUFDekI7TUFDSixNQUNKLENBQUMsSUFDVztTQUFXLENBQ3ZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0Q7QUFBQyxTQUZZLFdBQVc7QUFDdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFcnJvckhhbmRsZXIsIE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBFcnJvclNlcnZpY2UgfSBmcm9tICcuL2Vycm9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL2Vycm9yLnByb3ZpZGVyJztcbmltcG9ydCB7IEh0dHBBcHBsaWNhdGlvblByb2JsZW1FcnJvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2h0dHAtYXBwbGljYXRpb24tcHJvYmxlbS1lcnJvci5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBHZW5lcmljRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9odHRwLWdlbmVyaWMtZXJyb3Iuc2VydmljZSc7XG5cbi8qKlxuICogTyBtb2R1bG8gRXJyb3JNb2R1bGUgY29udGVtIGZ1bmNpb25hbGlkYWRlcyBwYXJhIGEgY2FwdHVyYSBlIGFwcmVzZW50YcOnw6NvIGRvcyBlcnJvcyBxdWUgcG9zc2FtIG9jb3JyZXIgbmEgYXBsaWNhw6fDo28uXG4gKiBAbW9kdWxlXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXSxcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZVxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEVycm9yUHJvdmlkZXIsXG4gICAgICAgICAgICB1c2VDbGFzczogSHR0cEdlbmVyaWNFcnJvclNlcnZpY2UsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBFcnJvclByb3ZpZGVyLFxuICAgICAgICAgICAgdXNlQ2xhc3M6IEh0dHBBcHBsaWNhdGlvblByb2JsZW1FcnJvclNlcnZpY2UsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBFcnJvckhhbmRsZXIsXG4gICAgICAgICAgICB1c2VDbGFzczogRXJyb3JTZXJ2aWNlLFxuICAgICAgICB9LFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgRXJyb3JNb2R1bGUge1xufVxuIl19