import { __decorate, __param } from "tslib";
import { ErrorHandler, Inject, Injectable } from '@angular/core';
import { ErrorProvider } from './providers/error.provider';
import * as i0 from "@angular/core";
import * as i1 from "./providers/error.provider";
/**
 * Class ErrorService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let ErrorService = class ErrorService extends ErrorHandler {
    /**
     * Metodo construtor responável por injetar o serviço ErrorProvider
     * @param {ErrorProvider} providers
     */
    constructor(providers) {
        super();
        this.providers = providers;
    }
    /**
     * Metodo responsável por idetificar e obter os erros lançados de requisições http/https
     * @param {Error} error
     * @returns void
     */
    handleError(error) {
        try {
            this.providers.forEach(p => {
                if (p.shouldHandle(error)) {
                    p.handle(error);
                }
            });
        }
        catch (e) {
        }
        super.handleError(error);
    }
};
ErrorService.ɵfac = function ErrorService_Factory(t) { return new (t || ErrorService)(ɵngcc0.ɵɵinject(ErrorProvider)); };
ErrorService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [ErrorProvider,] }] }
];
ErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorService_Factory() { return new ErrorService(i0.ɵɵinject(i1.ErrorProvider)); }, token: ErrorService, providedIn: "root" });
ErrorService = __decorate([ __param(0, Inject(ErrorProvider))
], ErrorService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Array, decorators: [{
                type: Inject,
                args: [ErrorProvider]
            }] }]; }, null); })();
export { ErrorService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3Iuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2Vycm9yL2Vycm9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0Q7QUFJQTtBQUhBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBYSxTQUFRLFlBQVk7QUFDOUMsSUFDSTtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUEyQyxTQUEwQjtBQUN6RSxRQUFRLEtBQUssRUFBRSxDQUFDO0FBQ2hCLFFBRitDLGNBQVMsR0FBVCxTQUFTLENBQWlCO0FBQUMsSUFFdEUsQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxXQUFXLENBQUMsS0FBWTtBQUM1QixRQUFRLElBQUk7QUFDWixZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3ZDLGdCQUFnQixJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDM0Msb0JBQW9CLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsaUJBQWlCO0FBQ2pCLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDZixTQUFTO0FBQUMsUUFBQSxPQUFPLENBQUMsRUFBRTtBQUNwQixTQUFTO0FBQ1QsUUFBUSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pDLElBQUksQ0FBQztBQUNMLENBQUM7eUhBQUE7QUFDRDtBQUFzQyx3Q0FyQnJCLE1BQU0sU0FBQyxhQUFhO0FBQVE7QUFBRztBQU5uQyxZQUFZLG9CQUh4QixVQUFVLENBQUMsVUFDUiwxQkFFQSxDQU1hLFdBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0NBUnhCLEVBQUUsTUFBTSxPQUNyQixDQUFDLGpCQU9xQyxHQU4xQixZQUFZLENBMEJ4Qjs7Ozs7Ozs7O2tDQUNEO0FBQUMsU0EzQlksWUFBWTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXJyb3JIYW5kbGVyLCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVycm9yUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5cbi8qKlxuICogQ2xhc3MgRXJyb3JTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgRXJyb3JTZXJ2aWNlIGV4dGVuZHMgRXJyb3JIYW5kbGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbsOhdmVsIHBvciBpbmpldGFyIG8gc2VydmnDp28gRXJyb3JQcm92aWRlclxuICAgICAqIEBwYXJhbSB7RXJyb3JQcm92aWRlcn0gcHJvdmlkZXJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoQEluamVjdChFcnJvclByb3ZpZGVyKSBwcml2YXRlIHByb3ZpZGVyczogRXJyb3JQcm92aWRlcltdKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwb3IgaWRldGlmaWNhciBlIG9idGVyIG9zIGVycm9zIGxhbsOnYWRvcyBkZSByZXF1aXNpw6fDtWVzIGh0dHAvaHR0cHNcbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoYW5kbGVFcnJvcihlcnJvcjogRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHAuc2hvdWxkSGFuZGxlKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICBwLmhhbmRsZShlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgfVxufVxuIl19