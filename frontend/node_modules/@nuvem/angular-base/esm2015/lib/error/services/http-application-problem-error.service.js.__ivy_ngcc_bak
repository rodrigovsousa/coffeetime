import { __decorate } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { ApplicationProblemType } from '../types/application-problem.type';
import * as i0 from "@angular/core";
import * as i1 from "../providers/notification.provider";
/**
 * Serviço HttpApplicationProblemErrorService
 * @class
 */
let HttpApplicationProblemErrorService = class HttpApplicationProblemErrorService {
    /**
     * Metodo construtor responsável por injetar serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    constructor(notification, ngZone) {
        this.notification = notification;
        this.ngZone = ngZone;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    shouldHandle(error) {
        return error instanceof HttpErrorResponse &&
            error.headers.get('Content-Type') === 'application/problem+json' &&
            error.error;
    }
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error) {
        this.ngZone.run(() => {
            this.notification.addErrorProblem(new ApplicationProblemType(error.error.type, error.error.title, error.error.detail, error.error.status, error.error.instance));
        });
    }
};
HttpApplicationProblemErrorService.ctorParameters = () => [
    { type: NotificationProvider },
    { type: NgZone }
];
HttpApplicationProblemErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpApplicationProblemErrorService_Factory() { return new HttpApplicationProblemErrorService(i0.ɵɵinject(i1.NotificationProvider), i0.ɵɵinject(i0.NgZone)); }, token: HttpApplicationProblemErrorService, providedIn: "root" });
HttpApplicationProblemErrorService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], HttpApplicationProblemErrorService);
export { HttpApplicationProblemErrorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1hcHBsaWNhdGlvbi1wcm9ibGVtLWVycm9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL2Vycm9yL3NlcnZpY2VzL2h0dHAtYXBwbGljYXRpb24tcHJvYmxlbS1lcnJvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBRzNFOzs7R0FHRztBQUlILElBQWEsa0NBQWtDLEdBQS9DLE1BQWEsa0NBQWtDO0lBRTNDOzs7O09BSUc7SUFDSCxZQUFvQixZQUFrQyxFQUFVLE1BQWM7UUFBMUQsaUJBQVksR0FBWixZQUFZLENBQXNCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFJLENBQUM7SUFFbkY7Ozs7O09BS0c7SUFDSCxZQUFZLENBQUMsS0FBZ0M7UUFDekMsT0FBTyxLQUFLLFlBQVksaUJBQWlCO1lBQ3JDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLDBCQUEwQjtZQUNoRSxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxLQUF3QjtRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQzdCLElBQUksc0JBQXNCLENBQ3RCLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUNoQixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFDakIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ2xCLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0osQ0FBQTs7WUEvQnFDLG9CQUFvQjtZQUFrQixNQUFNOzs7QUFQckUsa0NBQWtDO0lBSDlDLFVBQVUsQ0FBQztRQUNSLFVBQVUsRUFBRSxNQUFNO0tBQ3JCLENBQUM7R0FDVyxrQ0FBa0MsQ0FzQzlDO1NBdENZLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25Qcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9ub3RpZmljYXRpb24ucHJvdmlkZXInO1xuaW1wb3J0IHsgQXBwbGljYXRpb25Qcm9ibGVtVHlwZSB9IGZyb20gJy4uL3R5cGVzL2FwcGxpY2F0aW9uLXByb2JsZW0udHlwZSc7XG5pbXBvcnQgeyBFcnJvclByb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2Vycm9yLnByb3ZpZGVyJztcblxuLyoqXG4gKiBTZXJ2acOnbyBIdHRwQXBwbGljYXRpb25Qcm9ibGVtRXJyb3JTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSHR0cEFwcGxpY2F0aW9uUHJvYmxlbUVycm9yU2VydmljZSBpbXBsZW1lbnRzIEVycm9yUHJvdmlkZXIge1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGNvbnN0cnV0b3IgcmVzcG9uc8OhdmVsIHBvciBpbmpldGFyIHNlcnZpw6dvIE5vdGlmaWNhdGlvblByb3ZpZGVyXG4gICAgICogQHBhcmFtIHtOb3RpZmljYXRpb25Qcm92aWRlcn0gbm90aWZpY2F0aW9uXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub3RpZmljYXRpb246IE5vdGlmaWNhdGlvblByb3ZpZGVyLCBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7IH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcGVsYSBpZGVudGlmaWNhw6fDo28gZGUgZXJyb3NcbiAgICAgKiBAcHVibGljIFxuICAgICAqIEBwYXJhbSB7RXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAgICovXG4gICAgc2hvdWxkSGFuZGxlKGVycm9yOiBFcnJvciB8IEh0dHBFcnJvclJlc3BvbnNlKTogQm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlICYmIFxuICAgICAgICAgICAgZXJyb3IuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpID09PSAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJyAmJiBcbiAgICAgICAgICAgIGVycm9yLmVycm9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBwZWxhIGFkacOnw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpYyBcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoYW5kbGUoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogdm9pZCB7XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7IFxuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb24uYWRkRXJyb3JQcm9ibGVtKFxuICAgICAgICAgICAgICAgIG5ldyBBcHBsaWNhdGlvblByb2JsZW1UeXBlKFxuICAgICAgICAgICAgICAgICAgICBlcnJvci5lcnJvci50eXBlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvci5lcnJvci50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IuZGV0YWlsLFxuICAgICAgICAgICAgICAgICAgICBlcnJvci5lcnJvci5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmVycm9yLmluc3RhbmNlKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iXX0=