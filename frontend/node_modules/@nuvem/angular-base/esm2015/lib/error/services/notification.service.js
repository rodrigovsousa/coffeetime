import { __decorate } from "tslib";
import { NotificationProvider } from '../providers/notification.provider';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Class NotificationService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let NotificationService = class NotificationService extends NotificationProvider {
    /**
     * Metodo responsável po adicionar mensagem de erro
     * @param {string} message
     * @param {string} title
     * @returns void
     */
    addErrorMessage(message, title) {
        console.error(title + ' ' + message);
    }
    /**
     * Metodo responsável por adicionar o detalhamento do erro no console
     * @param {ApplicationProblemType} problem
     * @returns void
     */
    addErrorProblem(problem) {
        console.error(problem.title + ' ' + problem.detail);
    }
};
NotificationService.ɵfac = function NotificationService_Factory(t) { return ɵNotificationService_BaseFactory(t || NotificationService); };
NotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(); }, token: NotificationService, providedIn: "root" });
const ɵNotificationService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NotificationService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
export { NotificationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9lcnJvci9zZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFDLE1BQU8sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBb0IsU0FBUSxvQkFBb0I7QUFDN0QsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksZUFBZSxDQUFDLE9BQWUsRUFBRSxLQUFjO0FBQUksUUFDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxlQUFlLENBQUMsT0FBK0I7QUFBSSxRQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1RCxJQUFJLENBQUM7QUFDTCxDQUNDOzBJQUFBO0FBQ0Q7QUF0QmEsbUJBQW1CLG9CQUgvQixVQUFVLENBQUMsVUFDUixVQUFVLEVBQUUsTUFBTSxPQUNyQixDQUFDLElBQ1c7aUJBQW1CLENBcUIvQjs7Ozs7MEJBQ0Q7QUFBQyxTQXRCWSxtQkFBbUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUgfSBmcm9tICcuLi90eXBlcy9hcHBsaWNhdGlvbi1wcm9ibGVtLnR5cGUnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJvdmlkZXJ9ICBmcm9tICcuLi9wcm92aWRlcnMvbm90aWZpY2F0aW9uLnByb3ZpZGVyJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBDbGFzcyBOb3RpZmljYXRpb25TZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uU2VydmljZSBleHRlbmRzIE5vdGlmaWNhdGlvblByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG8gYWRpY2lvbmFyIG1lbnNhZ2VtIGRlIGVycm9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBhZGRFcnJvck1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmVycm9yKHRpdGxlICsgJyAnICsgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwb3IgYWRpY2lvbmFyIG8gZGV0YWxoYW1lbnRvIGRvIGVycm8gbm8gY29uc29sZVxuICAgICAqIEBwYXJhbSB7QXBwbGljYXRpb25Qcm9ibGVtVHlwZX0gcHJvYmxlbVxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBhZGRFcnJvclByb2JsZW0ocHJvYmxlbTogQXBwbGljYXRpb25Qcm9ibGVtVHlwZSk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmVycm9yKHByb2JsZW0udGl0bGUgKyAnICcgKyBwcm9ibGVtLmRldGFpbCk7XG4gICAgfVxuXG59XG4iXX0=