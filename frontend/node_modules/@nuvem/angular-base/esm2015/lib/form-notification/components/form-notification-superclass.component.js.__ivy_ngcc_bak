import { __decorate } from "tslib";
import { FormNotificationService } from '../services/form-notification.service';
import { Directive, Input } from "@angular/core";
import { FieldFormNotification } from '../types/field-form-notification.type';
let FormNotificationComponentSuperclass = class FormNotificationComponentSuperclass {
    /**
     * Metodo construtor responsavel por carregar o serviço de validação
     * @param formNotificationService
     */
    constructor(formNotificationService) {
        this.formNotificationService = formNotificationService;
    }
    /**
     * Metodo Inicial para subscrição no endpoint responsável por validar o formulário
     */
    ngOnInit() {
        this.subscription = this.formNotificationService
            .notifications(this.form, this.name)
            .subscribe((notification) => {
            if (notification instanceof FieldFormNotification) {
                this.message = notification.message;
            }
            else {
                this.message = null;
            }
        });
    }
    /**
     * Metodo responsavel por realizar a saida das subscrições do endpont de validação
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
};
FormNotificationComponentSuperclass.ctorParameters = () => [
    { type: FormNotificationService }
];
__decorate([
    Input()
], FormNotificationComponentSuperclass.prototype, "name", void 0);
__decorate([
    Input()
], FormNotificationComponentSuperclass.prototype, "form", void 0);
FormNotificationComponentSuperclass = __decorate([
    Directive({
        selector: 'form-notification-component-superclass'
    })
], FormNotificationComponentSuperclass);
export { FormNotificationComponentSuperclass };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24tc3VwZXJjbGFzcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tbm90aWZpY2F0aW9uL2NvbXBvbmVudHMvZm9ybS1ub3RpZmljYXRpb24tc3VwZXJjbGFzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxTQUFTLEVBQXFCLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdwRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUs5RSxJQUFhLG1DQUFtQyxHQUFoRCxNQUFhLG1DQUFtQztJQVU1Qzs7O09BR0c7SUFDSCxZQUFzQix1QkFBZ0Q7UUFBaEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUFHLENBQUM7SUFFMUU7O09BRUc7SUFDSCxRQUFRO1FBQ0osSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsdUJBQXVCO2FBQzNDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDbkMsU0FBUyxDQUFDLENBQUMsWUFBOEIsRUFBRSxFQUFFO1lBQzFDLElBQUksWUFBWSxZQUFZLHFCQUFxQixFQUFFO2dCQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7YUFDdkM7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7YUFDdkI7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDUCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BDLENBQUM7Q0FFSixDQUFBOztZQXhCa0QsdUJBQXVCOztBQVY3RDtJQUFSLEtBQUssRUFBRTtpRUFBYztBQUViO0lBQVIsS0FBSyxFQUFFO2lFQUFjO0FBTmIsbUNBQW1DO0lBSC9DLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx3Q0FBd0M7S0FDckQsQ0FBQztHQUNXLG1DQUFtQyxDQXNDL0M7U0F0Q1ksbUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPbkRlc3Ryb3ksIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBGb3JtTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vdHlwZXMvZm9ybS1ub3RpZmljYXRpb24udHlwZSc7XG5pbXBvcnQgeyBGaWVsZEZvcm1Ob3RpZmljYXRpb24gfSBmcm9tICcuLi90eXBlcy9maWVsZC1mb3JtLW5vdGlmaWNhdGlvbi50eXBlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdmb3JtLW5vdGlmaWNhdGlvbi1jb21wb25lbnQtc3VwZXJjbGFzcydcbn0pXG5leHBvcnQgY2xhc3MgRm9ybU5vdGlmaWNhdGlvbkNvbXBvbmVudFN1cGVyY2xhc3MgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gICAgQElucHV0KCkgbmFtZTogU3RyaW5nO1xuXG4gICAgQElucHV0KCkgZm9ybTogU3RyaW5nO1xuXG4gICAgbWVzc2FnZTogU3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGNvbnN0cnV0b3IgcmVzcG9uc2F2ZWwgcG9yIGNhcnJlZ2FyIG8gc2VydmnDp28gZGUgdmFsaWRhw6fDo29cbiAgICAgKiBAcGFyYW0gZm9ybU5vdGlmaWNhdGlvblNlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZm9ybU5vdGlmaWNhdGlvblNlcnZpY2U6IEZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIEluaWNpYWwgcGFyYSBzdWJzY3Jpw6fDo28gbm8gZW5kcG9pbnQgcmVzcG9uc8OhdmVsIHBvciB2YWxpZGFyIG8gZm9ybXVsw6FyaW9cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAubm90aWZpY2F0aW9ucyh0aGlzLmZvcm0sIHRoaXMubmFtZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKG5vdGlmaWNhdGlvbjogRm9ybU5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24gaW5zdGFuY2VvZiBGaWVsZEZvcm1Ob3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbm90aWZpY2F0aW9uLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc2F2ZWwgcG9yIHJlYWxpemFyIGEgc2FpZGEgZGFzIHN1YnNjcmnDp8O1ZXMgZG8gZW5kcG9udCBkZSB2YWxpZGHDp8Ojb1xuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxufVxuIl19