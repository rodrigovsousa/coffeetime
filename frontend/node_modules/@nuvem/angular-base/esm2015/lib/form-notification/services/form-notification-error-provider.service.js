import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { FormNotificationService } from './form-notification.service';
import { FieldFormNotification } from '../types/field-form-notification.type';
import * as i0 from "@angular/core";
import * as i1 from "./form-notification.service";
/**
 * Provedor de error para criação de erros de notificação.
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let FormNotificationErrorProvider = class FormNotificationErrorProvider {
    /**
     * Método construtor
     * @param {FormtNotificationService} formNotificationService
     * @constructor
     */
    constructor(formNotificationService) {
        this.formNotificationService = formNotificationService;
    }
    /**
     * Método responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    shouldHandle(error) {
        return error instanceof HttpErrorResponse &&
            error.headers.get('Content-Type') === 'application/problem+json' &&
            error.error && (error.error.violations || error.error.fieldErrors);
    }
    /**
     * Método para emissão de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error) {
        if (error.error.violations) {
            this.violation(error.url, error.error.violations);
        }
        if (error.error.fieldErrors) {
            this.violation(error.url, error.error.fieldErrors);
        }
    }
    /**
     * Método iteração de violações e emissão de erros
     * @param values
     */
    violation(form, values) {
        values.forEach(violation => this.formNotificationService.notify(new FieldFormNotification(form, violation.field, violation.message)));
    }
};
FormNotificationErrorProvider.ɵfac = function FormNotificationErrorProvider_Factory(t) { return new (t || FormNotificationErrorProvider)(ɵngcc0.ɵɵinject(FormNotificationService)); };
FormNotificationErrorProvider.ctorParameters = () => [
    { type: FormNotificationService }
];
FormNotificationErrorProvider.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormNotificationErrorProvider_Factory() { return new FormNotificationErrorProvider(i0.ɵɵinject(i1.FormNotificationService)); }, token: FormNotificationErrorProvider, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormNotificationErrorProvider, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: FormNotificationService }]; }, null); })();
export { FormNotificationErrorProvider };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24tZXJyb3ItcHJvdmlkZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2Zvcm0tbm90aWZpY2F0aW9uL3NlcnZpY2VzL2Zvcm0tbm90aWZpY2F0aW9uLWVycm9yLXByb3ZpZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFdEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDOUU7QUFFZ0M7QUFEaEM7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFJSCxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE2QjtBQUFHLElBRXpDO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksWUFBb0IsdUJBQWdEO0FBQUksUUFBcEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtBQUFDLElBQUcsQ0FBQztBQUM3RSxJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUFZLENBQUMsS0FBZ0M7QUFBSSxRQUM3QyxPQUFPLEtBQUssWUFBWSxpQkFBaUI7QUFDakQsWUFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSywwQkFBMEI7QUFDNUUsWUFBWSxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvRSxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxNQUFNLENBQUMsS0FBd0I7QUFBSSxRQUMvQixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO0FBQ3BDLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDOUQsU0FBUztBQUNULFFBQVEsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtBQUNyQyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQy9ELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFNBQVMsQ0FBQyxJQUFZLEVBQUUsTUFBOEM7QUFDMUUsUUFBUSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQ3ZCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQy9CLElBQUkscUJBQXFCLENBQ3JCLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsSUFBSSxDQUFDO0FBQ0wsQ0FDQztzTEFBQTtBQUNEO0FBQXVELFlBekNOLHVCQUF1QjtBQUFHO0FBQzNFO0FBUmEsNkJBQTZCLG9CQUh6QyxVQUFVLENBQUMsVUFDUixVQUFVLEVBQUU7QUFBTSxPQUNyQixDQUFDLElBQ1c7ZUFBNkIsQ0ErQ3pDOzs7aUZBQ0Q7QUFBQyxTQWhEWSw2QkFBNkI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRm9ybU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4uLy4uL2Vycm9yL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5pbXBvcnQgeyBGaWVsZEZvcm1Ob3RpZmljYXRpb24gfSBmcm9tICcuLi90eXBlcy9maWVsZC1mb3JtLW5vdGlmaWNhdGlvbi50eXBlJztcblxuLyoqXG4gKiBQcm92ZWRvciBkZSBlcnJvciBwYXJhIGNyaWHDp8OjbyBkZSBlcnJvcyBkZSBub3RpZmljYcOnw6NvLlxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1Ob3RpZmljYXRpb25FcnJvclByb3ZpZGVyIGltcGxlbWVudHMgRXJyb3JQcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIGNvbnN0cnV0b3JcbiAgICAgKiBAcGFyYW0ge0Zvcm10Tm90aWZpY2F0aW9uU2VydmljZX0gZm9ybU5vdGlmaWNhdGlvblNlcnZpY2VcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlOiBGb3JtTm90aWZpY2F0aW9uU2VydmljZSkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGlkZW50aWZpY2HDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0Vycm9yIHwgSHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIHNob3VsZEhhbmRsZShlcnJvcjogRXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZSk6IEJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSAmJlxuICAgICAgICAgICAgZXJyb3IuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpID09PSAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJyAmJlxuICAgICAgICAgICAgZXJyb3IuZXJyb3IgJiYgKGVycm9yLmVycm9yLnZpb2xhdGlvbnMgfHwgZXJyb3IuZXJyb3IuZmllbGRFcnJvcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcGFyYSBlbWlzc8OjbyBkZSBlcnJvc1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoYW5kbGUoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogdm9pZCB7XG4gICAgICAgIGlmIChlcnJvci5lcnJvci52aW9sYXRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnZpb2xhdGlvbihlcnJvci51cmwsIGVycm9yLmVycm9yLnZpb2xhdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvci5lcnJvci5maWVsZEVycm9ycykge1xuICAgICAgICAgICAgdGhpcy52aW9sYXRpb24oZXJyb3IudXJsLCBlcnJvci5lcnJvci5maWVsZEVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIGl0ZXJhw6fDo28gZGUgdmlvbGHDp8O1ZXMgZSBlbWlzc8OjbyBkZSBlcnJvc1xuICAgICAqIEBwYXJhbSB2YWx1ZXNcbiAgICAgKi9cbiAgICB2aW9sYXRpb24oZm9ybTogc3RyaW5nLCB2YWx1ZXM6ICh7IGZpZWxkOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyB9KVtdKSB7XG4gICAgICAgIHZhbHVlcy5mb3JFYWNoKHZpb2xhdGlvbiA9PlxuICAgICAgICAgICAgdGhpcy5mb3JtTm90aWZpY2F0aW9uU2VydmljZS5ub3RpZnkoXG4gICAgICAgICAgICAgICAgbmV3IEZpZWxkRm9ybU5vdGlmaWNhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgZm9ybSwgdmlvbGF0aW9uLmZpZWxkLCB2aW9sYXRpb24ubWVzc2FnZSkpKTtcbiAgICB9XG5cbn1cbiJdfQ==