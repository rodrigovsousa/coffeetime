import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { FormNotificationType } from '../types/form-notification.type';
import { filter } from 'rxjs/operators';
import { FieldFormNotification } from '../types/field-form-notification.type';
import * as i0 from "@angular/core";
/**
 * Serviço ṕara tratar notificações em formulários
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let FormNotificationService = class FormNotificationService {
    constructor() {
        /**
         * @type {Subject<FormNotification>()}
         */
        this.formNotifications = new Subject();
    }
    /**
     * Método para criação de inscrição de campos presentes nos formulários
     * @param {string} field
     * @returns Observable<ResponseHandle>
     */
    notifications(form, field) {
        return this.formNotifications.pipe(filter((violation) => {
            return (!form || violation.form === form) && (violation.type === FormNotificationType.CLEAN || (violation instanceof FieldFormNotification &&
                violation.field === field));
        }));
    }
    notify(notification) {
        this.formNotifications.next(notification);
    }
};
FormNotificationService.ɵfac = function FormNotificationService_Factory(t) { return new (t || FormNotificationService)(); };
FormNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormNotificationService_Factory() { return new FormNotificationService(); }, token: FormNotificationService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
export { FormNotificationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2Zvcm0tbm90aWZpY2F0aW9uL3NlcnZpY2VzL2Zvcm0tbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQW9CLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDekYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFJSCxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtBQUNwQyxJQURBO0FBQWdCLFFBRVo7QUFDSjtBQUNJLFdBQUc7QUFDUCxRQUFJLHNCQUFpQixHQUNiLElBQUksT0FBTyxFQUFvQixDQUFDO0FBQ3hDLEtBb0JDO0FBQ0QsSUFwQkk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxhQUFhLENBQUMsSUFBWSxFQUFFLEtBQWE7QUFBSSxRQUN6QyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUNyQyxDQUFDLFNBQTJCLEVBQUUsRUFBRTtBQUM1QyxZQUFnQixPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssb0JBQW9CLENBQUMsS0FBSyxJQUFJLENBQzNGLFNBQVMsWUFBWSxxQkFBcUI7QUFDOUQsZ0JBQW9CLFNBQVMsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUMvQyxRQUFZLENBQUMsQ0FDSixDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLE1BQU0sQ0FBQyxZQUE4QjtBQUN6QyxRQUFRLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDbEQsSUFBSSxDQUFDO0FBQ0wsQ0FDQzs0SEFBQTtBQUNEO0FBNUJhLHVCQUF1QixvQkFIbkMsVUFBVSxDQUFDLFVBQ1IsVUFBVSxFQUFFO0FBQU0sT0FDckIsQ0FBQyxJQUNXO1NBQXVCLENBMkJuQzs7O2dEQUNEO0FBQUMsU0E1QlksdUJBQXVCO0FBRXBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRm9ybU5vdGlmaWNhdGlvbiwgRm9ybU5vdGlmaWNhdGlvblR5cGUgfSBmcm9tICcuLi90eXBlcy9mb3JtLW5vdGlmaWNhdGlvbi50eXBlJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZpZWxkRm9ybU5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3R5cGVzL2ZpZWxkLWZvcm0tbm90aWZpY2F0aW9uLnR5cGUnO1xuXG4vKipcbiAqIFNlcnZpw6dvIOG5lWFyYSB0cmF0YXIgbm90aWZpY2HDp8O1ZXMgZW0gZm9ybXVsw6FyaW9zXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybU5vdGlmaWNhdGlvblNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1N1YmplY3Q8Rm9ybU5vdGlmaWNhdGlvbj4oKX1cbiAgICAgKi9cbiAgICBmb3JtTm90aWZpY2F0aW9uczogU3ViamVjdDxGb3JtTm90aWZpY2F0aW9uPiA9XG4gICAgICAgIG5ldyBTdWJqZWN0PEZvcm1Ob3RpZmljYXRpb24+KCk7XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHBhcmEgY3JpYcOnw6NvIGRlIGluc2NyacOnw6NvIGRlIGNhbXBvcyBwcmVzZW50ZXMgbm9zIGZvcm11bMOhcmlvc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZFxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8UmVzcG9uc2VIYW5kbGU+XG4gICAgICovXG4gICAgbm90aWZpY2F0aW9ucyhmb3JtOiBTdHJpbmcsIGZpZWxkOiBTdHJpbmcpOiBPYnNlcnZhYmxlPEZvcm1Ob3RpZmljYXRpb24+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybU5vdGlmaWNhdGlvbnMucGlwZShmaWx0ZXIoXG4gICAgICAgICAgICAodmlvbGF0aW9uOiBGb3JtTm90aWZpY2F0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICghZm9ybSB8fCB2aW9sYXRpb24uZm9ybSA9PT0gZm9ybSkgJiYgKHZpb2xhdGlvbi50eXBlID09PSBGb3JtTm90aWZpY2F0aW9uVHlwZS5DTEVBTiB8fCAoXG4gICAgICAgICAgICAgICAgICAgIHZpb2xhdGlvbiBpbnN0YW5jZW9mIEZpZWxkRm9ybU5vdGlmaWNhdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICB2aW9sYXRpb24uZmllbGQgPT09IGZpZWxkKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgbm90aWZ5KG5vdGlmaWNhdGlvbjogRm9ybU5vdGlmaWNhdGlvbikge1xuICAgICAgICB0aGlzLmZvcm1Ob3RpZmljYXRpb25zLm5leHQobm90aWZpY2F0aW9uKTtcbiAgICB9XG5cbn1cbiJdfQ==