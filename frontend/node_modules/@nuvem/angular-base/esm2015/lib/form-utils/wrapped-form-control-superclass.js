import { FormControl } from "@angular/forms";
import { FormControlSuperclass } from "./form-control-superclass";
export class WrappedFormControlSuperclass extends FormControlSuperclass {
    constructor(injector) {
        super(injector);
        this.formControl = new FormControl();
        this.subscribeTo(this.formControl.valueChanges, (value) => {
            this.emitOutgoingValue(this.innerToOuter(value));
        });
        this.formControl.markAsTouched = () => {
            this.onTouched();
        };
    }
    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */
    handleIncomingValue(value) {
        this.formControl.setValue(this.outerToInner(value), { emitEvent: false });
    }
    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this.formControl.disable({ emitEvent: false });
        }
        else {
            this.formControl.enable({ emitEvent: false });
        }
        super.setDisabledState(this.isDisabled);
    }
    /** Override this to modify a value coming from the outside to the format needed within this component. */
    outerToInner(value) {
        return value;
    }
    /** Override this to modify a value coming from within this component to the format expected on the outside. */
    innerToOuter(value) {
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1mb3JtLWNvbnRyb2wtc3VwZXJjbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZm9ybS11dGlscy93cmFwcGVkLWZvcm0tY29udHJvbC1zdXBlcmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxNQUFNLE9BQWdCLDRCQUErRCxTQUFRLHFCQUFnQztJQUl6SCxZQUFZLFFBQWtCO1FBQzFCLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUhwQixnQkFBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFJNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3RELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFRCxzSEFBc0g7SUFDdEgsbUJBQW1CLENBQUMsS0FBZ0I7UUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCx3SEFBd0g7SUFDeEgsZ0JBQWdCLENBQUMsVUFBbUI7UUFDaEMsSUFBSSxVQUFVLEVBQUU7WUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsMEdBQTBHO0lBQ2hHLFlBQVksQ0FBQyxLQUFnQjtRQUNuQyxPQUFRLEtBQTBCLENBQUM7SUFDdkMsQ0FBQztJQUVELCtHQUErRztJQUNyRyxZQUFZLENBQUMsS0FBZ0I7UUFDbkMsT0FBUSxLQUEwQixDQUFDO0lBQ3ZDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBGb3JtQ29udHJvbFN1cGVyY2xhc3MgfSBmcm9tIFwiLi9mb3JtLWNvbnRyb2wtc3VwZXJjbGFzc1wiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgV3JhcHBlZEZvcm1Db250cm9sU3VwZXJjbGFzczxPdXRlclR5cGUsIElubmVyVHlwZSA9IE91dGVyVHlwZT4gZXh0ZW5kcyBGb3JtQ29udHJvbFN1cGVyY2xhc3M8T3V0ZXJUeXBlPiB7XG5cbiAgICBmb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgpO1xuXG4gICAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUbyh0aGlzLmZvcm1Db250cm9sLnZhbHVlQ2hhbmdlcywgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXRPdXRnb2luZ1ZhbHVlKHRoaXMuaW5uZXJUb091dGVyKHZhbHVlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZvcm1Db250cm9sLm1hcmtBc1RvdWNoZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKiBDYWxsZWQgYXMgYW5ndWxhciBwcm9wYWdhdGVzIHZhbHVlcyBjaGFuZ2VzIHRvIHRoaXMgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYC4gWW91IG5vcm1hbGx5IGRvIG5vdCBuZWVkIHRvIHVzZSBpdC4gKi9cbiAgICBoYW5kbGVJbmNvbWluZ1ZhbHVlKHZhbHVlOiBPdXRlclR5cGUpIHtcbiAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5zZXRWYWx1ZSh0aGlzLm91dGVyVG9Jbm5lcih2YWx1ZSksIHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICAvKiogQ2FsbGVkIGFzIGFuZ3VsYXIgcHJvcGFnYXRlcyBkaXNhYmxlZCBjaGFuZ2VzIHRvIHRoaXMgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYC4gWW91IG5vcm1hbGx5IGRvIG5vdCBuZWVkIHRvIHVzZSBpdC4gKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuZGlzYWJsZSh7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1Db250cm9sLmVuYWJsZSh7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuc2V0RGlzYWJsZWRTdGF0ZSh0aGlzLmlzRGlzYWJsZWQpO1xuICAgIH1cblxuICAgIC8qKiBPdmVycmlkZSB0aGlzIHRvIG1vZGlmeSBhIHZhbHVlIGNvbWluZyBmcm9tIHRoZSBvdXRzaWRlIHRvIHRoZSBmb3JtYXQgbmVlZGVkIHdpdGhpbiB0aGlzIGNvbXBvbmVudC4gKi9cbiAgICBwcm90ZWN0ZWQgb3V0ZXJUb0lubmVyKHZhbHVlOiBPdXRlclR5cGUpOiBJbm5lclR5cGUge1xuICAgICAgICByZXR1cm4gKHZhbHVlIGFzIGFueSkgYXMgSW5uZXJUeXBlO1xuICAgIH1cblxuICAgIC8qKiBPdmVycmlkZSB0aGlzIHRvIG1vZGlmeSBhIHZhbHVlIGNvbWluZyBmcm9tIHdpdGhpbiB0aGlzIGNvbXBvbmVudCB0byB0aGUgZm9ybWF0IGV4cGVjdGVkIG9uIHRoZSBvdXRzaWRlLiAqL1xuICAgIHByb3RlY3RlZCBpbm5lclRvT3V0ZXIodmFsdWU6IElubmVyVHlwZSk6IE91dGVyVHlwZSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgYXMgYW55KSBhcyBPdXRlclR5cGU7XG4gICAgfVxufVxuIl19