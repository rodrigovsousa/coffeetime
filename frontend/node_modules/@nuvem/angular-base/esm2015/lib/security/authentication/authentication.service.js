import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { AUTH_CONFIG } from '../config/auth-config';
import { BehaviorSubject } from 'rxjs';
import { Authentication } from './authentication';
import { HttpClient } from '@angular/common/http';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
import * as i2 from "@angular/common/http";
export function isAuthenticated(config) {
    return null !== config.storage.getItem(config.userStorageIndex);
}
;
export function redirect(config) {
    window.location.href = config.loginUrl;
    ;
}
;
/**
 * Serviço de autenticação
 * @class
 */
let AuthenticationService = class AuthenticationService extends Authentication {
    constructor(config, http) {
        super();
        this.config = config;
        this.http = http;
        this.loginNotifications = new BehaviorSubject(this.getUser());
    }
    /**
     * Método para verificar se o usuário esta autenticado na aplicação
     * @returns boolean
     * @public
     */
    isAuthenticated() {
        return isAuthenticated(this.config);
    }
    /**
     * Método responsável por realizar redirecionamentos
     * @returns void
     * @public
     */
    redirect() {
        redirect(this.config);
    }
    /**
     * Método responsável pelo login da aplicação
     * @public
     * @param {User} user
     * @returns Observable<any>
     */
    login() {
        this.getUserDetails()
            .subscribe((user) => {
            this.setUser(user);
            this.loginNotifications.next(user);
        });
    }
    /**
     * Método responsável pelo logou da aplicação
     * @public
     * @returns void
     */
    logout() {
        this.loginNotifications.next(null);
        this.config.storage.removeItem(this.config.userStorageIndex);
        window.location.href = this.config.logoutUrl;
    }
    /**
     * Método responsável por obter os dados do usuário logado
     * @public
     * @returns Observable<any>
     */
    getUserDetails() {
        return this.http.get(this.config.baseUrl + this.config.detailsUrl);
    }
    setUser(user) {
        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));
    }
    getUser() {
        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));
    }
    getLoginNotifications() {
        return this.loginNotifications.pipe(filter((value) => value != null));
    }
};
AuthenticationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] },
    { type: HttpClient }
];
AuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticationService_Factory() { return new AuthenticationService(i0.ɵɵinject(i1.AUTH_CONFIG), i0.ɵɵinject(i2.HttpClient)); }, token: AuthenticationService, providedIn: "root" });
AuthenticationService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __param(0, Inject(AUTH_CONFIG))
], AuthenticationService);
export { AuthenticationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvc2VjdXJpdHkvYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hFLE9BQU8sRUFBdUIsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFPLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRTdDLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBa0I7SUFDOUMsT0FBTyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUFBLENBQUM7QUFFRixNQUFNLFVBQVUsUUFBUSxDQUFDLE1BQWtCO0lBQ3ZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFBQSxDQUFDO0FBQzVDLENBQUM7QUFBQSxDQUFDO0FBRUY7OztHQUdHO0FBSUgsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBc0MsU0FBUSxjQUFpQjtJQUl4RSxZQUF5QyxNQUFrQixFQUFVLElBQWdCO1FBQ2pGLEtBQUssRUFBRSxDQUFDO1FBRDZCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBRnJGLHVCQUFrQixHQUEwQixJQUFJLGVBQWUsQ0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUl0RixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGVBQWU7UUFDWCxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRO1FBQ0osUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLO1FBQ0QsSUFBSSxDQUFDLGNBQWMsRUFBRTthQUNoQixTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU07UUFDRixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU8sT0FBTyxDQUFDLElBQU87UUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Q0FFSixDQUFBOzs0Q0FwRWdCLE1BQU0sU0FBQyxXQUFXO1lBQTRDLFVBQVU7OztBQUo1RSxxQkFBcUI7SUFIakMsVUFBVSxDQUFDO1FBQ1IsVUFBVSxFQUFFLE1BQU07S0FDckIsQ0FBQztJQUtlLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBSnZCLHFCQUFxQixDQXdFakM7U0F4RVkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhDb25maWcsIEFVVEhfQ09ORklHIH0gZnJvbSAnLi4vY29uZmlnL2F1dGgtY29uZmlnJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vdXNlcic7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4vYXV0aGVudGljYXRpb24nO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IHRhcCwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNBdXRoZW50aWNhdGVkKGNvbmZpZzogQXV0aENvbmZpZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBudWxsICE9PSBjb25maWcuc3RvcmFnZS5nZXRJdGVtKGNvbmZpZy51c2VyU3RvcmFnZUluZGV4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWRpcmVjdChjb25maWc6IEF1dGhDb25maWcpOiB2b2lkIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGNvbmZpZy5sb2dpblVybDs7XG59O1xuXG4vKipcbiAqIFNlcnZpw6dvIGRlIGF1dGVudGljYcOnw6NvXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb25TZXJ2aWNlPFUgZXh0ZW5kcyBVc2VyPiBleHRlbmRzIEF1dGhlbnRpY2F0aW9uPFU+IHtcblxuICAgIGxvZ2luTm90aWZpY2F0aW9uczogQmVoYXZpb3JTdWJqZWN0PFVzZXI+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxVc2VyPih0aGlzLmdldFVzZXIoKSk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEFVVEhfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogQXV0aENvbmZpZywgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBwYXJhIHZlcmlmaWNhciBzZSBvIHVzdcOhcmlvIGVzdGEgYXV0ZW50aWNhZG8gbmEgYXBsaWNhw6fDo29cbiAgICAgKiBAcmV0dXJucyBib29sZWFuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGlzQXV0aGVudGljYXRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGlzQXV0aGVudGljYXRlZCh0aGlzLmNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJlYWxpemFyIHJlZGlyZWNpb25hbWVudG9zXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICByZWRpcmVjdCgpIHtcbiAgICAgICAgcmVkaXJlY3QodGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBlbG8gbG9naW4gZGEgYXBsaWNhw6fDo29cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtVc2VyfSB1c2VyXG4gICAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxhbnk+XG4gICAgICovXG4gICAgbG9naW4oKSB7XG4gICAgICAgIHRoaXMuZ2V0VXNlckRldGFpbHMoKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgodXNlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VXNlcih1c2VyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy5uZXh0KHVzZXIpXG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwZWxvIGxvZ291IGRhIGFwbGljYcOnw6NvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBsb2dvdXQoKSB7XG4gICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLm5leHQobnVsbCk7XG4gICAgICAgIHRoaXMuY29uZmlnLnN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmNvbmZpZy51c2VyU3RvcmFnZUluZGV4KTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0aGlzLmNvbmZpZy5sb2dvdXRVcmw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIG9idGVyIG9zIGRhZG9zIGRvIHVzdcOhcmlvIGxvZ2Fkb1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPGFueT5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckRldGFpbHMoKTogT2JzZXJ2YWJsZTxVPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFU+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyB0aGlzLmNvbmZpZy5kZXRhaWxzVXJsKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFVzZXIodXNlcjogVSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5zdG9yYWdlLnNldEl0ZW0odGhpcy5jb25maWcudXNlclN0b3JhZ2VJbmRleCwgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xuICAgIH1cblxuICAgIGdldFVzZXIoKTogVSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuY29uZmlnLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmNvbmZpZy51c2VyU3RvcmFnZUluZGV4KSk7XG4gICAgfVxuXG4gICAgZ2V0TG9naW5Ob3RpZmljYXRpb25zKCk6IE9ic2VydmFibGU8VXNlcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMucGlwZShmaWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAhPSBudWxsKSk7XG4gICAgfVxuXG59XG4iXX0=