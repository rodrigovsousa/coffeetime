import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { AUTH_CONFIG } from '../config/auth-config';
import { BehaviorSubject } from 'rxjs';
import { Authentication } from './authentication';
import { HttpClient } from '@angular/common/http';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
import * as i2 from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
export function isAuthenticated(config) {
    return null !== config.storage.getItem(config.userStorageIndex);
}
;
export function redirect(config) {
    window.location.href = config.loginUrl;
    ;
}
;
/**
 * Serviço de autenticação
 * @class
 */
let AuthenticationService = class AuthenticationService extends Authentication {
    constructor(config, http) {
        super();
        this.config = config;
        this.http = http;
        this.loginNotifications = new BehaviorSubject(this.getUser());
    }
    /**
     * Método para verificar se o usuário esta autenticado na aplicação
     * @returns boolean
     * @public
     */
    isAuthenticated() {
        return isAuthenticated(this.config);
    }
    /**
     * Método responsável por realizar redirecionamentos
     * @returns void
     * @public
     */
    redirect() {
        redirect(this.config);
    }
    /**
     * Método responsável pelo login da aplicação
     * @public
     * @param {User} user
     * @returns Observable<any>
     */
    login() {
        this.getUserDetails()
            .subscribe((user) => {
            this.setUser(user);
            this.loginNotifications.next(user);
        });
    }
    /**
     * Método responsável pelo logou da aplicação
     * @public
     * @returns void
     */
    logout() {
        this.loginNotifications.next(null);
        this.config.storage.removeItem(this.config.userStorageIndex);
        window.location.href = this.config.logoutUrl;
    }
    /**
     * Método responsável por obter os dados do usuário logado
     * @public
     * @returns Observable<any>
     */
    getUserDetails() {
        return this.http.get(this.config.baseUrl + this.config.detailsUrl);
    }
    setUser(user) {
        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));
    }
    getUser() {
        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));
    }
    getLoginNotifications() {
        return this.loginNotifications.pipe(filter((value) => value != null));
    }
};
AuthenticationService.ɵfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(ɵngcc0.ɵɵinject(AUTH_CONFIG), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
AuthenticationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] },
    { type: HttpClient }
];
AuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticationService_Factory() { return new AuthenticationService(i0.ɵɵinject(i1.AUTH_CONFIG), i0.ɵɵinject(i2.HttpClient)); }, token: AuthenticationService, providedIn: "root" });
AuthenticationService = __decorate([ __param(0, Inject(AUTH_CONFIG))
], AuthenticationService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthenticationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_CONFIG]
            }] }, { type: ɵngcc1.HttpClient }]; }, null); })();
export { AuthenticationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL3NlY3VyaXR5L2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBYyxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRSxPQUFPLEVBQXVCLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBTyxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QztBQUNvQztBQUNsQjs7O0FBRGxCLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBa0I7QUFBSSxJQUNsRCxPQUFPLElBQUksS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBQUEsQ0FBQztBQUVGLE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBa0I7QUFBSSxJQUMzQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQUMsSUFBRCxDQUFDO0FBQzVDLENBQUM7QUFBQSxDQUFDO0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUlILElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXNDLFNBQVEsY0FBaUI7QUFDNUUsSUFHSSxZQUF5QyxNQUFrQixFQUFVLElBQWdCO0FBQ3pGLFFBQVEsS0FBSyxFQUFFLENBQUM7QUFDaEIsUUFGNkMsV0FBTSxHQUFOLE1BQU0sQ0FBWTtBQUFDLFFBQVMsU0FBSSxHQUFKLElBQUks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IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRoQ29uZmlnLCBBVVRIX0NPTkZJRyB9IGZyb20gJy4uL2NvbmZpZy9hdXRoLWNvbmZpZyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyB0YXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZChjb25maWc6IEF1dGhDb25maWcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gbnVsbCAhPT0gY29uZmlnLnN0b3JhZ2UuZ2V0SXRlbShjb25maWcudXNlclN0b3JhZ2VJbmRleCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVkaXJlY3QoY29uZmlnOiBBdXRoQ29uZmlnKTogdm9pZCB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBjb25maWcubG9naW5Vcmw7O1xufTtcblxuLyoqXG4gKiBTZXJ2acOnbyBkZSBhdXRlbnRpY2HDp8Ojb1xuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uU2VydmljZTxVIGV4dGVuZHMgVXNlcj4gZXh0ZW5kcyBBdXRoZW50aWNhdGlvbjxVPiB7XG5cbiAgICBsb2dpbk5vdGlmaWNhdGlvbnM6IEJlaGF2aW9yU3ViamVjdDxVc2VyPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VXNlcj4odGhpcy5nZXRVc2VyKCkpO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChBVVRIX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEF1dGhDb25maWcsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcGFyYSB2ZXJpZmljYXIgc2UgbyB1c3XDoXJpbyBlc3RhIGF1dGVudGljYWRvIG5hIGFwbGljYcOnw6NvXG4gICAgICogQHJldHVybnMgYm9vbGVhblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpc0F1dGhlbnRpY2F0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc0F1dGhlbnRpY2F0ZWQodGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZWFsaXphciByZWRpcmVjaW9uYW1lbnRvc1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcmVkaXJlY3QoKSB7XG4gICAgICAgIHJlZGlyZWN0KHRoaXMuY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwZWxvIGxvZ2luIGRhIGFwbGljYcOnw6NvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7VXNlcn0gdXNlclxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8YW55PlxuICAgICAqL1xuICAgIGxvZ2luKCkge1xuICAgICAgICB0aGlzLmdldFVzZXJEZXRhaWxzKClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHVzZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFVzZXIodXNlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMubmV4dCh1c2VyKVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcGVsbyBsb2dvdSBkYSBhcGxpY2HDp8Ojb1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbG9nb3V0KCkge1xuICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy5uZXh0KG51bGwpO1xuICAgICAgICB0aGlzLmNvbmZpZy5zdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5jb25maWcudXNlclN0b3JhZ2VJbmRleCk7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy5jb25maWcubG9nb3V0VXJsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciBvYnRlciBvcyBkYWRvcyBkbyB1c3XDoXJpbyBsb2dhZG9cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxhbnk+XG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJEZXRhaWxzKCk6IE9ic2VydmFibGU8VT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxVPih0aGlzLmNvbmZpZy5iYXNlVXJsICsgdGhpcy5jb25maWcuZGV0YWlsc1VybCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRVc2VyKHVzZXI6IFUpIHtcbiAgICAgICAgdGhpcy5jb25maWcuc3RvcmFnZS5zZXRJdGVtKHRoaXMuY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcbiAgICB9XG5cbiAgICBnZXRVc2VyKCk6IFUge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmNvbmZpZy5zdG9yYWdlLmdldEl0ZW0odGhpcy5jb25maWcudXNlclN0b3JhZ2VJbmRleCkpO1xuICAgIH1cblxuICAgIGdldExvZ2luTm90aWZpY2F0aW9ucygpOiBPYnNlcnZhYmxlPFVzZXI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnBpcGUoZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgIT0gbnVsbCkpO1xuICAgIH1cblxufVxuIl19