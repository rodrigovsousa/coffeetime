import { __decorate } from "tslib";
import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';
import { Authorization } from './authorization';
import { Authentication } from '../authentication';
/**
 * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.
 * @class
 */
let HasRoleDirective = class HasRoleDirective {
    /**
     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança
     * @param {TemplateRef<any>} templateRef
     * @param {ViewContainerRef} viewContainer
     * @param {Authorization} authorization
     * @param {Authentication<User>} authentication
     */
    constructor(templateRef, viewContainer, authorization, authentication) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authorization = authorization;
        this.authentication = authentication;
    }
    /**
     * Propriedade para identificar regras de acesso aos itens
     * @type {string}
     */
    set hasRole(hasRole) {
        this.viewContainer.clear();
        if (hasRole) {
            if (this.loginNotifications)
                this.loginNotifications.unsubscribe();
            this.loginNotifications = this.authentication.getLoginNotifications().subscribe(() => {
                if (this.authorization.hasRole(hasRole)) {
                    this.viewContainer.clear();
                    this.viewContainer.createEmbeddedView(this.templateRef);
                }
            });
        }
        else {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
    }
    ngOnDestroy() {
        this.loginNotifications.unsubscribe();
    }
};
HasRoleDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Authorization },
    { type: Authentication }
];
__decorate([
    Input()
], HasRoleDirective.prototype, "hasRole", null);
HasRoleDirective = __decorate([
    Directive({
        selector: '[hasRole]'
    })
], HasRoleDirective);
export { HasRoleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL2FuZ3VsYXItYmFzZS8iLCJzb3VyY2VzIjpbImxpYi9zZWN1cml0eS9hdXRoZW50aWNhdGlvbi9hdXRob3JpemF0aW9uL2hhcy1yb2xlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSW5EOzs7R0FHRztBQUlILElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBSXpCOzs7Ozs7T0FNRztJQUNILFlBQ1ksV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsYUFBNEIsRUFDNUIsY0FBb0M7UUFIcEMsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixtQkFBYyxHQUFkLGNBQWMsQ0FBc0I7SUFBSSxDQUFDO0lBRXJEOzs7T0FHRztJQUNNLElBQUksT0FBTyxDQUFDLE9BQTBCO1FBQzNDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0IsSUFBSSxPQUFPLEVBQUU7WUFDVCxJQUFJLElBQUksQ0FBQyxrQkFBa0I7Z0JBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25FLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDakYsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzNEO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDTjthQUFNO1lBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0Q7SUFDTCxDQUFDO0lBR0QsV0FBVztRQUNQLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0NBRUosQ0FBQTs7WUE3QjRCLFdBQVc7WUFDVCxnQkFBZ0I7WUFDaEIsYUFBYTtZQUNaLGNBQWM7O0FBTWpDO0lBQVIsS0FBSyxFQUFFOytDQWFQO0FBbENRLGdCQUFnQjtJQUg1QixTQUFTLENBQUU7UUFDUixRQUFRLEVBQUUsV0FBVztLQUN4QixDQUFDO0dBQ1csZ0JBQWdCLENBeUM1QjtTQXpDWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRob3JpemF0aW9uIH0gZnJvbSAnLi9hdXRob3JpemF0aW9uJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi4vYXV0aGVudGljYXRpb24nO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL3VzZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogSGFzUm9sZURpcmVjdGl2ZSBkaXJldGl2YSBwYXJhIGNoZWNhZ2VtIGRhIGV4aXN0w6puY2lhIGRlIHBlcm1pc3PDtWVzIGRlIGFjZXNzbyBwYXJhIG8gdXN1w6FyaW8gbG9nYWRvLlxuICogQGNsYXNzXG4gKi9cbkBEaXJlY3RpdmUoIHtcbiAgICBzZWxlY3RvcjogJ1toYXNSb2xlXSdcbn0pXG5leHBvcnQgY2xhc3MgSGFzUm9sZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgICBwcml2YXRlIGxvZ2luTm90aWZpY2F0aW9uczogU3Vic2NyaXB0aW9uO1xuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgY2FycmVnYXIgbyBzZXJ2acOnbyBkZSBhdXRvcml6YcOnw6NvIGUgc2VydmnDp28gZGUgaWRlbnRpZmljYcOnw6NvIGRlIG11ZGFuw6dhXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZVJlZjxhbnk+fSB0ZW1wbGF0ZVJlZlxuICAgICAqIEBwYXJhbSB7Vmlld0NvbnRhaW5lclJlZn0gdmlld0NvbnRhaW5lclxuICAgICAqIEBwYXJhbSB7QXV0aG9yaXphdGlvbn0gYXV0aG9yaXphdGlvblxuICAgICAqIEBwYXJhbSB7QXV0aGVudGljYXRpb248VXNlcj59IGF1dGhlbnRpY2F0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgcHJpdmF0ZSBhdXRob3JpemF0aW9uOiBBdXRob3JpemF0aW9uLFxuICAgICAgICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uOiBBdXRoZW50aWNhdGlvbjxVc2VyPikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9wcmllZGFkZSBwYXJhIGlkZW50aWZpY2FyIHJlZ3JhcyBkZSBhY2Vzc28gYW9zIGl0ZW5zXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBASW5wdXQoKSBzZXQgaGFzUm9sZShoYXNSb2xlOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgaWYgKGhhc1JvbGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxvZ2luTm90aWZpY2F0aW9ucykgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zID0gdGhpcy5hdXRoZW50aWNhdGlvbi5nZXRMb2dpbk5vdGlmaWNhdGlvbnMoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dGhvcml6YXRpb24uaGFzUm9sZShoYXNSb2xlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgIH1cblxufVxuIl19