import { __decorate } from "tslib";
import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';
import { Authorization } from './authorization';
import { Authentication } from '../authentication';
/**
 * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let HasRoleDirective = class HasRoleDirective {
    /**
     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança
     * @param {TemplateRef<any>} templateRef
     * @param {ViewContainerRef} viewContainer
     * @param {Authorization} authorization
     * @param {Authentication<User>} authentication
     */
    constructor(templateRef, viewContainer, authorization, authentication) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authorization = authorization;
        this.authentication = authentication;
    }
    /**
     * Propriedade para identificar regras de acesso aos itens
     * @type {string}
     */
    set hasRole(hasRole) {
        this.viewContainer.clear();
        if (hasRole) {
            if (this.loginNotifications)
                this.loginNotifications.unsubscribe();
            this.loginNotifications = this.authentication.getLoginNotifications().subscribe(() => {
                if (this.authorization.hasRole(hasRole)) {
                    this.viewContainer.clear();
                    this.viewContainer.createEmbeddedView(this.templateRef);
                }
            });
        }
        else {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
    }
    ngOnDestroy() {
        this.loginNotifications.unsubscribe();
    }
};
HasRoleDirective.ɵfac = function HasRoleDirective_Factory(t) { return new (t || HasRoleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(Authorization), ɵngcc0.ɵɵdirectiveInject(Authentication)); };
HasRoleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HasRoleDirective, selectors: [["", "hasRole", ""]], inputs: { hasRole: "hasRole" } });
HasRoleDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Authorization },
    { type: Authentication }
];
__decorate([
    Input()
], HasRoleDirective.prototype, "hasRole", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HasRoleDirective, [{
        type: Directive,
        args: [{
                selector: '[hasRole]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: Authorization }, { type: Authentication }]; }, { hasRole: [{
            type: Input
        }] }); })();
export { HasRoleDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL2FuZ3VsYXItYmFzZS9saWIvc2VjdXJpdHkvYXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbi9oYXMtcm9sZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUluRDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlILElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0FBQUcsSUFJNUI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksWUFDWSxXQUE2QixFQUM3QixhQUErQixFQUMvQixhQUE0QixFQUM1QixjQUFvQztBQUFJLFFBSHhDLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtBQUFDLFFBQzlCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtBQUFDLFFBQ2hDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsUUFDN0IsbUJBQWMsR0FBZCxjQUFjLENBQXNCO0FBQUMsSUFBRyxDQUFDO0FBQ3pELElBQ0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQWEsSUFBSSxPQUFPLENBQUMsT0FBMEI7QUFDbkQsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ25DLFFBQVEsSUFBSSxPQUFPLEVBQUU7QUFDckIsWUFBWSxJQUFJLElBQUksQ0FBQyxrQkFBa0I7QUFBRSxnQkFBQSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDL0UsWUFBWSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDakcsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDekQsb0JBQW9CLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDL0Msb0JBQW9CLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVFLGlCQUFpQjtBQUNqQixZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3BFLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUVJLFdBQVc7QUFBSyxRQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM5QyxJQUFJLENBQUM7QUFDTCxDQUNDOzsrSUFBQTtBQUNEO0FBQTBDLFlBOUJiLFdBQVc7QUFBSSxZQUNiLGdCQUFnQjtBQUM3QyxZQUE2QixhQUFhO0FBQzFDLFlBQThCLGNBQWM7QUFBRztBQU1wQztBQUFhLElBQXJCLEtBQUssRUFBRTtBQUFDLCtDQWFSO0FBbENRLGdCQUFnQixvQkFINUIsU0FBUyxDQUFFLFVBQ1IsUUFBUSxFQUFFO0VBQVcsTUFDeEIsQ0FBQyxJQUNXO0lBQWdCLENBeUM1Qjs7Ozs7b0JBQ0Q7QUFBQyxTQTFDWSxnQkFBZ0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhvcml6YXRpb24gfSBmcm9tICcuL2F1dGhvcml6YXRpb24nO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tICcuLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vdXNlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBIYXNSb2xlRGlyZWN0aXZlIGRpcmV0aXZhIHBhcmEgY2hlY2FnZW0gZGEgZXhpc3TDqm5jaWEgZGUgcGVybWlzc8O1ZXMgZGUgYWNlc3NvIHBhcmEgbyB1c3XDoXJpbyBsb2dhZG8uXG4gKiBAY2xhc3NcbiAqL1xuQERpcmVjdGl2ZSgge1xuICAgIHNlbGVjdG9yOiAnW2hhc1JvbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBIYXNSb2xlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICAgIHByaXZhdGUgbG9naW5Ob3RpZmljYXRpb25zOiBTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIGNvbnN0cnV0b3IgcmVzcG9uc8OhdmVsIHBvciBjYXJyZWdhciBvIHNlcnZpw6dvIGRlIGF1dG9yaXphw6fDo28gZSBzZXJ2acOnbyBkZSBpZGVudGlmaWNhw6fDo28gZGUgbXVkYW7Dp2FcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlUmVmPGFueT59IHRlbXBsYXRlUmVmXG4gICAgICogQHBhcmFtIHtWaWV3Q29udGFpbmVyUmVmfSB2aWV3Q29udGFpbmVyXG4gICAgICogQHBhcmFtIHtBdXRob3JpemF0aW9ufSBhdXRob3JpemF0aW9uXG4gICAgICogQHBhcmFtIHtBdXRoZW50aWNhdGlvbjxVc2VyPn0gYXV0aGVudGljYXRpb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwcml2YXRlIGF1dGhvcml6YXRpb246IEF1dGhvcml6YXRpb24sXG4gICAgICAgIHByaXZhdGUgYXV0aGVudGljYXRpb246IEF1dGhlbnRpY2F0aW9uPFVzZXI+KSB7IH1cblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIHBhcmEgaWRlbnRpZmljYXIgcmVncmFzIGRlIGFjZXNzbyBhb3MgaXRlbnNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHNldCBoYXNSb2xlKGhhc1JvbGU6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICBpZiAoaGFzUm9sZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9naW5Ob3RpZmljYXRpb25zKSB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMgPSB0aGlzLmF1dGhlbnRpY2F0aW9uLmdldExvZ2luTm90aWZpY2F0aW9ucygpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0aG9yaXphdGlvbi5oYXNSb2xlKGhhc1JvbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG59XG4iXX0=