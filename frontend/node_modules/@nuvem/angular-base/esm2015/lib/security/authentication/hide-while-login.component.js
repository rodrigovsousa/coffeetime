import { __decorate } from "tslib";
import { Component, ElementRef, OnDestroy, OnInit, Input, AfterViewInit, AfterContentInit } from '@angular/core';
import { Authentication } from './authentication';
import { BlockUiService } from '../../block-ui/block-ui.service';
/**
 *
 * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.
 *
 * @class
 */
let HideWhileLoginComponent = class HideWhileLoginComponent {
    /**
     * constructor method
     * @param {ElementRef} hostComponent
     * @param {AbstractAuthentication} auth
     * @param {BlockUiService} blockUiService
     * @constructor
     */
    constructor(hostComponent, auth, blockUiService) {
        this.hostComponent = hostComponent;
        this.auth = auth;
        this.blockUiService = blockUiService;
        /**
         * Carrega conteúdo
         * @type {loadingString}
         */
        this.loadingContent = "";
        this.waitingLogin = false;
    }
    ngOnInit() {
        this.waitingLogin = !this.auth.isAuthenticated();
    }
    ngAfterContentInit() {
        if (!this.auth.isAuthenticated()) {
            this.blockUiService.show();
        }
    }
    ngAfterViewInit() {
        if (!this.auth.isAuthenticated()) {
            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'none';
            }
        }
        this.loginNotifications = this.auth.getLoginNotifications().subscribe(() => {
            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'inherit';
            }
            this.waitingLogin = false;
            this.blockUiService.hide();
        });
    }
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy() {
        this.loginNotifications.unsubscribe();
    }
};
HideWhileLoginComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Authentication },
    { type: BlockUiService }
];
__decorate([
    Input()
], HideWhileLoginComponent.prototype, "loadingContent", void 0);
HideWhileLoginComponent = __decorate([
    Component({
        selector: '[hide-while-login]',
        template: "<span *ngIf=\"waitingLogin\">{{ loadingContent }}</span>\n<ng-content></ng-content>"
    })
], HideWhileLoginComponent);
export { HideWhileLoginComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL3NlY3VyaXR5L2F1dGhlbnRpY2F0aW9uL2hpZGUtd2hpbGUtbG9naW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVqRTs7Ozs7R0FLRztBQUtILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBYWhDOzs7Ozs7T0FNRztJQUNILFlBQ1ksYUFBeUIsRUFDekIsSUFBMEIsRUFDMUIsY0FBOEI7UUFGOUIsa0JBQWEsR0FBYixhQUFhLENBQVk7UUFDekIsU0FBSSxHQUFKLElBQUksQ0FBc0I7UUFDMUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBckIxQzs7O1dBR0c7UUFFSSxtQkFBYyxHQUFXLEVBQUUsQ0FBQztRQUk1QixpQkFBWSxHQUFZLEtBQUssQ0FBQztJQWNyQyxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUFFRCxrQkFBa0I7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzlCO0lBQ0wsQ0FBQztJQUVELGVBQWU7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO2FBQ3ZFO1NBQ0o7UUFFRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDdkUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZFLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQzthQUMxRTtZQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1lBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVztRQUNQLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0NBRUosQ0FBQTs7WUF4QzhCLFVBQVU7WUFDbkIsY0FBYztZQUNKLGNBQWM7O0FBaEIxQztJQURDLEtBQUssRUFBRTsrREFDMkI7QUFQMUIsdUJBQXVCO0lBSm5DLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsK0ZBQWdEO0tBQ25ELENBQUM7R0FDVyx1QkFBdUIsQ0E2RG5DO1NBN0RZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIElucHV0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyJztcbmltcG9ydCB7IEJsb2NrVWlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYmxvY2stdWkvYmxvY2stdWkuc2VydmljZSc7XG5cbi8qKlxuICogXG4gKiBDb21wb25lbnRlIEhpZGVXaGlsZUxvZ2luQ29tcG9uZW50LCB1dGlsaXphZG8gcGFyYSBuw6NvIGFwcmVzZW50YXIgYSB0ZWxhIGRhIGFwbGljYcOnw6NvIGVucXVhbnRvIGEgZmFzZSBkZSBsb2dpbiBuw6NvIHRlcm1pbm91LlxuICogXG4gKiBAY2xhc3NcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbaGlkZS13aGlsZS1sb2dpbl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9oaWRlLXdoaWxlLWxvZ2luLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBIaWRlV2hpbGVMb2dpbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcblxuICAgIC8qKlxuICAgICAqIENhcnJlZ2EgY29udGXDumRvXG4gICAgICogQHR5cGUge2xvYWRpbmdTdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbG9hZGluZ0NvbnRlbnQ6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBwcml2YXRlIGxvZ2luTm90aWZpY2F0aW9uczogU3Vic2NyaXB0aW9uO1xuXG4gICAgcHVibGljIHdhaXRpbmdMb2dpbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQHBhcmFtIHtFbGVtZW50UmVmfSBob3N0Q29tcG9uZW50XG4gICAgICogQHBhcmFtIHtBYnN0cmFjdEF1dGhlbnRpY2F0aW9ufSBhdXRoXG4gICAgICogQHBhcmFtIHtCbG9ja1VpU2VydmljZX0gYmxvY2tVaVNlcnZpY2VcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBob3N0Q29tcG9uZW50OiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIGF1dGg6IEF1dGhlbnRpY2F0aW9uPFVzZXI+LFxuICAgICAgICBwcml2YXRlIGJsb2NrVWlTZXJ2aWNlOiBCbG9ja1VpU2VydmljZVxuICAgICkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLndhaXRpbmdMb2dpbiA9ICF0aGlzLmF1dGguaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5ibG9ja1VpU2VydmljZS5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5hdXRoLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuaG9zdENvbXBvbmVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3N0Q29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMgPSB0aGlzLmF1dGguZ2V0TG9naW5Ob3RpZmljYXRpb25zKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5ob3N0Q29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3RDb21wb25lbnQubmF0aXZlRWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53YWl0aW5nTG9naW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tVaVNlcnZpY2UuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuZ09uRGVzdHJveSBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG59XG4iXX0=