import { __decorate } from "tslib";
import { Component, ElementRef, OnDestroy, OnInit, Input, AfterViewInit, AfterContentInit } from '@angular/core';
import { Authentication } from './authentication';
import { BlockUiService } from '../../block-ui/block-ui.service';
/**
 *
 * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.
 *
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["hide-while-login", ""];
function HideWhileLoginComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r841 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r841.loadingContent);
} }
const _c1 = ["*"];
let HideWhileLoginComponent = class HideWhileLoginComponent {
    /**
     * constructor method
     * @param {ElementRef} hostComponent
     * @param {AbstractAuthentication} auth
     * @param {BlockUiService} blockUiService
     * @constructor
     */
    constructor(hostComponent, auth, blockUiService) {
        this.hostComponent = hostComponent;
        this.auth = auth;
        this.blockUiService = blockUiService;
        /**
         * Carrega conteúdo
         * @type {loadingString}
         */
        this.loadingContent = "";
        this.waitingLogin = false;
    }
    ngOnInit() {
        this.waitingLogin = !this.auth.isAuthenticated();
    }
    ngAfterContentInit() {
        if (!this.auth.isAuthenticated()) {
            this.blockUiService.show();
        }
    }
    ngAfterViewInit() {
        if (!this.auth.isAuthenticated()) {
            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'none';
            }
        }
        this.loginNotifications = this.auth.getLoginNotifications().subscribe(() => {
            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'inherit';
            }
            this.waitingLogin = false;
            this.blockUiService.hide();
        });
    }
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy() {
        this.loginNotifications.unsubscribe();
    }
};
HideWhileLoginComponent.ɵfac = function HideWhileLoginComponent_Factory(t) { return new (t || HideWhileLoginComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Authentication), ɵngcc0.ɵɵdirectiveInject(BlockUiService)); };
HideWhileLoginComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HideWhileLoginComponent, selectors: [["", "hide-while-login", ""]], inputs: { loadingContent: "loadingContent" }, attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[4, "ngIf"]], template: function HideWhileLoginComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, HideWhileLoginComponent_span_0_Template, 2, 1, "span", 0);
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.waitingLogin);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
HideWhileLoginComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Authentication },
    { type: BlockUiService }
];
__decorate([
    Input()
], HideWhileLoginComponent.prototype, "loadingContent", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HideWhileLoginComponent, [{
        type: Component,
        args: [{
                selector: '[hide-while-login]',
                template: "<span *ngIf=\"waitingLogin\">{{ loadingContent }}</span>\n<ng-content></ng-content>"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Authentication }, { type: BlockUiService }]; }, { loadingContent: [{
            type: Input
        }] }); })();
export { HideWhileLoginComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9zZWN1cml0eS9hdXRoZW50aWNhdGlvbi9oaWRlLXdoaWxlLWxvZ2luLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpILE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFakU7QUFDQTtBQUFHO0FBQzRIO0FBQzdIO0FBQ00sR0FDTDs7Ozs7Ozs7Ozs7Ozs7O0FBS0gsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7QUFBRyxJQWFuQztBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUNZLGFBQXlCLEVBQ3pCLElBQTBCLEVBQzFCLGNBQThCO0FBQzNDLFFBSGEsa0JBQWEsR0FBYixhQUFhLENBQVk7QUFBQyxRQUMxQixTQUFJLEdBQUosSUFBSSxDQUFzQjtBQUFDLFFBQzNCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUM5QyxRQXRCSTtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFDVyxtQkFBYyxHQUFXLEVBQUUsQ0FBQztBQUN2QyxRQUdXLGlCQUFZLEdBQVksS0FBSyxDQUFDO0FBQ3pDLElBYUksQ0FBQztBQUNMLElBQ0ksUUFBUTtBQUFLLFFBQ1QsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDekQsSUFBSSxDQUFDO0FBQ0wsSUFDSSxrQkFBa0I7QUFBSyxRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtBQUMxQyxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdkMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksZUFBZTtBQUFLLFFBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO0FBQzFDLFlBQVksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdkYsZ0JBQWdCLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNwRixhQUFhO0FBQ2IsU0FBUztBQUNULFFBQ1EsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQ25GLFlBQVksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdkYsZ0JBQWdCLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUN2RixhQUFhO0FBQ2IsWUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztBQUN0QyxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdkMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzlDLElBQUksQ0FBQztBQUNMLENBQ0M7Ozs7Ozs7O3dEQUFBO0FBQ0Q7QUFBaUQsWUF6Q2xCLFVBQVU7QUFDdkMsWUFBb0IsY0FBYztBQUFJLFlBQ1IsY0FBYztBQUM1QztBQWpCRTtBQUFhLElBRFosS0FBSyxFQUFFO0FBQ1osK0RBQXVDO0FBUDFCLHVCQUF1QixvQkFKbkMsU0FBUyxDQUFDLFVBQ1AsUUFBUSxFQUFFO1dBQW9CLFVBQzlCOzs7MEJBQWdELE1BQ25ELENBQUMsSUFDVyx1QkFBdUIsQ0E2RG5DOzs7O29CQUNEO0FBQUMsU0E5RFksdUJBQXVCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25Jbml0LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4vYXV0aGVudGljYXRpb24nO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vdXNlcic7XG5pbXBvcnQgeyBCbG9ja1VpU2VydmljZSB9IGZyb20gJy4uLy4uL2Jsb2NrLXVpL2Jsb2NrLXVpLnNlcnZpY2UnO1xuXG4vKipcbiAqIFxuICogQ29tcG9uZW50ZSBIaWRlV2hpbGVMb2dpbkNvbXBvbmVudCwgdXRpbGl6YWRvIHBhcmEgbsOjbyBhcHJlc2VudGFyIGEgdGVsYSBkYSBhcGxpY2HDp8OjbyBlbnF1YW50byBhIGZhc2UgZGUgbG9naW4gbsOjbyB0ZXJtaW5vdS5cbiAqIFxuICogQGNsYXNzXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnW2hpZGUtd2hpbGUtbG9naW5dJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSGlkZVdoaWxlTG9naW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG5cbiAgICAvKipcbiAgICAgKiBDYXJyZWdhIGNvbnRlw7pkb1xuICAgICAqIEB0eXBlIHtsb2FkaW5nU3RyaW5nfVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGxvYWRpbmdDb250ZW50OiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgcHJpdmF0ZSBsb2dpbk5vdGlmaWNhdGlvbnM6IFN1YnNjcmlwdGlvbjtcblxuICAgIHB1YmxpYyB3YWl0aW5nTG9naW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudFJlZn0gaG9zdENvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7QWJzdHJhY3RBdXRoZW50aWNhdGlvbn0gYXV0aFxuICAgICAqIEBwYXJhbSB7QmxvY2tVaVNlcnZpY2V9IGJsb2NrVWlTZXJ2aWNlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaG9zdENvbXBvbmVudDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBhdXRoOiBBdXRoZW50aWNhdGlvbjxVc2VyPixcbiAgICAgICAgcHJpdmF0ZSBibG9ja1VpU2VydmljZTogQmxvY2tVaVNlcnZpY2VcbiAgICApIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy53YWl0aW5nTG9naW4gPSAhdGhpcy5hdXRoLmlzQXV0aGVudGljYXRlZCgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmF1dGguaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tVaVNlcnZpY2Uuc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmhvc3RDb21wb25lbnQubmF0aXZlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuaG9zdENvbXBvbmVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zID0gdGhpcy5hdXRoLmdldExvZ2luTm90aWZpY2F0aW9ucygpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuaG9zdENvbXBvbmVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3N0Q29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9ICdpbmhlcml0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMud2FpdGluZ0xvZ2luID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmJsb2NrVWlTZXJ2aWNlLmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbmdPbkRlc3Ryb3kgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgIH1cblxufVxuIl19