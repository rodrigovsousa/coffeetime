import { __decorate } from "tslib";
import { HttpResponse } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { tap } from 'rxjs/operators';
import { Token } from "./token";
import * as i0 from "@angular/core";
import * as i1 from "./token";
/**
 * Implementação de classe para interceptar e tratar requisições http/https
 * @class
 */
import * as ɵngcc0 from '@angular/core';
let JWTAuthInterceptor = class JWTAuthInterceptor {
    /**
     * Metodo construtor responsável por injetar serviço de autenticação
     * @constructor
     * @param {AbstractAuthentication} auth
     */
    constructor(token) {
        this.token = token;
    }
    /**
     * Metodo responsável por interceptar requisições HTTP/HTTPS
     * @public
     * @param {HttpRequest<any>} request
     * @param {HttpHandler} next
     * @returns Observable<HttpEvent<any>>
     */
    intercept(request, next) {
        if (this.token.hasToken()) {
            request = this.token.setTokenInHeader(request);
        }
        return next.handle(request)
            .pipe(tap((event) => {
            if (event instanceof HttpResponse) {
                const token = this.token.extractTokenFromHeaders(event.headers);
                if (null !== token)
                    this.token.storeToken(token);
            }
            return event;
        }));
    }
};
JWTAuthInterceptor.ɵfac = function JWTAuthInterceptor_Factory(t) { return new (t || JWTAuthInterceptor)(ɵngcc0.ɵɵinject(Token)); };
JWTAuthInterceptor.ctorParameters = () => [
    { type: Token }
];
JWTAuthInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function JWTAuthInterceptor_Factory() { return new JWTAuthInterceptor(i0.ɵɵinject(i1.Token)); }, token: JWTAuthInterceptor, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JWTAuthInterceptor, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Token }]; }, null); })();
export { JWTAuthInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWF1dGguaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9zZWN1cml0eS90b2tlbi9qd3QtYXV0aC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUF3RCxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUcxRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDO0FBRWdDO0FBRGhDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7QUFBRyxJQUU5QjtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFlBQW9CLEtBQVk7QUFBSSxRQUFoQixVQUFLLEdBQUwsS0FBSyxDQUFPO0FBQUMsSUFBRSxDQUFDO0FBQ3hDLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7QUFBSSxRQUN0RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDbkMsWUFBWSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzRCxTQUFTO0FBQ1QsUUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ25DLGFBQWEsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLEtBQXFCLEVBQUUsRUFBRTtBQUM5QyxZQUFvQixJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7QUFDdkQsZ0JBQXdCLE1BQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hHLGdCQUF3QixJQUFJLElBQUksS0FBSyxLQUFLO0FBQUUsb0JBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekUsYUFBcUI7QUFDckIsWUFBb0IsT0FBTyxLQUFLLENBQUM7QUFDakMsUUFBZ0IsQ0FBQyxDQUFDLENBQ0wsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMLENBQ0M7bUlBQUE7QUFDRDtBQUE0QyxZQTFCYixLQUFLO0FBQUc7QUFFdkM7QUFUYSxrQkFBa0Isb0JBSDlCLFVBQVUsQ0FBQyxVQUNSLFVBQVUsRUFBRTtBQUFNLE9BQ3JCLENBQUMsSUFDVztJQUFrQixDQWdDOUI7OzsrREFDRDtBQUFDLFNBakNZLGtCQUFrQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gXCIuL3Rva2VuXCI7XG5cbi8qKlxuICogSW1wbGVtZW50YcOnw6NvIGRlIGNsYXNzZSBwYXJhIGludGVyY2VwdGFyIGUgdHJhdGFyIHJlcXVpc2nDp8O1ZXMgaHR0cC9odHRwc1xuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEpXVEF1dGhJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWwgcG9yIGluamV0YXIgc2VydmnDp28gZGUgYXV0ZW50aWNhw6fDo29cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0Fic3RyYWN0QXV0aGVudGljYXRpb259IGF1dGhcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRva2VuOiBUb2tlbikge31cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIGludGVyY2VwdGFyIHJlcXVpc2nDp8O1ZXMgSFRUUC9IVFRQU1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0h0dHBSZXF1ZXN0PGFueT59IHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge0h0dHBIYW5kbGVyfSBuZXh0XG4gICAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj5cbiAgICAgKi9cbiAgICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgICAgIGlmICh0aGlzLnRva2VuLmhhc1Rva2VuKCkpIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSB0aGlzLnRva2VuLnNldFRva2VuSW5IZWFkZXIocmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICB0YXAoKGV2ZW50OiBIdHRwRXZlbnQ8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuOiBTdHJpbmcgPSB0aGlzLnRva2VuLmV4dHJhY3RUb2tlbkZyb21IZWFkZXJzKGV2ZW50LmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRva2VuKSB0aGlzLnRva2VuLnN0b3JlVG9rZW4odG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbn1cbiJdfQ==