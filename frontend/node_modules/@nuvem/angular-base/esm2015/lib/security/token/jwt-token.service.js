import * as ɵngcc0 from '@angular/core';
var JWTTokenService_1;
import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { HttpHeaders } from "@angular/common/http";
import { Token } from './token';
import { AUTH_CONFIG } from '../config/auth-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
/**
 * Inplementação de serviço JWTTokenService
 * @class
 */
let JWTTokenService = JWTTokenService_1 = class JWTTokenService extends Token {
    /**
     * Metodo construtor responsável por injetar as configurações de autenticação
     * @constructor
     * @param {AuthConfig} config
     */
    constructor(config) {
        super();
        this.config = config;
    }
    /**
     * Metodo responsável pela extração de tokes do heaedrs das requisições
     * @public
     * @param {HttpHeaders} headers
     * @returns string
     */
    extractTokenFromHeaders(headers) {
        return headers.get(JWTTokenService_1.HEADER_STRING);
    }
    /**
     * Metodo responsável pela adição dos tokens no storage
     * @public
     * @param {String} token
     * @returns void
     */
    storeToken(token) {
        this.config.storage.setItem(this.config.tokenStorageIndex, token.toString());
    }
    /**
     * Metodo responsável por injetar token no header das requisições
     * @public
     * @param {HttpRequest<any>} request
     * @returns HttpRequest<any>
     */
    setTokenInHeader(request) {
        const req = request.clone({
            headers: new HttpHeaders({
                [JWTTokenService_1.HEADER_STRING]: this.config.storage.getItem(this.config.tokenStorageIndex)
            })
        });
        return req;
    }
    /**
     * Metodo responsável por verificar a existencia de um token de autenticação
     * @returns boolean
     * @public
     */
    hasToken() {
        return null !== this.config.storage.getItem(this.config.tokenStorageIndex);
    }
};
JWTTokenService.ɵfac = function JWTTokenService_Factory(t) { return new (t || JWTTokenService)(ɵngcc0.ɵɵinject(AUTH_CONFIG)); };
/**
 * TOKEN_PREFIX  property
 * @type {string}
 */
JWTTokenService.TOKEN_PREFIX = "Bearer";
/**
 * HEADER_STRING property
 * @type {string}
 */
JWTTokenService.HEADER_STRING = "Authorization";
JWTTokenService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] }
];
JWTTokenService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JWTTokenService_Factory() { return new JWTTokenService(i0.ɵɵinject(i1.AUTH_CONFIG)); }, token: JWTTokenService, providedIn: "root" });
JWTTokenService = JWTTokenService_1 = __decorate([ __param(0, Inject(AUTH_CONFIG))
], JWTTokenService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JWTTokenService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_CONFIG]
            }] }]; }, null); })();
export { JWTTokenService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LXRva2VuLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9zZWN1cml0eS90b2tlbi9qd3QtdG9rZW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQWMsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEU7QUFFZ0M7QUFEaEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUlILElBQWEsZUFBZSx1QkFBNUIsTUFBYSxlQUFnQixTQUFRLEtBQUs7QUFDMUMsSUFhSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFlBQXlDLE1BQWtCO0FBQy9ELFFBQVEsS0FBSyxFQUFFLENBQUM7QUFDaEIsUUFGNkMsV0FBTSxHQUFOLE1BQU0sQ0FBWTtBQUFDLElBRTVELENBQUM7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSx1QkFBdUIsQ0FBQyxPQUFvQjtBQUFJLFFBQzVDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFELElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFVBQVUsQ0FBQyxLQUFhO0FBQzVCLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUM3QixLQUFLLENBQUMsUUFBUSxFQUFFLENBQ25CLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxnQkFBZ0IsQ0FBQyxPQUF5QjtBQUFJLFFBQzFDLE1BQU0sR0FBRyxHQUFxQixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3BELFlBQVksT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDO0FBQ3JDLGdCQUFnQixDQUFDLGlCQUFlLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFDM0csYUFBYSxDQUFDO0FBQ2QsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLE9BQU8sR0FBRyxDQUFDO0FBQ25CLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxRQUFRO0FBQUssUUFDVCxPQUFPLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ25GLElBQUksQ0FBQztBQUNMLENBQ0M7Z0lBQUE7QUFuRUc7QUFDSjtBQUEwQjtBQUNaLEdBQ1A7QUFDb0IsNEJBQVksR0FBRyxRQUFRLENBQUM7QUFFL0M7QUFDSjtBQUEwQjtBQUNaLEdBQ1A7QUFDb0IsNkJBQWEsR0FBRyxlQUFlLENBQUM7QUFDM0Q7QUFFZ0MsNENBSWYsTUFBTSxTQUFDLFdBQVc7QUFBUTtBQUFHO0FBbkJqQyxlQUFlLHdDQUgzQixVQUFVLENBQUMsVUFDUiwxQkFFQSxDQW1CYSxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtHQXJCdEIsRUFBRSxNQUFNLE9BQ3JCLENBQUMsbkJBb0JtQyxHQW5CeEIsZUFBZSxDQXFFM0I7Ozs7Ozs7OztrQ0FDRDtBQUFDLFNBdEVZLGVBQWU7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBIZWFkZXJzIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gJy4vdG9rZW4nO1xuaW1wb3J0IHsgQXV0aENvbmZpZywgQVVUSF9DT05GSUcgfSBmcm9tICcuLi9jb25maWcvYXV0aC1jb25maWcnO1xuXG4vKipcbiAqIElucGxlbWVudGHDp8OjbyBkZSBzZXJ2acOnbyBKV1RUb2tlblNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBKV1RUb2tlblNlcnZpY2UgZXh0ZW5kcyBUb2tlbiB7XG5cbiAgICAvKipcbiAgICAgKiBUT0tFTl9QUkVGSVggIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRPS0VOX1BSRUZJWCA9IFwiQmVhcmVyXCI7XG5cbiAgICAvKipcbiAgICAgKiBIRUFERVJfU1RSSU5HIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEhFQURFUl9TVFJJTkcgPSBcIkF1dGhvcml6YXRpb25cIjtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciBhcyBjb25maWd1cmHDp8O1ZXMgZGUgYXV0ZW50aWNhw6fDo29cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0F1dGhDb25maWd9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoQVVUSF9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBBdXRoQ29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcGVsYSBleHRyYcOnw6NvIGRlIHRva2VzIGRvIGhlYWVkcnMgZGFzIHJlcXVpc2nDp8O1ZXNcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtIdHRwSGVhZGVyc30gaGVhZGVyc1xuICAgICAqIEByZXR1cm5zIHN0cmluZ1xuICAgICAqL1xuICAgIGV4dHJhY3RUb2tlbkZyb21IZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogU3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlcnMuZ2V0KEpXVFRva2VuU2VydmljZS5IRUFERVJfU1RSSU5HKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgYWRpw6fDo28gZG9zIHRva2VucyBubyBzdG9yYWdlXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0b2tlblxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBzdG9yZVRva2VuKHRva2VuOiBTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jb25maWcuc3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgdGhpcy5jb25maWcudG9rZW5TdG9yYWdlSW5kZXgsXG4gICAgICAgICAgICB0b2tlbi50b1N0cmluZygpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciB0b2tlbiBubyBoZWFkZXIgZGFzIHJlcXVpc2nDp8O1ZXNcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtIdHRwUmVxdWVzdDxhbnk+fSByZXF1ZXN0XG4gICAgICogQHJldHVybnMgSHR0cFJlcXVlc3Q8YW55PlxuICAgICAqL1xuICAgIHNldFRva2VuSW5IZWFkZXIocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IEh0dHBSZXF1ZXN0PGFueT4ge1xuICAgICAgICBjb25zdCByZXE6IEh0dHBSZXF1ZXN0PGFueT4gPSByZXF1ZXN0LmNsb25lKHtcbiAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICAgICAgICAgW0pXVFRva2VuU2VydmljZS5IRUFERVJfU1RSSU5HXTogdGhpcy5jb25maWcuc3RvcmFnZS5nZXRJdGVtKHRoaXMuY29uZmlnLnRva2VuU3RvcmFnZUluZGV4KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwb3IgdmVyaWZpY2FyIGEgZXhpc3RlbmNpYSBkZSB1bSB0b2tlbiBkZSBhdXRlbnRpY2HDp8Ojb1xuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaGFzVG9rZW4oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0aGlzLmNvbmZpZy5zdG9yYWdlLmdldEl0ZW0odGhpcy5jb25maWcudG9rZW5TdG9yYWdlSW5kZXgpO1xuICAgIH1cblxufVxuIl19