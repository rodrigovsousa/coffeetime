import { __decorate } from "tslib";
import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * AccessbilityService Serviço de acessibilidade, este serviço prove recursos de contraste
 * de tela e controle do tamanho da fonte apresentadas na tela.
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var AccessbilityService = /** @class */ (function () {
    function AccessbilityService(rendererFactory) {
        /**
         * Propriedade que define tamanho da fonte
         * @type {number}
         */
        this.fontSize = 1.0;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * Medoto para habilitar contraste
     * @public
     * @returns void
     */
    AccessbilityService.prototype.enableHighContrast = function () {
        this.renderer.addClass(document.body, 'contraste');
    };
    /**
     * Metodo para desabilitar contraste
     * @public
     * @returns void
     */
    AccessbilityService.prototype.disableHighContrast = function () {
        this.renderer.removeClass(document.body, 'contraste');
    };
    /**
     * Metodo utilizado para aumentar o tamnho da fonte apresentada no display
     * @public
     * @returns void
     */
    AccessbilityService.prototype.increaseFontSize = function () {
        this.fontSize += 0.1;
        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');
    };
    /**
     * Metodo utilizado para diminuir o tamnho da fonte apresentada no display
     * @public
     * @returns void
     */
    AccessbilityService.prototype.decreaseFontSize = function () {
        this.fontSize -= 0.1;
        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');
    };
    AccessbilityService.prototype.addAccessibilityIcons = function () {
        var elements = document.querySelector('.ui-button-icon-left, ui-button-icon-righ');
        if (elements) {
            this.renderer.setStyle(elements, 'aria-hidden', true);
        }
    };
    AccessbilityService.prototype.addAccessibilityMessages = function (msg) {
        var type = 'polite';
        if (msg.severity.toLowerCase() !== 'custom' && msg.severity.toLowerCase() !== 'success') {
            type = 'assertive';
        }
        this.renderer.setStyle(document.querySelector('p-toast, p-growl'), 'aria-live', type);
    };
    AccessbilityService.ctorParameters = function () { return [
        { type: RendererFactory2 }
    ]; };
    AccessbilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AccessbilityService_Factory() { return new AccessbilityService(i0.ɵɵinject(i0.RendererFactory2)); }, token: AccessbilityService, providedIn: "root" });
AccessbilityService.ɵfac = function AccessbilityService_Factory(t) { return new (t || AccessbilityService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AccessbilityService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }]; }, null); })();
    return AccessbilityService;
}());
export { AccessbilityService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzaWJpbGl0eS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL2FuZ3VsYXItYmFzZS9saWIvYWNjZXNzaWJpbGl0eS9hY2Nlc3NpYmlsaXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlIO0FBRW1CLElBRWYsNkJBQVksZUFBaUM7QUFDakQsUUFHSTtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFBWSxhQUFRLEdBQVcsR0FBRyxDQUFDO0FBQ25DLFFBUlEsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRSxJQUFJLENBQUM7QUFDTCxJQU9JO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksZ0RBQWtCLEdBQWxCO0FBQWMsUUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzNELElBQUksQ0FBQztBQUVMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxpREFBbUIsR0FBbkI7QUFBYyxRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDOUQsSUFBSSxDQUFDO0FBRUwsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLDhDQUFnQixHQUFoQjtBQUFjLFFBQ1YsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUM7QUFDN0IsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDaEgsSUFBSSxDQUFDO0FBRUwsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLDhDQUFnQixHQUFoQjtBQUFjLFFBQ1YsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUM7QUFDN0IsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDaEgsSUFBSSxDQUFDO0FBRUwsSUFBSSxtREFBcUIsR0FBckI7QUFBYyxRQUNWLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUM3RixRQUNRLElBQUksUUFBUSxFQUFFO0FBQ3RCLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNsRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBRUwsSUFBSSxzREFBd0IsR0FBeEIsVUFBeUIsR0FBdUI7QUFDcEQsUUFBUSxJQUFJLElBQUksR0FBRyxRQUFRLENBQUM7QUFDNUIsUUFBUSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssU0FBUyxFQUFFO0FBQ2pHLFlBQVksSUFBSSxHQUFHLFdBQVcsQ0FBQztBQUMvQixTQUFTO0FBQ1QsUUFDUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlGLElBQUksQ0FBQztBQUVMO0FBQzhELGdCQWxFN0IsZ0JBQWdCO0FBQUc7QUFDM0M7SUFMSSxtQkFBbUIsd0JBSC9CLFVBQVUsQ0FBQyxjQUNSLFVBQVUsRUFBRSxNQUFNLFdBQ3JCLENBQUMsUUFDVyxtQkFBbUIsQ0FxRS9COzs7Ozs7aUZBQ0Q7QUFBQyw4QkFoRkQ7QUFBRSxDQStFRCxBQXJFRCxJQXFFQztBQUNELFNBdEVhLG1CQUFtQjtBQUVoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEFjY2Vzc2JpbGl0eVNlcnZpY2UgU2VydmnDp28gZGUgYWNlc3NpYmlsaWRhZGUsIGVzdGUgc2VydmnDp28gcHJvdmUgcmVjdXJzb3MgZGUgY29udHJhc3RlXG4gKiBkZSB0ZWxhIGUgY29udHJvbGUgZG8gdGFtYW5obyBkYSBmb250ZSBhcHJlc2VudGFkYXMgbmEgdGVsYS5cbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBY2Nlc3NiaWxpdHlTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgcXVlIGRlZmluZSB0YW1hbmhvIGRhIGZvbnRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBwcml2YXRlIGZvbnRTaXplOiBudW1iZXIgPSAxLjA7XG5cbiAgICAvKipcbiAgICAgKiBNZWRvdG8gcGFyYSBoYWJpbGl0YXIgY29udHJhc3RlXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBlbmFibGVIaWdoQ29udHJhc3QoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ2NvbnRyYXN0ZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBwYXJhIGRlc2FiaWxpdGFyIGNvbnRyYXN0ZVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgZGlzYWJsZUhpZ2hDb250cmFzdCgpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCAnY29udHJhc3RlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHV0aWxpemFkbyBwYXJhIGF1bWVudGFyIG8gdGFtbmhvIGRhIGZvbnRlIGFwcmVzZW50YWRhIG5vIGRpc3BsYXlcbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGluY3JlYXNlRm9udFNpemUoKSB7XG4gICAgICAgIHRoaXMuZm9udFNpemUgKz0gMC4xO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5sYXlvdXQtd3JhcHBlcicpLCAnZm9udC1zaXplJywgdGhpcy5mb250U2l6ZSArICdlbScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyB1dGlsaXphZG8gcGFyYSBkaW1pbnVpciBvIHRhbW5obyBkYSBmb250ZSBhcHJlc2VudGFkYSBubyBkaXNwbGF5XG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBkZWNyZWFzZUZvbnRTaXplKCkge1xuICAgICAgICB0aGlzLmZvbnRTaXplIC09IDAuMTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYubGF5b3V0LXdyYXBwZXInKSwgJ2ZvbnQtc2l6ZScsIHRoaXMuZm9udFNpemUgKyAnZW0nKTtcbiAgICB9XG5cbiAgICBhZGRBY2Nlc3NpYmlsaXR5SWNvbnMoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVpLWJ1dHRvbi1pY29uLWxlZnQsIHVpLWJ1dHRvbi1pY29uLXJpZ2gnKTtcblxuICAgICAgICBpZiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZWxlbWVudHMsICdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQWNjZXNzaWJpbGl0eU1lc3NhZ2VzKG1zZzoge3NldmVyaXR5OiBzdHJpbmd9KSB7XG4gICAgICAgIGxldCB0eXBlID0gJ3BvbGl0ZSc7XG4gICAgICAgIGlmIChtc2cuc2V2ZXJpdHkudG9Mb3dlckNhc2UoKSAhPT0gJ2N1c3RvbScgJiYgbXNnLnNldmVyaXR5LnRvTG93ZXJDYXNlKCkgIT09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgdHlwZSA9ICdhc3NlcnRpdmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdwLXRvYXN0LCBwLWdyb3dsJyksICdhcmlhLWxpdmUnLCB0eXBlKTtcbiAgICB9XG5cbn1cbiJdfQ==