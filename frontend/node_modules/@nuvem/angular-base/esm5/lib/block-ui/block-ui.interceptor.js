import { __decorate } from "tslib";
import { HttpResponse } from '@angular/common/http';
import { Injectable } from "@angular/core";
import { tap } from 'rxjs/operators';
import { BlockUiService } from './block-ui.service';
import * as i0 from "@angular/core";
import * as i1 from "./block-ui.service";
/**
 * Class BlockUiInterceptor
 * @class
 */
var BlockUiInterceptor = /** @class */ (function () {
    /**
     * constructor method
     * @constructor
     * @param {BlockUiService} service
     */
    function BlockUiInterceptor(service) {
        this.service = service;
    }
    /**
     * intercept method
     * @public
     * @param {HttpRequest<any>} req
     * @param {HttpHandler} next
     * @return Observable<HttpEvent<any>>
     */
    BlockUiInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        if (this.isMutation(req.method)) {
            this.service.show();
        }
        return next.handle(req).pipe(tap(function (event) {
            if (event instanceof HttpResponse) {
                _this.service.hide();
            }
        }, function (err) {
            _this.service.hide();
        }));
    };
    /**
     * isMutation method
     * @private
     * @param {string} method
     * @return boolean
     */
    BlockUiInterceptor.prototype.isMutation = function (method) {
        var mutationsMethods = [
            'DELETE',
            'PATCH',
            'POST',
            'PUT'
        ];
        return mutationsMethods.indexOf(method) !== -1;
    };
    BlockUiInterceptor.ctorParameters = function () { return [
        { type: BlockUiService }
    ]; };
    BlockUiInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function BlockUiInterceptor_Factory() { return new BlockUiInterceptor(i0.ɵɵinject(i1.BlockUiService)); }, token: BlockUiInterceptor, providedIn: "root" });
    BlockUiInterceptor = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], BlockUiInterceptor);
    return BlockUiInterceptor;
}());
export { BlockUiInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL2Jsb2NrLXVpL2Jsb2NrLXVpLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQXVDLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXpGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBRXBEOzs7R0FHRztBQUlIO0lBRUk7Ozs7T0FJRztJQUNILDRCQUFvQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUFHLENBQUM7SUFFL0M7Ozs7OztPQU1HO0lBQ0gsc0NBQVMsR0FBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFBbEQsaUJBa0JDO1FBaEJHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN2QjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ3hCLEdBQUcsQ0FDQyxVQUFDLEtBQXFCO1lBQ2xCLElBQUksS0FBSyxZQUFZLFlBQVksRUFBRTtnQkFDL0IsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUN2QjtRQUNMLENBQUMsRUFDRCxVQUFDLEdBQVE7WUFDTCxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FDSixDQUNKLENBQUM7SUFDTixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSyx1Q0FBVSxHQUFsQixVQUFtQixNQUFjO1FBQzdCLElBQU0sZ0JBQWdCLEdBQUc7WUFDckIsUUFBUTtZQUNSLE9BQU87WUFDUCxNQUFNO1lBQ04sS0FBSztTQUNSLENBQUM7UUFFRixPQUFPLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDOztnQkEzQzRCLGNBQWM7OztJQVBsQyxrQkFBa0I7UUFIOUIsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztPQUNXLGtCQUFrQixDQW1EOUI7NkJBakVEO0NBaUVDLEFBbkRELElBbURDO1NBbkRZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJsb2NrVWlTZXJ2aWNlIH0gZnJvbSAnLi9ibG9jay11aS5zZXJ2aWNlJztcblxuLyoqXG4gKiBDbGFzcyBCbG9ja1VpSW50ZXJjZXB0b3JcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEJsb2NrVWlJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0Jsb2NrVWlTZXJ2aWNlfSBzZXJ2aWNlIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogQmxvY2tVaVNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBpbnRlcmNlcHQgbWV0aG9kXG4gICAgICogQHB1YmxpYyBcbiAgICAgKiBAcGFyYW0ge0h0dHBSZXF1ZXN0PGFueT59IHJlcVxuICAgICAqIEBwYXJhbSB7SHR0cEhhbmRsZXJ9IG5leHRcbiAgICAgKiBAcmV0dXJuIE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+XG4gICAgICovXG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNNdXRhdGlvbihyZXEubWV0aG9kKSkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnNob3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICAgICAgICB0YXAoXG4gICAgICAgICAgICAgICAgKGV2ZW50OiBIdHRwRXZlbnQ8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogaXNNdXRhdGlvbiBtZXRob2RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgKiBAcmV0dXJuIGJvb2xlYW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGlzTXV0YXRpb24obWV0aG9kOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgbXV0YXRpb25zTWV0aG9kcyA9IFtcbiAgICAgICAgICAgICdERUxFVEUnLFxuICAgICAgICAgICAgJ1BBVENIJyxcbiAgICAgICAgICAgICdQT1NUJyxcbiAgICAgICAgICAgICdQVVQnXG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIG11dGF0aW9uc01ldGhvZHMuaW5kZXhPZihtZXRob2QpICE9PSAtMTtcbiAgICB9XG59XG4iXX0=