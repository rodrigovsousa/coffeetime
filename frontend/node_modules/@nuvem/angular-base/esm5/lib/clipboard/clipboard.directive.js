import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { ClipboardService } from './clipboard.service';
var ClipboardDirective = /** @class */ (function () {
    /**
     * constructor method
     * @param {ClipboardService} service
     * @constructor
     */
    function ClipboardDirective(service) {
        this.service = service;
        /**
         * onClipboard variable
         * @type {EventEmitter<boolean>}
         */
        this.onClipboard = new EventEmitter();
    }
    /**
     * copy method
     * @event click
     * @returns void
     */
    ClipboardDirective.prototype.copy = function () {
        try {
            this.service.copy(this.clipboard);
            this.onClipboard.emit(true);
        }
        catch (e) {
            this.onClipboard.emit(false);
            throw e;
        }
    };
    ClipboardDirective.ctorParameters = function () { return [
        { type: ClipboardService }
    ]; };
    __decorate([
        Input()
    ], ClipboardDirective.prototype, "clipboard", void 0);
    __decorate([
        Output()
    ], ClipboardDirective.prototype, "onClipboard", void 0);
    __decorate([
        HostListener('click')
    ], ClipboardDirective.prototype, "copy", null);
    ClipboardDirective = __decorate([
        Directive({
            selector: '[clipboard]'
        })
        /**
         * Diretiva que exp√µe seletor para o uso do clipbord
         * @class
         */
    ], ClipboardDirective);
    return ClipboardDirective;
}());
export { ClipboardDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvY2xpcGJvYXJkL2NsaXBib2FyZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBU3ZEO0lBZ0JJOzs7O09BSUc7SUFDSCw0QkFBb0IsT0FBeUI7UUFBekIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFaN0M7OztXQUdHO1FBRUgsZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQU9qQixDQUFDO0lBR2pEOzs7O09BSUc7SUFDSCxpQ0FBSSxHQUFKO1FBQ0ksSUFBSTtZQUNBLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLENBQUM7U0FDWDtJQUNMLENBQUM7O2dCQWhCNEIsZ0JBQWdCOztJQWQ3QztRQURDLEtBQUssRUFBRTt5REFDVTtJQU9sQjtRQURDLE1BQU0sRUFBRTsyREFDd0Q7SUFlakU7UUFOQyxZQUFZLENBQUMsT0FBTyxDQUFDO2tEQWNyQjtJQXJDUSxrQkFBa0I7UUFQOUIsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGFBQWE7U0FDMUIsQ0FBQztRQUNGOzs7V0FHRztPQUNVLGtCQUFrQixDQXNDOUI7SUFBRCx5QkFBQztDQUFBLEFBdENELElBc0NDO1NBdENZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2xpcGJvYXJkU2VydmljZSB9IGZyb20gJy4vY2xpcGJvYXJkLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tjbGlwYm9hcmRdJ1xufSlcbi8qKlxuICogRGlyZXRpdmEgcXVlIGV4cMO1ZSBzZWxldG9yIHBhcmEgbyB1c28gZG8gY2xpcGJvcmRcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgQ2xpcGJvYXJkRGlyZWN0aXZlIHtcblxuICAgIC8qKlxuICAgICAqIGNsaXBib2FyZCB2YXJpYWJsZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBjbGlwYm9hcmQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIG9uQ2xpcGJvYXJkIHZhcmlhYmxlXG4gICAgICogQHR5cGUge0V2ZW50RW1pdHRlcjxib29sZWFuPn1cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBvbkNsaXBib2FyZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQHBhcmFtIHtDbGlwYm9hcmRTZXJ2aWNlfSBzZXJ2aWNlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBDbGlwYm9hcmRTZXJ2aWNlKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIC8qKlxuICAgICAqIGNvcHkgbWV0aG9kXG4gICAgICogQGV2ZW50IGNsaWNrXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGNvcHkoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZpY2UuY29weSh0aGlzLmNsaXBib2FyZCk7XG4gICAgICAgICAgICB0aGlzLm9uQ2xpcGJvYXJkLmVtaXQodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMub25DbGlwYm9hcmQuZW1pdChmYWxzZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19