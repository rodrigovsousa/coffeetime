import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { ClipboardService } from './clipboard.service';
import * as ɵngcc0 from '@angular/core';
var ClipboardDirective = /** @class */ (function () {
    /**
     * constructor method
     * @param {ClipboardService} service
     * @constructor
     */
    function ClipboardDirective(service) {
        this.service = service;
        /**
         * onClipboard variable
         * @type {EventEmitter<boolean>}
         */
        this.onClipboard = new EventEmitter();
    }
    /**
     * copy method
     * @event click
     * @returns void
     */
    ClipboardDirective.prototype.copy = function () {
        try {
            this.service.copy(this.clipboard);
            this.onClipboard.emit(true);
        }
        catch (e) {
            this.onClipboard.emit(false);
            throw e;
        }
    };
    ClipboardDirective.ctorParameters = function () { return [
        { type: ClipboardService }
    ]; };
    __decorate([
        Input()
    ], ClipboardDirective.prototype, "clipboard", void 0);
    __decorate([
        Output()
    ], ClipboardDirective.prototype, "onClipboard", void 0);
    __decorate([
        HostListener('click')
    ], ClipboardDirective.prototype, "copy", null);
ClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService)); };
ClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [["", "clipboard", ""]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClipboardDirective_click_HostBindingHandler() { return ctx.copy(); });
    } }, inputs: { clipboard: "clipboard" }, outputs: { onClipboard: "onClipboard" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{
        type: Directive,
        args: [{
                selector: '[clipboard]'
            }]
    }], function () { return [{ type: ClipboardService }]; }, { onClipboard: [{
            type: Output
        }], copy: [{
            type: HostListener,
            args: ['click']
        }], clipboard: [{
            type: Input
        }] }); })();
    return ClipboardDirective;
}());
export { ClipboardDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2NsaXBib2FyZC9jbGlwYm9hcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFTdkQ7QUFHVyxJQWFQO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksNEJBQW9CLE9BQXlCO0FBQUksUUFBN0IsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7QUFBQyxRQVo5QztBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFDSSxnQkFBVyxHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO0FBQ3JFLElBTW9ELENBQUM7QUFDckQsSUFFSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGlDQUFJLEdBQUo7QUFDQyxRQUFHLElBQUk7QUFDWixZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM5QyxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hDLFNBQVM7QUFBQyxRQUFBLE9BQU8sQ0FBQyxFQUFFO0FBQ3BCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekMsWUFBWSxNQUFNLENBQUMsQ0FBQztBQUNwQixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0o7QUFDNkQsZ0JBbEI3QixnQkFBZ0I7QUFBRztBQUU3QyxJQWhCSDtBQUFhLFFBRFosS0FBSyxFQUFFO0FBQ1oseURBQXNCO0FBRXRCLElBS0k7QUFBYSxRQURaLE1BQU0sRUFBRTtBQUNiLDJEQUFxRTtBQUVyRSxJQWFJO0FBQ0EsUUFQQyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQzFCLGtEQWFLO0lBckNRLGtCQUFrQix3QkFQOUIsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLGFBQWEsVUFDMUIsQ0FBQyxTQUNGO3VEQUdHLFFBQ1Usa0JBQWtCLENBc0M5Qjs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCx5QkFBQztBQUNBLENBREEsQUF0Q0QsSUFzQ0M7QUFDRCxTQXZDYSxrQkFBa0I7QUFFL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENsaXBib2FyZFNlcnZpY2UgfSBmcm9tICcuL2NsaXBib2FyZC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbY2xpcGJvYXJkXSdcbn0pXG4vKipcbiAqIERpcmV0aXZhIHF1ZSBleHDDtWUgc2VsZXRvciBwYXJhIG8gdXNvIGRvIGNsaXBib3JkXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIENsaXBib2FyZERpcmVjdGl2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBjbGlwYm9hcmQgdmFyaWFibGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgY2xpcGJvYXJkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBvbkNsaXBib2FyZCB2YXJpYWJsZVxuICAgICAqIEB0eXBlIHtFdmVudEVtaXR0ZXI8Ym9vbGVhbj59XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgb25DbGlwYm9hcmQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7Q2xpcGJvYXJkU2VydmljZX0gc2VydmljZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogQ2xpcGJvYXJkU2VydmljZSkge31cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICAvKipcbiAgICAgKiBjb3B5IG1ldGhvZFxuICAgICAqIEBldmVudCBjbGlja1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBjb3B5KCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmNvcHkodGhpcy5jbGlwYm9hcmQpO1xuICAgICAgICAgICAgdGhpcy5vbkNsaXBib2FyZC5lbWl0KHRydWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xpcGJvYXJkLmVtaXQoZmFsc2UpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==