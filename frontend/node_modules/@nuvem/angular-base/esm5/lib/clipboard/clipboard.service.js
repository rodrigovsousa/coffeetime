import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Fornece metodo para copia de textos
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var ClipboardService = /** @class */ (function () {
    function ClipboardService() {
    }
    /**
     * Inspirado no clipboard.js, copia texto selecionado para área de trasferência
     * @param {string} text
     * @returns void
     * @public
     */
    ClipboardService.prototype.copy = function (text) {
        var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
        // cria um elemento temporário, seta o foco, copia e remove em seguida
        var fake = document.createElement('textarea');
        fake.style.fontSize = '12pt';
        fake.style.border = '0';
        fake.style.padding = '0';
        fake.style.margin = '0';
        fake.style.position = 'absolute';
        fake.style[isRTL ? 'right' : 'left'] = '-9999px';
        var yPosition = window.pageYOffset || document.documentElement.scrollTop;
        fake.style.top = yPosition + "px";
        fake.setAttribute('readonly', '');
        fake.value = text;
        document.body.appendChild(fake);
        fake.select();
        document.execCommand('copy');
        document.body.removeChild(fake);
    };
    ClipboardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(); }, token: ClipboardService, providedIn: "root" });
ClipboardService.ɵfac = function ClipboardService_Factory(t) { return new (t || ClipboardService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return ClipboardService;
}());
export { ClipboardService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9jbGlwYm9hcmQvY2xpcGJvYXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlIO0FBR1csSUFIWDtBQUE4QixLQWlDN0I7QUFDRCxJQWhDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksK0JBQUksR0FBSixVQUFLLElBQVk7QUFDckIsUUFBUSxJQUFNLEtBQUssR0FBWSxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUM7QUFDdEYsUUFDUSxzRUFBc0U7QUFDOUUsUUFBUSxJQUFJLElBQUksR0FBd0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzRSxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUNyQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUNoQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNqQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUNoQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUN6QyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUN6RCxRQUNRLElBQUksU0FBUyxHQUFXLE1BQU0sQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUM7QUFDekYsUUFDUSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBTSxTQUFTLE9BQUksQ0FBQztBQUMxQyxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDMUIsUUFDUSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxRQUNRLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN0QixRQUNRLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckMsUUFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxJQUFJLENBQUM7QUFDSjtJQWpDWSxnQkFBZ0Isd0JBSDVCLFVBQVUsQ0FBQyxjQUNSLFVBQVUsRUFBRSxNQUFNLFdBQ3JCLENBQUM7R0FDVyxnQkFBZ0IsQ0FpQzVCOzs7OztnREFDRDtBQUFDLDJCQTNDRDtBQUFFLENBMENELEFBakNELElBaUNDO0FBQ0QsU0FsQ2EsZ0JBQWdCO0FBRTdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEZvcm5lY2UgbWV0b2RvIHBhcmEgY29waWEgZGUgdGV4dG9zXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ2xpcGJvYXJkU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBJbnNwaXJhZG8gbm8gY2xpcGJvYXJkLmpzLCBjb3BpYSB0ZXh0byBzZWxlY2lvbmFkbyBwYXJhIMOhcmVhIGRlIHRyYXNmZXLDqm5jaWFcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29weSh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaXNSVEw6IGJvb2xlYW4gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXInKSA9PT0gJ3J0bCc7XG5cbiAgICAgICAgLy8gY3JpYSB1bSBlbGVtZW50byB0ZW1wb3LDoXJpbywgc2V0YSBvIGZvY28sIGNvcGlhIGUgcmVtb3ZlIGVtIHNlZ3VpZGFcbiAgICAgICAgbGV0IGZha2U6IEhUTUxUZXh0QXJlYUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICBmYWtlLnN0eWxlLmZvbnRTaXplID0gJzEycHQnO1xuICAgICAgICBmYWtlLnN0eWxlLmJvcmRlciA9ICcwJztcbiAgICAgICAgZmFrZS5zdHlsZS5wYWRkaW5nID0gJzAnO1xuICAgICAgICBmYWtlLnN0eWxlLm1hcmdpbiA9ICcwJztcbiAgICAgICAgZmFrZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGZha2Uuc3R5bGVbaXNSVEwgPyAncmlnaHQnIDogJ2xlZnQnXSA9ICctOTk5OXB4JztcblxuICAgICAgICBsZXQgeVBvc2l0aW9uOiBudW1iZXIgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcblxuICAgICAgICBmYWtlLnN0eWxlLnRvcCA9IGAke3lQb3NpdGlvbn1weGA7XG4gICAgICAgIGZha2Uuc2V0QXR0cmlidXRlKCdyZWFkb25seScsICcnKTtcbiAgICAgICAgZmFrZS52YWx1ZSA9IHRleHQ7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmYWtlKTtcblxuICAgICAgICBmYWtlLnNlbGVjdCgpO1xuXG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZmFrZSk7XG4gICAgfVxufVxuIl19