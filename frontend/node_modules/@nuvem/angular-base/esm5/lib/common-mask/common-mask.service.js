import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 *
 * Class CommonMaskService serviço para inserção de mascara de data em campos input
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var CommonMaskService = /** @class */ (function () {
    function CommonMaskService() {
        /**
         * DATE_SEPARATOR property
         * @type {string}
         */
        this.DATE_SEPARATOR = '/';
    }
    /**
     * Metodo para formatar valor digitado no padrão dd/mm/yyyy
     * @param $event
     * @returns void
     */
    CommonMaskService.prototype.dateMask = function ($event) {
        if ($event.target.value) {
            var date = $event.target.value.replace(/[^0-9]/g, '').substr(0, 8);
            if (date.length >= 3) {
                date = date.replace(/^(\d{2})(\d{1,2})/, '$1' + this.DATE_SEPARATOR + '$2');
            }
            if (date.length >= 6) {
                date = date.replace(/^(\S{5})(\d{1,4})/, '$1' + this.DATE_SEPARATOR + '$2');
            }
            $event.target.value = date;
        }
    };
    CommonMaskService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CommonMaskService_Factory() { return new CommonMaskService(); }, token: CommonMaskService, providedIn: "root" });
CommonMaskService.ɵfac = function CommonMaskService_Factory(t) { return new (t || CommonMaskService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CommonMaskService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return CommonMaskService;
}());
export { CommonMaskService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLW1hc2suc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2NvbW1vbi1tYXNrL2NvbW1vbi1tYXNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFVLEdBQ1A7O0FBSUg7QUFHVyxJQUhYO0FBQStCLFFBRTNCO0FBQ0o7QUFDSTtBQUVKLFdBRE87QUFDUCxRQUFxQixtQkFBYyxHQUFHLEdBQUcsQ0FBQztBQUMxQyxLQXFCQztBQUNELElBckJJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksb0NBQVEsR0FBUixVQUFTLE1BQU07QUFDbkIsUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQ2pDLFlBQVksSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9FLFlBQ1ksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtBQUNsQyxnQkFBYyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMxRixhQUFhO0FBQ2IsWUFDWSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ2xDLGdCQUFjLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzFGLGFBQWE7QUFDYixZQUNZLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUN2QyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0o7SUE1QlksaUJBQWlCLHdCQUg3QixVQUFVLENBQUMsY0FDVixVQUFVLEVBQUUsTUFBTSxXQUNuQixDQUFDO0NBQ1csaUJBQWlCLENBNEI3Qjs7Ozs7Z0RBQ0Q7QUFBQyw0QkF2Q0Q7QUFBRSxDQXNDRCxBQTVCRCxJQTRCQztBQUNELFNBN0JhLGlCQUFpQjtBQUU5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKlxuICogQ2xhc3MgQ29tbW9uTWFza1NlcnZpY2Ugc2VydmnDp28gcGFyYSBpbnNlcsOnw6NvIGRlIG1hc2NhcmEgZGUgZGF0YSBlbSBjYW1wb3MgaW5wdXRcbiAqIEBjbGFzcyBcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENvbW1vbk1hc2tTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIERBVEVfU0VQQVJBVE9SIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IERBVEVfU0VQQVJBVE9SID0gJy8nO1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHBhcmEgZm9ybWF0YXIgdmFsb3IgZGlnaXRhZG8gbm8gcGFkcsOjbyBkZC9tbS95eXl5XG4gICAgICogQHBhcmFtICRldmVudFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBkYXRlTWFzaygkZXZlbnQpIHtcbiAgICAgICAgaWYgKCRldmVudC50YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBkYXRlID0gJGV2ZW50LnRhcmdldC52YWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpLnN1YnN0cigwLCA4KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGUubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUucmVwbGFjZSgvXihcXGR7Mn0pKFxcZHsxLDJ9KS8sICckMScgKyB0aGlzLkRBVEVfU0VQQVJBVE9SICsgJyQyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYXRlLmxlbmd0aCA+PSA2KSB7XG4gICAgICAgICAgICAgIGRhdGUgPSBkYXRlLnJlcGxhY2UoL14oXFxTezV9KShcXGR7MSw0fSkvLCAnJDEnICsgdGhpcy5EQVRFX1NFUEFSQVRPUiArICckMicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkZXZlbnQudGFyZ2V0LnZhbHVlID0gZGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==