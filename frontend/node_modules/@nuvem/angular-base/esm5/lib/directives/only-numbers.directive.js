import { __decorate } from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
/**
 * OnlyNumbersDirective diretiva para que sejam permitidos somente números
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var OnlyNumbersDirective = /** @class */ (function () {
    /**
     * @param {ElementRef} el
     * @constructor
     */
    function OnlyNumbersDirective(el) {
        this.el = el;
        /**
         * Propriedade que carrega expressão regular para numeros
         * @type {RegExp}
         */
        this.regex = new RegExp(/[^0-9]$/g);
        /**
         * Propriedade que lista opções aceitas além de núsmeros
         * @type {Array<string>}
         */
        this.specialKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'End',
            'Home',
            'ArrowLeft',
            'ArrowRight'
        ];
    }
    /**
     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado
     * @param {KeyboardEvent} event
     * @returns void
     */
    OnlyNumbersDirective.prototype.onKeyDown = function (event) {
        var current = this.el.nativeElement.value;
        var next = current.concat(event.key);
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        if (next && String(next).match(this.regex)) {
            event.preventDefault();
        }
    };
    OnlyNumbersDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('keydown', ['$event'])
    ], OnlyNumbersDirective.prototype, "onKeyDown", null);
OnlyNumbersDirective.ɵfac = function OnlyNumbersDirective_Factory(t) { return new (t || OnlyNumbersDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OnlyNumbersDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OnlyNumbersDirective, selectors: [["input", "onlyNumbers", ""]], hostBindings: function OnlyNumbersDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function OnlyNumbersDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OnlyNumbersDirective, [{
        type: Directive,
        args: [{
                selector: 'input[onlyNumbers]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();
    return OnlyNumbersDirective;
}());
export { OnlyNumbersDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25seS1udW1iZXJzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2RpcmVjdGl2ZXMvb25seS1udW1iZXJzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUg7QUFHVyxJQW1CUDtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSw4QkFBb0IsRUFBYztBQUFJLFFBQWxCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQXhCbkM7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQVksVUFBSyxHQUFXLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25ELFFBQ0k7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQVksZ0JBQVcsR0FBa0I7QUFDekMsWUFBUSxXQUFXO0FBQ25CLFlBQVEsUUFBUTtBQUNoQixZQUFRLEtBQUs7QUFDYixZQUFRLEtBQUs7QUFDYixZQUFRLE1BQU07QUFDZCxZQUFRLFdBQVc7QUFDbkIsWUFBUSxZQUFZO0FBQ3BCLFNBQUssQ0FBQztBQUNOLElBSzBDLENBQUM7QUFDM0MsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUNJLHdDQUFTLEdBQVQsVUFBVSxLQUFvQjtBQUNsQyxRQUNRLElBQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztBQUM1RCxRQUFRLElBQU0sSUFBSSxHQUFXLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELFFBQ1EsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDeEQsWUFBWSxPQUFPO0FBQ25CLFNBQVM7QUFDVCxRQUNRLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3BELFlBQVksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ25DLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFFTDtBQUMrRCxnQkF2Qm5DLFVBQVU7QUFBRztBQUVuQyxJQU1GO0FBQWEsUUFEWixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEMseURBWUs7SUE5Q1Esb0JBQW9CLHdCQUhoQyxTQUFTLENBQUMsY0FDUCxRQUFRLEVBQUUsb0JBQW9CLFVBQ2pDLENBQUMsUUFDVyxvQkFBb0IsQ0FnRGhDOzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELDJCQUFDO0FBQ0EsQ0FEQSxBQWhERCxJQWdEQztBQUNELFNBakRhLG9CQUFvQjtBQUVqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogT25seU51bWJlcnNEaXJlY3RpdmUgZGlyZXRpdmEgcGFyYSBxdWUgc2VqYW0gcGVybWl0aWRvcyBzb21lbnRlIG7Dum1lcm9zXG4gKiBAY2xhc3NcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpbnB1dFtvbmx5TnVtYmVyc10nXG59KVxuZXhwb3J0IGNsYXNzIE9ubHlOdW1iZXJzRGlyZWN0aXZlIHtcblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIHF1ZSBjYXJyZWdhIGV4cHJlc3PDo28gcmVndWxhciBwYXJhIG51bWVyb3NcbiAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVnZXg6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1teMC05XSQvZyk7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wcmllZGFkZSBxdWUgbGlzdGEgb3DDp8O1ZXMgYWNlaXRhcyBhbMOpbSBkZSBuw7pzbWVyb3NcbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHNwZWNpYWxLZXlzOiBBcnJheTxzdHJpbmc+ID0gW1xuICAgICAgICAnQmFja3NwYWNlJyxcbiAgICAgICAgJ0RlbGV0ZScsXG4gICAgICAgICdUYWInLFxuICAgICAgICAnRW5kJyxcbiAgICAgICAgJ0hvbWUnLFxuICAgICAgICAnQXJyb3dMZWZ0JyxcbiAgICAgICAgJ0Fycm93UmlnaHQnXG4gICAgXTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudFJlZn0gZWxcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBleGVjdXRhZG8gcGFyYSBvcyBldmVudG8gS2V5RG93biBkbyB0ZWNsYWRvIGV4ZWN1dGEgdmVyaWZpY2HDp8OjbyBkbyB2YWxvciBkaWdpdGFkb1xuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG5cbiAgICAgICAgY29uc3QgY3VycmVudDogc3RyaW5nID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnZhbHVlO1xuICAgICAgICBjb25zdCBuZXh0OiBzdHJpbmcgPSBjdXJyZW50LmNvbmNhdChldmVudC5rZXkpO1xuXG4gICAgICAgIGlmICh0aGlzLnNwZWNpYWxLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ICYmIFN0cmluZyhuZXh0KS5tYXRjaCh0aGlzLnJlZ2V4KSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19