import { __decorate } from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
/**
 * OnlyNumbersDirective diretiva para que sejam permitidos somente números
 * @class
 */
var OnlyNumbersDirective = /** @class */ (function () {
    /**
     * @param {ElementRef} el
     * @constructor
     */
    function OnlyNumbersDirective(el) {
        this.el = el;
        /**
         * Propriedade que carrega expressão regular para numeros
         * @type {RegExp}
         */
        this.regex = new RegExp(/[^0-9]$/g);
        /**
         * Propriedade que lista opções aceitas além de núsmeros
         * @type {Array<string>}
         */
        this.specialKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'End',
            'Home',
            'ArrowLeft',
            'ArrowRight'
        ];
    }
    /**
     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado
     * @param {KeyboardEvent} event
     * @returns void
     */
    OnlyNumbersDirective.prototype.onKeyDown = function (event) {
        var current = this.el.nativeElement.value;
        var next = current.concat(event.key);
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        if (next && String(next).match(this.regex)) {
            event.preventDefault();
        }
    };
    OnlyNumbersDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('keydown', ['$event'])
    ], OnlyNumbersDirective.prototype, "onKeyDown", null);
    OnlyNumbersDirective = __decorate([
        Directive({
            selector: 'input[onlyNumbers]'
        })
    ], OnlyNumbersDirective);
    return OnlyNumbersDirective;
}());
export { OnlyNumbersDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25seS1udW1iZXJzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9vbmx5LW51bWJlcnMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEU7OztHQUdHO0FBSUg7SUFzQkk7OztPQUdHO0lBQ0gsOEJBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBeEJsQzs7O1dBR0c7UUFDSyxVQUFLLEdBQVcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFL0M7OztXQUdHO1FBQ0ssZ0JBQVcsR0FBa0I7WUFDakMsV0FBVztZQUNYLFFBQVE7WUFDUixLQUFLO1lBQ0wsS0FBSztZQUNMLE1BQU07WUFDTixXQUFXO1lBQ1gsWUFBWTtTQUNmLENBQUM7SUFNb0MsQ0FBQztJQUV2Qzs7OztPQUlHO0lBRUgsd0NBQVMsR0FBVCxVQUFVLEtBQW9CO1FBRTFCLElBQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUNwRCxJQUFNLElBQUksR0FBVyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM1QyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDOztnQkFwQnVCLFVBQVU7O0lBUWxDO1FBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3lEQWFuQztJQTlDUSxvQkFBb0I7UUFIaEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG9CQUFvQjtTQUNqQyxDQUFDO09BQ1csb0JBQW9CLENBZ0RoQztJQUFELDJCQUFDO0NBQUEsQUFoREQsSUFnREM7U0FoRFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBPbmx5TnVtYmVyc0RpcmVjdGl2ZSBkaXJldGl2YSBwYXJhIHF1ZSBzZWphbSBwZXJtaXRpZG9zIHNvbWVudGUgbsO6bWVyb3NcbiAqIEBjbGFzc1xuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W29ubHlOdW1iZXJzXSdcbn0pXG5leHBvcnQgY2xhc3MgT25seU51bWJlcnNEaXJlY3RpdmUge1xuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgcXVlIGNhcnJlZ2EgZXhwcmVzc8OjbyByZWd1bGFyIHBhcmEgbnVtZXJvc1xuICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWdleDogUmVnRXhwID0gbmV3IFJlZ0V4cCgvW14wLTldJC9nKTtcblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIHF1ZSBsaXN0YSBvcMOnw7VlcyBhY2VpdGFzIGFsw6ltIGRlIG7DunNtZXJvc1xuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHByaXZhdGUgc3BlY2lhbEtleXM6IEFycmF5PHN0cmluZz4gPSBbXG4gICAgICAgICdCYWNrc3BhY2UnLFxuICAgICAgICAnRGVsZXRlJyxcbiAgICAgICAgJ1RhYicsXG4gICAgICAgICdFbmQnLFxuICAgICAgICAnSG9tZScsXG4gICAgICAgICdBcnJvd0xlZnQnLFxuICAgICAgICAnQXJyb3dSaWdodCdcbiAgICBdO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50UmVmfSBlbFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGV4ZWN1dGFkbyBwYXJhIG9zIGV2ZW50byBLZXlEb3duIGRvIHRlY2xhZG8gZXhlY3V0YSB2ZXJpZmljYcOnw6NvIGRvIHZhbG9yIGRpZ2l0YWRvXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblxuICAgICAgICBjb25zdCBjdXJyZW50OiBzdHJpbmcgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICAgIGNvbnN0IG5leHQ6IHN0cmluZyA9IGN1cnJlbnQuY29uY2F0KGV2ZW50LmtleSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3BlY2lhbEtleXMuaW5kZXhPZihldmVudC5rZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgJiYgU3RyaW5nKG5leHQpLm1hdGNoKHRoaXMucmVnZXgpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=