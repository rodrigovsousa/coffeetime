import { __decorate } from "tslib";
import { Directive, ElementRef, OnInit, Input, OnDestroy } from '@angular/core';
import { NgControl } from '@angular/forms';
/**
 *
 * UnmaskDirective diretiva para remoção de mascaras de valores numericos
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
var UnmaskDirective = /** @class */ (function () {
    /**
     * constructor method
     * @param {ElementRef} elementRef
     * @param {NgControl} model
     * @constructor
     */
    function UnmaskDirective(elementRef, model) {
        this.elementRef = elementRef;
        this.model = model;
    }
    /**
     * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular
     * @returns void
     */
    UnmaskDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriber = this.model.control.valueChanges.subscribe(function () {
            var newValue = _this.elementRef.nativeElement.value.replace(new RegExp(_this.appUnmask), '');
            _this.model.control.setValue(newValue, {
                emitEvent: false,
                emitModelToViewChange: false,
                emitViewToModelChange: false
            });
        });
    };
    /**
     * ngOnDestroy method
     * @returns void
     */
    UnmaskDirective.prototype.ngOnDestroy = function () {
        this.subscriber.unsubscribe();
    };
    UnmaskDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl }
    ]; };
    __decorate([
        Input()
    ], UnmaskDirective.prototype, "appUnmask", void 0);
UnmaskDirective.ɵfac = function UnmaskDirective_Factory(t) { return new (t || UnmaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl)); };
UnmaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: UnmaskDirective, selectors: [["", "unmask", ""]], inputs: { appUnmask: "appUnmask" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UnmaskDirective, [{
        type: Directive,
        args: [{
                selector: '[unmask]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgControl }]; }, { appUnmask: [{
            type: Input
        }] }); })();
    return UnmaskDirective;
}());
export { UnmaskDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tYXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2RpcmVjdGl2ZXMvdW5tYXNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBSUg7QUFBbUQsSUFjL0M7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLHlCQUFvQixVQUFzQixFQUFVLEtBQWdCO0FBQUksUUFBcEQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQVMsVUFBSyxHQUFMLEtBQUssQ0FBVztBQUFDLElBQUcsQ0FBQztBQUM3RSxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGtDQUFRLEdBQVI7QUFBYyxRQUFkLGlCQWNDO0FBQ0wsUUFkUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQ3ZEO0FBQ04sWUFBVSxJQUFNLFFBQVEsR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3RyxZQUFnQixLQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQ3ZCLFFBQVEsRUFDUjtBQUNwQixnQkFBd0IsU0FBUyxFQUFFLEtBQUs7QUFDeEMsZ0JBQXdCLHFCQUFxQixFQUFFLEtBQUs7QUFDcEQsZ0JBQXdCLHFCQUFxQixFQUFFLEtBQUs7QUFDcEQsYUFBcUIsQ0FDSixDQUFDO0FBQ2xCLFFBQVksQ0FBQyxDQUNKLENBQUM7QUFDVixJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLHFDQUFXLEdBQVg7QUFBYyxRQUNWLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEMsSUFBSSxDQUFDO0FBQ0o7QUFDMEQsZ0JBOUJ2QixVQUFVO0FBQUksZ0JBQWEsU0FBUztBQUFHO0FBRXJFLElBaEJPO0FBQWEsUUFBckIsS0FBSyxFQUFFO0FBQUMsc0RBQWtCO0lBTmxCLGVBQWUsd0JBSDNCLFNBQVMsQ0FBQyxjQUNQLFFBQVEsRUFBRSxVQUFVLFVBQ3ZCLENBQUMsUUFDVyxlQUFlLENBaUQzQjs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCxzQkFBQztBQUNBLENBREEsQUFqREQsSUFpREM7QUFDRCxTQWxEYSxlQUFlO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE9uSW5pdCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqXG4gKiBVbm1hc2tEaXJlY3RpdmUgZGlyZXRpdmEgcGFyYSByZW1vw6fDo28gZGUgbWFzY2FyYXMgZGUgdmFsb3JlcyBudW1lcmljb3NcbiAqIEBjbGFzc1xuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t1bm1hc2tdJ1xufSlcbmV4cG9ydCBjbGFzcyBVbm1hc2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wcmllZGFkZSBhIHBhcmEgcmVhbGl6YXIgYSBmb3JtYXRhw6fDo28gZXhwcmVzc8OjbyByZWd1bGFyXG4gICAgICogQHR5cGUge3N0cmluZ30gYXBwVW5tYXNrXG4gICAgICovXG4gICAgQElucHV0KCkgYXBwVW5tYXNrOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBDcmlhIGNhbmFsIGRlIGVzY3V0YSBwYXJhIGEgZGlyZXRpdmFcbiAgICAgKiBAdHlwZSB7U3Vic2NyaXB0aW9ufSBzdWJzY3JpYmVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVyO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQHBhcmFtIHtFbGVtZW50UmVmfSBlbGVtZW50UmVmXG4gICAgICogQHBhcmFtIHtOZ0NvbnRyb2x9IG1vZGVsXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIG1vZGVsOiBOZ0NvbnRyb2wpIHsgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGV4ZWN1dGFkbyBubyBjYXJyZWdhbWVudG8gZGEgZGlyZXRpdmEsIGV4ZWN1dGEgdmVyaWZpY2HDp8OjbyBkbyB2YWxvciBlIHJlbW92ZSBhcyBtYXNjYXJhcyBiYXNlYWRvIGVtIHVtIGFleHByZXNzw6NvIHJlZ3VsYXJcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IHRoaXMubW9kZWwuY29udHJvbC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMuYXBwVW5tYXNrKSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuY29udHJvbC5zZXRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRFdmVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0TW9kZWxUb1ZpZXdDaGFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdFZpZXdUb01vZGVsQ2hhbmdlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuZ09uRGVzdHJveSBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbiJdfQ==