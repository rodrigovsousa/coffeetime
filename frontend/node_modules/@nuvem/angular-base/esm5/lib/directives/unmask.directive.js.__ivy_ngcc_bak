import { __decorate } from "tslib";
import { Directive, ElementRef, OnInit, Input, OnDestroy } from '@angular/core';
import { NgControl } from '@angular/forms';
/**
 *
 * UnmaskDirective diretiva para remoção de mascaras de valores numericos
 * @class
 */
var UnmaskDirective = /** @class */ (function () {
    /**
     * constructor method
     * @param {ElementRef} elementRef
     * @param {NgControl} model
     * @constructor
     */
    function UnmaskDirective(elementRef, model) {
        this.elementRef = elementRef;
        this.model = model;
    }
    /**
     * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular
     * @returns void
     */
    UnmaskDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriber = this.model.control.valueChanges.subscribe(function () {
            var newValue = _this.elementRef.nativeElement.value.replace(new RegExp(_this.appUnmask), '');
            _this.model.control.setValue(newValue, {
                emitEvent: false,
                emitModelToViewChange: false,
                emitViewToModelChange: false
            });
        });
    };
    /**
     * ngOnDestroy method
     * @returns void
     */
    UnmaskDirective.prototype.ngOnDestroy = function () {
        this.subscriber.unsubscribe();
    };
    UnmaskDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl }
    ]; };
    __decorate([
        Input()
    ], UnmaskDirective.prototype, "appUnmask", void 0);
    UnmaskDirective = __decorate([
        Directive({
            selector: '[unmask]'
        })
    ], UnmaskDirective);
    return UnmaskDirective;
}());
export { UnmaskDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tYXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy91bm1hc2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7Ozs7R0FJRztBQUlIO0lBY0k7Ozs7O09BS0c7SUFDSCx5QkFBb0IsVUFBc0IsRUFBVSxLQUFnQjtRQUFoRCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBVztJQUFJLENBQUM7SUFFekU7OztPQUdHO0lBQ0gsa0NBQVEsR0FBUjtRQUFBLGlCQWNDO1FBYkcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUN2RDtZQUNJLElBQU0sUUFBUSxHQUFHLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzdGLEtBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDdkIsUUFBUSxFQUNSO2dCQUNJLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixxQkFBcUIsRUFBRSxLQUFLO2dCQUM1QixxQkFBcUIsRUFBRSxLQUFLO2FBQy9CLENBQ0osQ0FBQztRQUNOLENBQUMsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNILHFDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7O2dCQTVCK0IsVUFBVTtnQkFBaUIsU0FBUzs7SUFkM0Q7UUFBUixLQUFLLEVBQUU7c0RBQW1CO0lBTmxCLGVBQWU7UUFIM0IsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFVBQVU7U0FDdkIsQ0FBQztPQUNXLGVBQWUsQ0FpRDNCO0lBQUQsc0JBQUM7Q0FBQSxBQWpERCxJQWlEQztTQWpEWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPbkluaXQsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKlxuICogVW5tYXNrRGlyZWN0aXZlIGRpcmV0aXZhIHBhcmEgcmVtb8Onw6NvIGRlIG1hc2NhcmFzIGRlIHZhbG9yZXMgbnVtZXJpY29zXG4gKiBAY2xhc3NcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdW5tYXNrXSdcbn0pXG5leHBvcnQgY2xhc3MgVW5tYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgYSBwYXJhIHJlYWxpemFyIGEgZm9ybWF0YcOnw6NvIGV4cHJlc3PDo28gcmVndWxhclxuICAgICAqIEB0eXBlIHtzdHJpbmd9IGFwcFVubWFza1xuICAgICAqL1xuICAgIEBJbnB1dCgpIGFwcFVubWFzazogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQ3JpYSBjYW5hbCBkZSBlc2N1dGEgcGFyYSBhIGRpcmV0aXZhXG4gICAgICogQHR5cGUge1N1YnNjcmlwdGlvbn0gc3Vic2NyaWJlclxuICAgICAqL1xuICAgIHByaXZhdGUgc3Vic2NyaWJlcjtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudFJlZn0gZWxlbWVudFJlZlxuICAgICAqIEBwYXJhbSB7TmdDb250cm9sfSBtb2RlbFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBtb2RlbDogTmdDb250cm9sKSB7IH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBleGVjdXRhZG8gbm8gY2FycmVnYW1lbnRvIGRhIGRpcmV0aXZhLCBleGVjdXRhIHZlcmlmaWNhw6fDo28gZG8gdmFsb3IgZSByZW1vdmUgYXMgbWFzY2FyYXMgYmFzZWFkbyBlbSB1bSBhZXhwcmVzc8OjbyByZWd1bGFyXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YnNjcmliZXIgPSB0aGlzLm1vZGVsLmNvbnRyb2wudmFsdWVDaGFuZ2VzLnN1YnNjcmliZShcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLmFwcFVubWFzayksICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNvbnRyb2wuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0RXZlbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRWaWV3VG9Nb2RlbENoYW5nZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbmdPbkRlc3Ryb3kgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4iXX0=