import { __decorate } from "tslib";
import { ErrorHandler, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ErrorService } from './error.service';
import { ErrorProvider } from './providers/error.provider';
import { HttpApplicationProblemErrorService } from './services/http-application-problem-error.service';
import { HttpGenericErrorService } from './services/http-generic-error.service';
/**
 * O modulo ErrorModule contem funcionalidades para a captura e apresentação dos erros que possam ocorrer na aplicação.
 * @module
 */
import * as ɵngcc0 from '@angular/core';
var ErrorModule = /** @class */ (function () {
    function ErrorModule() {
    }
ErrorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ErrorModule });
ErrorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ErrorModule_Factory(t) { return new (t || ErrorModule)(); }, providers: [
        {
            provide: ErrorProvider,
            useClass: HttpGenericErrorService,
            multi: true
        },
        {
            provide: ErrorProvider,
            useClass: HttpApplicationProblemErrorService,
            multi: true
        },
        {
            provide: ErrorHandler,
            useClass: ErrorService
        },
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ErrorModule, { imports: function () { return [CommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [
                    CommonModule
                ],
                providers: [
                    {
                        provide: ErrorProvider,
                        useClass: HttpGenericErrorService,
                        multi: true
                    },
                    {
                        provide: ErrorProvider,
                        useClass: HttpApplicationProblemErrorService,
                        multi: true
                    },
                    {
                        provide: ErrorHandler,
                        useClass: ErrorService
                    },
                ]
            }]
    }], function () { return []; }, null); })();
    return ErrorModule;
}());
export { ErrorModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL2FuZ3VsYXItYmFzZS9saWIvZXJyb3IvZXJyb3IubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDdkcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFaEY7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUF1Qkg7QUFFa0IsSUFGbEI7QUFBeUIsSUFDekIsQ0FBQztJQURZLFdBQVcsd0JBdEJ2QixRQUFRLENBQUMsY0FDTjtPQUFZLEVBQUUsRUFBRSxjQUNoQixPQUFPLEVBQUUsa0JBQ0wsWUFBWSxjQUNmLGNBQ0QsU0FBUyxFQUFFLGtCQUNQO01BQ0k7R0FBTyxFQUFFLGFBQWE7SUFDdEIsUUFBUSxFQUFFLHVCQUF1QjtZQUNqQyxLQUFLLEVBQUUsSUFBSTs7TUFDZDtjQUNEO0FBQ0ksT0FBTyxFQUFFLGFBQWEsc0JBQ3RCLFFBQVEsRUFBRTs7TUFBa0M7O09BQzVDLEtBQUssRUFBRSxJQUFJO0NBQ2Qsa0JBQ0Q7TUFDSTtFQUFPLEVBQUUsWUFBWTttQkFDckI7RUFBUSxFQUFFO0NBQVksbUJBQ3pCLGVBQ0osVUFDSixDQUFDLFFBQ1csV0FBVyxDQUN2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnREFDRDtBQUFDLElBREQsa0JBQUM7QUFDQSxDQURBLEFBREQsSUFDQztBQUNELFNBRmEsV0FBVztBQUN2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9ySGFuZGxlciwgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEVycm9yU2VydmljZSB9IGZyb20gJy4vZXJyb3Iuc2VydmljZSc7XG5pbXBvcnQgeyBFcnJvclByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvZXJyb3IucHJvdmlkZXInO1xuaW1wb3J0IHsgSHR0cEFwcGxpY2F0aW9uUHJvYmxlbUVycm9yU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvaHR0cC1hcHBsaWNhdGlvbi1wcm9ibGVtLWVycm9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cEdlbmVyaWNFcnJvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2h0dHAtZ2VuZXJpYy1lcnJvci5zZXJ2aWNlJztcblxuLyoqXG4gKiBPIG1vZHVsbyBFcnJvck1vZHVsZSBjb250ZW0gZnVuY2lvbmFsaWRhZGVzIHBhcmEgYSBjYXB0dXJhIGUgYXByZXNlbnRhw6fDo28gZG9zIGVycm9zIHF1ZSBwb3NzYW0gb2NvcnJlciBuYSBhcGxpY2HDp8Ojby5cbiAqIEBtb2R1bGVcbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogRXJyb3JQcm92aWRlcixcbiAgICAgICAgICAgIHVzZUNsYXNzOiBIdHRwR2VuZXJpY0Vycm9yU2VydmljZSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEVycm9yUHJvdmlkZXIsXG4gICAgICAgICAgICB1c2VDbGFzczogSHR0cEFwcGxpY2F0aW9uUHJvYmxlbUVycm9yU2VydmljZSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEVycm9ySGFuZGxlcixcbiAgICAgICAgICAgIHVzZUNsYXNzOiBFcnJvclNlcnZpY2UsXG4gICAgICAgIH0sXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBFcnJvck1vZHVsZSB7XG59XG4iXX0=