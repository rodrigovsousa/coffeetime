import { __decorate, __extends, __param } from "tslib";
import { ErrorHandler, Inject, Injectable } from '@angular/core';
import { ErrorProvider } from './providers/error.provider';
import * as i0 from "@angular/core";
import * as i1 from "./providers/error.provider";
/**
 * Class ErrorService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var ErrorService = /** @class */ (function (_super) {
    __extends(ErrorService, _super);
    /**
     * Metodo construtor responável por injetar o serviço ErrorProvider
     * @param {ErrorProvider} providers
     */
    function ErrorService(providers) {
        var _this = _super.call(this) || this;
        _this.providers = providers;
        return _this;
    }
    /**
     * Metodo responsável por idetificar e obter os erros lançados de requisições http/https
     * @param {Error} error
     * @returns void
     */
    ErrorService.prototype.handleError = function (error) {
        try {
            this.providers.forEach(function (p) {
                if (p.shouldHandle(error)) {
                    p.handle(error);
                }
            });
        }
        catch (e) {
        }
        _super.prototype.handleError.call(this, error);
    };
    ErrorService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [ErrorProvider,] }] }
    ]; };
    ErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorService_Factory() { return new ErrorService(i0.ɵɵinject(i1.ErrorProvider)); }, token: ErrorService, providedIn: "root" });
    ErrorService = __decorate([ __param(0, Inject(ErrorProvider))
    ], ErrorService);
ErrorService.ɵfac = function ErrorService_Factory(t) { return new (t || ErrorService)(ɵngcc0.ɵɵinject(ErrorProvider)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Array, decorators: [{
                type: Inject,
                args: [ErrorProvider]
            }] }]; }, null); })();
    return ErrorService;
}(ErrorHandler));
export { ErrorService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3Iuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2Vycm9yL2Vycm9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0Q7QUFJQTtBQUhBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUg7QUFFSSxJQUY4QixnQ0FBWTtBQUFDLElBRTNDO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLHNCQUEyQyxTQUEwQjtBQUN6RSxRQURJLFlBQ0ksaUJBQU8sU0FDVjtBQUNMLFFBSCtDLGVBQVMsR0FBVCxTQUFTLENBQWlCO0FBQUM7QUFFeEUsSUFBRSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGtDQUFXLEdBQVgsVUFBWSxLQUFZO0FBQzVCLFFBQVEsSUFBSTtBQUNaLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO0FBQUksZ0JBQ3hCLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMzQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxpQkFBaUI7QUFDakIsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLFNBQVM7QUFBQyxRQUFBLE9BQU8sQ0FBQyxFQUFFO0FBQ3BCLFNBQVM7QUFDVCxRQUFRLGlCQUFNLFdBQVcsWUFBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxJQUFJLENBQUM7QUFDSjtBQUN1RCw0Q0FyQnZDLE1BQU0sU0FBQyxhQUFhO0FBQVE7QUFBVTtBQU9uQyxJQWJQLFlBQVksd0JBSHhCLFVBQVUsQ0FBQyxjQUNSLGxDQUVJLENBTVMsV0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7U0FSeEIsRUFBRSxNQUFNLGpCQVFpQixPQU4xQixZQUFZLENBMEJ4QjtNQTNCQSxDQUFDOzs7Ozs7Ozs7a0NBNEJGO0FBQUMsdUJBckNEO0FBQUUsQ0FvQ0QsQUExQkQsQ0FBa0MsWUFBWSxHQTBCN0M7QUFDRCxTQTNCYSxZQUFZO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFcnJvckhhbmRsZXIsIEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL2Vycm9yLnByb3ZpZGVyJztcblxuLyoqXG4gKiBDbGFzcyBFcnJvclNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBFcnJvclNlcnZpY2UgZXh0ZW5kcyBFcnJvckhhbmRsZXIge1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGNvbnN0cnV0b3IgcmVzcG9uw6F2ZWwgcG9yIGluamV0YXIgbyBzZXJ2acOnbyBFcnJvclByb3ZpZGVyXG4gICAgICogQHBhcmFtIHtFcnJvclByb3ZpZGVyfSBwcm92aWRlcnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEVycm9yUHJvdmlkZXIpIHByaXZhdGUgcHJvdmlkZXJzOiBFcnJvclByb3ZpZGVyW10pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBvciBpZGV0aWZpY2FyIGUgb2J0ZXIgb3MgZXJyb3MgbGFuw6dhZG9zIGRlIHJlcXVpc2nDp8O1ZXMgaHR0cC9odHRwc1xuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhhbmRsZUVycm9yKGVycm9yOiBFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocC5zaG91bGRIYW5kbGUoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHAuaGFuZGxlKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICB9XG59XG4iXX0=