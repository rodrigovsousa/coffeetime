import { __decorate, __extends, __param } from "tslib";
import { ErrorHandler, Inject, Injectable } from '@angular/core';
import { ErrorProvider } from './providers/error.provider';
import * as i0 from "@angular/core";
import * as i1 from "./providers/error.provider";
/**
 * Class ErrorService
 * @class
 */
var ErrorService = /** @class */ (function (_super) {
    __extends(ErrorService, _super);
    /**
     * Metodo construtor responável por injetar o serviço ErrorProvider
     * @param {ErrorProvider} providers
     */
    function ErrorService(providers) {
        var _this = _super.call(this) || this;
        _this.providers = providers;
        return _this;
    }
    /**
     * Metodo responsável por idetificar e obter os erros lançados de requisições http/https
     * @param {Error} error
     * @returns void
     */
    ErrorService.prototype.handleError = function (error) {
        try {
            this.providers.forEach(function (p) {
                if (p.shouldHandle(error)) {
                    p.handle(error);
                }
            });
        }
        catch (e) {
        }
        _super.prototype.handleError.call(this, error);
    };
    ErrorService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [ErrorProvider,] }] }
    ]; };
    ErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorService_Factory() { return new ErrorService(i0.ɵɵinject(i1.ErrorProvider)); }, token: ErrorService, providedIn: "root" });
    ErrorService = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Inject(ErrorProvider))
    ], ErrorService);
    return ErrorService;
}(ErrorHandler));
export { ErrorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZXJyb3IvZXJyb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBRTNEOzs7R0FHRztBQUlIO0lBQWtDLGdDQUFZO0lBRTFDOzs7T0FHRztJQUNILHNCQUEyQyxTQUEwQjtRQUFyRSxZQUNJLGlCQUFPLFNBQ1Y7UUFGMEMsZUFBUyxHQUFULFNBQVMsQ0FBaUI7O0lBRXJFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsa0NBQVcsR0FBWCxVQUFZLEtBQVk7UUFDcEIsSUFBSTtZQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN2QixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuQjtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFBQyxPQUFPLENBQUMsRUFBRTtTQUNYO1FBQ0QsaUJBQU0sV0FBVyxZQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7OzRDQW5CWSxNQUFNLFNBQUMsYUFBYTs7O0lBTnhCLFlBQVk7UUFIeEIsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztRQU9lLFdBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO09BTnpCLFlBQVksQ0EwQnhCO3VCQXBDRDtDQW9DQyxBQTFCRCxDQUFrQyxZQUFZLEdBMEI3QztTQTFCWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXJyb3JIYW5kbGVyLCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVycm9yUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5cbi8qKlxuICogQ2xhc3MgRXJyb3JTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgRXJyb3JTZXJ2aWNlIGV4dGVuZHMgRXJyb3JIYW5kbGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbsOhdmVsIHBvciBpbmpldGFyIG8gc2VydmnDp28gRXJyb3JQcm92aWRlclxuICAgICAqIEBwYXJhbSB7RXJyb3JQcm92aWRlcn0gcHJvdmlkZXJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoQEluamVjdChFcnJvclByb3ZpZGVyKSBwcml2YXRlIHByb3ZpZGVyczogRXJyb3JQcm92aWRlcltdKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwb3IgaWRldGlmaWNhciBlIG9idGVyIG9zIGVycm9zIGxhbsOnYWRvcyBkZSByZXF1aXNpw6fDtWVzIGh0dHAvaHR0cHNcbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoYW5kbGVFcnJvcihlcnJvcjogRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHAuc2hvdWxkSGFuZGxlKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICBwLmhhbmRsZShlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgfVxufVxuIl19