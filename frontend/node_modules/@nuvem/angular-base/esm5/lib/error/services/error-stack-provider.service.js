import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { ErrorStackService } from './error-stack.service';
import * as i0 from "@angular/core";
import * as i1 from "./error-stack.service";
/**
 * Class ErrorStackProviderService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var ErrorStackProviderService = /** @class */ (function () {
    /**
     * Metodo construtor responsável por injetar o serviso de erros
     * @param {ErrorStackService} errorStackService
     */
    function ErrorStackProviderService(errorStackService) {
        this.errorStackService = errorStackService;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @param {Error} error
     * @returns Boolean
     */
    ErrorStackProviderService.prototype.shouldHandle = function (error) {
        return error instanceof HttpErrorResponse;
    };
    /**
     * Metodo pela adição de erros
     * @param {HttpErrorResponse} error
     * @returns void
     */
    ErrorStackProviderService.prototype.handle = function (error) {
        this.errorStackService.create(error);
    };
    ErrorStackProviderService.ctorParameters = function () { return [
        { type: ErrorStackService }
    ]; };
    ErrorStackProviderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorStackProviderService_Factory() { return new ErrorStackProviderService(i0.ɵɵinject(i1.ErrorStackService)); }, token: ErrorStackProviderService, providedIn: "root" });
ErrorStackProviderService.ɵfac = function ErrorStackProviderService_Factory(t) { return new (t || ErrorStackProviderService)(ɵngcc0.ɵɵinject(ErrorStackService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorStackProviderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ErrorStackService }]; }, null); })();
    return ErrorStackProviderService;
}());
export { ErrorStackProviderService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3Itc3RhY2stcHJvdmlkZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL2Vycm9yL3NlcnZpY2VzL2Vycm9yLXN0YWNrLXByb3ZpZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQ7QUFFZ0M7QUFEaEM7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFJSDtBQUE2RCxJQUV6RDtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxtQ0FBb0IsaUJBQW9DO0FBQUksUUFBeEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUFDLElBQUUsQ0FBQztBQUNoRSxJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksZ0RBQVksR0FBWixVQUFhLEtBQVk7QUFBSSxRQUN6QixPQUFPLEtBQUssWUFBWSxpQkFBaUIsQ0FBQztBQUNsRCxJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksMENBQU0sR0FBTixVQUFPLEtBQXdCO0FBQ25DLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QyxJQUFJLENBQUM7QUFFTDtBQUNvRSxnQkFyQnpCLGlCQUFpQjtBQUFHO0FBRXhEO0lBUk0seUJBQXlCLHdCQUhyQyxVQUFVLENBQUMsY0FDUixVQUFVLEVBQUUsTUFBTSxXQUNyQixDQUFDLFFBQ1cseUJBQXlCLENBMEJyQzs7Ozs7OzJFQUNEO0FBQUMsb0NBdkNEO0FBQUUsQ0FzQ0QsQUExQkQsSUEwQkM7QUFDRCxTQTNCYSx5QkFBeUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVycm9yUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZXJyb3IucHJvdmlkZXInO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBFcnJvclN0YWNrU2VydmljZSB9IGZyb20gJy4vZXJyb3Itc3RhY2suc2VydmljZSc7XG5cbi8qKlxuICogQ2xhc3MgRXJyb3JTdGFja1Byb3ZpZGVyU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEVycm9yU3RhY2tQcm92aWRlclNlcnZpY2UgaW1wbGVtZW50cyBFcnJvclByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciBvIHNlcnZpc28gZGUgZXJyb3NcbiAgICAgKiBAcGFyYW0ge0Vycm9yU3RhY2tTZXJ2aWNlfSBlcnJvclN0YWNrU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZXJyb3JTdGFja1NlcnZpY2U6IEVycm9yU3RhY2tTZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGlkZW50aWZpY2HDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIHNob3VsZEhhbmRsZShlcnJvcjogRXJyb3IpOiBCb29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHBlbGEgYWRpw6fDo28gZGUgZXJyb3NcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoYW5kbGUoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMuZXJyb3JTdGFja1NlcnZpY2UuY3JlYXRlKGVycm9yKTtcbiAgICB9XG5cbn1cbiJdfQ==