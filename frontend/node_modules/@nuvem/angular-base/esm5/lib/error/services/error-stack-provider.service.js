import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { ErrorStackService } from './error-stack.service';
import * as i0 from "@angular/core";
import * as i1 from "./error-stack.service";
/**
 * Class ErrorStackProviderService
 * @class
 */
var ErrorStackProviderService = /** @class */ (function () {
    /**
     * Metodo construtor responsável por injetar o serviso de erros
     * @param {ErrorStackService} errorStackService
     */
    function ErrorStackProviderService(errorStackService) {
        this.errorStackService = errorStackService;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @param {Error} error
     * @returns Boolean
     */
    ErrorStackProviderService.prototype.shouldHandle = function (error) {
        return error instanceof HttpErrorResponse;
    };
    /**
     * Metodo pela adição de erros
     * @param {HttpErrorResponse} error
     * @returns void
     */
    ErrorStackProviderService.prototype.handle = function (error) {
        this.errorStackService.create(error);
    };
    ErrorStackProviderService.ctorParameters = function () { return [
        { type: ErrorStackService }
    ]; };
    ErrorStackProviderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorStackProviderService_Factory() { return new ErrorStackProviderService(i0.ɵɵinject(i1.ErrorStackService)); }, token: ErrorStackProviderService, providedIn: "root" });
    ErrorStackProviderService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], ErrorStackProviderService);
    return ErrorStackProviderService;
}());
export { ErrorStackProviderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3Itc3RhY2stcHJvdmlkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZXJyb3Ivc2VydmljZXMvZXJyb3Itc3RhY2stcHJvdmlkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRTFEOzs7R0FHRztBQUlIO0lBRUk7OztPQUdHO0lBQ0gsbUNBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0lBQUcsQ0FBQztJQUU1RDs7OztPQUlHO0lBQ0gsZ0RBQVksR0FBWixVQUFhLEtBQVk7UUFDckIsT0FBTyxLQUFLLFlBQVksaUJBQWlCLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCwwQ0FBTSxHQUFOLFVBQU8sS0FBd0I7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDOztnQkFsQnNDLGlCQUFpQjs7O0lBTi9DLHlCQUF5QjtRQUhyQyxVQUFVLENBQUM7WUFDUixVQUFVLEVBQUUsTUFBTTtTQUNyQixDQUFDO09BQ1cseUJBQXlCLENBMEJyQztvQ0F0Q0Q7Q0FzQ0MsQUExQkQsSUEwQkM7U0ExQlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEVycm9yU3RhY2tTZXJ2aWNlIH0gZnJvbSAnLi9lcnJvci1zdGFjay5zZXJ2aWNlJztcblxuLyoqXG4gKiBDbGFzcyBFcnJvclN0YWNrUHJvdmlkZXJTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgRXJyb3JTdGFja1Byb3ZpZGVyU2VydmljZSBpbXBsZW1lbnRzIEVycm9yUHJvdmlkZXIge1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGNvbnN0cnV0b3IgcmVzcG9uc8OhdmVsIHBvciBpbmpldGFyIG8gc2VydmlzbyBkZSBlcnJvc1xuICAgICAqIEBwYXJhbSB7RXJyb3JTdGFja1NlcnZpY2V9IGVycm9yU3RhY2tTZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlcnJvclN0YWNrU2VydmljZTogRXJyb3JTdGFja1NlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgaWRlbnRpZmljYcOnw6NvIGRlIGVycm9zXG4gICAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAgICovXG4gICAgc2hvdWxkSGFuZGxlKGVycm9yOiBFcnJvcik6IEJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGVsYSBhZGnDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhhbmRsZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgdGhpcy5lcnJvclN0YWNrU2VydmljZS5jcmVhdGUoZXJyb3IpO1xuICAgIH1cblxufVxuIl19