import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { HttpGenericErrorService } from '../services/http-generic-error.service';
import * as i0 from "@angular/core";
import * as i1 from "./http-generic-error.service";
/**
 * Serviço de erros ErrorStackService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var ErrorStackService = /** @class */ (function () {
    /**
     * metodo construtor injeta serviço generico de erros
     * @param {HttpGenericErrorService} genericErrorService
     * @constructor
     */
    function ErrorStackService(genericErrorService) {
        var _this = this;
        this.genericErrorService = genericErrorService;
        /**
         * Propriedade errors
         * @type {ReplaySubject<NamedErrorType>}
         */
        this.errors = new ReplaySubject();
        if (null === localStorage.getItem('errorStack')) {
            localStorage.setItem('errorStack', JSON.stringify([]));
        }
        this.getErrorsSubjects().forEach(function (error) {
            _this.errors.next(error);
        });
    }
    /**
     * Metodo responsável por criar erro do tipo HttpResponse
     * @param {HttpErrorResponse} error
     * @returns void
     */
    ErrorStackService.prototype.create = function (error) {
        var namedError = this.createNamedError(error);
        var persistedErrors = this.getErrorsSubjects();
        if (persistedErrors.length >= 15) {
            persistedErrors.shift();
        }
        persistedErrors.push(namedError);
        localStorage.setItem('errorStack', JSON.stringify(persistedErrors));
        this.errors.next(namedError);
    };
    /**
     * Metodo responsável por obter o conteúdo dos erros emitidos
     * @private
     * @returns NamedErrorType[]
     */
    ErrorStackService.prototype.getErrorsSubjects = function () {
        return JSON.parse(localStorage.getItem('errorStack'));
    };
    /**
     * Metodo responsável por itentifica o tipo de erro lançado
     * @private
     * @param {HttpErrorResponse} error
     * @returns NamedErrorType
     */
    ErrorStackService.prototype.createNamedError = function (error) {
        var fullMessage;
        var namedError;
        var createdAt = new Date();
        var errorId = this.getErrorId(error);
        var title;
        if (error.headers.get('Content-Type') === 'application/problem+json') {
            fullMessage = "X-Correlation-ID: " + errorId + "\n                           createdAt: " + createdAt + "\n                           status: " + error.status + "\n                           url: " + error.url + "\n                           body: " + error.error.detail + "\n                           stacktrace: " + error.error.stacktrace + "\n                           cause: " + error.error.cause;
            title = error.error.title;
        }
        else {
            var genericError = this.genericErrorService.getErrorByCode(error);
            fullMessage = "X-Correlation-ID: " + errorId + "\n                           createdAt: " + createdAt + "\n                           status: " + error.status + "\n                           url: " + error.url + "\n                           body: " + genericError.detail;
            title = genericError.title;
        }
        namedError = {
            message: title,
            createdAt: createdAt,
            correlationId: errorId,
            fullMessage: fullMessage
        };
        return namedError;
    };
    /**
     * Metodo responsável por obter o identificador do erro
     * @private
     * @param {HttpErrorResponse} error
     * @returns string
     */
    ErrorStackService.prototype.getErrorId = function (error) {
        var errorKey;
        error.headers.keys().every(function (key) {
            if (key.toUpperCase() === 'X-CORRELATION-ID') {
                errorKey = key;
                return false;
            }
            return true;
        });
        return errorKey ? error.headers.get(errorKey) : null;
    };
    ErrorStackService.ctorParameters = function () { return [
        { type: HttpGenericErrorService }
    ]; };
    ErrorStackService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorStackService_Factory() { return new ErrorStackService(i0.ɵɵinject(i1.HttpGenericErrorService)); }, token: ErrorStackService, providedIn: "root" });
ErrorStackService.ɵfac = function ErrorStackService_Factory(t) { return new (t || ErrorStackService)(ɵngcc0.ɵɵinject(HttpGenericErrorService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorStackService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: HttpGenericErrorService }]; }, null); })();
    return ErrorStackService;
}());
export { ErrorStackService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,