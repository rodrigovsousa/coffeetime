import { __decorate } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { ApplicationProblemType } from '../types/application-problem.type';
import * as i0 from "@angular/core";
import * as i1 from "../providers/notification.provider";
/**
 * Serviço HttpApplicationProblemErrorService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var HttpApplicationProblemErrorService = /** @class */ (function () {
    /**
     * Metodo construtor responsável por injetar serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    function HttpApplicationProblemErrorService(notification, ngZone) {
        this.notification = notification;
        this.ngZone = ngZone;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    HttpApplicationProblemErrorService.prototype.shouldHandle = function (error) {
        return error instanceof HttpErrorResponse &&
            error.headers.get('Content-Type') === 'application/problem+json' &&
            error.error;
    };
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    HttpApplicationProblemErrorService.prototype.handle = function (error) {
        var _this = this;
        this.ngZone.run(function () {
            _this.notification.addErrorProblem(new ApplicationProblemType(error.error.type, error.error.title, error.error.detail, error.error.status, error.error.instance));
        });
    };
    HttpApplicationProblemErrorService.ctorParameters = function () { return [
        { type: NotificationProvider },
        { type: NgZone }
    ]; };
    HttpApplicationProblemErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpApplicationProblemErrorService_Factory() { return new HttpApplicationProblemErrorService(i0.ɵɵinject(i1.NotificationProvider), i0.ɵɵinject(i0.NgZone)); }, token: HttpApplicationProblemErrorService, providedIn: "root" });
HttpApplicationProblemErrorService.ɵfac = function HttpApplicationProblemErrorService_Factory(t) { return new (t || HttpApplicationProblemErrorService)(ɵngcc0.ɵɵinject(NotificationProvider), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpApplicationProblemErrorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NotificationProvider }, { type: ɵngcc0.NgZone }]; }, null); })();
    return HttpApplicationProblemErrorService;
}());
export { HttpApplicationProblemErrorService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1hcHBsaWNhdGlvbi1wcm9ibGVtLWVycm9yLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9lcnJvci9zZXJ2aWNlcy9odHRwLWFwcGxpY2F0aW9uLXByb2JsZW0tZXJyb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDM0U7QUFBcUM7QUFFckM7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFJSDtBQUFzRSxJQUVsRTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLDRDQUFvQixZQUFrQyxFQUFVLE1BQWM7QUFBSSxRQUE5RCxpQkFBWSxHQUFaLFlBQVksQ0FBc0I7QUFBQyxRQUFTLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxJQUFHLENBQUM7QUFDdkYsSUFDSTtBQUNKO0FBQ0E7QUFBZTtBQUNnQztBQUN4QixPQUNoQjtBQUNQLElBQUkseURBQVksR0FBWixVQUFhLEtBQWdDO0FBQUksUUFDN0MsT0FBTyxLQUFLLFlBQVksaUJBQWlCO0FBQUksWUFDekMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssMEJBQTBCO0FBQUksWUFDcEUsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUN4QixJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQTtBQUFlO0FBQ3dCO0FBQ25CLE9BQ2I7QUFDUCxJQUFJLG1EQUFNLEdBQU4sVUFBTyxLQUF3QjtBQUFJLFFBQW5DLGlCQVVDO0FBQ0wsUUFWUSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNuQixZQUFPLEtBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUM3QixJQUFJLHNCQUFzQixDQUN0QixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFDaEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQ2pCLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDbEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzNDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDSjtBQUErRSxnQkEvQjFDLG9CQUFvQjtBQUFJLGdCQUFjLE1BQU07QUFBRztBQUUvRTtJQVRPLGtDQUFrQyx3QkFIOUMsVUFBVSxDQUFDLGNBQ1IsVUFBVSxFQUFFLE1BQU0sV0FDckIsQ0FBQyxRQUNXLGtDQUFrQyxDQXNDOUM7Ozs7Ozt1R0FBQztBQUFDLDZDQW5ESDtBQUFFLENBbURELEFBdENELElBc0NDO0FBQUMsU0F0Q1csa0NBQWtDO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvbm90aWZpY2F0aW9uLnByb3ZpZGVyJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUgfSBmcm9tICcuLi90eXBlcy9hcHBsaWNhdGlvbi1wcm9ibGVtLnR5cGUnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5cbi8qKlxuICogU2VydmnDp28gSHR0cEFwcGxpY2F0aW9uUHJvYmxlbUVycm9yU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEh0dHBBcHBsaWNhdGlvblByb2JsZW1FcnJvclNlcnZpY2UgaW1wbGVtZW50cyBFcnJvclByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciBzZXJ2acOnbyBOb3RpZmljYXRpb25Qcm92aWRlclxuICAgICAqIEBwYXJhbSB7Tm90aWZpY2F0aW9uUHJvdmlkZXJ9IG5vdGlmaWNhdGlvblxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25Qcm92aWRlciwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgaWRlbnRpZmljYcOnw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpYyBcbiAgICAgKiBAcGFyYW0ge0Vycm9yIHwgSHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIHNob3VsZEhhbmRsZShlcnJvcjogRXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZSk6IEJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSAmJiBcbiAgICAgICAgICAgIGVycm9yLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSA9PT0gJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbicgJiYgXG4gICAgICAgICAgICBlcnJvci5lcnJvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGVsYSBhZGnDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwdWJsaWMgXG4gICAgICogQHBhcmFtIHtIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgaGFuZGxlKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IHZvaWQge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4geyBcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uLmFkZEVycm9yUHJvYmxlbShcbiAgICAgICAgICAgICAgICBuZXcgQXBwbGljYXRpb25Qcm9ibGVtVHlwZShcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmVycm9yLmRldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3Iuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBlcnJvci5lcnJvci5pbnN0YW5jZSkpO1xuICAgICAgICB9KTtcbiAgICB9XG59Il19