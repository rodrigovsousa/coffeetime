import { __decorate } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { HttpGenericErrorType } from '../types/http-generic-error.type';
import * as i0 from "@angular/core";
import * as i1 from "../providers/notification.provider";
/**
 * Serviço HttpGenericErrorService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var HttpGenericErrorService = /** @class */ (function () {
    /**
     * Metodo construtor responsávelpor injetar o serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    function HttpGenericErrorService(notification, ngZone) {
        this.notification = notification;
        this.ngZone = ngZone;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    HttpGenericErrorService.prototype.shouldHandle = function (error) {
        return error instanceof HttpErrorResponse &&
            !(error.headers.get('Content-Type') === 'application/problem+json' &&
                error.error);
    };
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    HttpGenericErrorService.prototype.handle = function (error) {
        var _this = this;
        var generic = this.getErrorByCode(error);
        this.ngZone.run(function () {
            _this.notification.addErrorMessage(generic.detail, generic.title);
        });
    };
    /**
     * Metodo para obter erros a partir de um código
     * @public
     * @param {HttpErrorResponse} error
     * @returns HttpGenericErrorType
     */
    HttpGenericErrorService.prototype.getErrorByCode = function (error) {
        var generic = GENERIC_ERRORS[error.status];
        if (generic === undefined) {
            return new HttpGenericErrorType(error.status, error.statusText, error.message);
        }
        return generic;
    };
    HttpGenericErrorService.ctorParameters = function () { return [
        { type: NotificationProvider },
        { type: NgZone }
    ]; };
    HttpGenericErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpGenericErrorService_Factory() { return new HttpGenericErrorService(i0.ɵɵinject(i1.NotificationProvider), i0.ɵɵinject(i0.NgZone)); }, token: HttpGenericErrorService, providedIn: "root" });
HttpGenericErrorService.ɵfac = function HttpGenericErrorService_Factory(t) { return new (t || HttpGenericErrorService)(ɵngcc0.ɵɵinject(NotificationProvider), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpGenericErrorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NotificationProvider }, { type: ɵngcc0.NgZone }]; }, null); })();
    return HttpGenericErrorService;
}());
export { HttpGenericErrorService };
/**
 * Constante que define tipos de erros básicos
 * @const GENERIC_ERRORS
 */
export var GENERIC_ERRORS = {
    401: new HttpGenericErrorType(401, 'Não Autenticado', 'Essa requisição requer um usuário autenticado.'),
    403: new HttpGenericErrorType(403, 'Proibido', 'Essa requisição requer uma permissão no servidor da aplicação que o usuário não possui.'),
    404: new HttpGenericErrorType(404, 'Não encontrado', 'Essa requisição não pode ser encontrada.'),
    500: new HttpGenericErrorType(500, 'Erro desconhecido', 'O servidor encontrou uma condição inesperada.'),
    502: new HttpGenericErrorType(502, 'Bad Gateway', 'O servidor recebeu uma resposta inválida de um serviço que utilizou para cumprir a requisição'),
    503: new HttpGenericErrorType(503, 'Serviço Indisponível', 'O servidor não pode atender a requisição nesse momento. Esta é uma condição temporária, tente novamente mais tarde'),
    504: new HttpGenericErrorType(504, 'Gateway Timeout', 'O servidor não conseguiu receber uma resposta a tempo esperado por um serviço que utilizou para cumprir a requisição')
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1nZW5lcmljLWVycm9yLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9lcnJvci9zZXJ2aWNlcy9odHRwLWdlbmVyaWMtZXJyb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDeEU7QUFBcUM7QUFFckM7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFJSDtBQUEyRCxJQUV2RDtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGlDQUFvQixZQUFrQyxFQUFVLE1BQWM7QUFBSSxRQUE5RCxpQkFBWSxHQUFaLFlBQVksQ0FBc0I7QUFBQyxRQUFTLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxJQUFHLENBQUM7QUFDdkYsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksOENBQVksR0FBWixVQUFhLEtBQWdDO0FBQUksUUFDN0MsT0FBTyxLQUFLLFlBQVksaUJBQWlCO0FBQUksWUFDekMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLDBCQUEwQjtBQUFJLGdCQUN0RSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsSUFBSSxDQUFDO0FBRUwsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksd0NBQU0sR0FBTixVQUFPLEtBQXdCO0FBQUksUUFBbkMsaUJBS0M7QUFDTCxRQUxRLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkQsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNuQixZQUFPLEtBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBVyxnREFBYyxHQUFyQixVQUFzQixLQUF3QjtBQUFJLFFBQzlDLElBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckQsUUFDUSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7QUFDbkMsWUFBWSxPQUFPLElBQUksb0JBQW9CLENBQzNCLEtBQUssQ0FBQyxNQUFNLEVBQ1osS0FBSyxDQUFDLFVBQVUsRUFDaEIsS0FBSyxDQUFDLE9BQU8sQ0FDaEIsQ0FBQztBQUNkLFNBQVM7QUFDVCxRQUNRLE9BQU8sT0FBTyxDQUFDO0FBQ3ZCLElBQUksQ0FBQztBQUVMO0FBR2UsZ0JBbER1QixvQkFBb0I7QUFBSSxnQkFBYyxNQUFNO0FBQUc7QUFFL0U7SUFUTyx1QkFBdUIsd0JBSG5DLFVBQVUsQ0FBQyxjQUNSLFVBQVUsRUFBRSxNQUFNLFdBQ3JCLENBQUMsUUFDVyx1QkFBdUIsQ0FzRG5DOzs7Ozs7dUdBQ0Q7QUFBQyxrQ0FwRUQ7QUFBRSxDQW1FRCxBQXRERCxJQXNEQztBQUNELFNBdkRhLHVCQUF1QjtBQXVEcEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRztBQUM5QixJQUFJLEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsaUJBQWlCLEVBQ2pCLGdEQUFnRCxDQUFDO0FBQ3pELElBQ0ksR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixVQUFVLEVBQ1YseUZBQXlGLENBQUM7QUFDbEcsSUFDSSxHQUFHLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQyxHQUFHLEVBQzdCLGdCQUFnQixFQUNoQiwwQ0FBMEMsQ0FBQztBQUNuRCxJQUNJLEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsbUJBQW1CLEVBQ25CLCtDQUErQyxDQUFDO0FBQ3hELElBQ0ksR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixhQUFhLEVBQ2IsK0ZBQStGLENBQUM7QUFDeEcsSUFDSSxHQUFHLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQyxHQUFHLEVBQzdCLHNCQUFzQixFQUN0QixvSEFBb0gsQ0FBQztBQUM3SCxJQUNJLEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsaUJBQWlCLEVBQ2pCLHNIQUFzSCxDQUFDO0FBQy9ILENBQUMsQ0FBQztBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL25vdGlmaWNhdGlvbi5wcm92aWRlcic7XG5pbXBvcnQgeyBIdHRwR2VuZXJpY0Vycm9yVHlwZSB9IGZyb20gJy4uL3R5cGVzL2h0dHAtZ2VuZXJpYy1lcnJvci50eXBlJztcbmltcG9ydCB7IEVycm9yUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZXJyb3IucHJvdmlkZXInO1xuXG4vKipcbiAqIFNlcnZpw6dvIEh0dHBHZW5lcmljRXJyb3JTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSHR0cEdlbmVyaWNFcnJvclNlcnZpY2UgaW1wbGVtZW50cyBFcnJvclByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbHBvciBpbmpldGFyIG8gc2VydmnDp28gTm90aWZpY2F0aW9uUHJvdmlkZXJcbiAgICAgKiBAcGFyYW0ge05vdGlmaWNhdGlvblByb3ZpZGVyfSBub3RpZmljYXRpb25cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uUHJvdmlkZXIsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHsgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGlkZW50aWZpY2HDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0Vycm9yIHwgSHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIHNob3VsZEhhbmRsZShlcnJvcjogRXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZSk6IEJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSAmJiBcbiAgICAgICAgICAgICEoZXJyb3IuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpID09PSAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJyAmJiBcbiAgICAgICAgICAgIGVycm9yLmVycm9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGVsYSBhZGnDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoYW5kbGUoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGdlbmVyaWMgPSB0aGlzLmdldEVycm9yQnlDb2RlKGVycm9yKTtcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHsgXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbi5hZGRFcnJvck1lc3NhZ2UoZ2VuZXJpYy5kZXRhaWwsIGdlbmVyaWMudGl0bGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGFyYSBvYnRlciBlcnJvcyBhIHBhcnRpciBkZSB1bSBjw7NkaWdvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgSHR0cEdlbmVyaWNFcnJvclR5cGVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXJyb3JCeUNvZGUoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogSHR0cEdlbmVyaWNFcnJvclR5cGUge1xuICAgICAgICBjb25zdCBnZW5lcmljID0gR0VORVJJQ19FUlJPUlNbZXJyb3Iuc3RhdHVzXTtcblxuICAgICAgICBpZiAoZ2VuZXJpYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKFxuICAgICAgICAgICAgICAgIGVycm9yLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBlcnJvci5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2VuZXJpYztcbiAgICB9XG5cbn1cbi8qKlxuICogQ29uc3RhbnRlIHF1ZSBkZWZpbmUgdGlwb3MgZGUgZXJyb3MgYsOhc2ljb3NcbiAqIEBjb25zdCBHRU5FUklDX0VSUk9SU1xuICovXG5leHBvcnQgY29uc3QgR0VORVJJQ19FUlJPUlMgPSB7XG4gICAgNDAxOiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoNDAxLFxuICAgICAgICAnTsOjbyBBdXRlbnRpY2FkbycsXG4gICAgICAgICdFc3NhIHJlcXVpc2nDp8OjbyByZXF1ZXIgdW0gdXN1w6FyaW8gYXV0ZW50aWNhZG8uJyksXG5cbiAgICA0MDM6IG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZSg0MDMsXG4gICAgICAgICdQcm9pYmlkbycsXG4gICAgICAgICdFc3NhIHJlcXVpc2nDp8OjbyByZXF1ZXIgdW1hIHBlcm1pc3PDo28gbm8gc2Vydmlkb3IgZGEgYXBsaWNhw6fDo28gcXVlIG8gdXN1w6FyaW8gbsOjbyBwb3NzdWkuJyksXG5cbiAgICA0MDQ6IG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZSg0MDQsXG4gICAgICAgICdOw6NvIGVuY29udHJhZG8nLFxuICAgICAgICAnRXNzYSByZXF1aXNpw6fDo28gbsOjbyBwb2RlIHNlciBlbmNvbnRyYWRhLicpLFxuXG4gICAgNTAwOiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoNTAwLFxuICAgICAgICAnRXJybyBkZXNjb25oZWNpZG8nLFxuICAgICAgICAnTyBzZXJ2aWRvciBlbmNvbnRyb3UgdW1hIGNvbmRpw6fDo28gaW5lc3BlcmFkYS4nKSxcblxuICAgIDUwMjogbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKDUwMixcbiAgICAgICAgJ0JhZCBHYXRld2F5JyxcbiAgICAgICAgJ08gc2Vydmlkb3IgcmVjZWJldSB1bWEgcmVzcG9zdGEgaW52w6FsaWRhIGRlIHVtIHNlcnZpw6dvIHF1ZSB1dGlsaXpvdSBwYXJhIGN1bXByaXIgYSByZXF1aXNpw6fDo28nKSxcblxuICAgIDUwMzogbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKDUwMyxcbiAgICAgICAgJ1NlcnZpw6dvIEluZGlzcG9uw612ZWwnLFxuICAgICAgICAnTyBzZXJ2aWRvciBuw6NvIHBvZGUgYXRlbmRlciBhIHJlcXVpc2nDp8OjbyBuZXNzZSBtb21lbnRvLiBFc3RhIMOpIHVtYSBjb25kacOnw6NvIHRlbXBvcsOhcmlhLCB0ZW50ZSBub3ZhbWVudGUgbWFpcyB0YXJkZScpLFxuXG4gICAgNTA0OiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoNTA0LFxuICAgICAgICAnR2F0ZXdheSBUaW1lb3V0JyxcbiAgICAgICAgJ08gc2Vydmlkb3IgbsOjbyBjb25zZWd1aXUgcmVjZWJlciB1bWEgcmVzcG9zdGEgYSB0ZW1wbyBlc3BlcmFkbyBwb3IgdW0gc2VydmnDp28gcXVlIHV0aWxpem91IHBhcmEgY3VtcHJpciBhIHJlcXVpc2nDp8OjbycpXG59O1xuIl19