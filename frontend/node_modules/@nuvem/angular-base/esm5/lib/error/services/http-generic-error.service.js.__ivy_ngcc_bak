import { __decorate } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { HttpGenericErrorType } from '../types/http-generic-error.type';
import * as i0 from "@angular/core";
import * as i1 from "../providers/notification.provider";
/**
 * Serviço HttpGenericErrorService
 * @class
 */
var HttpGenericErrorService = /** @class */ (function () {
    /**
     * Metodo construtor responsávelpor injetar o serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    function HttpGenericErrorService(notification, ngZone) {
        this.notification = notification;
        this.ngZone = ngZone;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    HttpGenericErrorService.prototype.shouldHandle = function (error) {
        return error instanceof HttpErrorResponse &&
            !(error.headers.get('Content-Type') === 'application/problem+json' &&
                error.error);
    };
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    HttpGenericErrorService.prototype.handle = function (error) {
        var _this = this;
        var generic = this.getErrorByCode(error);
        this.ngZone.run(function () {
            _this.notification.addErrorMessage(generic.detail, generic.title);
        });
    };
    /**
     * Metodo para obter erros a partir de um código
     * @public
     * @param {HttpErrorResponse} error
     * @returns HttpGenericErrorType
     */
    HttpGenericErrorService.prototype.getErrorByCode = function (error) {
        var generic = GENERIC_ERRORS[error.status];
        if (generic === undefined) {
            return new HttpGenericErrorType(error.status, error.statusText, error.message);
        }
        return generic;
    };
    HttpGenericErrorService.ctorParameters = function () { return [
        { type: NotificationProvider },
        { type: NgZone }
    ]; };
    HttpGenericErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpGenericErrorService_Factory() { return new HttpGenericErrorService(i0.ɵɵinject(i1.NotificationProvider), i0.ɵɵinject(i0.NgZone)); }, token: HttpGenericErrorService, providedIn: "root" });
    HttpGenericErrorService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], HttpGenericErrorService);
    return HttpGenericErrorService;
}());
export { HttpGenericErrorService };
/**
 * Constante que define tipos de erros básicos
 * @const GENERIC_ERRORS
 */
export var GENERIC_ERRORS = {
    401: new HttpGenericErrorType(401, 'Não Autenticado', 'Essa requisição requer um usuário autenticado.'),
    403: new HttpGenericErrorType(403, 'Proibido', 'Essa requisição requer uma permissão no servidor da aplicação que o usuário não possui.'),
    404: new HttpGenericErrorType(404, 'Não encontrado', 'Essa requisição não pode ser encontrada.'),
    500: new HttpGenericErrorType(500, 'Erro desconhecido', 'O servidor encontrou uma condição inesperada.'),
    502: new HttpGenericErrorType(502, 'Bad Gateway', 'O servidor recebeu uma resposta inválida de um serviço que utilizou para cumprir a requisição'),
    503: new HttpGenericErrorType(503, 'Serviço Indisponível', 'O servidor não pode atender a requisição nesse momento. Esta é uma condição temporária, tente novamente mais tarde'),
    504: new HttpGenericErrorType(504, 'Gateway Timeout', 'O servidor não conseguiu receber uma resposta a tempo esperado por um serviço que utilizou para cumprir a requisição')
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1nZW5lcmljLWVycm9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL2Vycm9yL3NlcnZpY2VzL2h0dHAtZ2VuZXJpYy1lcnJvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7O0FBR3hFOzs7R0FHRztBQUlIO0lBRUk7Ozs7T0FJRztJQUNILGlDQUFvQixZQUFrQyxFQUFVLE1BQWM7UUFBMUQsaUJBQVksR0FBWixZQUFZLENBQXNCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFJLENBQUM7SUFFbkY7Ozs7O09BS0c7SUFDSCw4Q0FBWSxHQUFaLFVBQWEsS0FBZ0M7UUFDekMsT0FBTyxLQUFLLFlBQVksaUJBQWlCO1lBQ3JDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSywwQkFBMEI7Z0JBQ2xFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx3Q0FBTSxHQUFOLFVBQU8sS0FBd0I7UUFBL0IsaUJBS0M7UUFKRyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ1osS0FBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxnREFBYyxHQUFyQixVQUFzQixLQUF3QjtRQUMxQyxJQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLElBQUksb0JBQW9CLENBQzNCLEtBQUssQ0FBQyxNQUFNLEVBQ1osS0FBSyxDQUFDLFVBQVUsRUFDaEIsS0FBSyxDQUFDLE9BQU8sQ0FDaEIsQ0FBQztTQUNMO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQzs7Z0JBN0NpQyxvQkFBb0I7Z0JBQWtCLE1BQU07OztJQVByRSx1QkFBdUI7UUFIbkMsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztPQUNXLHVCQUF1QixDQXNEbkM7a0NBbkVEO0NBbUVDLEFBdERELElBc0RDO1NBdERZLHVCQUF1QjtBQXVEcEM7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHO0lBQzFCLEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsaUJBQWlCLEVBQ2pCLGdEQUFnRCxDQUFDO0lBRXJELEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsVUFBVSxFQUNWLHlGQUF5RixDQUFDO0lBRTlGLEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsZ0JBQWdCLEVBQ2hCLDBDQUEwQyxDQUFDO0lBRS9DLEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsbUJBQW1CLEVBQ25CLCtDQUErQyxDQUFDO0lBRXBELEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsYUFBYSxFQUNiLCtGQUErRixDQUFDO0lBRXBHLEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0Isc0JBQXNCLEVBQ3RCLG9IQUFvSCxDQUFDO0lBRXpILEdBQUcsRUFBRSxJQUFJLG9CQUFvQixDQUFDLEdBQUcsRUFDN0IsaUJBQWlCLEVBQ2pCLHNIQUFzSCxDQUFDO0NBQzlILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvbm90aWZpY2F0aW9uLnByb3ZpZGVyJztcbmltcG9ydCB7IEh0dHBHZW5lcmljRXJyb3JUeXBlIH0gZnJvbSAnLi4vdHlwZXMvaHR0cC1nZW5lcmljLWVycm9yLnR5cGUnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5cbi8qKlxuICogU2VydmnDp28gSHR0cEdlbmVyaWNFcnJvclNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBIdHRwR2VuZXJpY0Vycm9yU2VydmljZSBpbXBsZW1lbnRzIEVycm9yUHJvdmlkZXIge1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGNvbnN0cnV0b3IgcmVzcG9uc8OhdmVscG9yIGluamV0YXIgbyBzZXJ2acOnbyBOb3RpZmljYXRpb25Qcm92aWRlclxuICAgICAqIEBwYXJhbSB7Tm90aWZpY2F0aW9uUHJvdmlkZXJ9IG5vdGlmaWNhdGlvblxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25Qcm92aWRlciwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgaWRlbnRpZmljYcOnw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7RXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAgICovXG4gICAgc2hvdWxkSGFuZGxlKGVycm9yOiBFcnJvciB8IEh0dHBFcnJvclJlc3BvbnNlKTogQm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlICYmIFxuICAgICAgICAgICAgIShlcnJvci5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgPT09ICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nICYmIFxuICAgICAgICAgICAgZXJyb3IuZXJyb3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBwZWxhIGFkacOnw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhhbmRsZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZ2VuZXJpYyA9IHRoaXMuZ2V0RXJyb3JCeUNvZGUoZXJyb3IpO1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4geyBcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uLmFkZEVycm9yTWVzc2FnZShnZW5lcmljLmRldGFpbCwgZ2VuZXJpYy50aXRsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBwYXJhIG9idGVyIGVycm9zIGEgcGFydGlyIGRlIHVtIGPDs2RpZ29cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyBIdHRwR2VuZXJpY0Vycm9yVHlwZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFcnJvckJ5Q29kZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiBIdHRwR2VuZXJpY0Vycm9yVHlwZSB7XG4gICAgICAgIGNvbnN0IGdlbmVyaWMgPSBHRU5FUklDX0VSUk9SU1tlcnJvci5zdGF0dXNdO1xuXG4gICAgICAgIGlmIChnZW5lcmljID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoXG4gICAgICAgICAgICAgICAgZXJyb3Iuc3RhdHVzLFxuICAgICAgICAgICAgICAgIGVycm9yLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZW5lcmljO1xuICAgIH1cblxufVxuLyoqXG4gKiBDb25zdGFudGUgcXVlIGRlZmluZSB0aXBvcyBkZSBlcnJvcyBiw6FzaWNvc1xuICogQGNvbnN0IEdFTkVSSUNfRVJST1JTXG4gKi9cbmV4cG9ydCBjb25zdCBHRU5FUklDX0VSUk9SUyA9IHtcbiAgICA0MDE6IG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZSg0MDEsXG4gICAgICAgICdOw6NvIEF1dGVudGljYWRvJyxcbiAgICAgICAgJ0Vzc2EgcmVxdWlzacOnw6NvIHJlcXVlciB1bSB1c3XDoXJpbyBhdXRlbnRpY2Fkby4nKSxcblxuICAgIDQwMzogbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKDQwMyxcbiAgICAgICAgJ1Byb2liaWRvJyxcbiAgICAgICAgJ0Vzc2EgcmVxdWlzacOnw6NvIHJlcXVlciB1bWEgcGVybWlzc8OjbyBubyBzZXJ2aWRvciBkYSBhcGxpY2HDp8OjbyBxdWUgbyB1c3XDoXJpbyBuw6NvIHBvc3N1aS4nKSxcblxuICAgIDQwNDogbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKDQwNCxcbiAgICAgICAgJ07Do28gZW5jb250cmFkbycsXG4gICAgICAgICdFc3NhIHJlcXVpc2nDp8OjbyBuw6NvIHBvZGUgc2VyIGVuY29udHJhZGEuJyksXG5cbiAgICA1MDA6IG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZSg1MDAsXG4gICAgICAgICdFcnJvIGRlc2NvbmhlY2lkbycsXG4gICAgICAgICdPIHNlcnZpZG9yIGVuY29udHJvdSB1bWEgY29uZGnDp8OjbyBpbmVzcGVyYWRhLicpLFxuXG4gICAgNTAyOiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoNTAyLFxuICAgICAgICAnQmFkIEdhdGV3YXknLFxuICAgICAgICAnTyBzZXJ2aWRvciByZWNlYmV1IHVtYSByZXNwb3N0YSBpbnbDoWxpZGEgZGUgdW0gc2VydmnDp28gcXVlIHV0aWxpem91IHBhcmEgY3VtcHJpciBhIHJlcXVpc2nDp8OjbycpLFxuXG4gICAgNTAzOiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoNTAzLFxuICAgICAgICAnU2VydmnDp28gSW5kaXNwb27DrXZlbCcsXG4gICAgICAgICdPIHNlcnZpZG9yIG7Do28gcG9kZSBhdGVuZGVyIGEgcmVxdWlzacOnw6NvIG5lc3NlIG1vbWVudG8uIEVzdGEgw6kgdW1hIGNvbmRpw6fDo28gdGVtcG9yw6FyaWEsIHRlbnRlIG5vdmFtZW50ZSBtYWlzIHRhcmRlJyksXG5cbiAgICA1MDQ6IG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZSg1MDQsXG4gICAgICAgICdHYXRld2F5IFRpbWVvdXQnLFxuICAgICAgICAnTyBzZXJ2aWRvciBuw6NvIGNvbnNlZ3VpdSByZWNlYmVyIHVtYSByZXNwb3N0YSBhIHRlbXBvIGVzcGVyYWRvIHBvciB1bSBzZXJ2acOnbyBxdWUgdXRpbGl6b3UgcGFyYSBjdW1wcmlyIGEgcmVxdWlzacOnw6NvJylcbn07XG4iXX0=