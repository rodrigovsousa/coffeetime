import { __decorate, __extends } from "tslib";
import { NotificationProvider } from '../providers/notification.provider';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Class NotificationService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var NotificationService = /** @class */ (function (_super) {
    __extends(NotificationService, _super);
    function NotificationService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Metodo responsável po adicionar mensagem de erro
     * @param {string} message
     * @param {string} title
     * @returns void
     */
    NotificationService.prototype.addErrorMessage = function (message, title) {
        console.error(title + ' ' + message);
    };
    /**
     * Metodo responsável por adicionar o detalhamento do erro no console
     * @param {ApplicationProblemType} problem
     * @returns void
     */
    NotificationService.prototype.addErrorProblem = function (problem) {
        console.error(problem.title + ' ' + problem.detail);
    };
    NotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(); }, token: NotificationService, providedIn: "root" });
NotificationService.ɵfac = function NotificationService_Factory(t) { return ɵNotificationService_BaseFactory(t || NotificationService); };
var ɵNotificationService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NotificationService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
    return NotificationService;
}(NotificationProvider));
export { NotificationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9lcnJvci9zZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFDLE1BQU8sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUg7QUFBNkQsSUFBcEIsdUNBQW9CO0FBQUMsSUFBOUQ7QUFBaUM7QUFHQSxLQWtCaEM7QUFDRCxJQXBCSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksNkNBQWUsR0FBZixVQUFnQixPQUFlLEVBQUUsS0FBYztBQUFJLFFBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUM3QyxJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksNkNBQWUsR0FBZixVQUFnQixPQUErQjtBQUFJLFFBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVELElBQUksQ0FBQztBQUVMO0lBckJhLG1CQUFtQix3QkFIL0IsVUFBVSxDQUFDLGNBQ1IsVUFBVSxFQUFFLE1BQU0sV0FDckIsQ0FBQyxRQUNXLG1CQUFtQixDQXFCL0I7Ozs7Ozs7MEJBQ0Q7QUFBQyw4QkFqQ0Q7QUFBRSxDQWdDRCxBQXJCRCxDQUF5QyxvQkFBb0IsR0FxQjVEO0FBQ0QsU0F0QmEsbUJBQW1CO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblByb2JsZW1UeXBlIH0gZnJvbSAnLi4vdHlwZXMvYXBwbGljYXRpb24tcHJvYmxlbS50eXBlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByb3ZpZGVyfSAgZnJvbSAnLi4vcHJvdmlkZXJzL25vdGlmaWNhdGlvbi5wcm92aWRlcic7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQ2xhc3MgTm90aWZpY2F0aW9uU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblNlcnZpY2UgZXh0ZW5kcyBOb3RpZmljYXRpb25Qcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBvIGFkaWNpb25hciBtZW5zYWdlbSBkZSBlcnJvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgYWRkRXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5lcnJvcih0aXRsZSArICcgJyArIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIGFkaWNpb25hciBvIGRldGFsaGFtZW50byBkbyBlcnJvIG5vIGNvbnNvbGVcbiAgICAgKiBAcGFyYW0ge0FwcGxpY2F0aW9uUHJvYmxlbVR5cGV9IHByb2JsZW1cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgYWRkRXJyb3JQcm9ibGVtKHByb2JsZW06IEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihwcm9ibGVtLnRpdGxlICsgJyAnICsgcHJvYmxlbS5kZXRhaWwpO1xuICAgIH1cblxufVxuIl19