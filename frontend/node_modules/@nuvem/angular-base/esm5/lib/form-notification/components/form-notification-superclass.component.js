import { __decorate } from "tslib";
import { FormNotificationService } from '../services/form-notification.service';
import { Directive, Input } from "@angular/core";
import { FieldFormNotification } from '../types/field-form-notification.type';
import * as ɵngcc0 from '@angular/core';
var FormNotificationComponentSuperclass = /** @class */ (function () {
    /**
     * Metodo construtor responsavel por carregar o serviço de validação
     * @param formNotificationService
     */
    function FormNotificationComponentSuperclass(formNotificationService) {
        this.formNotificationService = formNotificationService;
    }
    /**
     * Metodo Inicial para subscrição no endpoint responsável por validar o formulário
     */
    FormNotificationComponentSuperclass.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.formNotificationService
            .notifications(this.form, this.name)
            .subscribe(function (notification) {
            if (notification instanceof FieldFormNotification) {
                _this.message = notification.message;
            }
            else {
                _this.message = null;
            }
        });
    };
    /**
     * Metodo responsavel por realizar a saida das subscrições do endpont de validação
     */
    FormNotificationComponentSuperclass.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    FormNotificationComponentSuperclass.ctorParameters = function () { return [
        { type: FormNotificationService }
    ]; };
    __decorate([
        Input()
    ], FormNotificationComponentSuperclass.prototype, "name", void 0);
    __decorate([
        Input()
    ], FormNotificationComponentSuperclass.prototype, "form", void 0);
FormNotificationComponentSuperclass.ɵfac = function FormNotificationComponentSuperclass_Factory(t) { return new (t || FormNotificationComponentSuperclass)(ɵngcc0.ɵɵdirectiveInject(FormNotificationService)); };
FormNotificationComponentSuperclass.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormNotificationComponentSuperclass, selectors: [["form-notification-component-superclass"]], inputs: { name: "name", form: "form" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormNotificationComponentSuperclass, [{
        type: Directive,
        args: [{
                selector: 'form-notification-component-superclass'
            }]
    }], function () { return [{ type: FormNotificationService }]; }, { name: [{
            type: Input
        }], form: [{
            type: Input
        }] }); })();
    return FormNotificationComponentSuperclass;
}());
export { FormNotificationComponentSuperclass };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24tc3VwZXJjbGFzcy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9mb3JtLW5vdGlmaWNhdGlvbi9jb21wb25lbnRzL2Zvcm0tbm90aWZpY2F0aW9uLXN1cGVyY2xhc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFxQixLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7O0FBSzlFO0FBQXVFLElBVW5FO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLDZDQUFzQix1QkFBZ0Q7QUFBSSxRQUFwRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0FBQUMsSUFBRSxDQUFDO0FBQzlFLElBQ0k7QUFDSjtBQUNBLE9BQU87QUFDUCxJQUFJLHNEQUFRLEdBQVI7QUFBYyxRQUFkLGlCQVVDO0FBQ0wsUUFWUSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyx1QkFBdUI7QUFDeEQsYUFBYSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2hELGFBQWEsU0FBUyxDQUFDLFVBQUMsWUFBOEI7QUFBSSxZQUMxQyxJQUFJLFlBQVksWUFBWSxxQkFBcUIsRUFBRTtBQUNuRSxnQkFBb0IsS0FBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3hELGFBQWlCO0FBQUMsaUJBQUs7QUFDdkIsZ0JBQW9CLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3hDLGFBQWlCO0FBQ2pCLFFBQVksQ0FBQyxDQUFDLENBQUM7QUFDZixJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBSSx5REFBVyxHQUFYO0FBQWMsUUFDVixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3hDLElBQUksQ0FBQztBQUVMO0FBQzhFLGdCQXpCM0IsdUJBQXVCO0FBQUc7QUFFdEUsSUFaTTtBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFDLHFFQUFhO0FBRTFCLElBQWE7QUFBYSxRQUFyQixLQUFLLEVBQUU7QUFBQyxxRUFBYTtJQU5iLG1DQUFtQyx3QkFIL0MsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLHdDQUF3QyxVQUNyRCxDQUFDLFFBQ1csbUNBQW1DLENBc0MvQzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELDBDQUFDO0FBQ0EsQ0FEQSxBQXRDRCxJQXNDQztBQUNELFNBdkNhLG1DQUFtQztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPbkRlc3Ryb3ksIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBGb3JtTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vdHlwZXMvZm9ybS1ub3RpZmljYXRpb24udHlwZSc7XG5pbXBvcnQgeyBGaWVsZEZvcm1Ob3RpZmljYXRpb24gfSBmcm9tICcuLi90eXBlcy9maWVsZC1mb3JtLW5vdGlmaWNhdGlvbi50eXBlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdmb3JtLW5vdGlmaWNhdGlvbi1jb21wb25lbnQtc3VwZXJjbGFzcydcbn0pXG5leHBvcnQgY2xhc3MgRm9ybU5vdGlmaWNhdGlvbkNvbXBvbmVudFN1cGVyY2xhc3MgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gICAgQElucHV0KCkgbmFtZTogU3RyaW5nO1xuXG4gICAgQElucHV0KCkgZm9ybTogU3RyaW5nO1xuXG4gICAgbWVzc2FnZTogU3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIGNvbnN0cnV0b3IgcmVzcG9uc2F2ZWwgcG9yIGNhcnJlZ2FyIG8gc2VydmnDp28gZGUgdmFsaWRhw6fDo29cbiAgICAgKiBAcGFyYW0gZm9ybU5vdGlmaWNhdGlvblNlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZm9ybU5vdGlmaWNhdGlvblNlcnZpY2U6IEZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIEluaWNpYWwgcGFyYSBzdWJzY3Jpw6fDo28gbm8gZW5kcG9pbnQgcmVzcG9uc8OhdmVsIHBvciB2YWxpZGFyIG8gZm9ybXVsw6FyaW9cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAubm90aWZpY2F0aW9ucyh0aGlzLmZvcm0sIHRoaXMubmFtZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKG5vdGlmaWNhdGlvbjogRm9ybU5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24gaW5zdGFuY2VvZiBGaWVsZEZvcm1Ob3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbm90aWZpY2F0aW9uLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc2F2ZWwgcG9yIHJlYWxpemFyIGEgc2FpZGEgZGFzIHN1YnNjcmnDp8O1ZXMgZG8gZW5kcG9udCBkZSB2YWxpZGHDp8Ojb1xuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxufVxuIl19