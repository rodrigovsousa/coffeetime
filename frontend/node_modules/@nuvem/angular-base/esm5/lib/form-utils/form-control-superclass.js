import { __extends } from "tslib";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { DirectiveSuperclass } from "./directive-superclass";
export function noop() { }
;
/**
 * Use in the `providers` of a component that implements `ControlValueAccessor` to reduce some boilerplate.
 *
 * ```ts
 * @Component({ providers: [provideValueAccessor(MyFormControl)] }
 * class MyFormControl extends BaseFormControl {
 *   // ...
 * }
 * ```
 */
export function provideValueAccessor(type) {
    return {
        provide: NG_VALUE_ACCESSOR,
        useExisting: type,
        multi: true,
    };
}
/**
 * Extend this when creating a form control to reduce some boilerplate. **Warning:** You _must_ include a constructor in your subclass.
 *
 * This example allows 2-way binding to a number via `[(ngModel)]`, `[formControl]`, or any other technique that leverages the `ControlValueAccessor` interface.
 * ```ts
 * @Component({
 *   template: `
 *     <button (click)="increment()" [disabled]="isDisabled">{{ counter }}</button>
 *   `,
 *   providers: [provideValueAccessor(CounterComponent)],
 * })
 * class CounterComponent extends FormControlSuperclass<number> {
 *   counter = 0;
 *
 *   // This looks unnecessary, but is required for Angular to provide `Injector`
 *   constructor(injector: Injector) {
 *     super(injector);
 *   }
 *
 *   handleIncomingValue(value: number) {
 *     this.counter = value;
 *   }
 *
 *   increment() {
 *     this.emitOutgoingValue(++this.counter);
 *     this.onTouched();
 *   }
 * }
 * ```
 */
var FormControlSuperclass = /** @class */ (function (_super) {
    __extends(FormControlSuperclass, _super);
    function FormControlSuperclass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Call this to emit a new value when it changes. */
        _this.emitOutgoingValue = noop;
        /** Call this to "commit" a change, traditionally done e.g. on blur. */
        _this.onTouched = noop;
        /** You can bind to this in your template as needed. */
        _this.isDisabled = false;
        return _this;
    }
    /** Called as angular propagates value changes to this `ControlValueAccessor`. You normally do not need to use it. */
    FormControlSuperclass.prototype.writeValue = function (value) {
        this.handleIncomingValue(value);
        this.changeDetectorRef.markForCheck();
    };
    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */
    FormControlSuperclass.prototype.registerOnChange = function (fn) {
        this.emitOutgoingValue = fn;
    };
    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */
    FormControlSuperclass.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */
    FormControlSuperclass.prototype.setDisabledState = function (isDisabled) {
        this.isDisabled = isDisabled;
        this.changeDetectorRef.markForCheck();
    };
    return FormControlSuperclass;
}(DirectiveSuperclass));
export { FormControlSuperclass };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLXN1cGVyY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tdXRpbHMvZm9ybS1jb250cm9sLXN1cGVyY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU3RCxNQUFNLFVBQVUsSUFBSSxLQUFLLENBQUM7QUFBQSxDQUFDO0FBRTNCOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxJQUFlO0lBQ2hELE9BQU87UUFDSCxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLEtBQUssRUFBRSxJQUFJO0tBQ2QsQ0FBQztBQUNOLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E2Qkc7QUFDSDtJQUF1RCx5Q0FBbUI7SUFBMUU7UUFBQSxxRUFtQ0M7UUFqQ0cscURBQXFEO1FBQ3JELHVCQUFpQixHQUF1QixJQUFJLENBQUM7UUFFN0MsdUVBQXVFO1FBQ3ZFLGVBQVMsR0FBRyxJQUFJLENBQUM7UUFFakIsdURBQXVEO1FBQ3ZELGdCQUFVLEdBQUcsS0FBSyxDQUFDOztJQTBCdkIsQ0FBQztJQXJCRyxxSEFBcUg7SUFDckgsMENBQVUsR0FBVixVQUFXLEtBQVE7UUFDZixJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxnSEFBZ0g7SUFDaEgsZ0RBQWdCLEdBQWhCLFVBQWlCLEVBQXNCO1FBQ25DLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELGdIQUFnSDtJQUNoSCxpREFBaUIsR0FBakIsVUFBa0IsRUFBZ0I7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELHdIQUF3SDtJQUN4SCxnREFBZ0IsR0FBaEIsVUFBaUIsVUFBbUI7UUFDaEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFDTCw0QkFBQztBQUFELENBQUMsQUFuQ0QsQ0FBdUQsbUJBQW1CLEdBbUN6RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmVTdXBlcmNsYXNzIH0gZnJvbSBcIi4vZGlyZWN0aXZlLXN1cGVyY2xhc3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH07XG5cbi8qKlxuICogVXNlIGluIHRoZSBgcHJvdmlkZXJzYCBvZiBhIGNvbXBvbmVudCB0aGF0IGltcGxlbWVudHMgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCB0byByZWR1Y2Ugc29tZSBib2lsZXJwbGF0ZS5cbiAqXG4gKiBgYGB0c1xuICogQENvbXBvbmVudCh7IHByb3ZpZGVyczogW3Byb3ZpZGVWYWx1ZUFjY2Vzc29yKE15Rm9ybUNvbnRyb2wpXSB9XG4gKiBjbGFzcyBNeUZvcm1Db250cm9sIGV4dGVuZHMgQmFzZUZvcm1Db250cm9sIHtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVWYWx1ZUFjY2Vzc29yKHR5cGU6IFR5cGU8YW55Pikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICB1c2VFeGlzdGluZzogdHlwZSxcbiAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBFeHRlbmQgdGhpcyB3aGVuIGNyZWF0aW5nIGEgZm9ybSBjb250cm9sIHRvIHJlZHVjZSBzb21lIGJvaWxlcnBsYXRlLiAqKldhcm5pbmc6KiogWW91IF9tdXN0XyBpbmNsdWRlIGEgY29uc3RydWN0b3IgaW4geW91ciBzdWJjbGFzcy5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgYWxsb3dzIDItd2F5IGJpbmRpbmcgdG8gYSBudW1iZXIgdmlhIGBbKG5nTW9kZWwpXWAsIGBbZm9ybUNvbnRyb2xdYCwgb3IgYW55IG90aGVyIHRlY2huaXF1ZSB0aGF0IGxldmVyYWdlcyB0aGUgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCBpbnRlcmZhY2UuXG4gKiBgYGB0c1xuICogQENvbXBvbmVudCh7XG4gKiAgIHRlbXBsYXRlOiBgXG4gKiAgICAgPGJ1dHRvbiAoY2xpY2spPVwiaW5jcmVtZW50KClcIiBbZGlzYWJsZWRdPVwiaXNEaXNhYmxlZFwiPnt7IGNvdW50ZXIgfX08L2J1dHRvbj5cbiAqICAgYCxcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZVZhbHVlQWNjZXNzb3IoQ291bnRlckNvbXBvbmVudCldLFxuICogfSlcbiAqIGNsYXNzIENvdW50ZXJDb21wb25lbnQgZXh0ZW5kcyBGb3JtQ29udHJvbFN1cGVyY2xhc3M8bnVtYmVyPiB7XG4gKiAgIGNvdW50ZXIgPSAwO1xuICpcbiAqICAgLy8gVGhpcyBsb29rcyB1bm5lY2Vzc2FyeSwgYnV0IGlzIHJlcXVpcmVkIGZvciBBbmd1bGFyIHRvIHByb3ZpZGUgYEluamVjdG9yYFxuICogICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAqICAgICBzdXBlcihpbmplY3Rvcik7XG4gKiAgIH1cbiAqXG4gKiAgIGhhbmRsZUluY29taW5nVmFsdWUodmFsdWU6IG51bWJlcikge1xuICogICAgIHRoaXMuY291bnRlciA9IHZhbHVlO1xuICogICB9XG4gKlxuICogICBpbmNyZW1lbnQoKSB7XG4gKiAgICAgdGhpcy5lbWl0T3V0Z29pbmdWYWx1ZSgrK3RoaXMuY291bnRlcik7XG4gKiAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGb3JtQ29udHJvbFN1cGVyY2xhc3M8VD4gZXh0ZW5kcyBEaXJlY3RpdmVTdXBlcmNsYXNzXG4gICAgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgLyoqIENhbGwgdGhpcyB0byBlbWl0IGEgbmV3IHZhbHVlIHdoZW4gaXQgY2hhbmdlcy4gKi9cbiAgICBlbWl0T3V0Z29pbmdWYWx1ZTogKHZhbHVlOiBUKSA9PiB2b2lkID0gbm9vcDtcblxuICAgIC8qKiBDYWxsIHRoaXMgdG8gXCJjb21taXRcIiBhIGNoYW5nZSwgdHJhZGl0aW9uYWxseSBkb25lIGUuZy4gb24gYmx1ci4gKi9cbiAgICBvblRvdWNoZWQgPSBub29wO1xuXG4gICAgLyoqIFlvdSBjYW4gYmluZCB0byB0aGlzIGluIHlvdXIgdGVtcGxhdGUgYXMgbmVlZGVkLiAqL1xuICAgIGlzRGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIC8qKiBJbXBsZW1lbnQgdGhpcyB0byBoYW5kbGUgYSBuZXcgdmFsdWUgY29taW5nIGluIGZyb20gb3V0c2lkZS4gKi9cbiAgICBhYnN0cmFjdCBoYW5kbGVJbmNvbWluZ1ZhbHVlKHZhbHVlOiBUKTogdm9pZDtcblxuICAgIC8qKiBDYWxsZWQgYXMgYW5ndWxhciBwcm9wYWdhdGVzIHZhbHVlIGNoYW5nZXMgdG8gdGhpcyBgQ29udHJvbFZhbHVlQWNjZXNzb3JgLiBZb3Ugbm9ybWFsbHkgZG8gbm90IG5lZWQgdG8gdXNlIGl0LiAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IFQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbmNvbWluZ1ZhbHVlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG5cbiAgICAvKiogQ2FsbGVkIGFzIGFuZ3VsYXIgc2V0cyB1cCB0aGUgYmluZGluZyB0byB0aGlzIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAuIFlvdSBub3JtYWxseSBkbyBub3QgbmVlZCB0byB1c2UgaXQuICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBUKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuZW1pdE91dGdvaW5nVmFsdWUgPSBmbjtcbiAgICB9XG5cbiAgICAvKiogQ2FsbGVkIGFzIGFuZ3VsYXIgc2V0cyB1cCB0aGUgYmluZGluZyB0byB0aGlzIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAuIFlvdSBub3JtYWxseSBkbyBub3QgbmVlZCB0byB1c2UgaXQuICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IFZvaWRGdW5jdGlvbikge1xuICAgICAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICAgIH1cblxuICAgIC8qKiBDYWxsZWQgYXMgYW5ndWxhciBwcm9wYWdhdGVzIGRpc2FibGVkIGNoYW5nZXMgdG8gdGhpcyBgQ29udHJvbFZhbHVlQWNjZXNzb3JgLiBZb3Ugbm9ybWFsbHkgZG8gbm90IG5lZWQgdG8gdXNlIGl0LiAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmlzRGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbn1cbiJdfQ==