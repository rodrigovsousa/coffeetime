import { Subject, Subscription } from "rxjs";
/**
 * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.
 *
 * ```ts
 * @Injectable()
 * // or @Component() (also consider DirectiveSuperclass)
 * // or @Directive() (also consider DirectiveSuperclass)
 * // or @Pipe()
 * class MyThing extends InjectableSuperclass {
 *   constructor(somethingObservable: Observable) {
 *     super();
 *     this.subscribeTo(somethingObservable);
 *   }
 *
 *   ngOnDestroy() {
 *     // if you override ngOnDestroy, be sure to call this too
 *     super.ngOnDestroy();
 *   }
 * }
 * ```
 */
var InjectableSuperclass = /** @class */ (function () {
    function InjectableSuperclass() {
        this.subscriptions = new Subscription();
        this.destructionSubject = new Subject();
        this.destruction$ = this.destructionSubject.asObservable();
    }
    InjectableSuperclass.prototype.subscribeTo = function (observable, next, error, complete) {
        this.subscriptions.add(observable.subscribe(this.bind(next), this.bind(error), this.bind(complete)));
    };
    InjectableSuperclass.prototype.unsubscribe = function () {
        this.subscriptions.unsubscribe();
        this.subscriptions = new Subscription();
    };
    InjectableSuperclass.prototype.bind = function (fn) {
        return fn === null || fn === void 0 ? void 0 : fn.bind(this);
    };
    InjectableSuperclass.prototype.ngOnDestroy = function () {
        this.unsubscribe();
        this.destructionSubject.next();
        this.destructionSubject.complete();
    };
    return InjectableSuperclass;
}());
export { InjectableSuperclass };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0YWJsZS1zdXBlcmNsYXNzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL2FuZ3VsYXItYmFzZS8iLCJzb3VyY2VzIjpbImxpYi9mb3JtLXV0aWxzL2luamVjdGFibGUtc3VwZXJjbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWMsT0FBTyxFQUFFLFlBQVksRUFBa0IsTUFBTSxNQUFNLENBQUM7QUFFekU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBQ0g7SUFRSTtRQU5RLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUluQyx1QkFBa0IsR0FBRyxJQUFJLE9BQU8sRUFBYSxDQUFDO1FBR2xELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQy9ELENBQUM7SUFFRCwwQ0FBVyxHQUFYLFVBQ0ksVUFBeUIsRUFDekIsSUFBeUIsRUFDekIsS0FBNEIsRUFDNUIsUUFBcUI7UUFFckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQ2xCLFVBQVUsQ0FBQyxTQUFTLENBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELDBDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRU8sbUNBQUksR0FBWixVQUFhLEVBQXdCO1FBQ2pDLE9BQU8sRUFBRSxhQUFGLEVBQUUsdUJBQUYsRUFBRSxDQUFFLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDMUIsQ0FBQztJQUVELDBDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiwgVW5zdWJzY3JpYmFibGUgfSBmcm9tIFwicnhqc1wiO1xuXG4vKipcbiAqIFVzZSBhcyB0aGUgc3VwZXJjbGFzcyBmb3IgYW55dGhpbmcgbWFuYWdlZCBieSBhbmd1bGFyJ3MgZGVwZW5kZW5jeSBpbmplY3Rpb24gZm9yIGNhcmUtZnJlZSB1c2Ugb2YgYHN1YnNjcmliZVRvKClgLiBJdCBzaW1wbHkgY2FsbHMgYHVuc3Vic2NyaWJlKClgIGR1cmluZyBgbmdPbkRlc3Ryb3koKWAuIElmIHlvdSBvdmVycmlkZSBgbmdPbkRlc3Ryb3koKWAgaW4geW91ciBzdWJjbGFzcywgYmUgc3VyZSB0byBpbnZva2UgdGhlIHN1cGVyIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBASW5qZWN0YWJsZSgpXG4gKiAvLyBvciBAQ29tcG9uZW50KCkgKGFsc28gY29uc2lkZXIgRGlyZWN0aXZlU3VwZXJjbGFzcylcbiAqIC8vIG9yIEBEaXJlY3RpdmUoKSAoYWxzbyBjb25zaWRlciBEaXJlY3RpdmVTdXBlcmNsYXNzKVxuICogLy8gb3IgQFBpcGUoKVxuICogY2xhc3MgTXlUaGluZyBleHRlbmRzIEluamVjdGFibGVTdXBlcmNsYXNzIHtcbiAqICAgY29uc3RydWN0b3Ioc29tZXRoaW5nT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZSkge1xuICogICAgIHN1cGVyKCk7XG4gKiAgICAgdGhpcy5zdWJzY3JpYmVUbyhzb21ldGhpbmdPYnNlcnZhYmxlKTtcbiAqICAgfVxuICpcbiAqICAgbmdPbkRlc3Ryb3koKSB7XG4gKiAgICAgLy8gaWYgeW91IG92ZXJyaWRlIG5nT25EZXN0cm95LCBiZSBzdXJlIHRvIGNhbGwgdGhpcyB0b29cbiAqICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEluamVjdGFibGVTdXBlcmNsYXNzIGltcGxlbWVudHMgVW5zdWJzY3JpYmFibGUsIE9uRGVzdHJveSB7XG5cbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnMgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgICBkZXN0cnVjdGlvbiQ6IE9ic2VydmFibGU8dW5kZWZpbmVkPjtcblxuICAgIHByaXZhdGUgZGVzdHJ1Y3Rpb25TdWJqZWN0ID0gbmV3IFN1YmplY3Q8dW5kZWZpbmVkPigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJ1Y3Rpb24kID0gdGhpcy5kZXN0cnVjdGlvblN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgc3Vic2NyaWJlVG88VD4oXG4gICAgICAgIG9ic2VydmFibGU6IE9ic2VydmFibGU8VD4sXG4gICAgICAgIG5leHQ/OiAodmFsdWU6IFQpID0+IHZvaWQsXG4gICAgICAgIGVycm9yPzogKGVycm9yOiBhbnkpID0+IHZvaWQsXG4gICAgICAgIGNvbXBsZXRlPzogKCkgPT4gdm9pZCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChcbiAgICAgICAgICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIHRoaXMuYmluZChuZXh0KSxcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQoZXJyb3IpLFxuICAgICAgICAgICAgICAgIHRoaXMuYmluZChjb21wbGV0ZSksXG4gICAgICAgICAgICApLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYmluZChmbj86ICh2YWw/OiBhbnkpID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuIGZuPy5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuZGVzdHJ1Y3Rpb25TdWJqZWN0Lm5leHQoKTtcbiAgICAgICAgdGhpcy5kZXN0cnVjdGlvblN1YmplY3QuY29tcGxldGUoKTtcbiAgICB9XG59XG4iXX0=