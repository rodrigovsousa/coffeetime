import { __extends } from "tslib";
import { FormControl } from "@angular/forms";
import { FormControlSuperclass } from "./form-control-superclass";
var WrappedFormControlSuperclass = /** @class */ (function (_super) {
    __extends(WrappedFormControlSuperclass, _super);
    function WrappedFormControlSuperclass(injector) {
        var _this = _super.call(this, injector) || this;
        _this.formControl = new FormControl();
        _this.subscribeTo(_this.formControl.valueChanges, function (value) {
            _this.emitOutgoingValue(_this.innerToOuter(value));
        });
        _this.formControl.markAsTouched = function () {
            _this.onTouched();
        };
        return _this;
    }
    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */
    WrappedFormControlSuperclass.prototype.handleIncomingValue = function (value) {
        this.formControl.setValue(this.outerToInner(value), { emitEvent: false });
    };
    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */
    WrappedFormControlSuperclass.prototype.setDisabledState = function (isDisabled) {
        if (isDisabled) {
            this.formControl.disable({ emitEvent: false });
        }
        else {
            this.formControl.enable({ emitEvent: false });
        }
        _super.prototype.setDisabledState.call(this, this.isDisabled);
    };
    /** Override this to modify a value coming from the outside to the format needed within this component. */
    WrappedFormControlSuperclass.prototype.outerToInner = function (value) {
        return value;
    };
    /** Override this to modify a value coming from within this component to the format expected on the outside. */
    WrappedFormControlSuperclass.prototype.innerToOuter = function (value) {
        return value;
    };
    return WrappedFormControlSuperclass;
}(FormControlSuperclass));
export { WrappedFormControlSuperclass };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1mb3JtLWNvbnRyb2wtc3VwZXJjbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvZm9ybS11dGlscy93cmFwcGVkLWZvcm0tY29udHJvbC1zdXBlcmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEU7SUFBNkYsZ0RBQWdDO0lBSXpILHNDQUFZLFFBQWtCO1FBQTlCLFlBQ0ksa0JBQU0sUUFBUSxDQUFDLFNBT2xCO1FBVkQsaUJBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBSTVCLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsVUFBQyxLQUFLO1lBQ2xELEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFDSCxLQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRztZQUM3QixLQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUFDOztJQUNOLENBQUM7SUFFRCxzSEFBc0g7SUFDdEgsMERBQW1CLEdBQW5CLFVBQW9CLEtBQWdCO1FBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsd0hBQXdIO0lBQ3hILHVEQUFnQixHQUFoQixVQUFpQixVQUFtQjtRQUNoQyxJQUFJLFVBQVUsRUFBRTtZQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDbEQ7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDakQ7UUFDRCxpQkFBTSxnQkFBZ0IsWUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELDBHQUEwRztJQUNoRyxtREFBWSxHQUF0QixVQUF1QixLQUFnQjtRQUNuQyxPQUFRLEtBQTBCLENBQUM7SUFDdkMsQ0FBQztJQUVELCtHQUErRztJQUNyRyxtREFBWSxHQUF0QixVQUF1QixLQUFnQjtRQUNuQyxPQUFRLEtBQTBCLENBQUM7SUFDdkMsQ0FBQztJQUNMLG1DQUFDO0FBQUQsQ0FBQyxBQXRDRCxDQUE2RixxQkFBcUIsR0FzQ2pIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IEZvcm1Db250cm9sU3VwZXJjbGFzcyB9IGZyb20gXCIuL2Zvcm0tY29udHJvbC1zdXBlcmNsYXNzXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBXcmFwcGVkRm9ybUNvbnRyb2xTdXBlcmNsYXNzPE91dGVyVHlwZSwgSW5uZXJUeXBlID0gT3V0ZXJUeXBlPiBleHRlbmRzIEZvcm1Db250cm9sU3VwZXJjbGFzczxPdXRlclR5cGU+IHtcblxuICAgIGZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICAgICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvKHRoaXMuZm9ybUNvbnRyb2wudmFsdWVDaGFuZ2VzLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdE91dGdvaW5nVmFsdWUodGhpcy5pbm5lclRvT3V0ZXIodmFsdWUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2wubWFya0FzVG91Y2hlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqIENhbGxlZCBhcyBhbmd1bGFyIHByb3BhZ2F0ZXMgdmFsdWVzIGNoYW5nZXMgdG8gdGhpcyBgQ29udHJvbFZhbHVlQWNjZXNzb3JgLiBZb3Ugbm9ybWFsbHkgZG8gbm90IG5lZWQgdG8gdXNlIGl0LiAqL1xuICAgIGhhbmRsZUluY29taW5nVmFsdWUodmFsdWU6IE91dGVyVHlwZSkge1xuICAgICAgICB0aGlzLmZvcm1Db250cm9sLnNldFZhbHVlKHRoaXMub3V0ZXJUb0lubmVyKHZhbHVlKSwgeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIC8qKiBDYWxsZWQgYXMgYW5ndWxhciBwcm9wYWdhdGVzIGRpc2FibGVkIGNoYW5nZXMgdG8gdGhpcyBgQ29udHJvbFZhbHVlQWNjZXNzb3JgLiBZb3Ugbm9ybWFsbHkgZG8gbm90IG5lZWQgdG8gdXNlIGl0LiAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5kaXNhYmxlKHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuZW5hYmxlKHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5zZXREaXNhYmxlZFN0YXRlKHRoaXMuaXNEaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgLyoqIE92ZXJyaWRlIHRoaXMgdG8gbW9kaWZ5IGEgdmFsdWUgY29taW5nIGZyb20gdGhlIG91dHNpZGUgdG8gdGhlIGZvcm1hdCBuZWVkZWQgd2l0aGluIHRoaXMgY29tcG9uZW50LiAqL1xuICAgIHByb3RlY3RlZCBvdXRlclRvSW5uZXIodmFsdWU6IE91dGVyVHlwZSk6IElubmVyVHlwZSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgYXMgYW55KSBhcyBJbm5lclR5cGU7XG4gICAgfVxuXG4gICAgLyoqIE92ZXJyaWRlIHRoaXMgdG8gbW9kaWZ5IGEgdmFsdWUgY29taW5nIGZyb20gd2l0aGluIHRoaXMgY29tcG9uZW50IHRvIHRoZSBmb3JtYXQgZXhwZWN0ZWQgb24gdGhlIG91dHNpZGUuICovXG4gICAgcHJvdGVjdGVkIGlubmVyVG9PdXRlcih2YWx1ZTogSW5uZXJUeXBlKTogT3V0ZXJUeXBlIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpIGFzIE91dGVyVHlwZTtcbiAgICB9XG59XG4iXX0=