import { __decorate, __extends, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { AUTH_CONFIG } from '../config/auth-config';
import { BehaviorSubject } from 'rxjs';
import { Authentication } from './authentication';
import { HttpClient } from '@angular/common/http';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
import * as i2 from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
export function isAuthenticated(config) {
    return null !== config.storage.getItem(config.userStorageIndex);
}
;
export function redirect(config) {
    window.location.href = config.loginUrl;
    ;
}
;
/**
 * Serviço de autenticação
 * @class
 */
var AuthenticationService = /** @class */ (function (_super) {
    __extends(AuthenticationService, _super);
    function AuthenticationService(config, http) {
        var _this = _super.call(this) || this;
        _this.config = config;
        _this.http = http;
        _this.loginNotifications = new BehaviorSubject(_this.getUser());
        return _this;
    }
    /**
     * Método para verificar se o usuário esta autenticado na aplicação
     * @returns boolean
     * @public
     */
    AuthenticationService.prototype.isAuthenticated = function () {
        return isAuthenticated(this.config);
    };
    /**
     * Método responsável por realizar redirecionamentos
     * @returns void
     * @public
     */
    AuthenticationService.prototype.redirect = function () {
        redirect(this.config);
    };
    /**
     * Método responsável pelo login da aplicação
     * @public
     * @param {User} user
     * @returns Observable<any>
     */
    AuthenticationService.prototype.login = function () {
        var _this = this;
        this.getUserDetails()
            .subscribe(function (user) {
            _this.setUser(user);
            _this.loginNotifications.next(user);
        });
    };
    /**
     * Método responsável pelo logou da aplicação
     * @public
     * @returns void
     */
    AuthenticationService.prototype.logout = function () {
        this.loginNotifications.next(null);
        this.config.storage.removeItem(this.config.userStorageIndex);
        window.location.href = this.config.logoutUrl;
    };
    /**
     * Método responsável por obter os dados do usuário logado
     * @public
     * @returns Observable<any>
     */
    AuthenticationService.prototype.getUserDetails = function () {
        return this.http.get(this.config.baseUrl + this.config.detailsUrl);
    };
    AuthenticationService.prototype.setUser = function (user) {
        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));
    };
    AuthenticationService.prototype.getUser = function () {
        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));
    };
    AuthenticationService.prototype.getLoginNotifications = function () {
        return this.loginNotifications.pipe(filter(function (value) { return value != null; }));
    };
    AuthenticationService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] },
        { type: HttpClient }
    ]; };
    AuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticationService_Factory() { return new AuthenticationService(i0.ɵɵinject(i1.AUTH_CONFIG), i0.ɵɵinject(i2.HttpClient)); }, token: AuthenticationService, providedIn: "root" });
    AuthenticationService = __decorate([ __param(0, Inject(AUTH_CONFIG))
    ], AuthenticationService);
AuthenticationService.ɵfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(ɵngcc0.ɵɵinject(AUTH_CONFIG), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthenticationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_CONFIG]
            }] }, { type: ɵngcc1.HttpClient }]; }, null); })();
    return AuthenticationService;
}(Authentication));
export { AuthenticationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9hbmd1bGFyLWJhc2UvbGliL3NlY3VyaXR5L2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBYyxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRSxPQUFPLEVBQXVCLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBTyxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QztBQUNvQztBQUNsQjs7O0FBRGxCLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBa0I7QUFBSSxJQUNsRCxPQUFPLElBQUksS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBQUEsQ0FBQztBQUVGLE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBa0I7QUFBSSxJQUMzQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQUMsSUFBRCxDQUFDO0FBQzVDLENBQUM7QUFBQSxDQUFDO0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUlIO0FBQStELElBQUoseUNBQWlCO0FBQUMsSUFJekUsK0JBQXlDLE1BQWtCLEVBQVUsSUFBZ0I7QUFDekYsUUFESSxZQUNJLGlCQUFPLFNBQ1Y7QUFDTCxRQUg2QyxZQUFNLEdBQU4sTUFBTSxDQUFZO0FBQUMsUUFBUyxVQUFJLEdBQUosSUFBSSxDQUFZO0FBQUMsUUFGdEYsd0JBQWtC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QWMsR0F3RXhFO0FBQ0QsU0F6RWEscUJBQXFCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0aENvbmZpZywgQVVUSF9DT05GSUcgfSBmcm9tICcuLi9jb25maWcvYXV0aC1jb25maWcnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgdGFwLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoY29uZmlnOiBBdXRoQ29uZmlnKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG51bGwgIT09IGNvbmZpZy5zdG9yYWdlLmdldEl0ZW0oY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZGlyZWN0KGNvbmZpZzogQXV0aENvbmZpZyk6IHZvaWQge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY29uZmlnLmxvZ2luVXJsOztcbn07XG5cbi8qKlxuICogU2VydmnDp28gZGUgYXV0ZW50aWNhw6fDo29cbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvblNlcnZpY2U8VSBleHRlbmRzIFVzZXI+IGV4dGVuZHMgQXV0aGVudGljYXRpb248VT4ge1xuXG4gICAgbG9naW5Ob3RpZmljYXRpb25zOiBCZWhhdmlvclN1YmplY3Q8VXNlcj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFVzZXI+KHRoaXMuZ2V0VXNlcigpKTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoQVVUSF9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBBdXRoQ29uZmlnLCBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHBhcmEgdmVyaWZpY2FyIHNlIG8gdXN1w6FyaW8gZXN0YSBhdXRlbnRpY2FkbyBuYSBhcGxpY2HDp8Ojb1xuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaXNBdXRoZW50aWNhdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNBdXRoZW50aWNhdGVkKHRoaXMuY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmVhbGl6YXIgcmVkaXJlY2lvbmFtZW50b3NcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHJlZGlyZWN0KCkge1xuICAgICAgICByZWRpcmVjdCh0aGlzLmNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcGVsbyBsb2dpbiBkYSBhcGxpY2HDp8Ojb1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1VzZXJ9IHVzZXJcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPGFueT5cbiAgICAgKi9cbiAgICBsb2dpbigpIHtcbiAgICAgICAgdGhpcy5nZXRVc2VyRGV0YWlscygpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRVc2VyKHVzZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLm5leHQodXNlcilcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBlbG8gbG9nb3UgZGEgYXBsaWNhw6fDo29cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGxvZ291dCgpIHtcbiAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMubmV4dChudWxsKTtcbiAgICAgICAgdGhpcy5jb25maWcuc3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRoaXMuY29uZmlnLmxvZ291dFVybDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3Igb2J0ZXIgb3MgZGFkb3MgZG8gdXN1w6FyaW8gbG9nYWRvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8YW55PlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVc2VyRGV0YWlscygpOiBPYnNlcnZhYmxlPFU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VT4odGhpcy5jb25maWcuYmFzZVVybCArIHRoaXMuY29uZmlnLmRldGFpbHNVcmwpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0VXNlcih1c2VyOiBVKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmNvbmZpZy51c2VyU3RvcmFnZUluZGV4LCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgfVxuXG4gICAgZ2V0VXNlcigpOiBVIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5jb25maWcuc3RvcmFnZS5nZXRJdGVtKHRoaXMuY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgpKTtcbiAgICB9XG5cbiAgICBnZXRMb2dpbk5vdGlmaWNhdGlvbnMoKTogT2JzZXJ2YWJsZTxVc2VyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy5waXBlKGZpbHRlcigodmFsdWUpID0+IHZhbHVlICE9IG51bGwpKTtcbiAgICB9XG5cbn1cbiJdfQ==