import { __decorate, __extends, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { AUTH_CONFIG } from '../config/auth-config';
import { BehaviorSubject } from 'rxjs';
import { Authentication } from './authentication';
import { HttpClient } from '@angular/common/http';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
import * as i2 from "@angular/common/http";
export function isAuthenticated(config) {
    return null !== config.storage.getItem(config.userStorageIndex);
}
;
export function redirect(config) {
    window.location.href = config.loginUrl;
    ;
}
;
/**
 * Serviço de autenticação
 * @class
 */
var AuthenticationService = /** @class */ (function (_super) {
    __extends(AuthenticationService, _super);
    function AuthenticationService(config, http) {
        var _this = _super.call(this) || this;
        _this.config = config;
        _this.http = http;
        _this.loginNotifications = new BehaviorSubject(_this.getUser());
        return _this;
    }
    /**
     * Método para verificar se o usuário esta autenticado na aplicação
     * @returns boolean
     * @public
     */
    AuthenticationService.prototype.isAuthenticated = function () {
        return isAuthenticated(this.config);
    };
    /**
     * Método responsável por realizar redirecionamentos
     * @returns void
     * @public
     */
    AuthenticationService.prototype.redirect = function () {
        redirect(this.config);
    };
    /**
     * Método responsável pelo login da aplicação
     * @public
     * @param {User} user
     * @returns Observable<any>
     */
    AuthenticationService.prototype.login = function () {
        var _this = this;
        this.getUserDetails()
            .subscribe(function (user) {
            _this.setUser(user);
            _this.loginNotifications.next(user);
        });
    };
    /**
     * Método responsável pelo logou da aplicação
     * @public
     * @returns void
     */
    AuthenticationService.prototype.logout = function () {
        this.loginNotifications.next(null);
        this.config.storage.removeItem(this.config.userStorageIndex);
        window.location.href = this.config.logoutUrl;
    };
    /**
     * Método responsável por obter os dados do usuário logado
     * @public
     * @returns Observable<any>
     */
    AuthenticationService.prototype.getUserDetails = function () {
        return this.http.get(this.config.baseUrl + this.config.detailsUrl);
    };
    AuthenticationService.prototype.setUser = function (user) {
        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));
    };
    AuthenticationService.prototype.getUser = function () {
        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));
    };
    AuthenticationService.prototype.getLoginNotifications = function () {
        return this.loginNotifications.pipe(filter(function (value) { return value != null; }));
    };
    AuthenticationService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] },
        { type: HttpClient }
    ]; };
    AuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticationService_Factory() { return new AuthenticationService(i0.ɵɵinject(i1.AUTH_CONFIG), i0.ɵɵinject(i2.HttpClient)); }, token: AuthenticationService, providedIn: "root" });
    AuthenticationService = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Inject(AUTH_CONFIG))
    ], AuthenticationService);
    return AuthenticationService;
}(Authentication));
export { AuthenticationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvc2VjdXJpdHkvYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hFLE9BQU8sRUFBdUIsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFPLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRTdDLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBa0I7SUFDOUMsT0FBTyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUFBLENBQUM7QUFFRixNQUFNLFVBQVUsUUFBUSxDQUFDLE1BQWtCO0lBQ3ZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFBQSxDQUFDO0FBQzVDLENBQUM7QUFBQSxDQUFDO0FBRUY7OztHQUdHO0FBSUg7SUFBMkQseUNBQWlCO0lBSXhFLCtCQUF5QyxNQUFrQixFQUFVLElBQWdCO1FBQXJGLFlBQ0ksaUJBQU8sU0FDVjtRQUZ3QyxZQUFNLEdBQU4sTUFBTSxDQUFZO1FBQVUsVUFBSSxHQUFKLElBQUksQ0FBWTtRQUZyRix3QkFBa0IsR0FBMEIsSUFBSSxlQUFlLENBQU8sS0FBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7O0lBSXRGLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsK0NBQWUsR0FBZjtRQUNJLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHdDQUFRLEdBQVI7UUFDSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHFDQUFLLEdBQUw7UUFBQSxpQkFNQztRQUxHLElBQUksQ0FBQyxjQUFjLEVBQUU7YUFDaEIsU0FBUyxDQUFDLFVBQUMsSUFBSTtZQUNaLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsS0FBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsc0NBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLDhDQUFjLEdBQXJCO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTyx1Q0FBTyxHQUFmLFVBQWdCLElBQU87UUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCx1Q0FBTyxHQUFQO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQscURBQXFCLEdBQXJCO1FBQ0ksT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUssSUFBSSxJQUFJLEVBQWIsQ0FBYSxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDOztnREFsRVksTUFBTSxTQUFDLFdBQVc7Z0JBQTRDLFVBQVU7OztJQUo1RSxxQkFBcUI7UUFIakMsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztRQUtlLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO09BSnZCLHFCQUFxQixDQXdFakM7Z0NBaEdEO0NBZ0dDLEFBeEVELENBQTJELGNBQWMsR0F3RXhFO1NBeEVZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRoQ29uZmlnLCBBVVRIX0NPTkZJRyB9IGZyb20gJy4uL2NvbmZpZy9hdXRoLWNvbmZpZyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyB0YXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZChjb25maWc6IEF1dGhDb25maWcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gbnVsbCAhPT0gY29uZmlnLnN0b3JhZ2UuZ2V0SXRlbShjb25maWcudXNlclN0b3JhZ2VJbmRleCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVkaXJlY3QoY29uZmlnOiBBdXRoQ29uZmlnKTogdm9pZCB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBjb25maWcubG9naW5Vcmw7O1xufTtcblxuLyoqXG4gKiBTZXJ2acOnbyBkZSBhdXRlbnRpY2HDp8Ojb1xuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uU2VydmljZTxVIGV4dGVuZHMgVXNlcj4gZXh0ZW5kcyBBdXRoZW50aWNhdGlvbjxVPiB7XG5cbiAgICBsb2dpbk5vdGlmaWNhdGlvbnM6IEJlaGF2aW9yU3ViamVjdDxVc2VyPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VXNlcj4odGhpcy5nZXRVc2VyKCkpO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChBVVRIX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEF1dGhDb25maWcsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcGFyYSB2ZXJpZmljYXIgc2UgbyB1c3XDoXJpbyBlc3RhIGF1dGVudGljYWRvIG5hIGFwbGljYcOnw6NvXG4gICAgICogQHJldHVybnMgYm9vbGVhblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpc0F1dGhlbnRpY2F0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc0F1dGhlbnRpY2F0ZWQodGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZWFsaXphciByZWRpcmVjaW9uYW1lbnRvc1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcmVkaXJlY3QoKSB7XG4gICAgICAgIHJlZGlyZWN0KHRoaXMuY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwZWxvIGxvZ2luIGRhIGFwbGljYcOnw6NvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7VXNlcn0gdXNlclxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8YW55PlxuICAgICAqL1xuICAgIGxvZ2luKCkge1xuICAgICAgICB0aGlzLmdldFVzZXJEZXRhaWxzKClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHVzZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFVzZXIodXNlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMubmV4dCh1c2VyKVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcGVsbyBsb2dvdSBkYSBhcGxpY2HDp8Ojb1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbG9nb3V0KCkge1xuICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy5uZXh0KG51bGwpO1xuICAgICAgICB0aGlzLmNvbmZpZy5zdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5jb25maWcudXNlclN0b3JhZ2VJbmRleCk7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy5jb25maWcubG9nb3V0VXJsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciBvYnRlciBvcyBkYWRvcyBkbyB1c3XDoXJpbyBsb2dhZG9cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxhbnk+XG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJEZXRhaWxzKCk6IE9ic2VydmFibGU8VT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxVPih0aGlzLmNvbmZpZy5iYXNlVXJsICsgdGhpcy5jb25maWcuZGV0YWlsc1VybCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRVc2VyKHVzZXI6IFUpIHtcbiAgICAgICAgdGhpcy5jb25maWcuc3RvcmFnZS5zZXRJdGVtKHRoaXMuY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcbiAgICB9XG5cbiAgICBnZXRVc2VyKCk6IFUge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmNvbmZpZy5zdG9yYWdlLmdldEl0ZW0odGhpcy5jb25maWcudXNlclN0b3JhZ2VJbmRleCkpO1xuICAgIH1cblxuICAgIGdldExvZ2luTm90aWZpY2F0aW9ucygpOiBPYnNlcnZhYmxlPFVzZXI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnBpcGUoZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgIT0gbnVsbCkpO1xuICAgIH1cblxufVxuIl19