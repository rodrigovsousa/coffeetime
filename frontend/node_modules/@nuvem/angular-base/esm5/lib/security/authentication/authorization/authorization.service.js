import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { Authorization } from './authorization';
import { Authentication } from '../authentication';
import * as i0 from "@angular/core";
import * as i1 from "../authentication";
/**
 * Serviço de autorização
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var AuthorizationService = /** @class */ (function (_super) {
    __extends(AuthorizationService, _super);
    /**
     * Método construtor para a injeção do serviço de configuração AuthConfig
     * @constructor
     * @param {AuthConfig} config
     */
    function AuthorizationService(authenticationService) {
        var _this = _super.call(this) || this;
        _this.authenticationService = authenticationService;
        return _this;
    }
    /**
     * Método responsável por identificar as regras de acesso
     * @public
     * @param {any} role
     * @returns boolean
     */
    AuthorizationService.prototype.hasRole = function (role) {
        if (role) {
            var user = this.authenticationService.getUser();
            if (role instanceof Array) {
                return user.roles.some(function (userRole) { return role.some(function (checkRole) { return userRole === checkRole; }); });
            }
            return user.roles.some(function (userRole) { return userRole === role; });
        }
        return true;
    };
    AuthorizationService.ctorParameters = function () { return [
        { type: Authentication }
    ]; };
    AuthorizationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthorizationService_Factory() { return new AuthorizationService(i0.ɵɵinject(i1.Authentication)); }, token: AuthorizationService, providedIn: "root" });
AuthorizationService.ɵfac = function AuthorizationService_Factory(t) { return new (t || AuthorizationService)(ɵngcc0.ɵɵinject(Authentication)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthorizationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Authentication }]; }, null); })();
    return AuthorizationService;
}(Authorization));
export { AuthorizationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL2FuZ3VsYXItYmFzZS9saWIvc2VjdXJpdHkvYXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbi9hdXRob3JpemF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRDtBQUdBO0FBREE7QUFDQTtBQUEwQjtBQUNqQixHQUNOOztBQUlIO0FBRUcsSUFGdUMsd0NBQWE7QUFBQyxJQUVwRDtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLDhCQUFvQixxQkFBMkM7QUFDbkUsUUFESSxZQUNJLGlCQUFPLFNBQ1Y7QUFDTCxRQUh3QiwyQkFBcUIsR0FBckIscUJBQXFCLENBQXNCO0FBQUM7QUFFbEUsSUFBRSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksc0NBQU8sR0FBUCxVQUFRLElBQVM7QUFBSSxRQUNqQixJQUFJLElBQUksRUFBRTtBQUNsQixZQUFZLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM5RCxZQUFZLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRTtBQUN2QyxnQkFBZ0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQWdCLElBQUssT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQUMsU0FBaUIsSUFBSyxPQUFBLFFBQVEsS0FBSyxTQUFTLEVBQXRCLENBQXNCLENBQUMsRUFBeEQsQ0FBd0QsQ0FBQyxDQUFDO0FBQ3ZILGFBQWE7QUFDYixZQUFZLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUFnQixJQUFLLE9BQUEsUUFBUSxLQUFLLElBQUksRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO0FBQzVFLFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLElBQUksQ0FBQztBQUVMO0FBQytELGdCQXRCaEIsY0FBYztBQUFHO0FBQzdEO0lBUlUsb0JBQW9CLHdCQUhoQyxVQUFVLENBQUMsY0FDUixVQUFVLEVBQUUsTUFBTSxXQUNyQixDQUFDLFFBQ1csb0JBQW9CLENBNEJoQzs7Ozs7O3dFQUNEO0FBQUMsK0JBMUNEO0FBQ0MsQ0F3Q0EsQUE1QkQsQ0FBMEMsYUFBYSxHQTRCdEQ7QUFDRCxTQTdCYSxvQkFBb0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0aG9yaXphdGlvbiB9IGZyb20gJy4vYXV0aG9yaXphdGlvbic7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4uL2F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi91c2VyJztcblxuLyoqXG4gKiBTZXJ2acOnbyBkZSBhdXRvcml6YcOnw6NvIFxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEF1dGhvcml6YXRpb25TZXJ2aWNlIGV4dGVuZHMgQXV0aG9yaXphdGlvbiB7XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIGNvbnN0cnV0b3IgcGFyYSBhIGluamXDp8OjbyBkbyBzZXJ2acOnbyBkZSBjb25maWd1cmHDp8OjbyBBdXRoQ29uZmlnXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBdXRoQ29uZmlnfSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb248VXNlcj4pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgaWRlbnRpZmljYXIgYXMgcmVncmFzIGRlIGFjZXNzb1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2FueX0gcm9sZVxuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICAgKi9cbiAgICBoYXNSb2xlKHJvbGU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAocm9sZSkge1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgICAgIGlmIChyb2xlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5yb2xlcy5zb21lKCh1c2VyUm9sZTogc3RyaW5nKSA9PiByb2xlLnNvbWUoKGNoZWNrUm9sZTogc3RyaW5nKSA9PiB1c2VyUm9sZSA9PT0gY2hlY2tSb2xlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXNlci5yb2xlcy5zb21lKCh1c2VyUm9sZTogc3RyaW5nKSA9PiB1c2VyUm9sZSA9PT0gcm9sZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG59XG4iXX0=