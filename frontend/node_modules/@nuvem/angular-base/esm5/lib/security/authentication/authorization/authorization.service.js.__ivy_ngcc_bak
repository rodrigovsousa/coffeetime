import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { Authorization } from './authorization';
import { Authentication } from '../authentication';
import * as i0 from "@angular/core";
import * as i1 from "../authentication";
/**
 * Serviço de autorização
 * @class
 */
var AuthorizationService = /** @class */ (function (_super) {
    __extends(AuthorizationService, _super);
    /**
     * Método construtor para a injeção do serviço de configuração AuthConfig
     * @constructor
     * @param {AuthConfig} config
     */
    function AuthorizationService(authenticationService) {
        var _this = _super.call(this) || this;
        _this.authenticationService = authenticationService;
        return _this;
    }
    /**
     * Método responsável por identificar as regras de acesso
     * @public
     * @param {any} role
     * @returns boolean
     */
    AuthorizationService.prototype.hasRole = function (role) {
        if (role) {
            var user = this.authenticationService.getUser();
            if (role instanceof Array) {
                return user.roles.some(function (userRole) { return role.some(function (checkRole) { return userRole === checkRole; }); });
            }
            return user.roles.some(function (userRole) { return userRole === role; });
        }
        return true;
    };
    AuthorizationService.ctorParameters = function () { return [
        { type: Authentication }
    ]; };
    AuthorizationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthorizationService_Factory() { return new AuthorizationService(i0.ɵɵinject(i1.Authentication)); }, token: AuthorizationService, providedIn: "root" });
    AuthorizationService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], AuthorizationService);
    return AuthorizationService;
}(Authorization));
export { AuthorizationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL2FuZ3VsYXItYmFzZS8iLCJzb3VyY2VzIjpbImxpYi9zZWN1cml0eS9hdXRoZW50aWNhdGlvbi9hdXRob3JpemF0aW9uL2F1dGhvcml6YXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFHbkQ7OztHQUdHO0FBSUg7SUFBMEMsd0NBQWE7SUFFbkQ7Ozs7T0FJRztJQUNILDhCQUFvQixxQkFBMkM7UUFBL0QsWUFDSSxpQkFBTyxTQUNWO1FBRm1CLDJCQUFxQixHQUFyQixxQkFBcUIsQ0FBc0I7O0lBRS9ELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHNDQUFPLEdBQVAsVUFBUSxJQUFTO1FBQ2IsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEQsSUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFO2dCQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUMsUUFBZ0IsSUFBSyxPQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBQyxTQUFpQixJQUFLLE9BQUEsUUFBUSxLQUFLLFNBQVMsRUFBdEIsQ0FBc0IsQ0FBQyxFQUF4RCxDQUF3RCxDQUFDLENBQUM7YUFDMUc7WUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUMsUUFBZ0IsSUFBSyxPQUFBLFFBQVEsS0FBSyxJQUFJLEVBQWpCLENBQWlCLENBQUMsQ0FBQztTQUNuRTtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7O2dCQW5CMEMsY0FBYzs7O0lBUGhELG9CQUFvQjtRQUhoQyxVQUFVLENBQUM7WUFDUixVQUFVLEVBQUUsTUFBTTtTQUNyQixDQUFDO09BQ1csb0JBQW9CLENBNEJoQzsrQkF6Q0Q7Q0F5Q0MsQUE1QkQsQ0FBMEMsYUFBYSxHQTRCdEQ7U0E1Qlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRob3JpemF0aW9uIH0gZnJvbSAnLi9hdXRob3JpemF0aW9uJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi4vYXV0aGVudGljYXRpb24nO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL3VzZXInO1xuXG4vKipcbiAqIFNlcnZpw6dvIGRlIGF1dG9yaXphw6fDo28gXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQXV0aG9yaXphdGlvblNlcnZpY2UgZXh0ZW5kcyBBdXRob3JpemF0aW9uIHtcblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gY29uc3RydXRvciBwYXJhIGEgaW5qZcOnw6NvIGRvIHNlcnZpw6dvIGRlIGNvbmZpZ3VyYcOnw6NvIEF1dGhDb25maWdcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0F1dGhDb25maWd9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0aGVudGljYXRpb25TZXJ2aWNlOiBBdXRoZW50aWNhdGlvbjxVc2VyPikge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciBpZGVudGlmaWNhciBhcyByZWdyYXMgZGUgYWNlc3NvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7YW55fSByb2xlXG4gICAgICogQHJldHVybnMgYm9vbGVhblxuICAgICAqL1xuICAgIGhhc1JvbGUocm9sZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChyb2xlKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICAgICAgaWYgKHJvbGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VyLnJvbGVzLnNvbWUoKHVzZXJSb2xlOiBzdHJpbmcpID0+IHJvbGUuc29tZSgoY2hlY2tSb2xlOiBzdHJpbmcpID0+IHVzZXJSb2xlID09PSBjaGVja1JvbGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1c2VyLnJvbGVzLnNvbWUoKHVzZXJSb2xlOiBzdHJpbmcpID0+IHVzZXJSb2xlID09PSByb2xlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbn1cbiJdfQ==