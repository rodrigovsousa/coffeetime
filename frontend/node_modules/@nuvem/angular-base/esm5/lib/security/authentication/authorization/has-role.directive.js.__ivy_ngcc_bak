import { __decorate } from "tslib";
import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';
import { Authorization } from './authorization';
import { Authentication } from '../authentication';
/**
 * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.
 * @class
 */
var HasRoleDirective = /** @class */ (function () {
    /**
     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança
     * @param {TemplateRef<any>} templateRef
     * @param {ViewContainerRef} viewContainer
     * @param {Authorization} authorization
     * @param {Authentication<User>} authentication
     */
    function HasRoleDirective(templateRef, viewContainer, authorization, authentication) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authorization = authorization;
        this.authentication = authentication;
    }
    Object.defineProperty(HasRoleDirective.prototype, "hasRole", {
        /**
         * Propriedade para identificar regras de acesso aos itens
         * @type {string}
         */
        set: function (hasRole) {
            var _this = this;
            this.viewContainer.clear();
            if (hasRole) {
                if (this.loginNotifications)
                    this.loginNotifications.unsubscribe();
                this.loginNotifications = this.authentication.getLoginNotifications().subscribe(function () {
                    if (_this.authorization.hasRole(hasRole)) {
                        _this.viewContainer.clear();
                        _this.viewContainer.createEmbeddedView(_this.templateRef);
                    }
                });
            }
            else {
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        },
        enumerable: true,
        configurable: true
    });
    HasRoleDirective.prototype.ngOnDestroy = function () {
        this.loginNotifications.unsubscribe();
    };
    HasRoleDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: Authorization },
        { type: Authentication }
    ]; };
    __decorate([
        Input()
    ], HasRoleDirective.prototype, "hasRole", null);
    HasRoleDirective = __decorate([
        Directive({
            selector: '[hasRole]'
        })
    ], HasRoleDirective);
    return HasRoleDirective;
}());
export { HasRoleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL2FuZ3VsYXItYmFzZS8iLCJzb3VyY2VzIjpbImxpYi9zZWN1cml0eS9hdXRoZW50aWNhdGlvbi9hdXRob3JpemF0aW9uL2hhcy1yb2xlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSW5EOzs7R0FHRztBQUlIO0lBSUk7Ozs7OztPQU1HO0lBQ0gsMEJBQ1ksV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsYUFBNEIsRUFDNUIsY0FBb0M7UUFIcEMsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixtQkFBYyxHQUFkLGNBQWMsQ0FBc0I7SUFBSSxDQUFDO0lBTTVDLHNCQUFJLHFDQUFPO1FBSnBCOzs7V0FHRzthQUNNLFVBQVksT0FBMEI7WUFBL0MsaUJBYUM7WUFaRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzNCLElBQUksT0FBTyxFQUFFO2dCQUNULElBQUksSUFBSSxDQUFDLGtCQUFrQjtvQkFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUMsU0FBUyxDQUFDO29CQUM1RSxJQUFJLEtBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUNyQyxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUMzQixLQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDM0Q7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7YUFDTjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUMzRDtRQUNMLENBQUM7OztPQUFBO0lBR0Qsc0NBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQyxDQUFDOztnQkEzQndCLFdBQVc7Z0JBQ1QsZ0JBQWdCO2dCQUNoQixhQUFhO2dCQUNaLGNBQWM7O0lBTWpDO1FBQVIsS0FBSyxFQUFFO21EQWFQO0lBbENRLGdCQUFnQjtRQUg1QixTQUFTLENBQUU7WUFDUixRQUFRLEVBQUUsV0FBVztTQUN4QixDQUFDO09BQ1csZ0JBQWdCLENBeUM1QjtJQUFELHVCQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0F6Q1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0aG9yaXphdGlvbiB9IGZyb20gJy4vYXV0aG9yaXphdGlvbic7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4uL2F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi91c2VyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEhhc1JvbGVEaXJlY3RpdmUgZGlyZXRpdmEgcGFyYSBjaGVjYWdlbSBkYSBleGlzdMOqbmNpYSBkZSBwZXJtaXNzw7VlcyBkZSBhY2Vzc28gcGFyYSBvIHVzdcOhcmlvIGxvZ2Fkby5cbiAqIEBjbGFzc1xuICovXG5ARGlyZWN0aXZlKCB7XG4gICAgc2VsZWN0b3I6ICdbaGFzUm9sZV0nXG59KVxuZXhwb3J0IGNsYXNzIEhhc1JvbGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBsb2dpbk5vdGlmaWNhdGlvbnM6IFN1YnNjcmlwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWwgcG9yIGNhcnJlZ2FyIG8gc2VydmnDp28gZGUgYXV0b3JpemHDp8OjbyBlIHNlcnZpw6dvIGRlIGlkZW50aWZpY2HDp8OjbyBkZSBtdWRhbsOnYVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVSZWY8YW55Pn0gdGVtcGxhdGVSZWZcbiAgICAgKiBAcGFyYW0ge1ZpZXdDb250YWluZXJSZWZ9IHZpZXdDb250YWluZXJcbiAgICAgKiBAcGFyYW0ge0F1dGhvcml6YXRpb259IGF1dGhvcml6YXRpb25cbiAgICAgKiBAcGFyYW0ge0F1dGhlbnRpY2F0aW9uPFVzZXI+fSBhdXRoZW50aWNhdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIHByaXZhdGUgYXV0aG9yaXphdGlvbjogQXV0aG9yaXphdGlvbixcbiAgICAgICAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvbjogQXV0aGVudGljYXRpb248VXNlcj4pIHsgfVxuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgcGFyYSBpZGVudGlmaWNhciByZWdyYXMgZGUgYWNlc3NvIGFvcyBpdGVuc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KCkgc2V0IGhhc1JvbGUoaGFzUm9sZTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgIGlmIChoYXNSb2xlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMpIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucyA9IHRoaXMuYXV0aGVudGljYXRpb24uZ2V0TG9naW5Ob3RpZmljYXRpb25zKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRob3JpemF0aW9uLmhhc1JvbGUoaGFzUm9sZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMudW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbn1cbiJdfQ==