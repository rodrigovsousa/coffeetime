import { __decorate } from "tslib";
import { Component, ElementRef, OnDestroy, OnInit, Input, AfterViewInit, AfterContentInit } from '@angular/core';
import { Authentication } from './authentication';
import { BlockUiService } from '../../block-ui/block-ui.service';
/**
 *
 * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.
 *
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

var _c0 = ["hide-while-login", ""];
function HideWhileLoginComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r938 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r938.loadingContent);
} }
var _c1 = ["*"];
var HideWhileLoginComponent = /** @class */ (function () {
    /**
     * constructor method
     * @param {ElementRef} hostComponent
     * @param {AbstractAuthentication} auth
     * @param {BlockUiService} blockUiService
     * @constructor
     */
    function HideWhileLoginComponent(hostComponent, auth, blockUiService) {
        this.hostComponent = hostComponent;
        this.auth = auth;
        this.blockUiService = blockUiService;
        /**
         * Carrega conteúdo
         * @type {loadingString}
         */
        this.loadingContent = "";
        this.waitingLogin = false;
    }
    HideWhileLoginComponent.prototype.ngOnInit = function () {
        this.waitingLogin = !this.auth.isAuthenticated();
    };
    HideWhileLoginComponent.prototype.ngAfterContentInit = function () {
        if (!this.auth.isAuthenticated()) {
            this.blockUiService.show();
        }
    };
    HideWhileLoginComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.auth.isAuthenticated()) {
            for (var i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'none';
            }
        }
        this.loginNotifications = this.auth.getLoginNotifications().subscribe(function () {
            for (var i = 1; i < _this.hostComponent.nativeElement.children.length; i++) {
                _this.hostComponent.nativeElement.children[i].style.display = 'inherit';
            }
            _this.waitingLogin = false;
            _this.blockUiService.hide();
        });
    };
    /**
     * ngOnDestroy method
     * @returns void
     */
    HideWhileLoginComponent.prototype.ngOnDestroy = function () {
        this.loginNotifications.unsubscribe();
    };
    HideWhileLoginComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Authentication },
        { type: BlockUiService }
    ]; };
    __decorate([
        Input()
    ], HideWhileLoginComponent.prototype, "loadingContent", void 0);
HideWhileLoginComponent.ɵfac = function HideWhileLoginComponent_Factory(t) { return new (t || HideWhileLoginComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Authentication), ɵngcc0.ɵɵdirectiveInject(BlockUiService)); };
HideWhileLoginComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HideWhileLoginComponent, selectors: [["", "hide-while-login", ""]], inputs: { loadingContent: "loadingContent" }, attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[4, "ngIf"]], template: function HideWhileLoginComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, HideWhileLoginComponent_span_0_Template, 2, 1, "span", 0);
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.waitingLogin);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HideWhileLoginComponent, [{
        type: Component,
        args: [{
                selector: '[hide-while-login]',
                template: "<span *ngIf=\"waitingLogin\">{{ loadingContent }}</span>\n<ng-content></ng-content>"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Authentication }, { type: BlockUiService }]; }, { loadingContent: [{
            type: Input
        }] }); })();
    return HideWhileLoginComponent;
}());
export { HideWhileLoginComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9zZWN1cml0eS9hdXRoZW50aWNhdGlvbi9oaWRlLXdoaWxlLWxvZ2luLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpILE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFakU7QUFDQTtBQUFHO0FBQzRIO0FBQzdIO0FBQ00sR0FDTDs7Ozs7Ozs7Ozs7Ozs7O0FBS0g7QUFBMkQsSUFhdkQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksaUNBQ1ksYUFBeUIsRUFDekIsSUFBMEIsRUFDMUIsY0FBOEI7QUFDM0MsUUFIYSxrQkFBYSxHQUFiLGFBQWEsQ0FBWTtBQUFDLFFBQzFCLFNBQUksR0FBSixJQUFJLENBQXNCO0FBQUMsUUFDM0IsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0FBQzlDLFFBdEJJO0FBQ0o7QUFDSTtBQUVKLFdBRE87QUFDUCxRQUNXLG1CQUFjLEdBQVcsRUFBRSxDQUFDO0FBQ3ZDLFFBR1csaUJBQVksR0FBWSxLQUFLLENBQUM7QUFDekMsSUFhSSxDQUFDO0FBQ0wsSUFDSSwwQ0FBUSxHQUFSO0FBQWMsUUFDVixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUN6RCxJQUFJLENBQUM7QUFFTCxJQUFJLG9EQUFrQixHQUFsQjtBQUFjLFFBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUU7QUFDMUMsWUFBWSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3ZDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFFTCxJQUFJLGlEQUFlLEdBQWY7QUFBYyxRQUFkLGlCQWNDO0FBQ0wsUUFkUSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtBQUMxQyxZQUFZLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3ZGLGdCQUFnQixJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDcEYsYUFBYTtBQUNiLFNBQVM7QUFDVCxRQUNRLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsU0FBUyxDQUFDO0FBQ3hFLFlBQU0sS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdkYsZ0JBQWdCLEtBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUN2RixhQUFhO0FBQ2IsWUFBWSxLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztBQUN0QyxZQUFZLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdkMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUVMLElBQUk7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksNkNBQVcsR0FBWDtBQUFjLFFBQ1YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzlDLElBQUksQ0FBQztBQUVMO0FBQ2tFLGdCQXpDbkMsVUFBVTtBQUN2QyxnQkFBb0IsY0FBYztBQUFJLGdCQUNSLGNBQWM7QUFDNUM7QUFDRSxJQWxCQTtBQUFhLFFBRFosS0FBSyxFQUFFO0FBQ1osbUVBQXVDO0lBUDFCLHVCQUF1Qix3QkFKbkMsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLG9CQUFvQixjQUM5QiwrRkFBZ0QsVUFDbkQsQ0FBQyxRQUNXO0lBQXVCLENBNkRuQzs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCw4QkFBQztBQUNBLENBREEsQUE3REQsSUE2REM7QUFDRCxTQTlEYSx1QkFBdUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIElucHV0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyJztcbmltcG9ydCB7IEJsb2NrVWlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYmxvY2stdWkvYmxvY2stdWkuc2VydmljZSc7XG5cbi8qKlxuICogXG4gKiBDb21wb25lbnRlIEhpZGVXaGlsZUxvZ2luQ29tcG9uZW50LCB1dGlsaXphZG8gcGFyYSBuw6NvIGFwcmVzZW50YXIgYSB0ZWxhIGRhIGFwbGljYcOnw6NvIGVucXVhbnRvIGEgZmFzZSBkZSBsb2dpbiBuw6NvIHRlcm1pbm91LlxuICogXG4gKiBAY2xhc3NcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbaGlkZS13aGlsZS1sb2dpbl0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9oaWRlLXdoaWxlLWxvZ2luLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBIaWRlV2hpbGVMb2dpbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcblxuICAgIC8qKlxuICAgICAqIENhcnJlZ2EgY29udGXDumRvXG4gICAgICogQHR5cGUge2xvYWRpbmdTdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbG9hZGluZ0NvbnRlbnQ6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBwcml2YXRlIGxvZ2luTm90aWZpY2F0aW9uczogU3Vic2NyaXB0aW9uO1xuXG4gICAgcHVibGljIHdhaXRpbmdMb2dpbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQHBhcmFtIHtFbGVtZW50UmVmfSBob3N0Q29tcG9uZW50XG4gICAgICogQHBhcmFtIHtBYnN0cmFjdEF1dGhlbnRpY2F0aW9ufSBhdXRoXG4gICAgICogQHBhcmFtIHtCbG9ja1VpU2VydmljZX0gYmxvY2tVaVNlcnZpY2VcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBob3N0Q29tcG9uZW50OiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIGF1dGg6IEF1dGhlbnRpY2F0aW9uPFVzZXI+LFxuICAgICAgICBwcml2YXRlIGJsb2NrVWlTZXJ2aWNlOiBCbG9ja1VpU2VydmljZVxuICAgICkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLndhaXRpbmdMb2dpbiA9ICF0aGlzLmF1dGguaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5ibG9ja1VpU2VydmljZS5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5hdXRoLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuaG9zdENvbXBvbmVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3N0Q29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMgPSB0aGlzLmF1dGguZ2V0TG9naW5Ob3RpZmljYXRpb25zKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5ob3N0Q29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3RDb21wb25lbnQubmF0aXZlRWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53YWl0aW5nTG9naW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tVaVNlcnZpY2UuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuZ09uRGVzdHJveSBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG59XG4iXX0=