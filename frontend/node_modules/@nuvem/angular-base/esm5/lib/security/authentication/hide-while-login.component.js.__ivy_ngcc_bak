import { __decorate } from "tslib";
import { Component, ElementRef, OnDestroy, OnInit, Input, AfterViewInit, AfterContentInit } from '@angular/core';
import { Authentication } from './authentication';
import { BlockUiService } from '../../block-ui/block-ui.service';
/**
 *
 * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.
 *
 * @class
 */
var HideWhileLoginComponent = /** @class */ (function () {
    /**
     * constructor method
     * @param {ElementRef} hostComponent
     * @param {AbstractAuthentication} auth
     * @param {BlockUiService} blockUiService
     * @constructor
     */
    function HideWhileLoginComponent(hostComponent, auth, blockUiService) {
        this.hostComponent = hostComponent;
        this.auth = auth;
        this.blockUiService = blockUiService;
        /**
         * Carrega conteúdo
         * @type {loadingString}
         */
        this.loadingContent = "";
        this.waitingLogin = false;
    }
    HideWhileLoginComponent.prototype.ngOnInit = function () {
        this.waitingLogin = !this.auth.isAuthenticated();
    };
    HideWhileLoginComponent.prototype.ngAfterContentInit = function () {
        if (!this.auth.isAuthenticated()) {
            this.blockUiService.show();
        }
    };
    HideWhileLoginComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.auth.isAuthenticated()) {
            for (var i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'none';
            }
        }
        this.loginNotifications = this.auth.getLoginNotifications().subscribe(function () {
            for (var i = 1; i < _this.hostComponent.nativeElement.children.length; i++) {
                _this.hostComponent.nativeElement.children[i].style.display = 'inherit';
            }
            _this.waitingLogin = false;
            _this.blockUiService.hide();
        });
    };
    /**
     * ngOnDestroy method
     * @returns void
     */
    HideWhileLoginComponent.prototype.ngOnDestroy = function () {
        this.loginNotifications.unsubscribe();
    };
    HideWhileLoginComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Authentication },
        { type: BlockUiService }
    ]; };
    __decorate([
        Input()
    ], HideWhileLoginComponent.prototype, "loadingContent", void 0);
    HideWhileLoginComponent = __decorate([
        Component({
            selector: '[hide-while-login]',
            template: "<span *ngIf=\"waitingLogin\">{{ loadingContent }}</span>\n<ng-content></ng-content>"
        })
    ], HideWhileLoginComponent);
    return HideWhileLoginComponent;
}());
export { HideWhileLoginComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL3NlY3VyaXR5L2F1dGhlbnRpY2F0aW9uL2hpZGUtd2hpbGUtbG9naW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVqRTs7Ozs7R0FLRztBQUtIO0lBYUk7Ozs7OztPQU1HO0lBQ0gsaUNBQ1ksYUFBeUIsRUFDekIsSUFBMEIsRUFDMUIsY0FBOEI7UUFGOUIsa0JBQWEsR0FBYixhQUFhLENBQVk7UUFDekIsU0FBSSxHQUFKLElBQUksQ0FBc0I7UUFDMUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBckIxQzs7O1dBR0c7UUFFSSxtQkFBYyxHQUFXLEVBQUUsQ0FBQztRQUk1QixpQkFBWSxHQUFZLEtBQUssQ0FBQztJQWNyQyxDQUFDO0lBRUQsMENBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUFFRCxvREFBa0IsR0FBbEI7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzlCO0lBQ0wsQ0FBQztJQUVELGlEQUFlLEdBQWY7UUFBQSxpQkFjQztRQWJHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2RSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7YUFDdkU7U0FDSjtRQUVELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsU0FBUyxDQUFDO1lBQ2xFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2RSxLQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7YUFDMUU7WUFDRCxLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7T0FHRztJQUNILDZDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7Z0JBdEMwQixVQUFVO2dCQUNuQixjQUFjO2dCQUNKLGNBQWM7O0lBaEIxQztRQURDLEtBQUssRUFBRTttRUFDMkI7SUFQMUIsdUJBQXVCO1FBSm5DLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsK0ZBQWdEO1NBQ25ELENBQUM7T0FDVyx1QkFBdUIsQ0E2RG5DO0lBQUQsOEJBQUM7Q0FBQSxBQTdERCxJQTZEQztTQTdEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25Jbml0LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4vYXV0aGVudGljYXRpb24nO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vdXNlcic7XG5pbXBvcnQgeyBCbG9ja1VpU2VydmljZSB9IGZyb20gJy4uLy4uL2Jsb2NrLXVpL2Jsb2NrLXVpLnNlcnZpY2UnO1xuXG4vKipcbiAqIFxuICogQ29tcG9uZW50ZSBIaWRlV2hpbGVMb2dpbkNvbXBvbmVudCwgdXRpbGl6YWRvIHBhcmEgbsOjbyBhcHJlc2VudGFyIGEgdGVsYSBkYSBhcGxpY2HDp8OjbyBlbnF1YW50byBhIGZhc2UgZGUgbG9naW4gbsOjbyB0ZXJtaW5vdS5cbiAqIFxuICogQGNsYXNzXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnW2hpZGUtd2hpbGUtbG9naW5dJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSGlkZVdoaWxlTG9naW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG5cbiAgICAvKipcbiAgICAgKiBDYXJyZWdhIGNvbnRlw7pkb1xuICAgICAqIEB0eXBlIHtsb2FkaW5nU3RyaW5nfVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGxvYWRpbmdDb250ZW50OiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgcHJpdmF0ZSBsb2dpbk5vdGlmaWNhdGlvbnM6IFN1YnNjcmlwdGlvbjtcblxuICAgIHB1YmxpYyB3YWl0aW5nTG9naW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudFJlZn0gaG9zdENvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7QWJzdHJhY3RBdXRoZW50aWNhdGlvbn0gYXV0aFxuICAgICAqIEBwYXJhbSB7QmxvY2tVaVNlcnZpY2V9IGJsb2NrVWlTZXJ2aWNlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaG9zdENvbXBvbmVudDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBhdXRoOiBBdXRoZW50aWNhdGlvbjxVc2VyPixcbiAgICAgICAgcHJpdmF0ZSBibG9ja1VpU2VydmljZTogQmxvY2tVaVNlcnZpY2VcbiAgICApIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy53YWl0aW5nTG9naW4gPSAhdGhpcy5hdXRoLmlzQXV0aGVudGljYXRlZCgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmF1dGguaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tVaVNlcnZpY2Uuc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmhvc3RDb21wb25lbnQubmF0aXZlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuaG9zdENvbXBvbmVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zID0gdGhpcy5hdXRoLmdldExvZ2luTm90aWZpY2F0aW9ucygpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuaG9zdENvbXBvbmVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3N0Q29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9ICdpbmhlcml0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMud2FpdGluZ0xvZ2luID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmJsb2NrVWlTZXJ2aWNlLmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbmdPbkRlc3Ryb3kgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgIH1cblxufVxuIl19