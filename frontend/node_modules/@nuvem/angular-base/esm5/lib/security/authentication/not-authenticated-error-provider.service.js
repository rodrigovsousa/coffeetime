import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { Authentication } from './authentication';
import * as i0 from "@angular/core";
import * as i1 from "./authentication";
/**
 * Provedor de error para criação de erros de notificação.
 * @class
 */
var NotAuthenticatedErrorProvider = /** @class */ (function () {
    function NotAuthenticatedErrorProvider(authenticationService) {
        this.authenticationService = authenticationService;
    }
    /**
     * Método para identificar se o usuário está logado
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    NotAuthenticatedErrorProvider.prototype.shouldHandle = function (error) {
        return error instanceof HttpErrorResponse && error.status == 401;
    };
    /**
     * Método para redirecionar caso o usuário não esteja
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    NotAuthenticatedErrorProvider.prototype.handle = function (error) {
        this.authenticationService.redirect();
    };
    NotAuthenticatedErrorProvider.ctorParameters = function () { return [
        { type: Authentication }
    ]; };
    NotAuthenticatedErrorProvider.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotAuthenticatedErrorProvider_Factory() { return new NotAuthenticatedErrorProvider(i0.ɵɵinject(i1.Authentication)); }, token: NotAuthenticatedErrorProvider, providedIn: "root" });
    NotAuthenticatedErrorProvider = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], NotAuthenticatedErrorProvider);
    return NotAuthenticatedErrorProvider;
}());
export { NotAuthenticatedErrorProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90LWF1dGhlbnRpY2F0ZWQtZXJyb3ItcHJvdmlkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9hbmd1bGFyLWJhc2UvIiwic291cmNlcyI6WyJsaWIvc2VjdXJpdHkvYXV0aGVudGljYXRpb24vbm90LWF1dGhlbnRpY2F0ZWQtZXJyb3ItcHJvdmlkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUdsRDs7O0dBR0c7QUFJSDtJQUVJLHVDQUFvQixxQkFBMkM7UUFBM0MsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFzQjtJQUFJLENBQUM7SUFFcEU7Ozs7O09BS0c7SUFDSCxvREFBWSxHQUFaLFVBQWEsS0FBZ0M7UUFDekMsT0FBTyxLQUFLLFlBQVksaUJBQWlCLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUM7SUFDckUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsOENBQU0sR0FBTixVQUFPLEtBQXdCO1FBQzNCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQyxDQUFDOztnQkFwQjBDLGNBQWM7OztJQUZoRCw2QkFBNkI7UUFIekMsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztPQUNXLDZCQUE2QixDQXdCekM7d0NBdENEO0NBc0NDLEFBeEJELElBd0JDO1NBeEJZLDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBFcnJvclByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vZXJyb3IvcHJvdmlkZXJzL2Vycm9yLnByb3ZpZGVyJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyJztcblxuLyoqXG4gKiBQcm92ZWRvciBkZSBlcnJvciBwYXJhIGNyaWHDp8OjbyBkZSBlcnJvcyBkZSBub3RpZmljYcOnw6NvLlxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE5vdEF1dGhlbnRpY2F0ZWRFcnJvclByb3ZpZGVyIGltcGxlbWVudHMgRXJyb3JQcm92aWRlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb248VXNlcj4pIHsgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBwYXJhIGlkZW50aWZpY2FyIHNlIG8gdXN1w6FyaW8gZXN0w6EgbG9nYWRvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIHNob3VsZEhhbmRsZShlcnJvcjogRXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZSk6IEJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSAmJiBlcnJvci5zdGF0dXMgPT0gNDAxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcGFyYSByZWRpcmVjaW9uYXIgY2FzbyBvIHVzdcOhcmlvIG7Do28gZXN0ZWphXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhhbmRsZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UucmVkaXJlY3QoKTtcbiAgICB9XG5cbn1cbiJdfQ==