import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LogoutDirective } from './authentication/logout.directive';
import { UserDirective } from './authentication/user.directive';
import { LoginSuccessComponent } from './authentication/login-success.component';
import { HasRoleDirective } from './authentication/authorization/has-role.directive';
import { RouterModule } from '@angular/router';
import { HttpClientModule } from '@angular/common/http';
import { HideWhileLoginComponent } from './authentication/hide-while-login.component';
import { AUTH_CONFIG } from './config/auth-config';
import { AuthorizationService } from './authentication/authorization/authorization.service';
import { AuthenticationService } from './authentication/authentication.service';
import { Authorization } from './authentication/authorization/authorization';
import { Authentication } from './authentication/authentication';
import { NotAuthenticatedErrorProvider } from './authentication/not-authenticated-error-provider.service';
import { ErrorProvider } from '../error/providers/error.provider';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { JWTAuthInterceptor } from './token/jwt-auth.interceptor';
import { Token } from './token/token';
import { JWTTokenService } from './token/jwt-token.service';
/**
 * O modulo de segurança contem funcionalidades para autenticação, autorização, redirecionamento
 * para login, gerenciamento de tokens JWT e obtenção e armazenamento de dados de usuário.
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var SecurityModule = /** @class */ (function () {
    function SecurityModule() {
    }
    SecurityModule_1 = SecurityModule;
    /**
     * forRoot method
     * @public
     * @static
     * @returns ModuleWithProviders
     */
    SecurityModule.forRoot = function (config) {
        return {
            ngModule: SecurityModule_1,
            providers: [
                { provide: AUTH_CONFIG, useValue: config },
                config.tokenStorageIndex ?
                    [
                        { provide: Token, useClass: JWTTokenService },
                        { provide: HTTP_INTERCEPTORS, useClass: JWTAuthInterceptor, multi: true }
                    ] : []
            ]
        };
    };
    var SecurityModule_1;
SecurityModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SecurityModule });
SecurityModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SecurityModule_Factory(t) { return new (t || SecurityModule)(); }, providers: [
        AuthorizationService,
        AuthenticationService,
        { provide: ErrorProvider, useClass: NotAuthenticatedErrorProvider, multi: true },
        { provide: Authorization, useClass: AuthorizationService },
        { provide: Authentication, useClass: AuthenticationService }
    ], imports: [[
            CommonModule,
            RouterModule,
            HttpClientModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SecurityModule, { declarations: function () { return [LogoutDirective,
        UserDirective,
        LoginSuccessComponent,
        HasRoleDirective,
        HideWhileLoginComponent]; }, imports: function () { return [CommonModule,
        RouterModule,
        HttpClientModule]; }, exports: function () { return [LogoutDirective,
        UserDirective,
        LoginSuccessComponent,
        HasRoleDirective,
        HideWhileLoginComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SecurityModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    HttpClientModule
                ],
                declarations: [
                    LogoutDirective,
                    UserDirective,
                    LoginSuccessComponent,
                    HasRoleDirective,
                    HideWhileLoginComponent
                ],
                providers: [
                    AuthorizationService,
                    AuthenticationService,
                    { provide: ErrorProvider, useClass: NotAuthenticatedErrorProvider, multi: true },
                    { provide: Authorization, useClass: AuthorizationService },
                    { provide: Authentication, useClass: AuthenticationService }
                ],
                exports: [
                    LogoutDirective,
                    UserDirective,
                    LoginSuccessComponent,
                    HasRoleDirective,
                    HideWhileLoginComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return SecurityModule;
}());
export { SecurityModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL2FuZ3VsYXItYmFzZS9saWIvc2VjdXJpdHkvc2VjdXJpdHkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNoRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNqRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUNyRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLFdBQVcsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDakUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFDMUcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTVEO0FBQ0E7QUFBaUc7QUFDUDtBQUNqRixHQUNOOztBQTZCSDtBQUdXLElBSFg7QUFBNEIsSUFzQjVCLENBQUM7QUFDRCx1QkF2QmEsY0FBYztBQUFFLElBRXpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBVyxzQkFBTyxHQUFkLFVBQWUsTUFBa0I7QUFBSSxRQUNqQyxPQUFPO0FBQUUsWUFDTCxRQUFRLEVBQUUsZ0JBQWM7QUFBRSxZQUMxQixTQUFTLEVBQUU7QUFDdkIsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO0FBQzFELGdCQUFnQixNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUFDLG9CQUN6QjtBQUFFLHdCQUNBLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFO0FBQ2pFLHdCQUFvQixFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUM3RixxQkFBbUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN4QixhQUFhO0FBQ2IsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBRUw7SUF0QmEsY0FBYywyQ0E1QjFCLFFBQVEsQ0FBQztXQUNOLE9BQU8sRUFBRSxrQkFDTCxZQUFZLGtCQUNaLFlBQVksa0JBQ1osZ0JBQWdCLGNBQ25CLGNBQ0Q7UUFBWSxFQUFFLGtCQUNWO2FBQWU7QUFDZixhQUFhLGtCQUNiLHFCQUFxQixrQkFDckIsZ0JBQWdCO2NBQ2hCLHVCQUF1QixjQUMxQixjQUNEO01BQVMsRUFBRSxrQkFDUCxvQkFBb0Isa0JBQ3BCO2dCQUFxQjtlQUNyQixFQUFFLE9BQU87QUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFOzRCQUE2QjtDQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7aUJBQ2hGLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsa0JBQzFELEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUU7SUFDL0QsY0FDRDtFQUFPLEVBQUUsa0JBQ0w7TUFBZSxrQkFDZjtXQUFhLGtCQUNiLHFCQUFxQixrQkFDckI7RUFBZ0Isa0JBQ2hCO3FCQUF1QixjQUMxQixVQUNKLENBQUMsUUFDVyxjQUFjLENBc0IxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBQ0Q7QUFBQyxJQURELHFCQUFDO0FBQ0EsQ0FEQSxBQXRCRCxJQXNCQztBQUNELFNBdkJhLGNBQWM7QUFFM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IExvZ291dERpcmVjdGl2ZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vbG9nb3V0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBVc2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi91c2VyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBMb2dpblN1Y2Nlc3NDb21wb25lbnQgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL2xvZ2luLXN1Y2Nlc3MuY29tcG9uZW50JztcbmltcG9ydCB7IEhhc1JvbGVEaXJlY3RpdmUgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL2F1dGhvcml6YXRpb24vaGFzLXJvbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSGlkZVdoaWxlTG9naW5Db21wb25lbnQgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL2hpZGUtd2hpbGUtbG9naW4uY29tcG9uZW50JztcbmltcG9ydCB7IEFVVEhfQ09ORklHLCBBdXRoQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvYXV0aC1jb25maWcnO1xuaW1wb3J0IHsgQXV0aG9yaXphdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL2F1dGhvcml6YXRpb24vYXV0aG9yaXphdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBBdXRob3JpemF0aW9uIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi9hdXRob3JpemF0aW9uL2F1dGhvcml6YXRpb24nO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IE5vdEF1dGhlbnRpY2F0ZWRFcnJvclByb3ZpZGVyIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi9ub3QtYXV0aGVudGljYXRlZC1lcnJvci1wcm92aWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEVycm9yUHJvdmlkZXIgfSBmcm9tICcuLi9lcnJvci9wcm92aWRlcnMvZXJyb3IucHJvdmlkZXInO1xuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBKV1RBdXRoSW50ZXJjZXB0b3IgfSBmcm9tICcuL3Rva2VuL2p3dC1hdXRoLmludGVyY2VwdG9yJztcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi90b2tlbi90b2tlbic7XG5pbXBvcnQgeyBKV1RUb2tlblNlcnZpY2UgfSBmcm9tICcuL3Rva2VuL2p3dC10b2tlbi5zZXJ2aWNlJztcblxuLyoqXG4gKiBPIG1vZHVsbyBkZSBzZWd1cmFuw6dhIGNvbnRlbSBmdW5jaW9uYWxpZGFkZXMgcGFyYSBhdXRlbnRpY2HDp8OjbywgYXV0b3JpemHDp8OjbywgcmVkaXJlY2lvbmFtZW50byBcbiAqIHBhcmEgbG9naW4sIGdlcmVuY2lhbWVudG8gZGUgdG9rZW5zIEpXVCBlIG9idGVuw6fDo28gZSBhcm1hemVuYW1lbnRvIGRlIGRhZG9zIGRlIHVzdcOhcmlvLlxuICogQGNsYXNzXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIFJvdXRlck1vZHVsZSxcbiAgICAgICAgSHR0cENsaWVudE1vZHVsZVxuICAgIF0sXG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIExvZ291dERpcmVjdGl2ZSxcbiAgICAgICAgVXNlckRpcmVjdGl2ZSxcbiAgICAgICAgTG9naW5TdWNjZXNzQ29tcG9uZW50LFxuICAgICAgICBIYXNSb2xlRGlyZWN0aXZlLFxuICAgICAgICBIaWRlV2hpbGVMb2dpbkNvbXBvbmVudFxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIEF1dGhvcml6YXRpb25TZXJ2aWNlLFxuICAgICAgICBBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgIHsgcHJvdmlkZTogRXJyb3JQcm92aWRlciwgdXNlQ2xhc3M6IE5vdEF1dGhlbnRpY2F0ZWRFcnJvclByb3ZpZGVyLCBtdWx0aTogdHJ1ZSB9LFxuICAgICAgICB7IHByb3ZpZGU6IEF1dGhvcml6YXRpb24sIHVzZUNsYXNzOiBBdXRob3JpemF0aW9uU2VydmljZSB9LFxuICAgICAgICB7IHByb3ZpZGU6IEF1dGhlbnRpY2F0aW9uLCB1c2VDbGFzczogQXV0aGVudGljYXRpb25TZXJ2aWNlIH1cbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgTG9nb3V0RGlyZWN0aXZlLFxuICAgICAgICBVc2VyRGlyZWN0aXZlLFxuICAgICAgICBMb2dpblN1Y2Nlc3NDb21wb25lbnQsXG4gICAgICAgIEhhc1JvbGVEaXJlY3RpdmUsXG4gICAgICAgIEhpZGVXaGlsZUxvZ2luQ29tcG9uZW50XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBTZWN1cml0eU1vZHVsZSB7XG5cbiAgICAvKipcbiAgICAgKiBmb3JSb290IG1ldGhvZFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHJldHVybnMgTW9kdWxlV2l0aFByb3ZpZGVyc1xuICAgICAqL1xuICAgIHN0YXRpYyBmb3JSb290KGNvbmZpZzogQXV0aENvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIG5nTW9kdWxlOiBTZWN1cml0eU1vZHVsZSwgXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEFVVEhfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH0sXG4gICAgICAgICAgICAgICAgY29uZmlnLnRva2VuU3RvcmFnZUluZGV4ID8gXG4gICAgICAgICAgICAgICAgICBbIFxuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFRva2VuLCB1c2VDbGFzczogSldUVG9rZW5TZXJ2aWNlIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBKV1RBdXRoSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgIF0gOiBbXVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cblxufVxuIl19