import { __decorate } from "tslib";
import { HttpResponse } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { tap } from 'rxjs/operators';
import { Token } from "./token";
import * as i0 from "@angular/core";
import * as i1 from "./token";
/**
 * Implementação de classe para interceptar e tratar requisições http/https
 * @class
 */
import * as ɵngcc0 from '@angular/core';
var JWTAuthInterceptor = /** @class */ (function () {
    /**
     * Metodo construtor responsável por injetar serviço de autenticação
     * @constructor
     * @param {AbstractAuthentication} auth
     */
    function JWTAuthInterceptor(token) {
        this.token = token;
    }
    /**
     * Metodo responsável por interceptar requisições HTTP/HTTPS
     * @public
     * @param {HttpRequest<any>} request
     * @param {HttpHandler} next
     * @returns Observable<HttpEvent<any>>
     */
    JWTAuthInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        if (this.token.hasToken()) {
            request = this.token.setTokenInHeader(request);
        }
        return next.handle(request)
            .pipe(tap(function (event) {
            if (event instanceof HttpResponse) {
                var token = _this.token.extractTokenFromHeaders(event.headers);
                if (null !== token)
                    _this.token.storeToken(token);
            }
            return event;
        }));
    };
    JWTAuthInterceptor.ctorParameters = function () { return [
        { type: Token }
    ]; };
    JWTAuthInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function JWTAuthInterceptor_Factory() { return new JWTAuthInterceptor(i0.ɵɵinject(i1.Token)); }, token: JWTAuthInterceptor, providedIn: "root" });
JWTAuthInterceptor.ɵfac = function JWTAuthInterceptor_Factory(t) { return new (t || JWTAuthInterceptor)(ɵngcc0.ɵɵinject(Token)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JWTAuthInterceptor, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Token }]; }, null); })();
    return JWTAuthInterceptor;
}());
export { JWTAuthInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWF1dGguaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vYW5ndWxhci1iYXNlL2xpYi9zZWN1cml0eS90b2tlbi9qd3QtYXV0aC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUF3RCxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUcxRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDO0FBRWdDO0FBRGhDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUg7QUFBc0QsSUFFbEQ7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSw0QkFBb0IsS0FBWTtBQUFJLFFBQWhCLFVBQUssR0FBTCxLQUFLLENBQU87QUFBQyxJQUFFLENBQUM7QUFDeEMsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxzQ0FBUyxHQUFULFVBQVUsT0FBeUIsRUFBRSxJQUFpQjtBQUFJLFFBQTFELGlCQWNDO0FBQ0wsUUFkUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDbkMsWUFBWSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzRCxTQUFTO0FBQ1QsUUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ25DLGFBQWEsSUFBSSxDQUNELEdBQUcsQ0FBQyxVQUFDLEtBQXFCO0FBQUksWUFDMUIsSUFBSSxLQUFLLFlBQVksWUFBWSxFQUFFO0FBQ3ZELGdCQUF3QixJQUFNLEtBQUssR0FBVyxLQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRyxnQkFBd0IsSUFBSSxJQUFJLEtBQUssS0FBSztBQUFFLG9CQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pFLGFBQXFCO0FBQ3JCLFlBQW9CLE9BQU8sS0FBSyxDQUFDO0FBQ2pDLFFBQWdCLENBQUMsQ0FBQyxDQUNMLENBQUM7QUFDZCxJQUFJLENBQUM7QUFFTDtBQUM2RCxnQkExQjlCLEtBQUs7QUFBRztBQUVoQztJQVRNLGtCQUFrQix3QkFIOUIsVUFBVSxDQUFDLGNBQ1IsVUFBVSxFQUFFLE1BQU0sV0FDckIsQ0FBQyxRQUNXLGtCQUFrQixDQWdDOUI7Ozs7OzsrREFDRDtBQUFDLDZCQS9DRDtBQUFFLENBOENELEFBaENELElBZ0NDO0FBQ0QsU0FqQ2Esa0JBQWtCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRva2VuIH0gZnJvbSBcIi4vdG9rZW5cIjtcblxuLyoqXG4gKiBJbXBsZW1lbnRhw6fDo28gZGUgY2xhc3NlIHBhcmEgaW50ZXJjZXB0YXIgZSB0cmF0YXIgcmVxdWlzacOnw7VlcyBodHRwL2h0dHBzXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSldUQXV0aEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciBzZXJ2acOnbyBkZSBhdXRlbnRpY2HDp8Ojb1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QWJzdHJhY3RBdXRoZW50aWNhdGlvbn0gYXV0aFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9rZW46IFRva2VuKSB7fVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwb3IgaW50ZXJjZXB0YXIgcmVxdWlzacOnw7VlcyBIVFRQL0hUVFBTXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cFJlcXVlc3Q8YW55Pn0gcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7SHR0cEhhbmRsZXJ9IG5leHRcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PlxuICAgICAqL1xuICAgIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICAgICAgaWYgKHRoaXMudG9rZW4uaGFzVG9rZW4oKSkge1xuICAgICAgICAgICAgcmVxdWVzdCA9IHRoaXMudG9rZW4uc2V0VG9rZW5JbkhlYWRlcihyZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHRhcCgoZXZlbnQ6IEh0dHBFdmVudDxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW46IFN0cmluZyA9IHRoaXMudG9rZW4uZXh0cmFjdFRva2VuRnJvbUhlYWRlcnMoZXZlbnQuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdG9rZW4pIHRoaXMudG9rZW4uc3RvcmVUb2tlbih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxufVxuIl19