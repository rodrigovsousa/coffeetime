import { __decorate, __extends, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { HttpHeaders } from "@angular/common/http";
import { Token } from './token';
import { AUTH_CONFIG } from '../config/auth-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
/**
 * Inplementação de serviço JWTTokenService
 * @class
 */
var JWTTokenService = /** @class */ (function (_super) {
    __extends(JWTTokenService, _super);
    /**
     * Metodo construtor responsável por injetar as configurações de autenticação
     * @constructor
     * @param {AuthConfig} config
     */
    function JWTTokenService(config) {
        var _this = _super.call(this) || this;
        _this.config = config;
        return _this;
    }
    JWTTokenService_1 = JWTTokenService;
    /**
     * Metodo responsável pela extração de tokes do heaedrs das requisições
     * @public
     * @param {HttpHeaders} headers
     * @returns string
     */
    JWTTokenService.prototype.extractTokenFromHeaders = function (headers) {
        return headers.get(JWTTokenService_1.HEADER_STRING);
    };
    /**
     * Metodo responsável pela adição dos tokens no storage
     * @public
     * @param {String} token
     * @returns void
     */
    JWTTokenService.prototype.storeToken = function (token) {
        this.config.storage.setItem(this.config.tokenStorageIndex, token.toString());
    };
    /**
     * Metodo responsável por injetar token no header das requisições
     * @public
     * @param {HttpRequest<any>} request
     * @returns HttpRequest<any>
     */
    JWTTokenService.prototype.setTokenInHeader = function (request) {
        var _a;
        var req = request.clone({
            headers: new HttpHeaders((_a = {},
                _a[JWTTokenService_1.HEADER_STRING] = this.config.storage.getItem(this.config.tokenStorageIndex),
                _a))
        });
        return req;
    };
    /**
     * Metodo responsável por verificar a existencia de um token de autenticação
     * @returns boolean
     * @public
     */
    JWTTokenService.prototype.hasToken = function () {
        return null !== this.config.storage.getItem(this.config.tokenStorageIndex);
    };
    var JWTTokenService_1;
    /**
     * TOKEN_PREFIX  property
     * @type {string}
     */
    JWTTokenService.TOKEN_PREFIX = "Bearer";
    /**
     * HEADER_STRING property
     * @type {string}
     */
    JWTTokenService.HEADER_STRING = "Authorization";
    JWTTokenService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] }
    ]; };
    JWTTokenService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JWTTokenService_Factory() { return new JWTTokenService(i0.ɵɵinject(i1.AUTH_CONFIG)); }, token: JWTTokenService, providedIn: "root" });
    JWTTokenService = JWTTokenService_1 = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Inject(AUTH_CONFIG))
    ], JWTTokenService);
    return JWTTokenService;
}(Token));
export { JWTTokenService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LXRva2VuLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vYW5ndWxhci1iYXNlLyIsInNvdXJjZXMiOlsibGliL3NlY3VyaXR5L3Rva2VuL2p3dC10b2tlbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQWMsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7OztBQUVoRTs7O0dBR0c7QUFJSDtJQUFxQyxtQ0FBSztJQWN0Qzs7OztPQUlHO0lBQ0gseUJBQXlDLE1BQWtCO1FBQTNELFlBQ0ksaUJBQU8sU0FDVjtRQUZ3QyxZQUFNLEdBQU4sTUFBTSxDQUFZOztJQUUzRCxDQUFDO3dCQXJCUSxlQUFlO0lBc0J4Qjs7Ozs7T0FLRztJQUNILGlEQUF1QixHQUF2QixVQUF3QixPQUFvQjtRQUN4QyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxvQ0FBVSxHQUFWLFVBQVcsS0FBYTtRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQzdCLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FDbkIsQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILDBDQUFnQixHQUFoQixVQUFpQixPQUF5Qjs7UUFDdEMsSUFBTSxHQUFHLEdBQXFCLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDeEMsT0FBTyxFQUFFLElBQUksV0FBVztnQkFDcEIsR0FBQyxpQkFBZSxDQUFDLGFBQWEsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztvQkFDN0Y7U0FDTCxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsa0NBQVEsR0FBUjtRQUNJLE9BQU8sSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDL0UsQ0FBQzs7SUFqRUQ7OztPQUdHO0lBQ29CLDRCQUFZLEdBQUcsUUFBUSxDQUFDO0lBRS9DOzs7T0FHRztJQUNvQiw2QkFBYSxHQUFHLGVBQWUsQ0FBQzs7Z0RBTzFDLE1BQU0sU0FBQyxXQUFXOzs7SUFuQnRCLGVBQWU7UUFIM0IsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztRQW9CZSxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtPQW5CdkIsZUFBZSxDQXFFM0I7MEJBakZEO0NBaUZDLEFBckVELENBQXFDLEtBQUssR0FxRXpDO1NBckVZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwSGVhZGVycyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcbmltcG9ydCB7IEF1dGhDb25maWcsIEFVVEhfQ09ORklHIH0gZnJvbSAnLi4vY29uZmlnL2F1dGgtY29uZmlnJztcblxuLyoqXG4gKiBJbnBsZW1lbnRhw6fDo28gZGUgc2VydmnDp28gSldUVG9rZW5TZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSldUVG9rZW5TZXJ2aWNlIGV4dGVuZHMgVG9rZW4ge1xuXG4gICAgLyoqXG4gICAgICogVE9LRU5fUFJFRklYICBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUT0tFTl9QUkVGSVggPSBcIkJlYXJlclwiO1xuXG4gICAgLyoqXG4gICAgICogSEVBREVSX1NUUklORyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIRUFERVJfU1RSSU5HID0gXCJBdXRob3JpemF0aW9uXCI7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWwgcG9yIGluamV0YXIgYXMgY29uZmlndXJhw6fDtWVzIGRlIGF1dGVudGljYcOnw6NvXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBdXRoQ29uZmlnfSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEFVVEhfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogQXV0aENvbmZpZykge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgZXh0cmHDp8OjbyBkZSB0b2tlcyBkbyBoZWFlZHJzIGRhcyByZXF1aXNpw6fDtWVzXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEhlYWRlcnN9IGhlYWRlcnNcbiAgICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICAgKi9cbiAgICBleHRyYWN0VG9rZW5Gcm9tSGVhZGVycyhoZWFkZXJzOiBIdHRwSGVhZGVycyk6IFN0cmluZyB7XG4gICAgICAgIHJldHVybiBoZWFkZXJzLmdldChKV1RUb2tlblNlcnZpY2UuSEVBREVSX1NUUklORyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGFkacOnw6NvIGRvcyB0b2tlbnMgbm8gc3RvcmFnZVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9rZW5cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgc3RvcmVUb2tlbih0b2tlbjogU3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnRva2VuU3RvcmFnZUluZGV4LFxuICAgICAgICAgICAgdG9rZW4udG9TdHJpbmcoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIGluamV0YXIgdG9rZW4gbm8gaGVhZGVyIGRhcyByZXF1aXNpw6fDtWVzXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cFJlcXVlc3Q8YW55Pn0gcmVxdWVzdFxuICAgICAqIEByZXR1cm5zIEh0dHBSZXF1ZXN0PGFueT5cbiAgICAgKi9cbiAgICBzZXRUb2tlbkluSGVhZGVyKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVxdWVzdDxhbnk+IHtcbiAgICAgICAgY29uc3QgcmVxOiBIdHRwUmVxdWVzdDxhbnk+ID0gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICAgICAgICAgICAgIFtKV1RUb2tlblNlcnZpY2UuSEVBREVSX1NUUklOR106IHRoaXMuY29uZmlnLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmNvbmZpZy50b2tlblN0b3JhZ2VJbmRleClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIHZlcmlmaWNhciBhIGV4aXN0ZW5jaWEgZGUgdW0gdG9rZW4gZGUgYXV0ZW50aWNhw6fDo29cbiAgICAgKiBAcmV0dXJucyBib29sZWFuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGhhc1Rva2VuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdGhpcy5jb25maWcuc3RvcmFnZS5nZXRJdGVtKHRoaXMuY29uZmlnLnRva2VuU3RvcmFnZUluZGV4KTtcbiAgICB9XG5cbn1cblxuIl19