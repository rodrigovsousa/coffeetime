import { NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { HttpGenericErrorType } from '../types/http-generic-error.type';
import { ErrorProvider } from '../providers/error.provider';
/**
 * Serviço HttpGenericErrorService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export declare class HttpGenericErrorService implements ErrorProvider {
    private notification;
    private ngZone;
    /**
     * Metodo construtor responsávelpor injetar o serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    constructor(notification: NotificationProvider, ngZone: NgZone);
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    shouldHandle(error: Error | HttpErrorResponse): Boolean;
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error: HttpErrorResponse): void;
    /**
     * Metodo para obter erros a partir de um código
     * @public
     * @param {HttpErrorResponse} error
     * @returns HttpGenericErrorType
     */
    getErrorByCode(error: HttpErrorResponse): HttpGenericErrorType;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HttpGenericErrorService, never>;
}
/**
 * Constante que define tipos de erros básicos
 * @const GENERIC_ERRORS
 */
export declare const GENERIC_ERRORS: {
    401: HttpGenericErrorType;
    403: HttpGenericErrorType;
    404: HttpGenericErrorType;
    500: HttpGenericErrorType;
    502: HttpGenericErrorType;
    503: HttpGenericErrorType;
    504: HttpGenericErrorType;
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1nZW5lcmljLWVycm9yLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiaHR0cC1nZW5lcmljLWVycm9yLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvbm90aWZpY2F0aW9uLnByb3ZpZGVyJztcbmltcG9ydCB7IEh0dHBHZW5lcmljRXJyb3JUeXBlIH0gZnJvbSAnLi4vdHlwZXMvaHR0cC1nZW5lcmljLWVycm9yLnR5cGUnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG4vKipcbiAqIFNlcnZpw6dvIEh0dHBHZW5lcmljRXJyb3JTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSHR0cEdlbmVyaWNFcnJvclNlcnZpY2UgaW1wbGVtZW50cyBFcnJvclByb3ZpZGVyIHtcbiAgICBwcml2YXRlIG5vdGlmaWNhdGlvbjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICAvKipcbiAgICAgKiBNZXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWxwb3IgaW5qZXRhciBvIHNlcnZpw6dvIE5vdGlmaWNhdGlvblByb3ZpZGVyXG4gICAgICogQHBhcmFtIHtOb3RpZmljYXRpb25Qcm92aWRlcn0gbm90aWZpY2F0aW9uXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iobm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25Qcm92aWRlciwgbmdab25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcGVsYSBpZGVudGlmaWNhw6fDo28gZGUgZXJyb3NcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtFcnJvciB8IEh0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIEJvb2xlYW5cbiAgICAgKi9cbiAgICBzaG91bGRIYW5kbGUoZXJyb3I6IEVycm9yIHwgSHR0cEVycm9yUmVzcG9uc2UpOiBCb29sZWFuO1xuICAgIC8qKlxuICAgICAqIE1ldG9kbyBwZWxhIGFkacOnw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhhbmRsZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldG9kbyBwYXJhIG9idGVyIGVycm9zIGEgcGFydGlyIGRlIHVtIGPDs2RpZ29cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyBIdHRwR2VuZXJpY0Vycm9yVHlwZVxuICAgICAqL1xuICAgIGdldEVycm9yQnlDb2RlKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IEh0dHBHZW5lcmljRXJyb3JUeXBlO1xufVxuLyoqXG4gKiBDb25zdGFudGUgcXVlIGRlZmluZSB0aXBvcyBkZSBlcnJvcyBiw6FzaWNvc1xuICogQGNvbnN0IEdFTkVSSUNfRVJST1JTXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEdFTkVSSUNfRVJST1JTOiB7XG4gICAgNDAxOiBIdHRwR2VuZXJpY0Vycm9yVHlwZTtcbiAgICA0MDM6IEh0dHBHZW5lcmljRXJyb3JUeXBlO1xuICAgIDQwNDogSHR0cEdlbmVyaWNFcnJvclR5cGU7XG4gICAgNTAwOiBIdHRwR2VuZXJpY0Vycm9yVHlwZTtcbiAgICA1MDI6IEh0dHBHZW5lcmljRXJyb3JUeXBlO1xuICAgIDUwMzogSHR0cEdlbmVyaWNFcnJvclR5cGU7XG4gICAgNTA0OiBIdHRwR2VuZXJpY0Vycm9yVHlwZTtcbn07XG4iXX0=