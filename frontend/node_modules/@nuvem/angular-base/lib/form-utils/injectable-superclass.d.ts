import { OnDestroy } from "@angular/core";
import { Observable, Unsubscribable } from "rxjs";
/**
 * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.
 *
 * ```ts
 * @Injectable()
 * // or @Component() (also consider DirectiveSuperclass)
 * // or @Directive() (also consider DirectiveSuperclass)
 * // or @Pipe()
 * class MyThing extends InjectableSuperclass {
 *   constructor(somethingObservable: Observable) {
 *     super();
 *     this.subscribeTo(somethingObservable);
 *   }
 *
 *   ngOnDestroy() {
 *     // if you override ngOnDestroy, be sure to call this too
 *     super.ngOnDestroy();
 *   }
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class InjectableSuperclass implements Unsubscribable, OnDestroy {
    private subscriptions;
    destruction$: Observable<undefined>;
    private destructionSubject;
    constructor();
    subscribeTo<T>(observable: Observable<T>, next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): void;
    unsubscribe(): void;
    private bind;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InjectableSuperclass, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InjectableSuperclass, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0YWJsZS1zdXBlcmNsYXNzLmQudHMiLCJzb3VyY2VzIjpbImluamVjdGFibGUtc3VwZXJjbGFzcy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBVbnN1YnNjcmliYWJsZSB9IGZyb20gXCJyeGpzXCI7XG4vKipcbiAqIFVzZSBhcyB0aGUgc3VwZXJjbGFzcyBmb3IgYW55dGhpbmcgbWFuYWdlZCBieSBhbmd1bGFyJ3MgZGVwZW5kZW5jeSBpbmplY3Rpb24gZm9yIGNhcmUtZnJlZSB1c2Ugb2YgYHN1YnNjcmliZVRvKClgLiBJdCBzaW1wbHkgY2FsbHMgYHVuc3Vic2NyaWJlKClgIGR1cmluZyBgbmdPbkRlc3Ryb3koKWAuIElmIHlvdSBvdmVycmlkZSBgbmdPbkRlc3Ryb3koKWAgaW4geW91ciBzdWJjbGFzcywgYmUgc3VyZSB0byBpbnZva2UgdGhlIHN1cGVyIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBASW5qZWN0YWJsZSgpXG4gKiAvLyBvciBAQ29tcG9uZW50KCkgKGFsc28gY29uc2lkZXIgRGlyZWN0aXZlU3VwZXJjbGFzcylcbiAqIC8vIG9yIEBEaXJlY3RpdmUoKSAoYWxzbyBjb25zaWRlciBEaXJlY3RpdmVTdXBlcmNsYXNzKVxuICogLy8gb3IgQFBpcGUoKVxuICogY2xhc3MgTXlUaGluZyBleHRlbmRzIEluamVjdGFibGVTdXBlcmNsYXNzIHtcbiAqICAgY29uc3RydWN0b3Ioc29tZXRoaW5nT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZSkge1xuICogICAgIHN1cGVyKCk7XG4gKiAgICAgdGhpcy5zdWJzY3JpYmVUbyhzb21ldGhpbmdPYnNlcnZhYmxlKTtcbiAqICAgfVxuICpcbiAqICAgbmdPbkRlc3Ryb3koKSB7XG4gKiAgICAgLy8gaWYgeW91IG92ZXJyaWRlIG5nT25EZXN0cm95LCBiZSBzdXJlIHRvIGNhbGwgdGhpcyB0b29cbiAqICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgSW5qZWN0YWJsZVN1cGVyY2xhc3MgaW1wbGVtZW50cyBVbnN1YnNjcmliYWJsZSwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgZGVzdHJ1Y3Rpb24kOiBPYnNlcnZhYmxlPHVuZGVmaW5lZD47XG4gICAgcHJpdmF0ZSBkZXN0cnVjdGlvblN1YmplY3Q7XG4gICAgY29uc3RydWN0b3IoKTtcbiAgICBzdWJzY3JpYmVUbzxUPihvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPFQ+LCBuZXh0PzogKHZhbHVlOiBUKSA9PiB2b2lkLCBlcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZT86ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIHVuc3Vic2NyaWJlKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBiaW5kO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=