import { ElementRef, OnDestroy, OnInit, AfterViewInit, AfterContentInit } from '@angular/core';
import { Authentication } from './authentication';
import { User } from './user';
import { BlockUiService } from '../../block-ui/block-ui.service';
/**
 *
 * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.
 *
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export declare class HideWhileLoginComponent implements OnInit, AfterViewInit, AfterContentInit, OnDestroy {
    private hostComponent;
    private auth;
    private blockUiService;
    /**
     * Carrega conteúdo
     * @type {loadingString}
     */
    loadingContent: string;
    private loginNotifications;
    waitingLogin: boolean;
    /**
     * constructor method
     * @param {ElementRef} hostComponent
     * @param {AbstractAuthentication} auth
     * @param {BlockUiService} blockUiService
     * @constructor
     */
    constructor(hostComponent: ElementRef, auth: Authentication<User>, blockUiService: BlockUiService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HideWhileLoginComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HideWhileLoginComponent, "[hide-while-login]", never, { "loadingContent": "loadingContent"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyJztcbmltcG9ydCB7IEJsb2NrVWlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYmxvY2stdWkvYmxvY2stdWkuc2VydmljZSc7XG4vKipcbiAqXG4gKiBDb21wb25lbnRlIEhpZGVXaGlsZUxvZ2luQ29tcG9uZW50LCB1dGlsaXphZG8gcGFyYSBuw6NvIGFwcmVzZW50YXIgYSB0ZWxhIGRhIGFwbGljYcOnw6NvIGVucXVhbnRvIGEgZmFzZSBkZSBsb2dpbiBuw6NvIHRlcm1pbm91LlxuICpcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBIaWRlV2hpbGVMb2dpbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGhvc3RDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBhdXRoO1xuICAgIHByaXZhdGUgYmxvY2tVaVNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogQ2FycmVnYSBjb250ZcO6ZG9cbiAgICAgKiBAdHlwZSB7bG9hZGluZ1N0cmluZ31cbiAgICAgKi9cbiAgICBsb2FkaW5nQ29udGVudDogc3RyaW5nO1xuICAgIHByaXZhdGUgbG9naW5Ob3RpZmljYXRpb25zO1xuICAgIHdhaXRpbmdMb2dpbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnRSZWZ9IGhvc3RDb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge0Fic3RyYWN0QXV0aGVudGljYXRpb259IGF1dGhcbiAgICAgKiBAcGFyYW0ge0Jsb2NrVWlTZXJ2aWNlfSBibG9ja1VpU2VydmljZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGhvc3RDb21wb25lbnQ6IEVsZW1lbnRSZWYsIGF1dGg6IEF1dGhlbnRpY2F0aW9uPFVzZXI+LCBibG9ja1VpU2VydmljZTogQmxvY2tVaVNlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogbmdPbkRlc3Ryb3kgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=