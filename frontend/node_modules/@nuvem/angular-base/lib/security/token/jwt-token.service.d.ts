import { HttpRequest, HttpHeaders } from "@angular/common/http";
import { Token } from './token';
import { AuthConfig } from '../config/auth-config';
/**
 * Inplementação de serviço JWTTokenService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export declare class JWTTokenService extends Token {
    private config;
    /**
     * TOKEN_PREFIX  property
     * @type {string}
     */
    static readonly TOKEN_PREFIX = "Bearer";
    /**
     * HEADER_STRING property
     * @type {string}
     */
    static readonly HEADER_STRING = "Authorization";
    /**
     * Metodo construtor responsável por injetar as configurações de autenticação
     * @constructor
     * @param {AuthConfig} config
     */
    constructor(config: AuthConfig);
    /**
     * Metodo responsável pela extração de tokes do heaedrs das requisições
     * @public
     * @param {HttpHeaders} headers
     * @returns string
     */
    extractTokenFromHeaders(headers: HttpHeaders): String;
    /**
     * Metodo responsável pela adição dos tokens no storage
     * @public
     * @param {String} token
     * @returns void
     */
    storeToken(token: String): void;
    /**
     * Metodo responsável por injetar token no header das requisições
     * @public
     * @param {HttpRequest<any>} request
     * @returns HttpRequest<any>
     */
    setTokenInHeader(request: HttpRequest<any>): HttpRequest<any>;
    /**
     * Metodo responsável por verificar a existencia de um token de autenticação
     * @returns boolean
     * @public
     */
    hasToken(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JWTTokenService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LXRva2VuLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiand0LXRva2VuLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cEhlYWRlcnMgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi90b2tlbic7XG5pbXBvcnQgeyBBdXRoQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2F1dGgtY29uZmlnJztcbi8qKlxuICogSW5wbGVtZW50YcOnw6NvIGRlIHNlcnZpw6dvIEpXVFRva2VuU2VydmljZVxuICogQGNsYXNzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEpXVFRva2VuU2VydmljZSBleHRlbmRzIFRva2VuIHtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICAvKipcbiAgICAgKiBUT0tFTl9QUkVGSVggIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVhZG9ubHkgVE9LRU5fUFJFRklYID0gXCJCZWFyZXJcIjtcbiAgICAvKipcbiAgICAgKiBIRUFERVJfU1RSSU5HIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVhZG9ubHkgSEVBREVSX1NUUklORyA9IFwiQXV0aG9yaXphdGlvblwiO1xuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciBhcyBjb25maWd1cmHDp8O1ZXMgZGUgYXV0ZW50aWNhw6fDo29cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0F1dGhDb25maWd9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQXV0aENvbmZpZyk7XG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGV4dHJhw6fDo28gZGUgdG9rZXMgZG8gaGVhZWRycyBkYXMgcmVxdWlzacOnw7Vlc1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0h0dHBIZWFkZXJzfSBoZWFkZXJzXG4gICAgICogQHJldHVybnMgc3RyaW5nXG4gICAgICovXG4gICAgZXh0cmFjdFRva2VuRnJvbUhlYWRlcnMoaGVhZGVyczogSHR0cEhlYWRlcnMpOiBTdHJpbmc7XG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGFkacOnw6NvIGRvcyB0b2tlbnMgbm8gc3RvcmFnZVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9rZW5cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgc3RvcmVUb2tlbih0b2tlbjogU3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBvciBpbmpldGFyIHRva2VuIG5vIGhlYWRlciBkYXMgcmVxdWlzacOnw7Vlc1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0h0dHBSZXF1ZXN0PGFueT59IHJlcXVlc3RcbiAgICAgKiBAcmV0dXJucyBIdHRwUmVxdWVzdDxhbnk+XG4gICAgICovXG4gICAgc2V0VG9rZW5JbkhlYWRlcihyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogSHR0cFJlcXVlc3Q8YW55PjtcbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBvciB2ZXJpZmljYXIgYSBleGlzdGVuY2lhIGRlIHVtIHRva2VuIGRlIGF1dGVudGljYcOnw6NvXG4gICAgICogQHJldHVybnMgYm9vbGVhblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBoYXNUb2tlbigpOiBib29sZWFuO1xufVxuIl19