(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('@angular/common'), require('primeng'), require('primeng/table'), require('@nuvem/angular-base'), require('primeng/button'), require('primeng/dropdown'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('primeng/api'), require('primeng/toast'), require('@angular/router'), require('primeng/inputtext'), require('primeng/calendar'), require('primeng/inputtextarea'), require('primeng/inputmask'), require('primeng/radiobutton'), require('primeng/confirmdialog'), require('primeng/autocomplete'), require('@angular/cdk/scrolling'), require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('@nuvem/primeng-components', ['exports', '@angular/common/http', '@angular/core', '@angular/common', 'primeng', 'primeng/table', '@nuvem/angular-base', 'primeng/button', 'primeng/dropdown', '@angular/forms', 'rxjs', 'rxjs/operators', 'primeng/api', 'primeng/toast', '@angular/router', 'primeng/inputtext', 'primeng/calendar', 'primeng/inputtextarea', 'primeng/inputmask', 'primeng/radiobutton', 'primeng/confirmdialog', 'primeng/autocomplete', '@angular/cdk/scrolling', '@angular/animations'], factory) :
    (global = global || self, factory((global.nuvem = global.nuvem || {}, global.nuvem['primeng-components'] = {}), global.ng.common.http, global.ng.core, global.ng.common, global.primeng, global['primeng/table'], global['@nuvem/angular-base'], global['primeng/button'], global['primeng/dropdown'], global.ng.forms, global.rxjs, global.rxjs.operators, global['primeng/api'], global['primeng/toast'], global.ng.router, global['primeng/inputtext'], global['primeng/calendar'], global['primeng/inputtextarea'], global.inputmask, global.radiobutton, global['primeng/confirmdialog'], global['primeng/autocomplete'], global.ng.cdk.scrolling, global.ng.animations));
}(this, (function (exports, http, core, common, primeng, table, angularBase, button, dropdown, forms, rxjs, operators, api, toast, router, inputtext, calendar, inputtextarea, inputmask, radiobutton, confirmdialog, autocomplete, scrolling, animations) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * Class DatatableService
     * @class
     */
    var DatatableService = /** @class */ (function () {
        /**
         * constructor method
         * @constructor
         * @param {HttpClient} http
         */
        function DatatableService(http) {
            this.http = http;
        }
        /**
         * search method
         * @param {LazyLoadEvent} event
         * @param {String} url
         * @param {number} rows
         * @param {boolean} orderInSort
         * @param {any} query
         * @return Observable
         */
        DatatableService.prototype.search = function (event, url, rows, orderInSort, query) {
            var page = 0;
            if (event !== undefined && event.first > 0) {
                page = Math.floor(event.first / rows);
            }
            var order = event.sortOrder === 1 ? 'asc' : 'desc';
            var params = new http.HttpParams()
                .set('page', page.toString())
                .set('size', rows.toString());
            if (orderInSort) {
                if (event.sortField !== undefined) {
                    params = params.set('sort', event.sortField + ',' + order);
                }
            }
            else {
                if (event.sortField !== undefined) {
                    params = params
                        .set('sort', event.sortField)
                        .set('order', order);
                }
            }
            if ('string' === typeof query) {
                params = params.set('query', query);
            }
            if ('object' === typeof query) {
                Object.keys(query).forEach(function (key) { return params = params.set(key, query[key]); });
            }
            return this.http.get(url + "?" + params.toString(), { observe: 'response' });
        };
        DatatableService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        DatatableService.ɵprov = core.ɵɵdefineInjectable({ factory: function DatatableService_Factory() { return new DatatableService(core.ɵɵinject(http.HttpClient)); }, token: DatatableService, providedIn: "root" });
        DatatableService = __decorate([
            core.Injectable({
                providedIn: "root"
            })
        ], DatatableService);
        return DatatableService;
    }());

    /**
     * Class ServerDataProvider
     * @class
     */
    var ServerDataProvider = /** @class */ (function () {
        /**
         * constructor method
         * @constructor
         * @param {DatatableService} datatableService
         * @param {DatatableComponent} component
         */
        function ServerDataProvider(datatableService, component) {
            var _this = this;
            this.datatableService = datatableService;
            this.component = component;
            this.component.pDatatableComponent.onLazyLoad.subscribe(function (event) { return _this.onLazyLoad(event); });
            this.component.pDatatableComponent.lazy = true;
        }
        /**
         * onLazyLoad method
         * @param {LazyLoadEvent} onLazyLoad
         * @returns void
         */
        ServerDataProvider.prototype.onLazyLoad = function (event) {
            this.currentLazyLoadEvent = event;
            this.load();
        };
        /**
         * load method
         * @param {any} query
         * @returns void
         */
        ServerDataProvider.prototype.load = function (query) {
            var _this = this;
            query = this.retrieveAndSaveQuery(query);
            this.component.startedLoading.emit();
            this.datatableService.search(this.currentLazyLoadEvent, this.component.url, this.component.pDatatableComponent.rows, this.component.orderInSort, query)
                .toPromise()
                .then(function (response) {
                _this.treatLoadResponse(response);
                _this.component.finishedLoading.emit();
            }, function (error) {
                _this.component.finishedLoading.emit(error);
            });
        };
        /**
         * treatLoadResponse method
         * @param {any} response
         * @return void
         */
        ServerDataProvider.prototype.treatLoadResponse = function (response) {
            var data = response.body;
            if (this.component.paginationParameters) {
                this.treatLoadResponseWithPaginationParameters(data);
            }
            else {
                this.treatLoadResponseWithoutPaginationParameters(response, data);
            }
        };
        /**
         * treatLoadResponseWithPaginationParameters method
         * @param {any} data
         * @returns void
         */
        ServerDataProvider.prototype.treatLoadResponseWithPaginationParameters = function (data) {
            var contentIndex = this.component.paginationParameters.contentIndex;
            var totalIndex = this.component.paginationParameters.totalElementsIndex;
            this.component.value = (data[contentIndex]) ? data[contentIndex] : data;
            this.component.pDatatableComponent.totalRecords = (data[totalIndex]) ? data[totalIndex] : this.component.value.length;
        };
        /**
         * treatLoadResponseWithoutPaginationParameters method
         * @param {any} response
         * @param {any} data
         * @returns void
         */
        ServerDataProvider.prototype.treatLoadResponseWithoutPaginationParameters = function (response, data) {
            if (response.headers.has('x-total-count')) {
                this.component.pDatatableComponent.totalRecords = parseInt(response.headers.get('x-total-count'), 10);
                this.component.value = data;
            }
            else {
                this.component.pDatatableComponent.totalRecords = data.totalElements;
                this.component.value = data.content;
            }
        };
        /**
         * retrieveAndSaveQuery method
         * @param {any} query
         * @returns any
         */
        ServerDataProvider.prototype.retrieveAndSaveQuery = function (query) {
            var oldQuery = this._query;
            var currentQuery = this.doRetrieveAndSaveQuery(query);
            this.resetToFirstPageIfQueryChanged(oldQuery, currentQuery);
            return currentQuery;
        };
        /**
         * doRetrieveAndSaveQuery method
         * @param {any} query
         * @returns any
         */
        ServerDataProvider.prototype.doRetrieveAndSaveQuery = function (query) {
            if ('object' === typeof query && query.value) {
                this._query = query.value;
            }
            else if (query) {
                this._query = query;
            }
            return this._query;
        };
        /**
         * resetToFirstPageIfQueryChanged method
         * @param {any} oldQuery
         * @param {any} currentQuery
         * @returns void
         */
        ServerDataProvider.prototype.resetToFirstPageIfQueryChanged = function (oldQuery, currentQuery) {
            if (oldQuery !== currentQuery) {
                this.currentLazyLoadEvent.first = 0;
                this.component.pDatatableComponent.first = 0;
            }
        };
        /**
         * reset method
         * @returns void
         */
        ServerDataProvider.prototype.reset = function () {
            this._query = undefined;
        };
        return ServerDataProvider;
    }());

    /**
     * Class MemoryDataProvider
     * @class
     */
    var MemoryDataProvider = /** @class */ (function () {
        /**
         * constructor method
         * @param {DatatableComponent} component
         * @constructor
         */
        function MemoryDataProvider(component) {
            this.component = component;
        }
        /**
         * load method
         * @param {any} query
         * @returns void
         */
        MemoryDataProvider.prototype.load = function (query) {
            this.component.pDatatableComponent.reset();
            for (var prop in query) {
                var matchMode = 'contains';
                if (query[prop] instanceof Array) {
                    matchMode = 'in';
                }
                this.component.pDatatableComponent.filter(query[prop], prop, matchMode);
            }
            this.component.pDatatableComponent.globalFilterFields = query;
            this.component.pDatatableComponent._filter();
        };
        /**
         * reset method
         * @returns void
         */
        MemoryDataProvider.prototype.reset = function () {
            this.component.pDatatableComponent.globalFilterFields = undefined;
        };
        return MemoryDataProvider;
    }());

    /**
     * Enum DataProviderType
     * @enum
     */

    (function (DataProviderType) {
        DataProviderType["Memory"] = "memory";
        DataProviderType["Server"] = "server";
    })(exports.DataProviderType || (exports.DataProviderType = {}));
    /**
     * Class DataProviderFactory
     * @class
     */
    var DataProviderFactory = /** @class */ (function () {
        /**
         * constructor method
         * @constructor
         * @param {DatatableService} datatableService
         */
        function DataProviderFactory(datatableService) {
            this.datatableService = datatableService;
        }
        /**
         * create method
         * @param {DataProviderType} type
         * @param {DatatableComponent} component
         * @public
         * @returns DataProvider
         */
        DataProviderFactory.prototype.create = function (type, component) {
            if (exports.DataProviderType.Server === type) {
                return new ServerDataProvider(this.datatableService, component);
            }
            if (exports.DataProviderType.Memory === type) {
                return new MemoryDataProvider(component);
            }
        };
        DataProviderFactory.ctorParameters = function () { return [
            { type: DatatableService }
        ]; };
        DataProviderFactory.ɵprov = core.ɵɵdefineInjectable({ factory: function DataProviderFactory_Factory() { return new DataProviderFactory(core.ɵɵinject(DatatableService)); }, token: DataProviderFactory, providedIn: "root" });
        DataProviderFactory = __decorate([
            core.Injectable({
                providedIn: "root"
            })
        ], DataProviderFactory);
        return DataProviderFactory;
    }());

    /**
     * Class DatatableButtonComponent
     * @class
     */
    var DatatableButtonComponent = /** @class */ (function () {
        function DatatableButtonComponent() {
            /**
             * allowMultipleSelection property
             * @type {boolean}
             */
            this.allowMultipleSelection = true;
            /**
             * disabled property
             * @type boolean
             */
            this.disabled = false;
            /**
             * click property
             * @type {EventEmitter<any>}
             */
            this.click = new core.EventEmitter();
        }
        /**
         * onClick method
         * @param {any} event
         * @return void
         */
        DatatableButtonComponent.prototype.onClick = function (event) {
            this.click.emit(event);
            event.stopPropagation();
        };
        __decorate([
            core.Input()
        ], DatatableButtonComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], DatatableButtonComponent.prototype, "class", void 0);
        __decorate([
            core.Input()
        ], DatatableButtonComponent.prototype, "bTooltip", void 0);
        __decorate([
            core.Input()
        ], DatatableButtonComponent.prototype, "name", void 0);
        __decorate([
            core.Input()
        ], DatatableButtonComponent.prototype, "allowMultipleSelection", void 0);
        __decorate([
            core.Input()
        ], DatatableButtonComponent.prototype, "disabled", void 0);
        __decorate([
            core.Output()
        ], DatatableButtonComponent.prototype, "click", void 0);
        DatatableButtonComponent = __decorate([
            core.Component({
                selector: 'basis-datatable-button',
                template: "<p pTooltip=\"{{ bTooltip }}\">\n    <button\n        type=\"button\" tooltipPosition=\"bottom\" class=\"{{ class }}\"\n        icon=\"ui-icon-{{ icon }}\" (click)=\"onClick($event)\" [disabled]=\"disabled\" pButton>\n    </button>\n</p>\n"
            })
        ], DatatableButtonComponent);
        return DatatableButtonComponent;
    }());

    /**
     * Class DatatableClickEvent
     * @class
     */
    var DatatableClickEvent = /** @class */ (function () {
        /**
         * constructor method
         * @constructor
         * @param {string} button
         * @param {any} selection
         */
        function DatatableClickEvent(button, selection) {
            this.button = button;
            this.selection = selection;
        }
        return DatatableClickEvent;
    }());

    var Column = /** @class */ (function () {
        function Column() {
            this.filterType = 'text';
            this.exportable = true;
            this.resizable = true;
            this.sortFunction = new core.EventEmitter();
        }
        Column.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.templates.forEach(function (item) {
                switch (item.getType()) {
                    case 'header':
                        _this.headerTemplate = item.template;
                        break;
                    case 'body':
                        _this.bodyTemplate = item.template;
                        break;
                    case 'footer':
                        _this.footerTemplate = item.template;
                        break;
                    case 'filter':
                        _this.filterTemplate = item.template;
                        break;
                    case 'editor':
                        _this.editorTemplate = item.template;
                        break;
                    case 'input':
                        _this.inputTemplate = item.template;
                        break;
                    case 'output':
                        _this.outputTemplate = item.template;
                        break;
                    default:
                        _this.bodyTemplate = item.template;
                        break;
                }
            });
        };
        __decorate([
            core.Input()
        ], Column.prototype, "field", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "colId", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "sortField", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "filterField", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "header", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "footer", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "sortable", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "editable", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "filter", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "filterMatchMode", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "filterType", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "excludeGlobalFilter", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "rowspan", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "colspan", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "scope", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "style", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "styleClass", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "exportable", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "headerStyle", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "headerStyleClass", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "bodyStyle", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "bodyStyleClass", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "footerStyle", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "footerStyleClass", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "hidden", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "expander", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "selectionMode", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "filterPlaceholder", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "filterMaxlength", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "frozen", void 0);
        __decorate([
            core.Input()
        ], Column.prototype, "resizable", void 0);
        __decorate([
            core.Output()
        ], Column.prototype, "sortFunction", void 0);
        __decorate([
            core.ContentChildren(primeng.PrimeTemplate)
        ], Column.prototype, "templates", void 0);
        __decorate([
            core.ContentChild(core.TemplateRef)
        ], Column.prototype, "template", void 0);
        Column = __decorate([
            core.Directive({
                selector: 'p-column'
            })
        ], Column);
        return Column;
    }());

    /**
     * Class DatatableComponent
     * @class
     */
    var DatatableComponent = /** @class */ (function () {
        /**
         * constructor method
         * @constructor
         * @param {ChangeDetectorRef} changeDetectorRef
         * @param {DataProviderFactory} dataProviderFactory
         * @param {Authorization} authorizationService
         */
        function DatatableComponent(changeDetectorRef, dataProviderFactory, authorizationService) {
            this.changeDetectorRef = changeDetectorRef;
            this.dataProviderFactory = dataProviderFactory;
            this.authorizationService = authorizationService;
            /**
             * filterParams property
             * @type {any}
             */
            this.filterParams = {};
            /**
             * footerMsg property
             * @type {string}
             */
            this.footerMsg = '';
            /**
             * orderInSort property
             * @type {boolean}
             */
            this.orderInSort = false;
            /**
             * value property
             * @type {any}
             */
            this.value = [];
            /**
             * type property
             * @type DataProviderType
             */
            this.type = exports.DataProviderType.Server;
            /**
             * rows property
             * @type {number}
             */
            this.rows = 5;
            /**
             * showPaginationFooter property
             * @type {boolean}
             */
            this.showPaginationFooter = false;
            /**
             * disableEdit property
             * @type {boolean}
             */
            this.disableEdit = false;
            /**
             * disableView property
             * @type {boolean}
             */
            this.disableView = false;
            /**
             * disableDelete property
             * @type {boolean}
             */
            this.disableDelete = false;
            /**
             * selectionMode property
             * @type {string}
             */
            this.selectionMode = 'single';
            /**
             * enableButtonsScroll property
             * @type {boolean}
             */
            this.enableButtonsScroll = false;
            /**
             * emptyMessage property
             * @type {string}
             */
            this.emptyMessage = 'Nenhum registro encontrado.';
            /**
             * verticalButtons property
             * @type {boolean}
             */
            this.verticalButtons = true;
            /**
             * enableScroll property
             * @type {boolean}
             */
            this.enableScroll = false;
            /**
             * disableLoadingBlockUI property
             * @type {boolean}
             */
            this.disableLoadingBlockUI = false;
            /**
             * filterOnColumn property
             */
            this.filterOnColumn = false;
            /**
             * filterSelectOptions property
             */
            this.filterSelectOptions = [];
            /**
             * updateFiltroHistorico property
             */
            this.updateFilterColumn = false;
            /**
             * customFilterOptions property
             */
            this.customFilterOptions = {};
            /**
             * buttonClick property
             * @type {EventEmitter<any>}
             */
            this.buttonClick = new core.EventEmitter();
            /**
             * startedLoading property
             * @type {EventEmitter<void>}
             */
            this.startedLoading = new core.EventEmitter();
            /**
             * finishedLoading property
             * @type {EventEmitter<HttpErrorResponse>}
             */
            this.finishedLoading = new core.EventEmitter();
            /**
             * onRowSelected property
             * @type {EventEmitter<any>}
             */
            this.onRowSelected = new core.EventEmitter();
            /**
             * showHorizontalButtonsHeader property
             * @type {boolean}
             */
            this.showHorizontalButtonsHeader = false;
            /**
             * blockContent
             * @type {boolean}
             */
            this.blockContent = false;
            /**
             * visibleColumns property
             * @type {Object}
             */
            this.visibleColumns = {};
            /**
             * showVisibleColumnsControl property
             * @type {boolean}
             */
            this.showVisibleColumnsControl = false;
            /**
             * dataKey property
             * Identificador único para cada registro da tabela
             * @type {string}
             */
            this.dataKey = 'id';
            /**
             * onRowEditEvent property
             * Evento disparado quando o usuário realiza ações de edição em uma linha da tabela
             * @type {EventEmitter<void>}
             */
            this.onRowEditEvent = new core.EventEmitter();
            this.clonedRowData = {};
            /**
             * errorMessage property
             * @type {string}
             */
            this.errorMessage = 'Ocorreu um erro ao carregar os dados da tabela. Tente novamente.';
            this.editingRow = false;
        }
        /**
         * ngOnInit method
         * @returns void
         */
        DatatableComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dataProvider = this.dataProviderFactory.create(this.type, this);
            this.pDatatableComponent.rows = this.rows;
            this.subscribeToLoadingEvents();
            this.initRowsPerPageOptionsIfPresent();
            this.defineIfShouldShowHorizontalButtonsHeader();
            this.updateOnValueChange();
            this.finishedLoading.subscribe(function () {
                _this.updateOnValueChange();
            });
        };
        /**
         * subscribeFromValueChange method
         * @returns void
         */
        DatatableComponent.prototype.updateOnValueChange = function () {
            var _this = this;
            this.filterSelectOptions = [];
            if (this.value) {
                this.value.map(function (item) {
                    _this.filterSelectOptions.push(item);
                });
            }
        };
        /**
         * subscribeToLoadingEvents method
         * @returns void
         */
        DatatableComponent.prototype.subscribeToLoadingEvents = function () {
            var _this = this;
            if (!this.disableLoadingBlockUI) {
                this.originalEmptyMessage = this.emptyMessage;
                this.startedLoading.subscribe(function () { return _this.onStartedLoading(); });
                this.finishedLoading.subscribe(function (error) { return _this.onFinishedLoading(error); });
            }
        };
        /**
         * onStartedLoading method
         * @returns void
         */
        DatatableComponent.prototype.onStartedLoading = function () {
            this.blockContent = true;
            this.emptyMessage = this.originalEmptyMessage;
        };
        /**
         * onFinishedLoading method
         * @param {HttpErrorResponse} error
         * @returns void
         */
        DatatableComponent.prototype.onFinishedLoading = function (error) {
            this.blockContent = false;
            if (error) {
                this.emptyMessage = this.errorMessage;
            }
        };
        /**
         * initRowsPerPageOptionsIfPresent method
         * @returns void
         */
        DatatableComponent.prototype.initRowsPerPageOptionsIfPresent = function () {
            if (this.rowsPerPageOptions) {
                this.pDatatableComponent.rowsPerPageOptions = this.rowsPerPageOptions;
            }
        };
        /**
         * defineIfShouldShowHorizontalButtonsHeader method
         * @returns void
         */
        DatatableComponent.prototype.defineIfShouldShowHorizontalButtonsHeader = function () {
            if (this.horizontalButtonsHeader) {
                this.showHorizontalButtonsHeader = true;
            }
        };
        /**
         * ngAfterViewInit method
         * @returns void
         */
        DatatableComponent.prototype.ngAfterViewInit = function () {
            this.setExtraParams();
            this.pDatatableComponent.columns = this.columns;
            this.pDatatableComponent.ngAfterContentInit();
            this.setAllColumnsVisible();
            this.changeDetectorRef.detectChanges();
        };
        /**
         * setExtraParams method
         * @returns void
         */
        DatatableComponent.prototype.setExtraParams = function () {
            for (var i in this.extraParams) {
                this.pDatatableComponent[i] = this.extraParams[i];
            }
        };
        /**
         * ngAfterContentInit method
         * @returns void
         */
        DatatableComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.extraButtons.forEach(function (button) {
                button.click.subscribe(function (event) {
                    _this.onClick(button.name, event);
                });
            });
        };
        /**
         * onClick method
         * @param {string} button
         * @param {any} event
         * @return void
         */
        DatatableComponent.prototype.onClick = function (button, event) {
            this.buttonClick.emit(new DatatableClickEvent(button, this.selectedRow));
            event.stopPropagation();
            this.resetSelectedRow(button);
        };
        /**
         * onSelectChange method
         * @param {any} event
         * @returns void
         */
        DatatableComponent.prototype.onSelectChange = function (event) {
            this.onRowSelected.emit(this.selectedRow);
            if (Array.isArray(this.selectedRow) && this.selectedRow.length > 1) {
                this.updateMultipleButtonsStatus(true);
            }
            else {
                this.updateMultipleButtonsStatus(false);
            }
        };
        /**
         * updateMultipleButtonsStatus method
         * @param {boolean} hasMultipleSelection
         * @return void
         */
        DatatableComponent.prototype.updateMultipleButtonsStatus = function (hasMultipleSelection) {
            this.extraButtons.forEach(function (button) {
                if (hasMultipleSelection && !button.allowMultipleSelection) {
                    button.disabled = true;
                }
                else {
                    button.disabled = false;
                }
            });
        };
        /**
         * refresh method
         * @param query
         * @returns void
         */
        DatatableComponent.prototype.refresh = function (query) {
            this.dataProvider.load(query);
        };
        /**
         * resetSelectedRow method
         * @param button
         * @returns void
         */
        DatatableComponent.prototype.resetSelectedRow = function (button) {
            if (button === 'delete') {
                this.selectedRow = null;
            }
        };
        /**
         * reset method
         * @returns void
         */
        DatatableComponent.prototype.reset = function () {
            this.pDatatableComponent.first = 0;
            this.dataProvider.reset();
            this.refresh();
        };
        /**
         * paginationFooterText method
         * @param {string} msg
         * @returns string
         */
        DatatableComponent.prototype.paginationFooterText = function (msg) {
            var registros = this.totalRecords() === 1 ? 'registro' : 'registros';
            if (msg === '') {
                return "Exibindo: " + this.currentFirstIndex() + " a " + this.currentLastIndex() + " de " + this.totalRecords() + " " + registros;
            }
            msg = msg.replace('{totalRecords}', this.totalRecords().toString());
            msg = msg.replace('{currentFirstIndex}', this.currentFirstIndex().toString());
            msg = msg.replace('{currentLastIndex}', this.currentLastIndex().toString());
            return msg;
        };
        /**
         * currentFirstIndex method
         * @returns number
         */
        DatatableComponent.prototype.currentFirstIndex = function () {
            return this.pDatatableComponent.first + 1;
        };
        /**
         * currentLastIndex method
         * @returns number
         */
        DatatableComponent.prototype.currentLastIndex = function () {
            var currentLastIndex = this.pDatatableComponent.first + this.pDatatableComponent.rows;
            if (currentLastIndex > this.totalRecords()) {
                return this.totalRecords();
            }
            return currentLastIndex;
        };
        /**
         * totalRecords method
         * @returns number
         */
        DatatableComponent.prototype.totalRecords = function () {
            return this.pDatatableComponent.totalRecords;
        };
        /**
         * checkRolesToButton method
         * @param {string} button
         * @return boolean
         */
        DatatableComponent.prototype.checkRolesToButton = function (button) {
            if (this[button]) {
                if (button === 'rulesToHide' || button === 'rulesToShowEdit' || button === 'rulesToShowDelete') {
                    this.checkUseButtons(button);
                    return this.authorizationService.hasRole(this[button]);
                }
                return !this.authorizationService.hasRole(this[button]);
            }
            return true;
        };
        /**
         * checkUseButtons method
         * @param {string} button
         * @returns void
         */
        DatatableComponent.prototype.checkUseButtons = function (button) {
            if (this[button] && this[button.replace('Show', 'Hide')]) {
                throw new Error('Não é possível definir dois valores de roles para os botões padrões.');
            }
        };
        /**
         * filter method
         * @returns void
         */
        DatatableComponent.prototype.filter = function () {
            for (var prop in this.filterParams) {
                if (this.filterParams[prop] === '' || (this.filterParams[prop].length === 0)) {
                    delete this.filterParams[prop];
                }
            }
            if (Object.getOwnPropertyNames(this.filterParams).length === 0) {
                this.reset();
            }
            else {
                this.refresh(this.filterParams);
            }
        };
        /**
         * Método para filtrar por colunas
         * @param column chave da coluna na tabela
         * @param filters valor do filtro
         */
        DatatableComponent.prototype.filterColumn = function (column, filters) {
            var values = [];
            if (filters instanceof Array) {
                values[column] = [];
                for (var item in filters) {
                    var val = (filters[item] instanceof Object) ? filters[item].value : filters[item];
                    values[column].push(val);
                }
            }
            else {
                values[column] = filters;
            }
            this.filterParams = __assign(__assign({}, this.filterParams), values);
            return this.filter();
        };
        /**
         * Inicia todas as colunas da tabela como visíveis
         */
        DatatableComponent.prototype.setAllColumnsVisible = function () {
            var _this = this;
            this.columns.forEach(function (col) {
                _this.visibleColumns[col.field] = 'table-cell';
            });
        };
        /**
         * Verifica se uma coluna deve estar visível
         * @param column string
         * @param visibleColumns Array
         */
        DatatableComponent.prototype.visibleColumnCheck = function (column, visibleColumns) {
            return visibleColumns.some(function (item) {
                return (item.field) ? item.field == column : true;
            });
        };
        /**
         * Atualzia os valores da variável 'visibleColuns' para mostrar ou não as colunas
         * @param columns array
         */
        DatatableComponent.prototype.updateVisibleColumns = function (columns) {
            for (var col in this.visibleColumns) {
                if (this.visibleColumnCheck(col, columns)) {
                    this.visibleColumns[col] = 'table-cell';
                }
                else {
                    this.visibleColumns[col] = 'none';
                }
            }
        };
        DatatableComponent.prototype.onRowEditInitEvent = function (event, rowData) {
            var _this = this;
            var tr = event.srcElement.closest('tr');
            setTimeout(function () {
                _this.editingRow = true;
                var top = tr.offsetTop;
                var height = tr.offsetHeight;
                var editButtons = tr.querySelector('.editar-campos');
                editButtons.style.top = (top + height - 75) + 'px';
                editButtons.style.height = '75px';
                editButtons.style.backgroundColor = '#d0d0d0';
                editButtons.style.opacity = 1;
                _this.clonedRowData[rowData.id] = __assign({}, rowData);
                _this.onRowEditEvent.emit({ event: "init", data: rowData });
            }, null, tr);
        };
        DatatableComponent.prototype.onRowEditSaveEvent = function (event, rowData) {
            this.onRowEditEvent.emit({ event: "save", data: rowData });
            this.resetEditingMode(event);
        };
        DatatableComponent.prototype.onRowEditCancelEvent = function (event, rowData, index) {
            this.value[index] = this.clonedRowData[rowData.id];
            delete this.clonedRowData[rowData[this.dataKey]];
            this.onRowEditEvent.emit({ event: "cancel", data: rowData });
            this.resetEditingMode(event);
        };
        DatatableComponent.prototype.resetEditingMode = function (event) {
            var editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
            editButtons.style.opacity = 0;
            editButtons.style.backgroundColor = '#0000006b';
            editButtons.style.display = 'none';
            this.editingRow = false;
        };
        DatatableComponent.prototype.editarLinhaOver = function (event) {
            if (!this.editingRow && this.editMode == 'row') {
                var top_1 = event.srcElement.closest('tr').offsetTop;
                var height = event.srcElement.closest('tr').offsetHeight;
                var editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
                editButtons.style.display = 'flex';
                editButtons.style.top = top_1 + 'px';
                editButtons.style.height = height + 'px';
                editButtons.style.backgroundColor = '#0000006b';
                editButtons.style.opacity = 1;
            }
        };
        DatatableComponent.prototype.editarLinhaOut = function (event) {
            if (!this.editingRow) {
                var editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
                editButtons.style.display = 'none';
                editButtons.style.opacity = 0;
            }
        };
        DatatableComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: DataProviderFactory },
            { type: angularBase.Authorization }
        ]; };
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "splitButton", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "value", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "type", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rows", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rowsPerPageOptions", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "url", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "extraParams", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "paginationParameters", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "showPaginationFooter", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "disableEdit", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "disableView", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "disableDelete", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "selectionMode", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "enableButtonsScroll", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "emptyMessage", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "verticalButtons", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "enableScroll", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "scrollHeight", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "scrollWidth", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rulesToHide", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rulesToShowEdit", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rulesToShowDelete", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rulesToHideView", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rulesToHideEdit", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rulesToHideDelete", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "disableLoadingBlockUI", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "rowStyleClass", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "filterOnColumn", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "customFilterOptions", void 0);
        __decorate([
            core.Output()
        ], DatatableComponent.prototype, "buttonClick", void 0);
        __decorate([
            core.ViewChild(table.Table, { static: true })
        ], DatatableComponent.prototype, "pDatatableComponent", void 0);
        __decorate([
            core.ContentChildren(DatatableButtonComponent)
        ], DatatableComponent.prototype, "extraButtons", void 0);
        __decorate([
            core.ContentChildren(Column)
        ], DatatableComponent.prototype, "columns", void 0);
        __decorate([
            core.Output()
        ], DatatableComponent.prototype, "startedLoading", void 0);
        __decorate([
            core.Output()
        ], DatatableComponent.prototype, "finishedLoading", void 0);
        __decorate([
            core.Output()
        ], DatatableComponent.prototype, "onRowSelected", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "showVisibleColumnsControl", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "editMode", void 0);
        __decorate([
            core.Input()
        ], DatatableComponent.prototype, "dataKey", void 0);
        __decorate([
            core.Output()
        ], DatatableComponent.prototype, "onRowEditEvent", void 0);
        DatatableComponent = __decorate([
            core.Component({
                selector: 'basis-datatable',
                template: "<p-blockUI [blocked]=\"blockContent\">\n    <div class=\"center-spinner\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n<div [ngClass]=\"{'ui-g-2':verticalButtons, 'ui-g-5':!verticalButtons}\">&nbsp;</div>\n<div [ngClass]=\"verticalButtons ? 'ui-g-11' : 'ui-g-12'\">\n    <basis-show-column *ngIf=\"showVisibleColumnsControl\" [columns]=\"columns\" (updateVisibleColumns)=\"updateVisibleColumns($event)\"></basis-show-column>\n</div>\n<div [ngClass]=\"{\n        'ui-g-11' : verticalButtons,\n        'ui-g-12' : !verticalButtons,\n        'edicao-tabela' : editMode == 'row',\n        'editing-row': editingRow\n    }\">\n    <p-table\n        [value]=\"value\"\n        [rows]=\"rows\"\n        [paginator]=\"true\"\n        [selectionMode]=\"selectionMode\"\n        [responsive]=\"true\"\n        [scrollable]=\"enableScroll\"\n        [scrollHeight]=\"scrollHeight\"\n        [(selection)]=\"selectedRow\"\n        [editMode]=\"editMode\"\n        (onRowSelect)=\"onSelectChange($event)\"\n        (onRowUnselect)=\"onSelectChange($event)\"\n        #datatable\n        [dataKey]=\"dataKey\">\n        <ng-template pTemplate=\"header\" let-columns>\n            <div class=\"ui-g\" *ngIf=\"!verticalButtons\">\n                <div *ngIf=\"showHorizontalButtonsHeader\" class=\"ui-g-4 ui-sm-12\">\n                    <span class=\"horizontal-buttons-header\">{{ horizontalButtonsHeader }}</span>\n                </div>\n                <div [ngClass]=\"{\n                    'horizontal-buttons': true,\n                    'ui-sm-12': true,\n                    'ui-g-8': showHorizontalButtonsHeader,\n                    'ui-g-12': !showHorizontalButtonsHeader}\">\n                    <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n                    <ng-content select=\"horizontalButtons\"></ng-content>\n                </div>\n            </div>\n            <tr>\n                <th *ngFor=\"let col of columns\"\n                    [pSortableColumn]=\"col.sortable ? col.field : null\"\n                    [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    {{col.header}}\n                    <p-sortIcon *ngIf=\"col.sortable\" [field]=\"col.field\"></p-sortIcon>\n                </th>\n            </tr>\n            <tr *ngIf=\"filterOnColumn\">\n                <th *ngFor=\"let col of columns\" [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    <basis-filter-column\n                        [listaOriginal]=\"filterSelectOptions\"\n                        [lista]=\"filterSelectOptions\"\n                        [field]=\"col.field\"\n                        [updateFiltro]=\"updateFilterColumn\"\n                        (outputEvent)=\"filterColumn(col.field, $event)\"\n                        [filterType]=\"col.filterType\"\n                        [tableType]=\"type\"\n                        [customFilterOptions]=\"customFilterOptions\">\n                    </basis-filter-column>\n                </th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-editing=\"editing\" let-ri=\"rowIndex\">\n            <tr [pSelectableRow]=\"rowData\"\n                [pContextMenuRow]=\"rowData\"\n                [pEditableRow]=\"rowData\"\n                [ngClass]=\"{'editing': editing}\"\n                (mouseover)=\"editarLinhaOver($event)\"\n                (mouseleave)=\"editarLinhaOut($event)\">\n                <td *ngFor=\"let col of columns; last as isLast\" [ngStyle]=\"{'display': visibleColumns[col.field]}\" >\n                    <ng-container *ngIf=\"!editMode\">\n                        <span *ngIf=\"!col.bodyTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                        <ng-container\n                            *ngIf=\"col.bodyTemplate\"\n                            [ngTemplateOutlet]=\"col.bodyTemplate\"\n                            [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"editMode\">\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <span *ngIf=\"!col.outputTemplate && col.editable == false\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <div class=\"ui-md-12\" *ngIf=\"!col.inputTemplate && col.editable != false\">\n                                    <div class=\"ui-g form-group\">\n                                        <div class=\"ui-md-12\">\n                                            <span class=\"md-inputfield\">\n                                                <input pInputText type=\"text\" [(ngModel)]=\"rowData[col.field]\" [style]=\"{'width':'100%'}\">\n                                                <label>{{ col.header }}</label>\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <ng-container\n                                    *ngIf=\"col.inputTemplate\"\n                                    [ngTemplateOutlet]=\"col.inputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ 'rowData': rowData, 'col': col }\">\n                                </ng-container>\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                <span *ngIf=\"!col.outputTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <ng-container\n                                    *ngIf=\"col.outputTemplate\"\n                                    [ngTemplateOutlet]=\"col.outputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                                </ng-container>\n                            </ng-template>\n                        </p-cellEditor>\n                    </ng-container>\n                    <div *ngIf=\"isLast\" class=\"editar-campos\">\n                        <button *ngIf=\"!editing\" pButton type=\"button\" pInitEditableRow (click)=\"onRowEditInitEvent($event, rowData)\">Editar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pSaveEditableRow class=\"ui-button-success\" style=\"margin-right: .5em\" (click)=\"onRowEditSaveEvent($event, rowData)\">Salvar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pCancelEditableRow class=\"ui-button-danger\" (click)=\"onRowEditCancelEvent($event, rowData, ri)\">Cancelar</button>\n                    </div>\n                </td>\n            </tr>\n        </ng-template>\n        <ng-template *ngIf=\"emptyMessage\">\n            {{ emptyMessage }}\n        </ng-template>\n        <p-footer *ngIf=\"showPaginationFooter && totalRecords() > 0\">\n            {{ paginationFooterText(footerMsg) }}\n        </p-footer>\n\n    </p-table>\n</div>\n<div *ngIf=\"verticalButtons\"\n    class=\"ui-g-1 ui-g-nopad\"\n    [style.position]=\"enableButtonsScroll ? 'sticky' : ''\"\n    [style.top]=\"enableButtonsScroll ? '15%' : ''\">\n        <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n        <ng-content></ng-content>\n</div>\n\n<ng-template #defaultButtons>\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Editar' : 'Escolha um registro para editar.' \"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-success\" icon=\"edit\" (click)=\"onClick('edit', $event)\"\n        *ngIf=\"!disableEdit && checkRolesToButton('rulesToShowView') && checkRolesToButton('rulesToHideView')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Visualizar' : 'Escolha um registro para visualizar.'\"\n        [class.horizontal-button]=\"!verticalButtons\" icon=\"remove-red-eye\" (click)=\"onClick('view', $event)\"\n        *ngIf=\"!disableView && checkRolesToButton('rulesToShowEdit') && checkRolesToButton('rulesToHideEdit')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Excluir' : 'Escolha um registro para excluir.'\"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-danger\" icon=\"delete\" (click)=\"onClick('delete', $event)\"\n       *ngIf=\"!disableDelete && checkRolesToButton('rulesToShowDelete') && checkRolesToButton('rulesToHideDelete')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <datatable-splitbutton\n        [icon]=\"splitButton.icon\"\n        [class]=\"splitButton.class\"\n        [items]=\"splitButton.itens\"\n        [label]=\"splitButton.label\"\n        [method]=\"splitButton.method\"\n        *ngIf=\"splitButton\">\n    </datatable-splitbutton>\n</ng-template>\n",
                encapsulation: core.ViewEncapsulation.None,
                styles: ["body .ui-datatable .ui-datatable-data tr td{word-wrap:break-word}.horizontal-buttons{display:flex;flex-flow:row wrap;justify-content:flex-end}.horizontal-button{padding:0 3px}.horizontal-buttons-header{font-size:1.3em;word-wrap:break-word}.center-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}.text-right{text-align:right}basis-show-column .ui-multiselect-panel.ui-widget{width:100%;max-width:100%}.edicao-tabela,.edita-linha{position:relative}tr.editing td{padding-bottom:75px!important}.editar-campos{opacity:0;position:absolute;width:100%;background-color:#0000006b;left:0;margin-top:0;display:flex;align-items:center;justify-content:center;min-height:35px;transition:.3s ease-in-out;z-index:1}.editar-campos button{color:#fff;font-size:14px;padding:6px 30px 10px;border-radius:5px;height:28px;width:120px!important}.bt-cancelar,.bt-salvar{margin:0 10px}"]
            })
        ], DatatableComponent);
        return DatatableComponent;
    }());

    /**
     * Class DatatableSplitbuttonComponent
     * @class
     */
    var DatatableSplitbuttonComponent = /** @class */ (function () {
        function DatatableSplitbuttonComponent() {
        }
        /**
         * ngOnInit method
         * @returns void
         */
        DatatableSplitbuttonComponent.prototype.ngOnInit = function () {
        };
        __decorate([
            core.Input()
        ], DatatableSplitbuttonComponent.prototype, "items", void 0);
        __decorate([
            core.Input()
        ], DatatableSplitbuttonComponent.prototype, "label", void 0);
        __decorate([
            core.Input()
        ], DatatableSplitbuttonComponent.prototype, "class", void 0);
        __decorate([
            core.Input()
        ], DatatableSplitbuttonComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], DatatableSplitbuttonComponent.prototype, "method", void 0);
        DatatableSplitbuttonComponent = __decorate([
            core.Component({
                selector: 'datatable-splitbutton',
                template: "<p-splitButton label=\"{{label}}\" icon=\"{{icon}}\" (onClick)=\"method\" [model]=\"items\" styleClass=\"{{class}}\">\n</p-splitButton>"
            })
        ], DatatableSplitbuttonComponent);
        return DatatableSplitbuttonComponent;
    }());

    /**
     * Class DatatableSplitbuttonModule
     * @class
     */
    var DatatableSplitbuttonModule = /** @class */ (function () {
        function DatatableSplitbuttonModule() {
        }
        DatatableSplitbuttonModule = __decorate([
            core.NgModule({
                imports: [
                    primeng.SplitButtonModule
                ],
                declarations: [
                    DatatableSplitbuttonComponent
                ],
                providers: [],
                exports: [
                    DatatableSplitbuttonComponent,
                    primeng.SplitButtonModule
                ],
                schemas: [core.CUSTOM_ELEMENTS_SCHEMA]
            })
        ], DatatableSplitbuttonModule);
        return DatatableSplitbuttonModule;
    }());

    var FilterColumn = /** @class */ (function () {
        function FilterColumn() {
            this.listaOriginal = [];
            this.lista = [];
            this.labelDefaultImplementation = false;
            this.updateFiltro = false;
            this.customFilterOptions = {};
            this.template = 'filter_text';
            this.outputEvent = new core.EventEmitter();
            this.debouncer = new rxjs.Subject();
            this.resultado = [];
            this.listaFields = [];
        }
        FilterColumn.prototype.ngOnInit = function () {
            var _this = this;
            this.debouncer
                .pipe(operators.debounceTime((this.tableType === 'memory') ? 300 : 1000))
                .subscribe(function (value) { return _this.outputEvent.emit(value); });
            this.template = "filter_" + this.filterType;
        };
        FilterColumn.prototype.ngOnChanges = function (changes) {
            if (this.checkChanges(changes, 'listaOriginal')) {
                this.preencherFields();
            }
        };
        FilterColumn.prototype.checkChanges = function (changes, property) {
            return changes[property] && changes[property].previousValue != changes[property].currentValue;
        };
        /**
         * Método para propagar o evento de filtragem
         * @param event filtro
         */
        FilterColumn.prototype.filtrar = function (event) {
            this.debouncer.next(this.filtro);
        };
        /**
         * Preenche os itens que serão exibidos no multiselect, removendo duplicidades
         */
        FilterColumn.prototype.preencherFields = function () {
            var _this = this;
            this.listaFields = [];
            this.listaOriginal.filter(function (pi) { return pi[_this.field] !== null; }).forEach(function (row) {
                var item = { label: row[_this.field], value: row[_this.field] };
                if (!_this.verificarSeExisteField(item)) {
                    _this.listaFields.push(item);
                }
            });
        };
        /**
         *
         * @param field Verifica duplicidade de fields nas opções de seleção
         */
        FilterColumn.prototype.verificarSeExisteField = function (field) {
            return this.listaFields.some(function (item) {
                return item.value == field.value;
            });
        };
        /**
         * Caso o usuaŕio não forneça uma lista para o options, será criada uma lista com
         * os valores presentes na tabela
         */
        FilterColumn.prototype.getCustomFilterOptions = function () {
            if (this.customFilterOptions.hasOwnProperty(this.field)) {
                return this.customFilterOptions[this.field];
            }
            return this.listaFields;
        };
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "listaOriginal", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "lista", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "field", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "header", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "labelDefaultImplementation", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "labelDefaultName", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "updateFiltro", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "filterType", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "tableType", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "customFilterOptions", void 0);
        __decorate([
            core.Input()
        ], FilterColumn.prototype, "template", void 0);
        __decorate([
            core.Output()
        ], FilterColumn.prototype, "outputEvent", void 0);
        FilterColumn = __decorate([
            core.Component({
                selector: 'basis-filter-column',
                template: "<div [ngSwitch]=\"filterType\">\n    <div *ngSwitchCase=\"'text'\">\n        <div class=\"ui-g form-group\">\n            <div class=\"ui-md-12\">\n                <span class=\"md-inputfield\">\n                    <input type=\"text\" pInputText (input)=\"filtrar($event)\" [(ngModel)]=\"filtro\">\n                    <label>{{ (header) ? header : 'Filtro' }}</label>\n                </span>\n            </div>\n        </div>\n    </div>\n    <div *ngSwitchCase=\"'select'\">\n        <p-multiSelect\n            [options]=\"getCustomFilterOptions()\"\n            [defaultLabel]=\"(header)? header: '&nbsp;'\"\n            [optionLabel]=\"'label'\"\n            appendTo=\"body\"\n            [ngModelOptions]=\"{standalone: true}\"\n            (onChange)=\"filtrar($event)\"\n            [(ngModel)]=\"filtro\"\n            [style]=\"{'width':'100%'}\">\n        </p-multiSelect>\n    </div>\n</div>\n"
            })
        ], FilterColumn);
        return FilterColumn;
    }());

    var FilterColumnModule = /** @class */ (function () {
        function FilterColumnModule() {
        }
        FilterColumnModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    primeng.MultiSelectModule,
                    button.ButtonModule,
                    primeng.CheckboxModule,
                    dropdown.DropdownModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    primeng.InputTextModule
                ],
                declarations: [
                    FilterColumn
                ],
                exports: [
                    FilterColumn
                ],
                schemas: [core.CUSTOM_ELEMENTS_SCHEMA]
            })
        ], FilterColumnModule);
        return FilterColumnModule;
    }());

    /**
     * Class PageNotificationService
     * @class
     */
    var PageNotificationService = /** @class */ (function (_super) {
        __extends(PageNotificationService, _super);
        /**
         * constructor method
         * @constructor
         * @param {MessageService} messageService
         */
        function PageNotificationService(messageService) {
            var _this = _super.call(this) || this;
            _this.messageService = messageService;
            /**
             * successSeverity property
             * @type {string}
             */
            _this.successSeverity = 'success';
            /**
             * infoSeverity property
             * @type {string}
             */
            _this.infoSeverity = 'info';
            /**
             * warnSeverity property
             * @type {string}
             */
            _this.warnSeverity = 'warn';
            /**
             * errorSeverity property
             * @type {string}
             */
            _this.errorSeverity = 'error';
            /**
             * createMsg property
             * @type {string}
             */
            _this.createMsg = 'Registro incluído com sucesso!';
            /**
             * updateMsg property
             * @type {string}
             */
            _this.updateMsg = 'Registro alterado com sucesso!';
            /**
             * deleteMsg property
             * @type {string}
             */
            _this.deleteMsg = 'Registro excluído com sucesso!';
            return _this;
        }
        /**
         * addCreateMsg method
         * @param {string} title
         */
        PageNotificationService.prototype.addCreateMsg = function (title) {
            this.addSuccessMessage(this.createMsg, title);
        };
        /**
         * addSuccessMessage method
         * @param {string} message
         * @param {string} title
         */
        PageNotificationService.prototype.addSuccessMessage = function (message, title) {
            this.addMsg(this.successSeverity, message, title);
        };
        /**
         * addMsg method
         * @param {string} severity
         * @param {string} msg
         * @param {string} title
         */
        PageNotificationService.prototype.addMsg = function (severity, msg, title) {
            this.messageService.add({
                severity: severity,
                summary: title,
                detail: msg
            });
        };
        /**
         * addUpdateMsg method
         * @param {string} title
         */
        PageNotificationService.prototype.addUpdateMsg = function (title) {
            this.addSuccessMessage(this.updateMsg, title);
        };
        /**
         * addDeleteMsg method
         * @param {string} title
         */
        PageNotificationService.prototype.addDeleteMsg = function (title) {
            this.addSuccessMessage(this.deleteMsg, title);
        };
        /**
         * addInfoMessage method
         * @param {string} message
         * @param {string} title
         */
        PageNotificationService.prototype.addInfoMessage = function (message, title) {
            this.addMsg(this.infoSeverity, message, title);
        };
        /**
         * addWarnMessage method
         * @param {string} message
         * @param {string} title
         */
        PageNotificationService.prototype.addWarnMessage = function (message, title) {
            this.addMsg(this.warnSeverity, message, title);
        };
        /**
         * addErrorMessage method
         * @param {string} message
         * @param {string} title
         */
        PageNotificationService.prototype.addErrorMessage = function (message, title) {
            this.addMsg(this.errorSeverity, message, title);
        };
        /**
         * addErrorProblem method
         * @param {ApplicationProblemType} problem
         */
        PageNotificationService.prototype.addErrorProblem = function (problem) {
            this.addMsg(this.errorSeverity, problem.detail, problem.title);
        };
        PageNotificationService.ctorParameters = function () { return [
            { type: primeng.MessageService }
        ]; };
        PageNotificationService.ɵprov = core.ɵɵdefineInjectable({ factory: function PageNotificationService_Factory() { return new PageNotificationService(core.ɵɵinject(api.MessageService)); }, token: PageNotificationService, providedIn: "root" });
        PageNotificationService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], PageNotificationService);
        return PageNotificationService;
    }(angularBase.NotificationProvider));

    var ShowColumn = /** @class */ (function () {
        function ShowColumn(pageNotificationService) {
            this.pageNotificationService = pageNotificationService;
            /**
             * lista de colunas disponívels na tabela
             * @type {Array}
             */
            this.options = [];
            /**
             * Valores do select de colunas
             * @type {Array}
             */
            this.values = [];
            /**
             * Último valor válido para o select.
             * @type {Array}
             */
            this.lastValue = [];
            /**
             * Evento para atualizar a visibilidade das colunas da tabela
             * @type {EventEmitter}
             */
            this.updateVisibleColumns = new core.EventEmitter();
        }
        ShowColumn.prototype.ngOnInit = function () {
            var _this = this;
            this.columns.forEach(function (column) {
                var col = { field: column.field, filterType: column.filterType, header: column.header };
                _this.options.push(col);
                _this.values.push(col);
                _this.lastValue.push(col);
            });
        };
        ShowColumn.prototype.mostrarColunas = function (event) {
            var _this = this;
            if (this.values.length) {
                this.lastValue = event.value;
                this.updateVisibleColumns.emit(this.values);
            }
            else {
                this.lastValue.map(function (item) { return _this.values.push(item); });
                this.pageNotificationService.addErrorMessage('Não é possível exibir menos de uma coluna');
            }
        };
        ShowColumn.ctorParameters = function () { return [
            { type: PageNotificationService }
        ]; };
        __decorate([
            core.Input()
        ], ShowColumn.prototype, "columns", void 0);
        __decorate([
            core.Output()
        ], ShowColumn.prototype, "updateVisibleColumns", void 0);
        ShowColumn = __decorate([
            core.Component({
                selector: 'basis-show-column',
                template: "<div class=\"ui-g-12 ui-g-nopad\">\n    <div class=\"ui-g-3 ui-md-offset-6\">\n        <div class=\"text-right\">Visibilidade das Colunas:</div>\n    </div>\n    <div class=\"ui-g-3\">\n        <p-multiSelect\n            class=\"column\"\n            defaultLabel=\"Selecione as colunas a serem exibidas\"\n            [optionLabel]=\"'header'\"\n            [displaySelectedLabel]=\"false\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            (onChange)=\"mostrarColunas($event)\"\n            [options]=\"options\"\n            [(ngModel)]=\"values\"\n            [style]=\"{ width: '100%' }\"\n        >\n        </p-multiSelect>\n    </div>\n</div>\n"
            })
        ], ShowColumn);
        return ShowColumn;
    }());

    var ShowColumnModule = /** @class */ (function () {
        function ShowColumnModule() {
        }
        ShowColumnModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    primeng.MultiSelectModule,
                    button.ButtonModule,
                    primeng.CheckboxModule,
                    dropdown.DropdownModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    primeng.InputTextModule
                ],
                declarations: [
                    ShowColumn
                ],
                exports: [
                    ShowColumn
                ],
                schemas: [core.CUSTOM_ELEMENTS_SCHEMA]
            })
        ], ShowColumnModule);
        return ShowColumnModule;
    }());

    /**
     * Class DatatableModule
     * @class
     */
    var DatatableModule = /** @class */ (function () {
        function DatatableModule() {
        }
        DatatableModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    primeng.ButtonModule,
                    primeng.SplitButtonModule,
                    primeng.TooltipModule,
                    table.TableModule,
                    primeng.BlockUIModule,
                    primeng.ProgressSpinnerModule,
                    DatatableSplitbuttonModule,
                    http.HttpClientModule,
                    primeng.PaginatorModule,
                    FilterColumnModule,
                    ShowColumnModule,
                    primeng.InputTextModule
                ],
                declarations: [
                    DatatableComponent,
                    DatatableButtonComponent,
                    Column
                ],
                providers: [
                    { provide: DatatableService, useClass: DatatableService, deps: [http.HttpClient] },
                    DataProviderFactory
                ],
                exports: [
                    DatatableComponent,
                    DatatableButtonComponent,
                    FilterColumnModule,
                    ShowColumnModule,
                    Column
                ]
            })
        ], DatatableModule);
        return DatatableModule;
    }());

    /**
     * Class BlockUiComponent
     * @class
     */
    var BlockUiComponent = /** @class */ (function () {
        /**
         * constructor method
         * @constructor
         * @param {BlockUiService} service
         */
        function BlockUiComponent(service) {
            this.service = service;
            /**
             * status property
             * @type {boolean}
             * @public
             */
            this.status = false;
        }
        /**
         * ngOnInit method
         * @returns void
         */
        BlockUiComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.service.loaderStatus.subscribe(function (blockui) {
                _this.status = blockui.status;
            });
        };
        /**
         * ngOnDestroy methods
         * @returns void
         */
        BlockUiComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        /**
         * isBlocked method
         * @returns boolean
         */
        BlockUiComponent.prototype.isBlocked = function () {
            return this.status;
        };
        /**
         * show method
         * @returns false
         */
        BlockUiComponent.prototype.show = function () {
            this.status = true;
        };
        /**
         * hide methods
         * @returns void
         */
        BlockUiComponent.prototype.hide = function () {
            this.status = false;
        };
        BlockUiComponent.ctorParameters = function () { return [
            { type: angularBase.BlockUiService }
        ]; };
        BlockUiComponent = __decorate([
            core.Component({
                selector: 'basis-block-ui',
                template: "<p-blockUI [blocked]=\"isBlocked()\">\n    <div class=\"center-screen\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n",
                styles: [".center-screen{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}"]
            })
        ], BlockUiComponent);
        return BlockUiComponent;
    }());

    /**
     * Class BlockUiModule
     * @class
     */
    var BlockUiModule = /** @class */ (function () {
        function BlockUiModule() {
        }
        BlockUiModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    primeng.BlockUIModule,
                    primeng.ProgressSpinnerModule,
                ],
                declarations: [
                    BlockUiComponent
                ],
                providers: [
                    {
                        provide: http.HTTP_INTERCEPTORS,
                        useClass: angularBase.BlockUiInterceptor,
                        multi: true
                    },
                    angularBase.BlockUiService
                ],
                exports: [
                    primeng.BlockUIModule,
                    BlockUiComponent,
                    primeng.ProgressSpinnerModule
                ]
            })
        ], BlockUiModule);
        return BlockUiModule;
    }());

    /**
     * Class PageNotificationComponent
     * @class
     */
    var PageNotificationComponent = /** @class */ (function () {
        function PageNotificationComponent() {
            /**
             * duration property
             * @type {number}
             */
            this.duration = 3000;
        }
        __decorate([
            core.Input()
        ], PageNotificationComponent.prototype, "duration", void 0);
        PageNotificationComponent = __decorate([
            core.Component({
                selector: 'basis-page-notification',
                template: "<p-toast></p-toast>\n"
            })
        ], PageNotificationComponent);
        return PageNotificationComponent;
    }());

    /**
     * Class PageNotificationModule
     * @class
     */
    var PageNotificationModule = /** @class */ (function () {
        function PageNotificationModule() {
        }
        PageNotificationModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    toast.ToastModule
                ],
                declarations: [
                    PageNotificationComponent
                ],
                exports: [
                    PageNotificationComponent
                ],
                providers: [
                    api.MessageService,
                    PageNotificationService,
                    {
                        provide: angularBase.NotificationProvider,
                        useExisting: PageNotificationService
                    }
                ]
            })
        ], PageNotificationModule);
        return PageNotificationModule;
    }());

    var FormNotificationComponent = /** @class */ (function (_super) {
        __extends(FormNotificationComponent, _super);
        function FormNotificationComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormNotificationComponent = __decorate([
            core.Component({
                selector: '[form-notification]',
                template: "<ng-content></ng-content>\n<div class=\"form-notification-msg ui-message ui-messages-error ui-corner-all\" >{{message}}</div>\n"
            })
        ], FormNotificationComponent);
        return FormNotificationComponent;
    }(angularBase.FormNotificationComponentSuperclass));

    /**
     * Módulo para adicionar funcionalidade de notificação de erros de formulários.
     * @module
     */
    var FormNotificationModule = /** @class */ (function () {
        function FormNotificationModule() {
        }
        FormNotificationModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    angularBase.FormNotificationBaseModule
                ],
                declarations: [
                    FormNotificationComponent
                ],
                exports: [
                    FormNotificationComponent
                ]
            })
        ], FormNotificationModule);
        return FormNotificationModule;
    }());

    /**
     * Class ErrorStackComponent
     * @class
     */
    var ErrorStackComponent = /** @class */ (function () {
        /**
         * constructor method
         * @constructor
         * @param {ErrorStackService} errorStack
         */
        function ErrorStackComponent(errorStack) {
            this.errorStack = errorStack;
            /**
             * title property
             * @type {string}
             */
            this.title = 'Error Stack';
            /**
             * errors property
             * @type {NamedErrorType}
             */
            this.errors = [];
        }
        /**
         * ngOnInit method
         * @returns void
         */
        ErrorStackComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.errorSubscription = this.errorStack.errors.subscribe(function (error) {
                _this.errors = __spread([error], _this.errors);
            });
        };
        /**
         * ngOnDestroy method
         * @returns void
         */
        ErrorStackComponent.prototype.ngOnDestroy = function () {
            this.errorSubscription.unsubscribe();
        };
        ErrorStackComponent.ctorParameters = function () { return [
            { type: angularBase.ErrorStackService }
        ]; };
        __decorate([
            core.Input()
        ], ErrorStackComponent.prototype, "title", void 0);
        __decorate([
            core.Input()
        ], ErrorStackComponent.prototype, "template", void 0);
        ErrorStackComponent = __decorate([
            core.Component({
                selector: 'basis-error-stack',
                template: "<ng-template #defaultTemplate>\n    <div class=\"ui-g\">\n        <div class=\"ui-g-12\">\n            <div class=\"card no-margin\">\n                <h1>{{ title }}</h1>\n                <p-table [value]=\"errors\" [paginator]=\"false\" [rows]=\"5\" first=\"0\">\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <th style=\"width: 20%; text-align: center\">Data</th>\n                            <th style=\"width: 20%; text-align: center\">C\u00F3digo de identifica\u00E7\u00E3o</th>\n                            <th>Mensagem</th>\n                            <th style=\"width: 10%; text-align: center\">A\u00E7\u00E3o</th>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-error>\n                        <tr>\n                            <td style=\"width: 20%; text-align: center\">{{error.createdAt|date: 'dd/MM/y H:mm:ss'}}</td>\n                            <td style=\"width: 20%; text-align: center\">{{error.correlationId || 'Indispon\u00EDvel'}}</td>\n                            <td>{{error.message}}</td>\n                            <td style=\"width: 10%; text-align: center\">\n                                <button pButton type=\"button\" pTooltip=\"Copiar erro para \u00E1rea de transfer\u00EAncia\" tooltipPosition=\"left\" class=\"ui-button-primary\" icon=\"ui-icon-content-copy\" [clipboard]=\"error.fullMessage\"></button>\n                            </td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\" let-columns>\n                        <tr>\n                            <td colspan=\"4\">\n                                Nenhum erro foi registrado at\u00E9 o momento.\n                            </td>\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template? template: defaultTemplate\"></ng-container>\n"
            })
        ], ErrorStackComponent);
        return ErrorStackComponent;
    }());

    /**
     * Class ErrorStackModule
     * @class
     */
    var ErrorStackModule = /** @class */ (function () {
        function ErrorStackModule() {
        }
        ErrorStackModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    table.TableModule,
                    primeng.ButtonModule,
                    primeng.TooltipModule,
                    angularBase.ClipboardModule
                ],
                declarations: [
                    ErrorStackComponent
                ],
                providers: [
                    angularBase.ErrorStackService,
                    {
                        provide: angularBase.ErrorProvider,
                        useClass: angularBase.ErrorStackProviderService,
                        multi: true
                    }
                ],
                exports: [
                    ErrorStackComponent
                ]
            })
        ], ErrorStackModule);
        return ErrorStackModule;
    }());

    var CrudFormComponent = /** @class */ (function () {
        function CrudFormComponent(route) {
            this.route = route;
            this.disableSave = false;
            this.listRoute = "../../list";
        }
        CrudFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.route.paramMap.subscribe(function (params) {
                _this.action = params.get('action');
                if (params.get('id')) {
                    _this.route.data.subscribe(function (data) {
                        if (data.value) {
                            _this.form.patchValue(data.value);
                        }
                    });
                }
                else {
                    _this.listRoute = "../list";
                }
                if (_this.action === "view") {
                    _this.form.disable();
                }
                else if (_this.form.disabled) {
                    _this.form.enable();
                }
            });
        };
        CrudFormComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute }
        ]; };
        __decorate([
            core.Input()
        ], CrudFormComponent.prototype, "form", void 0);
        __decorate([
            core.Input()
        ], CrudFormComponent.prototype, "service", void 0);
        __decorate([
            core.Input()
        ], CrudFormComponent.prototype, "disableSave", void 0);
        CrudFormComponent = __decorate([
            core.Component({
                selector: 'nCrudForm',
                template: "<nForm [form]=\"form\" [action]=\"action\" [route]=\"[listRoute]\" [disableSave]=\"disableSave\">\n    <ng-content></ng-content>\n    <div nButton class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\">\n        <button pButton type=\"button\" [routerLink]=\"[listRoute]\" label=\"Voltar\"></button>\n    </div>\n</nForm>\n"
            })
        ], CrudFormComponent);
        return CrudFormComponent;
    }());

    var CRUD_SERVICE = new core.InjectionToken("CRUD_SERVICE");

    var CrudListComponent = /** @class */ (function () {
        function CrudListComponent(crudService, confirmationService, route, router) {
            this.crudService = crudService;
            this.confirmationService = confirmationService;
            this.route = route;
            this.router = router;
            this.action = "findAll";
            this.findLabel = "Pesquisar";
            this.disableSave = false;
            this.disableEdit = false;
            this.disableView = false;
            this.disableDelete = false;
            this.find = new core.EventEmitter();
        }
        CrudListComponent.prototype.ngOnInit = function () {
            if (this.service) {
                this.crudService = this.service;
            }
            if (!this.url) {
                this.url = this.crudService.uri;
            }
        };
        CrudListComponent.prototype.datatableClick = function (event) {
            var _this = this;
            if (event.selection) {
                switch (event.button) {
                    case "edit":
                    case "view":
                        this.router.navigate(["../" + event.button, event.selection.id], { relativeTo: this.route });
                        break;
                    case "delete":
                        this.confirmationService.confirm({
                            message: 'Você tem certeza que deseja excluir o registro?',
                            accept: function () { return _this.crudService.delete(event.selection.id)
                                .subscribe(function () { return _this.datatable.filter(); }); }
                        });
                        break;
                }
            }
        };
        CrudListComponent.prototype.findAll = function (event) {
            var _this = this;
            if (this.find.observers.length) {
                this.find.emit(this.form.value);
            }
            else {
                this.datatable.filterParams = {};
                Object.keys(this.form.value).forEach(function (element) {
                    var value = _this.form.value[element];
                    if (value) {
                        _this.datatable.filterParams[element] =
                            value instanceof Date ? JSON.stringify(value).replace(/"/g, "") : value;
                    }
                });
                this.datatable.filter();
            }
        };
        CrudListComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            var datatableNgAfterContentInit = this.datatable.pDatatableComponent.ngAfterContentInit;
            this.datatable.pDatatableComponent.ngAfterContentInit = function () {
                _this.datatable.pDatatableComponent.columns = _this.columns.toArray();
                datatableNgAfterContentInit.call(_this.datatable.pDatatableComponent);
            };
        };
        CrudListComponent.prototype.ngAfterViewInit = function () {
            for (var i in this.datatableExtraParams) {
                this.datatable[i] = this.datatableExtraParams[i];
            }
        };
        CrudListComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [CRUD_SERVICE,] }] },
            { type: api.ConfirmationService },
            { type: router.ActivatedRoute },
            { type: router.Router }
        ]; };
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "form", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "action", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "findLabel", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "service", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "url", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "disableSave", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "disableEdit", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "disableView", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "disableDelete", void 0);
        __decorate([
            core.Input()
        ], CrudListComponent.prototype, "datatableExtraParams", void 0);
        __decorate([
            core.Output()
        ], CrudListComponent.prototype, "find", void 0);
        __decorate([
            core.ViewChild('datatable', { static: true })
        ], CrudListComponent.prototype, "datatable", void 0);
        __decorate([
            core.ContentChildren(Column)
        ], CrudListComponent.prototype, "columns", void 0);
        CrudListComponent = __decorate([
            core.Component({
                selector: 'nCrudList',
                template: "<nForm [form]=\"form\" (save)=\"findAll($event)\" [saveLabel]=\"findLabel\">\n    <ng-content select=\"[nForm]\"></ng-content>\n    <div nButton class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\">\n        <button pButton type=\"button\" [routerLink]=\"['../save']\" label=\"Novo\" *ngIf=\"!disableSave\"></button>\n    </div>\n</nForm>\n\n<basis-datatable #datatable [value]=\"result\" (buttonClick)=\"datatableClick($event)\" [url]=\"url\"\n    [disableEdit]=\"disableEdit\" [disableView]=\"disableView\" [disableDelete]=\"disableDelete\">\n    <ng-content select=\"p-column\"></ng-content>\n</basis-datatable>\n\n<p-confirmDialog header=\"Confirmar Exclus\u00E3o\" acceptLabel=\"Sim\" rejectLabel=\"N\u00E3o\" icon=\"pi pi-exclamation-triangle\"></p-confirmDialog>\n"
            }),
            __param(0, core.Inject(CRUD_SERVICE))
        ], CrudListComponent);
        return CrudListComponent;
    }());

    var CrudResolveGuard = /** @class */ (function () {
        function CrudResolveGuard(crudService) {
            this.crudService = crudService;
        }
        CrudResolveGuard.prototype.resolve = function (route) {
            return this.crudService.find(route.paramMap.get('id'));
        };
        CrudResolveGuard.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [CRUD_SERVICE,] }] }
        ]; };
        CrudResolveGuard = __decorate([
            core.Injectable(),
            __param(0, core.Inject(CRUD_SERVICE))
        ], CrudResolveGuard);
        return CrudResolveGuard;
    }());

    function crudRouteBuilder(route, parent, list, form) {
        return {
            path: route,
            component: parent,
            data: { breadcrumb: route },
            children: [
                {
                    path: 'list',
                    component: list,
                    data: { breadcrumb: 'list' },
                },
                {
                    path: ':action',
                    component: form,
                    data: { breadcrumb: ':action' },
                },
                {
                    path: ':action/:id',
                    component: form,
                    resolve: {
                        value: CrudResolveGuard
                    },
                    data: { breadcrumb: ':action' },
                }
            ]
        };
    }

    var CrudServiceNuvem = /** @class */ (function () {
        function CrudServiceNuvem(uri, http) {
            this.uri = uri;
            this.http = http;
        }
        CrudServiceNuvem.prototype.save = function (entity) {
            return this.http.post(this.uri, entity);
        };
        CrudServiceNuvem.prototype.edit = function (entity) {
            return this.http.put(this.uri, entity);
        };
        CrudServiceNuvem.prototype.find = function (id) {
            return this.http.get(this.uri + "/" + id);
        };
        CrudServiceNuvem.prototype.delete = function (id) {
            return this.http.delete(this.uri + "/" + id);
        };
        CrudServiceNuvem.prototype.findAll = function (entity) {
            var params = new http.HttpParams();
            for (var field in entity) {
                params = params.append(field, entity[field]);
            }
            return this.http.get("" + this.uri, { params: params });
        };
        return CrudServiceNuvem;
    }());

    var STATUS;
    (function (STATUS) {
        STATUS[STATUS["OK"] = 200] = "OK";
        STATUS[STATUS["CREATED"] = 201] = "CREATED";
    })(STATUS || (STATUS = {}));
    var SuccessMessageHandlerInterceptor = /** @class */ (function () {
        function SuccessMessageHandlerInterceptor(notification) {
            this.notification = notification;
        }
        SuccessMessageHandlerInterceptor.prototype.intercept = function (req, next) {
            var _this = this;
            return next.handle(req).pipe(operators.tap(function (event) {
                if (event instanceof http.HttpResponse) {
                    if (event.headers.has("X-nuvem-alert")) {
                        _this.notification.addSuccessMessage(event.headers.get("X-nuvem-alert"));
                    }
                    else if ((event.status === STATUS.OK || event.status === STATUS.CREATED) && req.method != "GET") {
                        _this.notification.addSuccessMessage("Operação realizada com sucesso!");
                    }
                }
            }));
        };
        SuccessMessageHandlerInterceptor.ctorParameters = function () { return [
            { type: PageNotificationService }
        ]; };
        SuccessMessageHandlerInterceptor.ɵprov = core.ɵɵdefineInjectable({ factory: function SuccessMessageHandlerInterceptor_Factory() { return new SuccessMessageHandlerInterceptor(core.ɵɵinject(PageNotificationService)); }, token: SuccessMessageHandlerInterceptor, providedIn: "root" });
        SuccessMessageHandlerInterceptor = __decorate([
            core.Injectable({ providedIn: 'root' })
        ], SuccessMessageHandlerInterceptor);
        return SuccessMessageHandlerInterceptor;
    }());
    var httpInterceptorProviders = [
        { provide: http.HTTP_INTERCEPTORS, useClass: SuccessMessageHandlerInterceptor, multi: true },
    ];

    var FieldComponent = /** @class */ (function (_super) {
        __extends(FieldComponent, _super);
        function FieldComponent(controlContainer, injector) {
            var _this = _super.call(this, injector) || this;
            _this.controlContainer = controlContainer;
            _this.injector = injector;
            _this.onBlur = new core.EventEmitter();
            _this.onSelect = new core.EventEmitter();
            _this.onFocus = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(FieldComponent.prototype, "name", {
            get: function () {
                return this._name ? this._name : this.formControlName;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldComponent.prototype, "label", {
            get: function () {
                return this.required ? this._label + "*" : this._label;
            },
            set: function (value) {
                this._label = value;
            },
            enumerable: true,
            configurable: true
        });
        FieldComponent.prototype.ngOnInit = function () {
            this.setValidators();
            this.setRequired();
        };
        FieldComponent.prototype.setRequired = function () {
            if (this.required) {
                if (this.input instanceof core.ElementRef) {
                    this.input.nativeElement.required = true;
                }
                else {
                    this.input.required = true;
                }
            }
        };
        FieldComponent.prototype.setElementRefAttr = function (attr, value) {
            if (value && this.input instanceof core.ElementRef) {
                this.input.nativeElement[attr] = value;
            }
        };
        FieldComponent.prototype.setFormControlValidators = function () {
            if (this.controlContainer && this.formControlName) {
                var validator = this.controlContainer.control.get(this.formControlName).validator;
                if (validator) {
                    this.formControl.setValidators(validator);
                }
            }
        };
        FieldComponent.prototype.setValidators = function () {
            if (this.controlContainer && this.formControlName) {
                var validator = this.controlContainer.control.get(this.formControlName).validator;
                if (validator) {
                    this.formControl.setValidators(validator);
                }
            }
        };
        FieldComponent.prototype.ngAfterViewInit = function () {
            for (var i in this.extraParams) {
                this.input[i] = this.extraParams[i];
            }
        };
        FieldComponent.prototype.onBlurEvent = function (event) {
            this.onBlur.emit(event);
        };
        FieldComponent.prototype.onSelectEvent = function (event) {
            this.onSelect.emit(event);
        };
        FieldComponent.prototype.onFocusEvent = function (event) {
            this.onFocus.emit(event);
        };
        FieldComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer },
            { type: core.Injector }
        ]; };
        __decorate([
            core.Input()
        ], FieldComponent.prototype, "form", void 0);
        __decorate([
            core.Input()
        ], FieldComponent.prototype, "formControlName", void 0);
        __decorate([
            core.Input()
        ], FieldComponent.prototype, "extraParams", void 0);
        __decorate([
            core.Input()
        ], FieldComponent.prototype, "required", void 0);
        __decorate([
            core.Output()
        ], FieldComponent.prototype, "onBlur", void 0);
        __decorate([
            core.Output()
        ], FieldComponent.prototype, "onSelect", void 0);
        __decorate([
            core.Output()
        ], FieldComponent.prototype, "onFocus", void 0);
        __decorate([
            core.ViewChild("input", { static: false })
        ], FieldComponent.prototype, "input", void 0);
        __decorate([
            core.Input()
        ], FieldComponent.prototype, "name", null);
        __decorate([
            core.Input()
        ], FieldComponent.prototype, "label", null);
        FieldComponent = __decorate([
            core.Directive({
                selector: "[nField]"
            })
        ], FieldComponent);
        return FieldComponent;
    }(angularBase.WrappedFormControlSuperclass));

    var InputTextComponent = /** @class */ (function (_super) {
        __extends(InputTextComponent, _super);
        function InputTextComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = "text";
            return _this;
        }
        InputTextComponent_1 = InputTextComponent;
        InputTextComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.setElementRefAttr("min", this.min);
            this.setElementRefAttr("max", this.max);
            this.setElementRefAttr("minLength", this.minLength);
            this.setElementRefAttr("maxLength", this.maxLength);
            this.setElementRefAttr("pattern", this.pattern);
        };
        var InputTextComponent_1;
        __decorate([
            core.Input()
        ], InputTextComponent.prototype, "minLength", void 0);
        __decorate([
            core.Input()
        ], InputTextComponent.prototype, "maxLength", void 0);
        __decorate([
            core.Input()
        ], InputTextComponent.prototype, "min", void 0);
        __decorate([
            core.Input()
        ], InputTextComponent.prototype, "max", void 0);
        __decorate([
            core.Input()
        ], InputTextComponent.prototype, "pattern", void 0);
        __decorate([
            core.Input()
        ], InputTextComponent.prototype, "type", void 0);
        InputTextComponent = InputTextComponent_1 = __decorate([
            core.Component({
                selector: "[nInputText]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <input #input\n        pInputText\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        [type]=\"type\"\n        [name]=\"name\"\n        (blur)=\"onBlurEvent($event)\"\n        (focus)=\"onFocusEvent($event)\"\n        [formControl]=\"formControl\" />\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [angularBase.provideValueAccessor(InputTextComponent_1)]
            })
        ], InputTextComponent);
        return InputTextComponent;
    }(FieldComponent));

    var CALENDAR_LOCALE = {
        firstDayOfWeek: 0,
        dayNames: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
        dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
        dayNamesMin: ["D", "S", "T", "Q", "Q", "S", "S"],
        monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
        today: 'Hoje',
        clear: 'Limpar',
        dateFormat: 'dd/mm/yy',
        weekHeader: 'Semana'
    };

    var CalendarComponent = /** @class */ (function (_super) {
        __extends(CalendarComponent, _super);
        function CalendarComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.maxDate = null;
            _this.yearRange = null;
            _this.monthNavigator = false;
            _this.yearNavigator = false;
            _this.locale = CALENDAR_LOCALE;
            return _this;
        }
        CalendarComponent_1 = CalendarComponent;
        CalendarComponent.prototype.outerToInner = function (value) {
            return value ? new Date(value) : null;
        };
        var CalendarComponent_1;
        __decorate([
            core.Input()
        ], CalendarComponent.prototype, "maxDate", void 0);
        __decorate([
            core.Input()
        ], CalendarComponent.prototype, "yearRange", void 0);
        __decorate([
            core.Input()
        ], CalendarComponent.prototype, "monthNavigator", void 0);
        __decorate([
            core.Input()
        ], CalendarComponent.prototype, "yearNavigator", void 0);
        __decorate([
            core.Input()
        ], CalendarComponent.prototype, "locale", void 0);
        CalendarComponent = CalendarComponent_1 = __decorate([
            core.Component({
                selector: "[nCalendar]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-calendar #input\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        [name]=\"name\"\n        [formControl]=\"formControl\"\n        [locale]=\"locale\"\n        [dateFormat]=\"locale.dateFormat\"\n        [yearRange]=\"yearRange\"\n        [maxDate]=\"maxDate\"\n        [monthNavigator]=\"monthNavigator\"\n        [yearNavigator]=\"yearNavigator\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        (onSelect)=\"onSelectEvent($event)\">\n    </p-calendar>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [angularBase.provideValueAccessor(CalendarComponent_1)]
            })
        ], CalendarComponent);
        return CalendarComponent;
    }(FieldComponent));

    var TextAreaComponent = /** @class */ (function (_super) {
        __extends(TextAreaComponent, _super);
        function TextAreaComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.autoResize = false;
            return _this;
        }
        TextAreaComponent_1 = TextAreaComponent;
        var TextAreaComponent_1;
        __decorate([
            core.Input()
        ], TextAreaComponent.prototype, "autoResize", void 0);
        __decorate([
            core.Input()
        ], TextAreaComponent.prototype, "rows", void 0);
        __decorate([
            core.Input()
        ], TextAreaComponent.prototype, "cols", void 0);
        __decorate([
            core.Input()
        ], TextAreaComponent.prototype, "minLength", void 0);
        __decorate([
            core.Input()
        ], TextAreaComponent.prototype, "maxLength", void 0);
        TextAreaComponent = TextAreaComponent_1 = __decorate([
            core.Component({
                selector: "[nTextArea]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <textarea #input\n        pInputTextarea\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        type=\"text\"\n        [name]=\"name\"\n        [autoResize]=\"autoResize\"\n        [rows]=\"rows\"\n        [cols]=\"cols\"\n        [minLength]=\"minLength\"\n        [maxLength]=\"maxLength\"\n        [formControl]=\"formControl\"\n        (blur)=\"onBlurEvent($event)\"\n        (focus)=\"onFocusEvent($event)\">\n    </textarea>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [angularBase.provideValueAccessor(TextAreaComponent_1)]
            })
        ], TextAreaComponent);
        return TextAreaComponent;
    }(FieldComponent));

    var DropdownComponent = /** @class */ (function (_super) {
        __extends(DropdownComponent, _super);
        function DropdownComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.virtualScroll = false;
            _this.filter = false;
            _this.itemSize = 30;
            _this.options = [];
            _this.onChange = new core.EventEmitter();
            return _this;
        }
        DropdownComponent_1 = DropdownComponent;
        DropdownComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            if (this.service) {
                this.service.findAll(null).subscribe(function (data) {
                    _this.options = data;
                });
            }
        };
        DropdownComponent.prototype.onChangeEvent = function (event) {
            this.onChange.emit(event);
        };
        DropdownComponent.prototype.outerToInner = function (value) {
            var _this = this;
            if (value && value.id) {
                this.service.find(value.id).subscribe(function (data) {
                    _this.formControl.setValue(data);
                });
            }
            return value;
        };
        var DropdownComponent_1;
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "optionLabel", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "virtualScroll", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "filter", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "itemSize", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "service", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "options", void 0);
        __decorate([
            core.Output()
        ], DropdownComponent.prototype, "onChange", void 0);
        DropdownComponent = DropdownComponent_1 = __decorate([
            core.Component({
                selector: "[nDropdown]",
                template: "<span #notification form-notification class=\"md-inputfield custom-select\" [name]=\"name\" [form]=\"form\">\n    <p-dropdown #input\n        [formControl]=\"formControl\"\n        [optionLabel]=\"optionLabel\"\n        [options]=\"options\"\n        [filter]=\"filter\"\n        [virtualScroll]=\"virtualScroll\"\n        [itemSize]=\"itemSize\"\n        (onChange)=\"onChangeEvent($event)\">\n    </p-dropdown>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [angularBase.provideValueAccessor(DropdownComponent_1)]
            })
        ], DropdownComponent);
        return DropdownComponent;
    }(FieldComponent));

    var InputMaskComponent = /** @class */ (function (_super) {
        __extends(InputMaskComponent, _super);
        function InputMaskComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InputMaskComponent_1 = InputMaskComponent;
        var InputMaskComponent_1;
        __decorate([
            core.Input()
        ], InputMaskComponent.prototype, "mask", void 0);
        __decorate([
            core.Input()
        ], InputMaskComponent.prototype, "placeholder", void 0);
        InputMaskComponent = InputMaskComponent_1 = __decorate([
            core.Component({
                selector: "[nInputMask]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-inputMask #input\n        pInputText\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        [name]=\"name\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        [formControl]=\"formControl\"\n        [mask]=\"mask\"\n        [placeholder]=\"placeholder\"></p-inputMask>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [angularBase.provideValueAccessor(InputMaskComponent_1)]
            })
        ], InputMaskComponent);
        return InputMaskComponent;
    }(FieldComponent));

    var CheckComponent = /** @class */ (function (_super) {
        __extends(CheckComponent, _super);
        /**
         * Método construtor responsável por carregar o serviço de validação
         * @param formNotificationService
         */
        function CheckComponent(controlContainer, injector, formNotificationService) {
            var _this = _super.call(this, controlContainer, injector) || this;
            _this.formNotificationService = formNotificationService;
            return _this;
        }
        CheckComponent_1 = CheckComponent;
        /**
         * Método Inicial para subscrição no endpoint responsável por validar o formulário
         */
        CheckComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.subscription = this.formNotificationService
                .notifications(this.form, this.name)
                .subscribe(function (notification) {
                if (notification instanceof angularBase.FieldFormNotification) {
                    _this.message = notification.message;
                }
                else {
                    _this.message = null;
                }
            });
        };
        /**
         * Método responsável por realizar a saida das subscrições do endpont de validação
         */
        CheckComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.subscription.unsubscribe();
        };
        var CheckComponent_1;
        CheckComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer },
            { type: core.Injector },
            { type: angularBase.FormNotificationService }
        ]; };
        CheckComponent = CheckComponent_1 = __decorate([
            core.Component({
                selector: "[nCheck]",
                template: "<div class=\"ui-g-12 semborda\">\n    <div class=\"ui-g-4\" [innerHTML]=\"label\"></div>\n    <div class=\"ui-g-4\">\n        <p-radioButton\n            [ngClass]=\"{ 'ng-invalid ng-dirty': message }\"\n            id=\"sim\"\n            type=\"radio\"\n            [value]=\"true\"\n            [name]=\"name\"\n            [formControl]=\"formControl\"\n            pRadioButton></p-radioButton>\n        <label>Sim</label>\n    </div>\n    <div class=\"ui-g-4\">\n        <p-radioButton\n            [ngClass]=\"{ 'ng-invalid ng-dirty': message }\"\n            id=\"n\u00E3o\"\n            type=\"radio\"\n            [value]=\"false\"\n            name=\"correspondencia\"\n            [formControl]=\"formControl\"\n            pRadioButton></p-radioButton>\n        <label>N\u00E3o</label>\n    </div>\n    <ng-content></ng-content>\n</div>\n",
                providers: [angularBase.provideValueAccessor(CheckComponent_1)]
            })
        ], CheckComponent);
        return CheckComponent;
    }(FieldComponent));

    var FormComponent = /** @class */ (function () {
        function FormComponent(crudService, activatedRoute, router) {
            this.crudService = crudService;
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.action = "save";
            this.saveLabel = "Salvar";
            this.disableSave = false;
            this.save = new core.EventEmitter();
            this.reset = new core.EventEmitter();
        }
        FormComponent.prototype.ngOnInit = function () {
            if (this.service) {
                this.crudService = this.service;
            }
        };
        FormComponent.prototype.submit = function () {
            var _this = this;
            if (this.save.observers.length) {
                this.save.emit(this.form.value);
            }
            else {
                this.crudService[this.action](this.form.value)
                    .subscribe(function () {
                    if (_this.route) {
                        _this.router.navigate(_this.route, { relativeTo: _this.activatedRoute });
                    }
                    else if (_this.reset.observers.length) {
                        _this.reset.emit(_this.form);
                    }
                    else {
                        _this.form.reset();
                    }
                });
            }
        };
        FormComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [CRUD_SERVICE,] }] },
            { type: router.ActivatedRoute },
            { type: router.Router }
        ]; };
        __decorate([
            core.Input()
        ], FormComponent.prototype, "form", void 0);
        __decorate([
            core.Input()
        ], FormComponent.prototype, "route", void 0);
        __decorate([
            core.Input()
        ], FormComponent.prototype, "action", void 0);
        __decorate([
            core.Input()
        ], FormComponent.prototype, "saveLabel", void 0);
        __decorate([
            core.Input()
        ], FormComponent.prototype, "service", void 0);
        __decorate([
            core.Input()
        ], FormComponent.prototype, "disableSave", void 0);
        __decorate([
            core.Output()
        ], FormComponent.prototype, "save", void 0);
        __decorate([
            core.Output()
        ], FormComponent.prototype, "reset", void 0);
        FormComponent = __decorate([
            core.Component({
                selector: 'nForm',
                template: "<div>\n    <form (submit)=\"submit()\" class=\"ui-g form-group\">\n        <ng-content></ng-content>\n        <div class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\" *ngIf=\"!disableSave\">\n            <button pButton type=\"submit\" [label]=\"saveLabel\" [disabled]=\"form.disabled || form.invalid\"></button>\n        </div>\n        <ng-content select=\"[nButton]\"></ng-content>\n    </form>\n</div>"
            }),
            __param(0, core.Inject(CRUD_SERVICE))
        ], FormComponent);
        return FormComponent;
    }());

    var ValidationMessageComponent = /** @class */ (function () {
        function ValidationMessageComponent() {
        }
        __decorate([
            core.Input()
        ], ValidationMessageComponent.prototype, "control", void 0);
        ValidationMessageComponent = __decorate([
            core.Component({
                selector: 'nValidationMessage',
                template: "<ng-container *ngIf=\"control.invalid && (control.dirty || control.touched) && control.errors\">\n    <div class=\"form-notification-msg ui-message ui-messages-error ui-corner-all\" >\n        <ng-container *ngIf=\"control.errors.required\">\n            campo obrigat\u00F3rio\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.minlength\">\n            tamanho m\u00EDnimo {{ control.errors.minlength.requiredLength }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.maxlength\">\n            tamanho m\u00E1ximo {{ control.errors.maxlength.requiredLength }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.min\">\n            valor m\u00EDnimo {{ control.errors.min.min }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.max\">\n            valor m\u00E1ximo {{ control.errors.max.max }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.email || control.errors.pattern\">\n            campo inv\u00E1lido\n        </ng-container>\n    </div>\n</ng-container>\n"
            })
        ], ValidationMessageComponent);
        return ValidationMessageComponent;
    }());

    var AutoCompleteComponent = /** @class */ (function (_super) {
        __extends(AutoCompleteComponent, _super);
        function AutoCompleteComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.virtualScroll = false;
            _this.itemSize = 30;
            return _this;
        }
        AutoCompleteComponent_1 = AutoCompleteComponent;
        AutoCompleteComponent.prototype.selectItem = function (option) {
            this.formControl.setValue(option);
        };
        AutoCompleteComponent.prototype.findAll = function (event) {
            var _this = this;
            var query = {};
            query[this.field] = event.query;
            this.service.findAll(query).subscribe(function (data) {
                _this.results = data;
            });
        };
        AutoCompleteComponent.prototype.outerToInner = function (value) {
            var _this = this;
            if (value && value.id && !value[this.field]) {
                this.service.find(value.id).subscribe(function (data) {
                    _this.formControl.setValue(data);
                });
            }
            return value;
        };
        var AutoCompleteComponent_1;
        __decorate([
            core.Input()
        ], AutoCompleteComponent.prototype, "field", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteComponent.prototype, "virtualScroll", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteComponent.prototype, "itemSize", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteComponent.prototype, "service", void 0);
        AutoCompleteComponent = AutoCompleteComponent_1 = __decorate([
            core.Component({
                selector: "[nAutoComplete]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-autoCompleteCustom #input\n        [formControl]=\"formControl\"\n        [suggestions]=\"results\"\n        [virtualScroll]=\"virtualScroll\"\n        [itemSize]=\"itemSize\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onSelect)=\"onSelectEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        (completeMethod)=\"findAll($event)\"\n        [field]=\"field\">\n    </p-autoCompleteCustom>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [angularBase.provideValueAccessor(AutoCompleteComponent_1)]
            })
        ], AutoCompleteComponent);
        return AutoCompleteComponent;
    }(FieldComponent));

    var AUTOCOMPLETE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return AutoCompleteCustomComponent; }),
        multi: true
    };
    var AutoCompleteCustomComponent = /** @class */ (function (_super) {
        __extends(AutoCompleteCustomComponent, _super);
        function AutoCompleteCustomComponent(el, renderer, cd, differs) {
            var _this = _super.call(this, el, renderer, cd, differs) || this;
            _this.el = el;
            _this.renderer = renderer;
            _this.cd = cd;
            _this.differs = differs;
            return _this;
        }
        AutoCompleteCustomComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: core.IterableDiffers }
        ]; };
        __decorate([
            core.Input()
        ], AutoCompleteCustomComponent.prototype, "virtualScroll", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteCustomComponent.prototype, "itemSize", void 0);
        AutoCompleteCustomComponent = __decorate([
            core.Component({
                selector: 'p-autoCompleteCustom',
                template: "<span [ngClass]=\"{'ui-autocomplete ui-widget':true,'ui-autocomplete-dd':dropdown,'ui-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n    <input *ngIf=\"!multiple\" #in [attr.type]=\"type\" [attr.id]=\"inputId\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [autocomplete]=\"autocomplete\" [attr.required]=\"required\" [attr.name]=\"name\"\n        [ngClass]=\"'ui-inputtext ui-widget ui-state-default ui-corner-all ui-autocomplete-input'\" [value]=\"inputFieldValue\" aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\"\n        (click)=\"onInputClick($event)\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\"\n        [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\">\n\n    <ul *ngIf=\"multiple\" #multiContainer class=\"ui-autocomplete-multiple-container ui-widget ui-inputtext ui-state-default ui-corner-all\" [ngClass]=\"{'ui-state-disabled':disabled,'ui-state-focus':focus}\" (click)=\"multiIn.focus()\">\n        <li #token *ngFor=\"let val of value\" class=\"ui-autocomplete-token ui-state-highlight ui-corner-all\">\n            <span class=\"ui-autocomplete-token-icon pi pi-fw pi-times\" (click)=\"removeItem(token)\" *ngIf=\"!disabled\"></span>\n            <span *ngIf=\"!selectedItemTemplate\" class=\"ui-autocomplete-token-label\">{{resolveFieldData(val)}}</span>\n            <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: val}\"></ng-container>\n        </li>\n        <li class=\"ui-autocomplete-input-token\">\n            <input #multiIn [attr.type]=\"type\" [attr.id]=\"inputId\" [disabled]=\"disabled\" [attr.placeholder]=\"(value&&value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (input)=\"onInput($event)\"  (click)=\"onInputClick($event)\"\n                (keydown)=\"onKeydown($event)\" [readonly]=\"readonly\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\" [autocomplete]=\"autocomplete\"\n                [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n                aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\">\n        </li>\n    </ul>\n\n    <i *ngIf=\"loading\" class=\"ui-autocomplete-loader pi pi-spinner pi-spin\"></i>\n    <button #ddBtn type=\"button\" pButton [icon]=\"dropdownIcon\" class=\"ui-autocomplete-dropdown\" [disabled]=\"disabled\"\n        (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\" [attr.tabindex]=\"tabindex\">\n    </button>\n\n    <div #panel *ngIf=\"overlayVisible\" [ngClass]=\"['ui-autocomplete-panel ui-widget ui-widget-content ui-corner-all ui-shadow']\"\n        [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\"\n        [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationDone($event)\">\n        <ul role=\"listbox\" class=\"ui-autocomplete-items ui-autocomplete-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\">\n            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                <p-autoCompleteItem *ngFor=\"let option of suggestions; let idx = index\"\n                    [option]=\"option\" [(highlightOption)]=\"highlightOption\" [index]=\"idx\"\n                    (onClick)=\"selectItem($event.option)\" [itemSize]=\"itemSize\"\n                    [template]=\"itemTemplate\" [resolvedFieldData]=\"resolveFieldData(option)\">\n                </p-autoCompleteItem>\n            </ng-container>\n            <ng-template #virtualScrollList>\n                <cdk-virtual-scroll-viewport *ngIf=\"virtualScroll && suggestions && suggestions.length\"\n                    [ngStyle]=\"{height: scrollHeight}\" [itemSize]=\"itemSize\">\n                    <ng-container *cdkVirtualFor=\"let option of suggestions; let idx = index\">\n                        <p-autoCompleteItem\n                            [option]=\"option\" [(highlightOption)]=\"highlightOption\" [index]=\"idx\"\n                            (onClick)=\"selectItem($event.option)\" [itemSize]=\"itemSize\"\n                            [template]=\"itemTemplate\" [resolvedFieldData]=\"resolveFieldData(option)\"\n                        ></p-autoCompleteItem>\n                    </ng-container>\n                </cdk-virtual-scroll-viewport>\n            </ng-template>\n\n            <li *ngIf=\"noResults && emptyMessage\" class=\"ui-autocomplete-emptymessage ui-autocomplete-list-item ui-corner-all\">{{emptyMessage}}</li>\n        </ul>\n    </div>\n</span>\n",
                providers: [AUTOCOMPLETE_VALUE_ACCESSOR]
            })
        ], AutoCompleteCustomComponent);
        return AutoCompleteCustomComponent;
    }(autocomplete.AutoComplete));

    var AutoCompleteItem = /** @class */ (function () {
        function AutoCompleteItem() {
            this.highlightOptionChange = new core.EventEmitter();
            this.onClick = new core.EventEmitter();
        }
        AutoCompleteItem.prototype.selectItem = function (event) {
            this.onClick.emit({
                originalEvent: event,
                option: this.option
            });
        };
        __decorate([
            core.Input()
        ], AutoCompleteItem.prototype, "option", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteItem.prototype, "resolvedFieldData", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteItem.prototype, "highlightOption", void 0);
        __decorate([
            core.Output()
        ], AutoCompleteItem.prototype, "highlightOptionChange", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteItem.prototype, "index", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteItem.prototype, "itemSize", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteItem.prototype, "template", void 0);
        __decorate([
            core.Output()
        ], AutoCompleteItem.prototype, "onClick", void 0);
        AutoCompleteItem = __decorate([
            core.Component({
                selector: 'p-autoCompleteItem',
                template: "\n        <li role=\"option\" [ngClass]=\"{'ui-autocomplete-list-item ui-corner-all':true,'ui-state-highlight':(highlightOption==option)}\"\n            (mouseenter)=\"highlightOptionChange.emit(option)\" (mouseleave)=\"highlightOptionChange.emit(null)\"\n            [id]=\"highlightOption == option ? 'p-highlighted-option':''\" (click)=\"selectItem($event)\"\n            [ngStyle]=\"{'height': itemSize + 'px', 'display': 'table', 'width': '100%'}\">\n            <span *ngIf=\"!template\">{{resolvedFieldData}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option, index: index}\"></ng-container>\n        </li>\n    "
            })
        ], AutoCompleteItem);
        return AutoCompleteItem;
    }());

    var AutoCompleteMultipleComponent = /** @class */ (function (_super) {
        __extends(AutoCompleteMultipleComponent, _super);
        function AutoCompleteMultipleComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.virtualScroll = false;
            _this.itemSize = 30;
            return _this;
        }
        AutoCompleteMultipleComponent_1 = AutoCompleteMultipleComponent;
        AutoCompleteMultipleComponent.prototype.findAll = function (event) {
            var _this = this;
            var query = {};
            query[this.field] = event.query;
            this.service.findAll(query).subscribe(function (data) {
                _this.results = data;
            });
        };
        AutoCompleteMultipleComponent.prototype.outerToInner = function (value) {
            var _this = this;
            if (value && value.length > 0 && !value[0][this.field]) {
                var obs_1 = [];
                value.forEach(function (element) {
                    if (element && element.id) {
                        obs_1.push(_this.service.find(element.id));
                    }
                });
                rxjs.forkJoin(obs_1).subscribe(function (data) {
                    _this.formControl.setValue(data);
                });
            }
            return value;
        };
        var AutoCompleteMultipleComponent_1;
        __decorate([
            core.Input()
        ], AutoCompleteMultipleComponent.prototype, "field", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteMultipleComponent.prototype, "service", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteMultipleComponent.prototype, "virtualScroll", void 0);
        __decorate([
            core.Input()
        ], AutoCompleteMultipleComponent.prototype, "itemSize", void 0);
        AutoCompleteMultipleComponent = AutoCompleteMultipleComponent_1 = __decorate([
            core.Component({
                selector: "[nAutoCompleteMultiple]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-autoCompleteCustom #input\n        [formControl]=\"formControl\"\n        [suggestions]=\"results\"\n        (completeMethod)=\"findAll($event)\"\n        [field]=\"field\"\n        [virtualScroll]=\"virtualScroll\"\n        [itemSize]=\"itemSize\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onSelect)=\"onSelectEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        [multiple]=\"true\">\n    </p-autoCompleteCustom>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [angularBase.provideValueAccessor(AutoCompleteMultipleComponent_1)]
            })
        ], AutoCompleteMultipleComponent);
        return AutoCompleteMultipleComponent;
    }(FieldComponent));

    var CheckPipe = /** @class */ (function () {
        function CheckPipe() {
        }
        CheckPipe.prototype.transform = function (value) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return value ? "Sim" : "Não";
        };
        CheckPipe = __decorate([
            core.Pipe({
                name: "check"
            })
        ], CheckPipe);
        return CheckPipe;
    }());

    var CrudModule = /** @class */ (function () {
        function CrudModule() {
        }
        CrudModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    FormNotificationModule,
                    inputtext.InputTextModule,
                    inputtextarea.InputTextareaModule,
                    calendar.CalendarModule,
                    primeng.AutoCompleteModule,
                    button.ButtonModule,
                    DatatableModule,
                    http.HttpClientModule,
                    router.RouterModule,
                    confirmdialog.ConfirmDialogModule,
                    dropdown.DropdownModule,
                    scrolling.ScrollingModule,
                    inputmask.InputMaskModule,
                    radiobutton.RadioButtonModule,
                ],
                declarations: [
                    CalendarComponent,
                    InputTextComponent,
                    TextAreaComponent,
                    FormComponent,
                    AutoCompleteComponent,
                    AutoCompleteMultipleComponent,
                    CrudListComponent,
                    CrudFormComponent,
                    FieldComponent,
                    ValidationMessageComponent,
                    DropdownComponent,
                    AutoCompleteItem,
                    AutoCompleteCustomComponent,
                    CheckComponent,
                    InputMaskComponent,
                    CheckPipe,
                ],
                exports: [
                    CalendarComponent,
                    InputTextComponent,
                    TextAreaComponent,
                    FormComponent,
                    AutoCompleteComponent,
                    AutoCompleteMultipleComponent,
                    CrudListComponent,
                    CrudFormComponent,
                    FieldComponent,
                    ValidationMessageComponent,
                    DropdownComponent,
                    CheckComponent,
                    InputMaskComponent,
                    CheckPipe,
                ],
                providers: [
                    httpInterceptorProviders,
                    api.ConfirmationService,
                ]
            })
        ], CrudModule);
        return CrudModule;
    }());

    var BreadcrumbService = /** @class */ (function () {
        function BreadcrumbService() {
            this.itemsSource = new rxjs.Subject();
            this.itemsHandler = this.itemsSource.asObservable();
        }
        BreadcrumbService.prototype.setItems = function (items) {
            this.itemsSource.next(items);
        };
        BreadcrumbService.prototype.reset = function () {
            this.itemsSource.next([]);
        };
        BreadcrumbService = __decorate([
            core.Injectable()
        ], BreadcrumbService);
        return BreadcrumbService;
    }());

    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent(router, activatedRoute, breadcrumbService, messages, accessibilityService) {
            var _this = this;
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.breadcrumbService = breadcrumbService;
            this.messages = messages;
            this.accessibilityService = accessibilityService;
            this.highContrastEnabled = false;
            this.subscription = breadcrumbService.itemsHandler.subscribe(function (response) {
                _this.items = response;
            });
        }
        BreadcrumbComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.router.events.pipe(operators.filter(function (event) { return event instanceof router.NavigationEnd; }), operators.distinctUntilChanged()).subscribe(function (event) {
                _this.items = _this.buildBreadCrumb(_this.activatedRoute.root);
            });
        };
        BreadcrumbComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        BreadcrumbComponent.prototype.enableHighContrast = function () {
            this.highContrastEnabled = true;
            this.accessibilityService.enableHighContrast();
        };
        BreadcrumbComponent.prototype.disableHighContrast = function () {
            this.highContrastEnabled = false;
            this.accessibilityService.disableHighContrast();
        };
        BreadcrumbComponent.prototype.increaseFontSize = function () {
            this.accessibilityService.increaseFontSize();
        };
        BreadcrumbComponent.prototype.decreaseFontSize = function () {
            this.accessibilityService.decreaseFontSize();
        };
        BreadcrumbComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.messages.messageObserver.subscribe(function (msg) {
                _this.accessibilityService.addAccessibilityMessages({ severity: msg.severity });
            });
            this.accessibilityService.addAccessibilityIcons();
        };
        BreadcrumbComponent.prototype.buildBreadCrumb = function (route, url, breadcrumbs) {
            if (url === void 0) { url = ''; }
            if (breadcrumbs === void 0) { breadcrumbs = []; }
            var label = route.routeConfig && route.routeConfig.data ? route.routeConfig.data.breadcrumb : '';
            var path = route.routeConfig && route.routeConfig.data ? route.routeConfig.path : '';
            var lastRoutePart = path.split('/').pop();
            var isDynamicRoute = lastRoutePart.startsWith(':');
            if (isDynamicRoute && !!route.snapshot) {
                for (var key in route.snapshot.params) {
                    path = path.replace(":" + key, route.snapshot.params[key]);
                }
                label = Object.values(route.snapshot.params).join(' ');
            }
            var nextUrl = path ? url + "/" + path : url;
            var menuItem = {
                "label": label,
                "routerLink": nextUrl
            };
            var newBreadcrumbs = menuItem.label ? __spread(breadcrumbs, [menuItem]) : __spread(breadcrumbs);
            if (route.firstChild) {
                return this.buildBreadCrumb(route.firstChild, nextUrl, newBreadcrumbs);
            }
            return newBreadcrumbs;
        };
        BreadcrumbComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: router.ActivatedRoute },
            { type: BreadcrumbService },
            { type: primeng.MessageService },
            { type: angularBase.AccessbilityService }
        ]; };
        BreadcrumbComponent = __decorate([
            core.Component({
                selector: 'breadcrumb',
                template: "<div class=\"layout-breadcrumb\">\n    <ul>\n        <li>\n            <a routerLink=\"\">\n                <i class=\"material-icons\">home</i>\n            </a>\n        </li>\n        <li>/</li>\n        <ng-template ngFor let-item let-last=\"last\" [ngForOf]=\"items\">\n            <li>\n                <a [routerLink]=\"item.routerLink\" *ngIf=\"item.routerLink\">{{item.label}}</a>\n\n                <ng-container *ngIf=\"!item.routerLink\">{{item.label}}</ng-container>\n            </li>\n            <li *ngIf=\"!last\">/</li>\n        </ng-template>\n    </ul>\n    <div class=\"layout-breadcrumb-options\">\n        <a (click)=\"highContrastEnabled ? disableHighContrast() : enableHighContrast()\" [ngStyle]=\"{'cursor': 'pointer'}\"\n            title=\"{{ highContrastEnabled ? 'Desabilitar alto contraste' : 'Habilitar alto contraste' }}\">\n            <i class=\"material-icons\">{{ highContrastEnabled ? 'visibility_off' : 'visibility' }}</i>\n        </a>\n        <a (click)=\"increaseFontSize()\" title=\"Aumentar fonte\" [ngStyle]=\"{'cursor': 'pointer'}\">\n            <i class=\"material-icons\">exposure_plus_1</i>\n        </a>\n        <a (click)=\"decreaseFontSize()\" title=\"Diminuir fonte\" [ngStyle]=\"{'cursor': 'pointer'}\">\n            <i class=\"material-icons\">exposure_neg_1</i>\n        </a>\n    </div>\n    <ng-content></ng-content>\n</div>\n",
                styles: [""]
            })
        ], BreadcrumbComponent);
        return BreadcrumbComponent;
    }());

    var BreadcrumbModule = /** @class */ (function () {
        function BreadcrumbModule() {
        }
        BreadcrumbModule = __decorate([
            core.NgModule({
                declarations: [BreadcrumbComponent],
                imports: [
                    common.CommonModule,
                    router.RouterModule
                ],
                exports: [
                    BreadcrumbComponent
                ],
                providers: [
                    BreadcrumbService
                ]
            })
        ], BreadcrumbModule);
        return BreadcrumbModule;
    }());


    (function (MenuOrientation) {
        MenuOrientation[MenuOrientation["STATIC"] = 0] = "STATIC";
        MenuOrientation[MenuOrientation["OVERLAY"] = 1] = "OVERLAY";
        MenuOrientation[MenuOrientation["SLIM"] = 2] = "SLIM";
        MenuOrientation[MenuOrientation["HORIZONTAL"] = 3] = "HORIZONTAL";
    })(exports.MenuOrientation || (exports.MenuOrientation = {}));
    /**
     * Class MenuService
     * @class
     */
    var MenusService = /** @class */ (function () {
        function MenusService() {
            this.layoutMode = exports.MenuOrientation.STATIC;
            this.itens = [];
        }
        MenusService.prototype.isOverlay = function () {
            return this.layoutMode === exports.MenuOrientation.OVERLAY;
        };
        MenusService.prototype.isHorizontal = function () {
            return this.layoutMode === exports.MenuOrientation.HORIZONTAL;
        };
        MenusService.prototype.isSlim = function () {
            return this.layoutMode === exports.MenuOrientation.SLIM;
        };
        MenusService.prototype.changeToStaticMenu = function () {
            this.layoutMode = exports.MenuOrientation.STATIC;
        };
        MenusService.prototype.changeToOverlayMenu = function () {
            this.layoutMode = exports.MenuOrientation.OVERLAY;
        };
        MenusService.prototype.changeToHorizontalMenu = function () {
            this.layoutMode = exports.MenuOrientation.HORIZONTAL;
        };
        MenusService.prototype.changeToSlimMenu = function () {
            this.layoutMode = exports.MenuOrientation.SLIM;
        };
        MenusService.ɵprov = core.ɵɵdefineInjectable({ factory: function MenusService_Factory() { return new MenusService(); }, token: MenusService, providedIn: "root" });
        MenusService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], MenusService);
        return MenusService;
    }());

    var MenuComponent = /** @class */ (function () {
        function MenuComponent(menuService) {
            this.menuService = menuService;
        }
        MenuComponent.ctorParameters = function () { return [
            { type: MenusService }
        ]; };
        MenuComponent = __decorate([
            core.Component({
                selector: 'app-menu',
                template: "<ul submenu\n    [item]=\"menuService.itens\"\n    root=\"true\"\n    class=\"ultima-menu ultima-main-menu clearfix\"\n    [reset]=\"menuService.resetMenu\"\n    visible=\"true\"\n    parentActive=\"true\">\n</ul>\n"
            })
        ], MenuComponent);
        return MenuComponent;
    }());

    var SubMenuComponent = /** @class */ (function () {
        function SubMenuComponent(menuService) {
            this.menuService = menuService;
        }
        /**
         * Alterar o menu root entre aberto e fechado
         */
        SubMenuComponent.prototype.rootMenuToggle = function () {
            if (this.root) {
                this.menuService.menuHoverActive = !this.menuService.menuHoverActive;
            }
        };
        /**
         * Activa o menu por index e desativa o item ativo
         * @param index
         */
        SubMenuComponent.prototype.activeMenuByIndex = function (index) {
            this.activeIndex = (this.activeIndex === index) ? null : index;
            return this.activeIndex;
        };
        /**
         * Verifica se foi informado um comando para o item de menu e executa caso necessário
         * @param item menu
         */
        SubMenuComponent.prototype.execCommand = function (event, item) {
            if (item.command) {
                item.command({ 'originalEvent': event, 'item': item });
                return true;
            }
            return false;
        };
        /**
         * Esconte o menu caso este não possua itens
         * @param item menu
         */
        SubMenuComponent.prototype.hideMenu = function (item) {
            if (!item.items) {
                if (this.menuService.isHorizontal() || this.menuService.isSlim()) {
                    this.menuService.resetMenu = true;
                }
                else {
                    this.menuService.resetMenu = false;
                }
                this.menuService.overlayMenuActive = false;
                this.menuService.staticMenuMobileActive = false;
                this.menuService.menuHoverActive = !this.menuService.menuHoverActive;
                return true;
            }
            return false;
        };
        SubMenuComponent.prototype.itemClick = function (event, item, index) {
            this.rootMenuToggle();
            if (item.disabled) {
                event.preventDefault();
                return false;
            }
            this.activeMenuByIndex(index);
            this.execCommand(event, item);
            if (item.items || (!item.url && !item.routerLink)) {
                event.preventDefault();
            }
            this.hideMenu(item);
            return true;
        };
        SubMenuComponent.prototype.onMouseEnter = function (index) {
            if (this.root && this.menuService.menuHoverActive && (this.menuService.isHorizontal() || this.menuService.isSlim())) {
                this.activeIndex = index;
            }
        };
        SubMenuComponent.prototype.isActive = function (index) {
            return this.activeIndex === index;
        };
        Object.defineProperty(SubMenuComponent.prototype, "reset", {
            get: function () {
                return this._reset;
            },
            set: function (val) {
                this._reset = val;
                if (this._reset && (this.menuService.isHorizontal() || this.menuService.isSlim())) {
                    this.activeIndex = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SubMenuComponent.prototype, "parentActive", {
            get: function () {
                return this._parentActive;
            },
            set: function (val) {
                this._parentActive = val;
                if (!this._parentActive) {
                    this.activeIndex = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        SubMenuComponent.ctorParameters = function () { return [
            { type: MenusService }
        ]; };
        __decorate([
            core.Input()
        ], SubMenuComponent.prototype, "item", void 0);
        __decorate([
            core.Input()
        ], SubMenuComponent.prototype, "root", void 0);
        __decorate([
            core.Input()
        ], SubMenuComponent.prototype, "visible", void 0);
        __decorate([
            core.Input()
        ], SubMenuComponent.prototype, "reset", null);
        __decorate([
            core.Input()
        ], SubMenuComponent.prototype, "parentActive", null);
        SubMenuComponent = __decorate([
            core.Component({
                selector: '[submenu]',
                template: "<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n    <li [ngClass]=\"{'active-menuitem': isActive(i)}\"\n        [class]=\"child.badgeStyleClass\"\n        *ngIf=\"child.visible === false ? false : true\">\n        <a [href]=\"child.url||'#'\" (click)=\"itemClick($event,child,i)\" (mouseenter)=\"onMouseEnter(i)\"\n           class=\"ripplelink\" *ngIf=\"!child.routerLink\"\n            [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n            <i *ngIf=\"child.icon\" class=\"material-icons\">{{child.icon}}</i>\n            <span>{{child.label}}</span>\n            <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n            <i class=\"material-icons submenu-icon\" *ngIf=\"child.items\">keyboard_arrow_down</i>\n        </a>\n\n        <a (click)=\"itemClick($event,child,i)\"\n            (mouseenter)=\"onMouseEnter(i)\"\n            class=\"ripplelink\"\n            *ngIf=\"child.routerLink\"\n            [routerLink]=\"child.routerLink\"\n            routerLinkActive=\"active-menuitem-routerlink\"\n            [routerLinkActiveOptions]=\"{exact: true}\" [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n            <i *ngIf=\"child.icon\" class=\"material-icons\">{{child.icon}}</i>\n            <span>{{child.label}}</span>\n            <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n            <i class=\"material-icons submenu-icon\" *ngIf=\"child.items\">keyboard_arrow_down</i>\n        </a>\n        <div class=\"layout-menu-tooltip\">\n            <div class=\"layout-menu-tooltip-arrow\"></div>\n            <div class=\"layout-menu-tooltip-text\">{{child.label}}</div>\n        </div>\n        <ul submenu\n            [item]=\"child\"\n            *ngIf=\"child.items\"\n            [visible]=\"isActive(i)\"\n            [reset]=\"reset\"\n            [parentActive]=\"isActive(i)\"\n            [@children]=\"(menuService.isSlim() || menuService.isHorizontal()) && root ? (isActive(i) ?\n            'visible' : 'hidden') : (isActive(i) ? 'visibleAnimated' : 'hiddenAnimated')\">\n        </ul>\n    </li>\n</ng-template>\n",
                animations: [
                    animations.trigger('children', [
                        animations.state('hiddenAnimated', animations.style({
                            height: '0px'
                        })),
                        animations.state('visibleAnimated', animations.style({
                            height: '*'
                        })),
                        animations.state('visible', animations.style({
                            height: '*',
                            'z-index': 100
                        })),
                        animations.state('hidden', animations.style({
                            height: '0px',
                            'z-index': '*'
                        })),
                        animations.transition('visibleAnimated => hiddenAnimated', animations.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        animations.transition('hiddenAnimated => visibleAnimated', animations.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ]
            })
        ], SubMenuComponent);
        return SubMenuComponent;
    }());

    var MenuModule = /** @class */ (function () {
        function MenuModule() {
        }
        MenuModule = __decorate([
            core.NgModule({
                declarations: [
                    MenuComponent,
                    SubMenuComponent
                ],
                imports: [
                    common.CommonModule,
                    router.RouterModule
                ],
                exports: [
                    MenuComponent,
                    SubMenuComponent
                ],
                providers: [
                    MenusService
                ]
            })
        ], MenuModule);
        return MenuModule;
    }());

    exports.AutoCompleteComponent = AutoCompleteComponent;
    exports.AutoCompleteMultipleComponent = AutoCompleteMultipleComponent;
    exports.BlockUiComponent = BlockUiComponent;
    exports.BlockUiModule = BlockUiModule;
    exports.BreadcrumbComponent = BreadcrumbComponent;
    exports.BreadcrumbModule = BreadcrumbModule;
    exports.BreadcrumbService = BreadcrumbService;
    exports.CALENDAR_LOCALE = CALENDAR_LOCALE;
    exports.CRUD_SERVICE = CRUD_SERVICE;
    exports.CalendarComponent = CalendarComponent;
    exports.CheckComponent = CheckComponent;
    exports.CheckPipe = CheckPipe;
    exports.Column = Column;
    exports.CrudFormComponent = CrudFormComponent;
    exports.CrudListComponent = CrudListComponent;
    exports.CrudModule = CrudModule;
    exports.CrudResolveGuard = CrudResolveGuard;
    exports.CrudServiceNuvem = CrudServiceNuvem;
    exports.DataProviderFactory = DataProviderFactory;
    exports.DatatableButtonComponent = DatatableButtonComponent;
    exports.DatatableClickEvent = DatatableClickEvent;
    exports.DatatableComponent = DatatableComponent;
    exports.DatatableModule = DatatableModule;
    exports.DatatableService = DatatableService;
    exports.DatatableSplitbuttonComponent = DatatableSplitbuttonComponent;
    exports.DatatableSplitbuttonModule = DatatableSplitbuttonModule;
    exports.DropdownComponent = DropdownComponent;
    exports.ErrorStackComponent = ErrorStackComponent;
    exports.ErrorStackModule = ErrorStackModule;
    exports.FieldComponent = FieldComponent;
    exports.FilterColumn = FilterColumn;
    exports.FilterColumnModule = FilterColumnModule;
    exports.FormComponent = FormComponent;
    exports.FormNotificationComponent = FormNotificationComponent;
    exports.FormNotificationModule = FormNotificationModule;
    exports.InputMaskComponent = InputMaskComponent;
    exports.InputTextComponent = InputTextComponent;
    exports.MemoryDataProvider = MemoryDataProvider;
    exports.MenuComponent = MenuComponent;
    exports.MenuModule = MenuModule;
    exports.MenusService = MenusService;
    exports.PageNotificationComponent = PageNotificationComponent;
    exports.PageNotificationModule = PageNotificationModule;
    exports.PageNotificationService = PageNotificationService;
    exports.ServerDataProvider = ServerDataProvider;
    exports.ShowColumn = ShowColumn;
    exports.ShowColumnModule = ShowColumnModule;
    exports.SubMenuComponent = SubMenuComponent;
    exports.SuccessMessageHandlerInterceptor = SuccessMessageHandlerInterceptor;
    exports.TextAreaComponent = TextAreaComponent;
    exports.ValidationMessageComponent = ValidationMessageComponent;
    exports.crudRouteBuilder = crudRouteBuilder;
    exports.httpInterceptorProviders = httpInterceptorProviders;
    exports.ɵa = AutoCompleteItem;
    exports.ɵb = AUTOCOMPLETE_VALUE_ACCESSOR;
    exports.ɵc = AutoCompleteCustomComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=nuvem-primeng-components.umd.js.map
