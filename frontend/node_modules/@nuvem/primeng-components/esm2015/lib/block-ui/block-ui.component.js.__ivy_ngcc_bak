import { __decorate } from "tslib";
import { BlockUiStatus, BlockUiService } from '@nuvem/angular-base';
import { Component } from '@angular/core';
/**
 * Class BlockUiComponent
 * @class
 */
let BlockUiComponent = class BlockUiComponent {
    /**
     * constructor method
     * @constructor
     * @param {BlockUiService} service
     */
    constructor(service) {
        this.service = service;
        /**
         * status property
         * @type {boolean}
         * @public
         */
        this.status = false;
    }
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit() {
        this.subscription = this.service.loaderStatus.subscribe((blockui) => {
            this.status = blockui.status;
        });
    }
    /**
     * ngOnDestroy methods
     * @returns void
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * isBlocked method
     * @returns boolean
     */
    isBlocked() {
        return this.status;
    }
    /**
     * show method
     * @returns false
     */
    show() {
        this.status = true;
    }
    /**
     * hide methods
     * @returns void
     */
    hide() {
        this.status = false;
    }
};
BlockUiComponent.ctorParameters = () => [
    { type: BlockUiService }
];
BlockUiComponent = __decorate([
    Component({
        selector: 'basis-block-ui',
        template: "<p-blockUI [blocked]=\"isBlocked()\">\n    <div class=\"center-screen\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n",
        styles: [".center-screen{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}"]
    })
], BlockUiComponent);
export { BlockUiComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL3ByaW1lbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9ibG9jay11aS9ibG9jay11aS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFHN0Q7OztHQUdHO0FBTUgsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFlekI7Ozs7T0FJRztJQUNILFlBQW9CLE9BQXVCO1FBQXZCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBbkIzQzs7OztXQUlHO1FBQ0gsV0FBTSxHQUFHLEtBQUssQ0FBQztJQWNnQyxDQUFDO0lBRWhEOzs7T0FHRztJQUNILFFBQVE7UUFDSixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQXNCLEVBQUUsRUFBRTtZQUMvRSxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUk7UUFDQSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSTtRQUNBLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Q0FDSixDQUFBOztZQTNDZ0MsY0FBYzs7QUFwQmxDLGdCQUFnQjtJQUw1QixTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsZ0JBQWdCO1FBQzFCLGlLQUF3Qzs7S0FFM0MsQ0FBQztHQUNXLGdCQUFnQixDQStENUI7U0EvRFksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmxvY2tVaVN0YXR1cywgQmxvY2tVaVNlcnZpY2UgfSBmcm9tICdAbnV2ZW0vYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIENsYXNzIEJsb2NrVWlDb21wb25lbnRcbiAqIEBjbGFzc1xuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2Jhc2lzLWJsb2NrLXVpJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYmxvY2stdWkuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWyAnLi9ibG9jay11aS5jb21wb25lbnQuY3NzJyBdLFxufSlcbmV4cG9ydCBjbGFzcyBCbG9ja1VpQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0ICwgT25EZXN0cm95IHtcbiAgICAvKipcbiAgICAgKiBzdGF0dXMgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc3RhdHVzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBzdWJzY3JpcHRpb24gcHJvcGVydHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtTdWJzY3JpcHRpb259XG4gICAgICovXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QmxvY2tVaVNlcnZpY2V9IHNlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcnZpY2U6IEJsb2NrVWlTZXJ2aWNlKSB7IH1cblxuICAgIC8qKlxuICAgICAqIG5nT25Jbml0IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNlcnZpY2UubG9hZGVyU3RhdHVzLnN1YnNjcmliZSgoYmxvY2t1aTogQmxvY2tVaVN0YXR1cykgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBibG9ja3VpLnN0YXR1cztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbmdPbkRlc3Ryb3kgbWV0aG9kc1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpc0Jsb2NrZWQgbWV0aG9kXG4gICAgICogQHJldHVybnMgYm9vbGVhblxuICAgICAqL1xuICAgIGlzQmxvY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNob3cgbWV0aG9kXG4gICAgICogQHJldHVybnMgZmFsc2VcbiAgICAgKi9cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGlkZSBtZXRob2RzXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gZmFsc2U7XG4gICAgfVxufVxuIl19