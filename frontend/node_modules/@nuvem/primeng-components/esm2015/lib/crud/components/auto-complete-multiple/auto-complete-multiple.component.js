var AutoCompleteMultipleComponent_1;
import { __decorate } from "tslib";
import { Component, Input } from "@angular/core";
import { provideValueAccessor } from "@nuvem/angular-base";
import { FieldComponent } from "../field.component";
import { forkJoin } from 'rxjs';
let AutoCompleteMultipleComponent = AutoCompleteMultipleComponent_1 = class AutoCompleteMultipleComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.virtualScroll = false;
        this.itemSize = 30;
    }
    findAll(event) {
        let query = {};
        query[this.field] = event.query;
        this.service.findAll(query).subscribe(data => {
            this.results = data;
        });
    }
    outerToInner(value) {
        if (value && value.length > 0 && !value[0][this.field]) {
            let obs = [];
            value.forEach(element => {
                if (element && element.id) {
                    obs.push(this.service.find(element.id));
                }
            });
            forkJoin(obs).subscribe((data) => {
                this.formControl.setValue(data);
            });
        }
        return value;
    }
};
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "field", void 0);
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "service", void 0);
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "virtualScroll", void 0);
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "itemSize", void 0);
AutoCompleteMultipleComponent = AutoCompleteMultipleComponent_1 = __decorate([
    Component({
        selector: "[nAutoCompleteMultiple]",
        template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-autoCompleteCustom #input\n        [formControl]=\"formControl\"\n        [suggestions]=\"results\"\n        (completeMethod)=\"findAll($event)\"\n        [field]=\"field\"\n        [virtualScroll]=\"virtualScroll\"\n        [itemSize]=\"itemSize\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onSelect)=\"onSelectEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        [multiple]=\"true\">\n    </p-autoCompleteCustom>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
        providers: [provideValueAccessor(AutoCompleteMultipleComponent_1)]
    })
], AutoCompleteMultipleComponent);
export { AutoCompleteMultipleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS1tdWx0aXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NydWQvY29tcG9uZW50cy9hdXRvLWNvbXBsZXRlLW11bHRpcGxlL2F1dG8tY29tcGxldGUtbXVsdGlwbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXBELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFPaEMsSUFBYSw2QkFBNkIscUNBQTFDLE1BQWEsNkJBQThCLFNBQVEsY0FBcUI7SUFBeEU7O1FBTWEsa0JBQWEsR0FBWSxLQUFLLENBQUM7UUFFL0IsYUFBUSxHQUFXLEVBQUUsQ0FBQztJQTJCbkMsQ0FBQztJQXZCRyxPQUFPLENBQUMsS0FBVTtRQUNkLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRVMsWUFBWSxDQUFDLEtBQVk7UUFDL0IsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BELElBQUksR0FBRyxHQUFVLEVBQUUsQ0FBQztZQUNwQixLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNwQixJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFO29CQUN2QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUMzQztZQUNMLENBQUMsQ0FBQyxDQUFDO1lBQ0gsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztDQUVKLENBQUE7QUFqQ1k7SUFBUixLQUFLLEVBQUU7NERBQWU7QUFFZDtJQUFSLEtBQUssRUFBRTs4REFBZ0M7QUFFL0I7SUFBUixLQUFLLEVBQUU7b0VBQWdDO0FBRS9CO0lBQVIsS0FBSyxFQUFFOytEQUF1QjtBQVJ0Qiw2QkFBNkI7SUFMekMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLHlCQUF5QjtRQUNuQyx1dkJBQXNEO1FBQ3RELFNBQVMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLCtCQUE2QixDQUFDLENBQUM7S0FDbkUsQ0FBQztHQUNXLDZCQUE2QixDQW1DekM7U0FuQ1ksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBwcm92aWRlVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAbnV2ZW0vYW5ndWxhci1iYXNlXCI7XG5pbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gXCIuLi9maWVsZC5jb21wb25lbnRcIjtcbmltcG9ydCB7IENydWRTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL2NydWQtc2VydmljZS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBmb3JrSm9pbiB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJbbkF1dG9Db21wbGV0ZU11bHRpcGxlXVwiLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vYXV0by1jb21wbGV0ZS1tdWx0aXBsZS5jb21wb25lbnQuaHRtbFwiLFxuICAgIHByb3ZpZGVyczogW3Byb3ZpZGVWYWx1ZUFjY2Vzc29yKEF1dG9Db21wbGV0ZU11bHRpcGxlQ29tcG9uZW50KV0sXG59KVxuZXhwb3J0IGNsYXNzIEF1dG9Db21wbGV0ZU11bHRpcGxlQ29tcG9uZW50IGV4dGVuZHMgRmllbGRDb21wb25lbnQ8YW55W10+IHtcblxuICAgIEBJbnB1dCgpIGZpZWxkOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBzZXJ2aWNlOiBDcnVkU2VydmljZTxhbnksIGFueT47XG5cbiAgICBASW5wdXQoKSB2aXJ0dWFsU2Nyb2xsOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKSBpdGVtU2l6ZTogbnVtYmVyID0gMzA7XG5cbiAgICByZXN1bHRzOiBhbnlbXTtcblxuICAgIGZpbmRBbGwoZXZlbnQ6IGFueSkge1xuICAgICAgICBsZXQgcXVlcnkgPSB7fTtcbiAgICAgICAgcXVlcnlbdGhpcy5maWVsZF0gPSBldmVudC5xdWVyeTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlLmZpbmRBbGwocXVlcnkpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvdXRlclRvSW5uZXIodmFsdWU6IGFueVtdKTogYW55W10ge1xuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMCAmJiAhdmFsdWVbMF1bdGhpcy5maWVsZF0pIHtcbiAgICAgICAgICAgIGxldCBvYnM6IGFueVtdID0gW107XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzLnB1c2godGhpcy5zZXJ2aWNlLmZpbmQoZWxlbWVudC5pZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9ya0pvaW4ob2JzKS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1Db250cm9sLnNldFZhbHVlKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxufVxuIl19