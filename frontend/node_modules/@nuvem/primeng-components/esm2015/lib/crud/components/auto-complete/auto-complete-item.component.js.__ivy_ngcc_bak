import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from "@angular/core";
let AutoCompleteItem = class AutoCompleteItem {
    constructor() {
        this.highlightOptionChange = new EventEmitter();
        this.onClick = new EventEmitter();
    }
    selectItem(event) {
        this.onClick.emit({
            originalEvent: event,
            option: this.option
        });
    }
};
__decorate([
    Input()
], AutoCompleteItem.prototype, "option", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "resolvedFieldData", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "highlightOption", void 0);
__decorate([
    Output()
], AutoCompleteItem.prototype, "highlightOptionChange", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "index", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "itemSize", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "template", void 0);
__decorate([
    Output()
], AutoCompleteItem.prototype, "onClick", void 0);
AutoCompleteItem = __decorate([
    Component({
        selector: 'p-autoCompleteItem',
        template: `
        <li role="option" [ngClass]="{'ui-autocomplete-list-item ui-corner-all':true,'ui-state-highlight':(highlightOption==option)}"
            (mouseenter)="highlightOptionChange.emit(option)" (mouseleave)="highlightOptionChange.emit(null)"
            [id]="highlightOption == option ? 'p-highlighted-option':''" (click)="selectItem($event)"
            [ngStyle]="{'height': itemSize + 'px', 'display': 'table', 'width': '100%'}">
            <span *ngIf="!template">{{resolvedFieldData}}</span>
            <ng-container *ngTemplateOutlet="template; context: {$implicit: option, index: index}"></ng-container>
        </li>
    `
    })
], AutoCompleteItem);
export { AutoCompleteItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9wcmltZW5nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY3J1ZC9jb21wb25lbnRzL2F1dG8tY29tcGxldGUvYXV0by1jb21wbGV0ZS1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFlLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWNwRixJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQUE3QjtRQVFjLDBCQUFxQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFRaEQsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFRM0MsQ0FBQztJQU5HLFVBQVUsQ0FBQyxLQUFZO1FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ2QsYUFBYSxFQUFFLEtBQUs7WUFDcEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3RCLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSixDQUFBO0FBdEJZO0lBQVIsS0FBSyxFQUFFO2dEQUFhO0FBRVo7SUFBUixLQUFLLEVBQUU7MkRBQXdCO0FBRXZCO0lBQVIsS0FBSyxFQUFFO3lEQUFzQjtBQUVwQjtJQUFULE1BQU0sRUFBRTsrREFBaUQ7QUFFakQ7SUFBUixLQUFLLEVBQUU7K0NBQWU7QUFFZDtJQUFSLEtBQUssRUFBRTtrREFBa0I7QUFFakI7SUFBUixLQUFLLEVBQUU7a0RBQTRCO0FBRTFCO0lBQVQsTUFBTSxFQUFFO2lEQUE4QjtBQWhCOUIsZ0JBQWdCO0lBWjVCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsUUFBUSxFQUFFOzs7Ozs7OztLQVFUO0tBQ0osQ0FBQztHQUNXLGdCQUFnQixDQXdCNUI7U0F4QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwLWF1dG9Db21wbGV0ZUl0ZW0nLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxsaSByb2xlPVwib3B0aW9uXCIgW25nQ2xhc3NdPVwieyd1aS1hdXRvY29tcGxldGUtbGlzdC1pdGVtIHVpLWNvcm5lci1hbGwnOnRydWUsJ3VpLXN0YXRlLWhpZ2hsaWdodCc6KGhpZ2hsaWdodE9wdGlvbj09b3B0aW9uKX1cIlxuICAgICAgICAgICAgKG1vdXNlZW50ZXIpPVwiaGlnaGxpZ2h0T3B0aW9uQ2hhbmdlLmVtaXQob3B0aW9uKVwiIChtb3VzZWxlYXZlKT1cImhpZ2hsaWdodE9wdGlvbkNoYW5nZS5lbWl0KG51bGwpXCJcbiAgICAgICAgICAgIFtpZF09XCJoaWdobGlnaHRPcHRpb24gPT0gb3B0aW9uID8gJ3AtaGlnaGxpZ2h0ZWQtb3B0aW9uJzonJ1wiIChjbGljayk9XCJzZWxlY3RJdGVtKCRldmVudClcIlxuICAgICAgICAgICAgW25nU3R5bGVdPVwieydoZWlnaHQnOiBpdGVtU2l6ZSArICdweCcsICdkaXNwbGF5JzogJ3RhYmxlJywgJ3dpZHRoJzogJzEwMCUnfVwiPlxuICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCIhdGVtcGxhdGVcIj57e3Jlc29sdmVkRmllbGREYXRhfX08L3NwYW4+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcGxhdGU7IGNvbnRleHQ6IHskaW1wbGljaXQ6IG9wdGlvbiwgaW5kZXg6IGluZGV4fVwiPjwvbmctY29udGFpbmVyPlxuICAgICAgICA8L2xpPlxuICAgIGBcbn0pXG5leHBvcnQgY2xhc3MgQXV0b0NvbXBsZXRlSXRlbSB7XG5cbiAgICBASW5wdXQoKSBvcHRpb246IGFueTtcblxuICAgIEBJbnB1dCgpIHJlc29sdmVkRmllbGREYXRhOiBhbnk7XG5cbiAgICBASW5wdXQoKSBoaWdobGlnaHRPcHRpb246IGFueTtcblxuICAgIEBPdXRwdXQoKSBoaWdobGlnaHRPcHRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIEBJbnB1dCgpIGluZGV4OiBudW1iZXI7XG5cbiAgICBASW5wdXQoKSBpdGVtU2l6ZTogbnVtYmVyO1xuXG4gICAgQElucHV0KCkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBAT3V0cHV0KCkgb25DbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHNlbGVjdEl0ZW0oZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMub25DbGljay5lbWl0KHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgb3B0aW9uOiB0aGlzLm9wdGlvblxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=