import { __decorate } from "tslib";
import { Injector, Input, OnInit, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter, Directive } from "@angular/core";
import { WrappedFormControlSuperclass } from "@nuvem/angular-base";
import { ControlContainer } from "@angular/forms";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';

const _c0 = ["input"];
let FieldComponent = class FieldComponent extends WrappedFormControlSuperclass {
    constructor(controlContainer, injector) {
        super(injector);
        this.controlContainer = controlContainer;
        this.injector = injector;
        this.onBlur = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onFocus = new EventEmitter();
    }
    get name() {
        return this._name ? this._name : this.formControlName;
    }
    set name(value) {
        this._name = value;
    }
    get label() {
        return this.required ? `${this._label}*` : this._label;
    }
    set label(value) {
        this._label = value;
    }
    ngOnInit() {
        this.setValidators();
        this.setRequired();
    }
    setRequired() {
        if (this.required) {
            if (this.input instanceof ElementRef) {
                this.input.nativeElement.required = true;
            }
            else {
                this.input.required = true;
            }
        }
    }
    setElementRefAttr(attr, value) {
        if (value && this.input instanceof ElementRef) {
            this.input.nativeElement[attr] = value;
        }
    }
    setFormControlValidators() {
        if (this.controlContainer && this.formControlName) {
            let validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    }
    setValidators() {
        if (this.controlContainer && this.formControlName) {
            let validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    }
    ngAfterViewInit() {
        for (let i in this.extraParams) {
            this.input[i] = this.extraParams[i];
        }
    }
    onBlurEvent(event) {
        this.onBlur.emit(event);
    }
    onSelectEvent(event) {
        this.onSelect.emit(event);
    }
    onFocusEvent(event) {
        this.onFocus.emit(event);
    }
};
FieldComponent.ɵfac = function FieldComponent_Factory(t) { return new (t || FieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
FieldComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FieldComponent, selectors: [["", "nField", ""]], viewQuery: function FieldComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, inputs: { name: "name", label: "label", form: "form", formControlName: "formControlName", extraParams: "extraParams", required: "required" }, outputs: { onBlur: "onBlur", onSelect: "onSelect", onFocus: "onFocus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
FieldComponent.ctorParameters = () => [
    { type: ControlContainer },
    { type: Injector }
];
__decorate([
    Input()
], FieldComponent.prototype, "form", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "formControlName", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "extraParams", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "required", void 0);
__decorate([
    Output()
], FieldComponent.prototype, "onBlur", void 0);
__decorate([
    Output()
], FieldComponent.prototype, "onSelect", void 0);
__decorate([
    Output()
], FieldComponent.prototype, "onFocus", void 0);
__decorate([
    ViewChild("input", { static: false })
], FieldComponent.prototype, "input", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "name", null);
__decorate([
    Input()
], FieldComponent.prototype, "label", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FieldComponent, [{
        type: Directive,
        args: [{
                selector: "[nField]"
            }]
    }], function () { return [{ type: ɵngcc1.ControlContainer }, { type: ɵngcc0.Injector }]; }, { onBlur: [{
            type: Output
        }], onSelect: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], name: [{
            type: Input
        }], label: [{
            type: Input
        }], form: [{
            type: Input
        }], formControlName: [{
            type: Input
        }], extraParams: [{
            type: Input
        }], required: [{
            type: Input
        }], input: [{
            type: ViewChild,
            args: ["input", { static: false }]
        }] }); })();
export { FieldComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL3ByaW1lbmctY29tcG9uZW50cy9saWIvY3J1ZC9jb21wb25lbnRzL2ZpZWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ILE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUtsRCxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUNULFNBQVEsNEJBQWtEO0FBQzVELElBd0NFLFlBQ1ksZ0JBQWtDLEVBQ2xDLFFBQWtCO0FBQ2xDLFFBQVEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hCLFFBSGdCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFoQ3JCLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUNsRSxRQUNjLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUNwRSxRQUNjLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUNuRSxJQTZCSSxDQUFDO0FBQ0wsSUF2QkksSUFBSSxJQUFJO0FBQUssUUFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDOUQsSUFBSSxDQUFDO0FBQ0wsSUFFSSxJQUFJLElBQUksQ0FBQyxLQUFhO0FBQzFCLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDM0Is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QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pDLElBQUksQ0FBQztBQUNMLENBQUM7Ozs7Ozs7aVJBQUE7QUFDRDtBQUF3QyxZQS9ETixnQkFBZ0I7QUFDaEQsWUFBd0IsUUFBUTtBQUFHO0FBeEN4QjtBQUFhLElBQXJCLEtBQUssRUFBRTtBQUFDLDRDQUFhO0FBRWI7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBQyx1REFBd0I7QUFFeEI7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBQyxtREFBaUI7QUFFakI7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBQyxnREFBa0I7QUFFakI7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBQyw4Q0FBb0Q7QUFFcEQ7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBQyxnREFBc0Q7QUFFdEQ7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBQywrQ0FBcUQ7QUFFeEI7QUFFM0MsSUFGSyxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQUMsNkNBQVc7QUFXbEQ7QUFBYSxJQURaLEtBQUssRUFBRTtBQUNaLDBDQUVLO0FBT0Q7QUFBYSxJQURaLEtBQUssRUFBRTtBQUNaLDJDQUVLO0FBeENRLGNBQWMsb0JBSDFCLFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRTtDQUFVLE1BQ3ZCLENBQUMsSUFDVztDQUFjLENBeUcxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsU0ExR1ksY0FBYztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIFZpZXdDaGlsZCwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBXcmFwcGVkRm9ybUNvbnRyb2xTdXBlcmNsYXNzIH0gZnJvbSBcIkBudXZlbS9hbmd1bGFyLWJhc2VcIjtcbmltcG9ydCB7IENvbnRyb2xDb250YWluZXIgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6IFwiW25GaWVsZF1cIlxufSlcbmV4cG9ydCBjbGFzcyBGaWVsZENvbXBvbmVudDxPdXRlclR5cGUsIElubmVyVHlwZSA9IE91dGVyVHlwZT5cbiAgICBleHRlbmRzIFdyYXBwZWRGb3JtQ29udHJvbFN1cGVyY2xhc3M8T3V0ZXJUeXBlLCBJbm5lclR5cGU+XG4gICAgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuXG4gICAgQElucHV0KCkgZm9ybTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgZm9ybUNvbnRyb2xOYW1lOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBleHRyYVBhcmFtczogYW55O1xuXG4gICAgQElucHV0KCkgcmVxdWlyZWQ6IGJvb2xlYW47XG5cbiAgICBAT3V0cHV0KCkgb25CbHVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgQE91dHB1dCgpIG9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgQE91dHB1dCgpIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBAVmlld0NoaWxkKFwiaW5wdXRcIiwgeyBzdGF0aWM6IGZhbHNlIH0pIGlucHV0OiBhbnk7XG5cbiAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIF9sYWJlbDogc3RyaW5nO1xuXG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWUgPyB0aGlzLl9uYW1lIDogdGhpcy5mb3JtQ29udHJvbE5hbWU7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgbGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWlyZWQgPyBgJHt0aGlzLl9sYWJlbH0qYCA6IHRoaXMuX2xhYmVsO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbGFiZWwgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb250cm9sQ29udGFpbmVyOiBDb250cm9sQ29udGFpbmVyLFxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgICAgICBzdXBlcihpbmplY3Rvcik7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0VmFsaWRhdG9ycygpO1xuICAgICAgICB0aGlzLnNldFJlcXVpcmVkKCk7XG4gICAgfVxuXG4gICAgc2V0UmVxdWlyZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnB1dCBpbnN0YW5jZW9mIEVsZW1lbnRSZWYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEVsZW1lbnRSZWZBdHRyKGF0dHI6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgdGhpcy5pbnB1dCBpbnN0YW5jZW9mIEVsZW1lbnRSZWYpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudFthdHRyXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Rm9ybUNvbnRyb2xWYWxpZGF0b3JzKCkge1xuICAgICAgICBpZiAodGhpcy5jb250cm9sQ29udGFpbmVyICYmIHRoaXMuZm9ybUNvbnRyb2xOYW1lKSB7XG4gICAgICAgICAgICBsZXQgdmFsaWRhdG9yID0gdGhpcy5jb250cm9sQ29udGFpbmVyLmNvbnRyb2wuZ2V0KHRoaXMuZm9ybUNvbnRyb2xOYW1lKS52YWxpZGF0b3I7XG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5zZXRWYWxpZGF0b3JzKHZhbGlkYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHNldFZhbGlkYXRvcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xDb250YWluZXIgJiYgdGhpcy5mb3JtQ29udHJvbE5hbWUpIHtcbiAgICAgICAgICAgIGxldCB2YWxpZGF0b3IgPSB0aGlzLmNvbnRyb2xDb250YWluZXIuY29udHJvbC5nZXQodGhpcy5mb3JtQ29udHJvbE5hbWUpLnZhbGlkYXRvcjtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1Db250cm9sLnNldFZhbGlkYXRvcnModmFsaWRhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLmV4dHJhUGFyYW1zKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0W2ldID0gdGhpcy5leHRyYVBhcmFtc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQmx1ckV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHRoaXMub25CbHVyLmVtaXQoZXZlbnQpO1xuICAgIH1cblxuICAgIG9uU2VsZWN0RXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5vblNlbGVjdC5lbWl0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBvbkZvY3VzRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5vbkZvY3VzLmVtaXQoZXZlbnQpO1xuICAgIH1cbn1cbiJdfQ==