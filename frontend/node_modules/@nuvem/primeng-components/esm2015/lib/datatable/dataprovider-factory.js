import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { DatatableService } from './datatable.service';
import { ServerDataProvider } from './server-dataprovider';
import { MemoryDataProvider } from './memory-dataprovider';
import * as i0 from "@angular/core";
import * as i1 from "./datatable.service";
/**
 * Enum DataProviderType
 * @enum
 */
export var DataProviderType;
(function (DataProviderType) {
    DataProviderType["Memory"] = "memory";
    DataProviderType["Server"] = "server";
})(DataProviderType || (DataProviderType = {}));
/**
 * Class DataProviderFactory
 * @class
 */
let DataProviderFactory = class DataProviderFactory {
    /**
     * constructor method
     * @constructor
     * @param {DatatableService} datatableService
     */
    constructor(datatableService) {
        this.datatableService = datatableService;
    }
    /**
     * create method
     * @param {DataProviderType} type
     * @param {DatatableComponent} component
     * @public
     * @returns DataProvider
     */
    create(type, component) {
        if (DataProviderType.Server === type) {
            return new ServerDataProvider(this.datatableService, component);
        }
        if (DataProviderType.Memory === type) {
            return new MemoryDataProvider(component);
        }
    }
};
DataProviderFactory.ctorParameters = () => [
    { type: DatatableService }
];
DataProviderFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function DataProviderFactory_Factory() { return new DataProviderFactory(i0.ɵɵinject(i1.DatatableService)); }, token: DataProviderFactory, providedIn: "root" });
DataProviderFactory = __decorate([
    Injectable({
        providedIn: "root"
    })
], DataProviderFactory);
export { DataProviderFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXByb3ZpZGVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZS9kYXRhcHJvdmlkZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUl2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRTNEOzs7R0FHRztBQUNILE1BQU0sQ0FBTixJQUFZLGdCQUdYO0FBSEQsV0FBWSxnQkFBZ0I7SUFDeEIscUNBQWlCLENBQUE7SUFDakIscUNBQWlCLENBQUE7QUFDckIsQ0FBQyxFQUhXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFHM0I7QUFDRDs7O0dBR0c7QUFJSCxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQUU1Qjs7OztPQUlHO0lBQ0gsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBRTFEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxJQUFzQixFQUFFLFNBQTZCO1FBQy9ELElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtZQUNsQyxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ2xDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7Q0FDSixDQUFBOztZQWxCeUMsZ0JBQWdCOzs7QUFQN0MsbUJBQW1CO0lBSC9CLFVBQVUsQ0FBQztRQUNSLFVBQVUsRUFBRSxNQUFNO0tBQ3JCLENBQUM7R0FDVyxtQkFBbUIsQ0F5Qi9CO1NBekJZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGF0YWJsZVNlcnZpY2UgfSBmcm9tICcuL2RhdGF0YWJsZS5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGF0YWJsZUNvbXBvbmVudCB9IGZyb20gJy4vZGF0YXRhYmxlLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IERhdGFQcm92aWRlciB9IGZyb20gJy4vZGF0YXByb3ZpZGVyJztcbmltcG9ydCB7IFNlcnZlckRhdGFQcm92aWRlciB9IGZyb20gJy4vc2VydmVyLWRhdGFwcm92aWRlcic7XG5pbXBvcnQgeyBNZW1vcnlEYXRhUHJvdmlkZXIgfSBmcm9tICcuL21lbW9yeS1kYXRhcHJvdmlkZXInO1xuXG4vKipcbiAqIEVudW0gRGF0YVByb3ZpZGVyVHlwZVxuICogQGVudW1cbiAqL1xuZXhwb3J0IGVudW0gRGF0YVByb3ZpZGVyVHlwZSB7XG4gICAgTWVtb3J5ID0gJ21lbW9yeScsXG4gICAgU2VydmVyID0gJ3NlcnZlcidcbn1cbi8qKlxuICogQ2xhc3MgRGF0YVByb3ZpZGVyRmFjdG9yeVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBEYXRhUHJvdmlkZXJGYWN0b3J5IHtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7RGF0YXRhYmxlU2VydmljZX0gZGF0YXRhYmxlU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YXRhYmxlU2VydmljZTogRGF0YXRhYmxlU2VydmljZSkge31cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0RhdGFQcm92aWRlclR5cGV9IHR5cGVcbiAgICAgKiBAcGFyYW0ge0RhdGF0YWJsZUNvbXBvbmVudH0gY29tcG9uZW50XG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIERhdGFQcm92aWRlclxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGUodHlwZTogRGF0YVByb3ZpZGVyVHlwZSwgY29tcG9uZW50OiBEYXRhdGFibGVDb21wb25lbnQpOiBEYXRhUHJvdmlkZXIge1xuICAgICAgICBpZiAoRGF0YVByb3ZpZGVyVHlwZS5TZXJ2ZXIgPT09IHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2VydmVyRGF0YVByb3ZpZGVyKHRoaXMuZGF0YXRhYmxlU2VydmljZSwgY29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChEYXRhUHJvdmlkZXJUeXBlLk1lbW9yeSA9PT0gdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNZW1vcnlEYXRhUHJvdmlkZXIoY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==