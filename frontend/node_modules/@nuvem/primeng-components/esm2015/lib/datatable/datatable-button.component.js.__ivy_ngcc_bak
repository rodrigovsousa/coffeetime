import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
/**
 * Class DatatableButtonComponent
 * @class
 */
let DatatableButtonComponent = class DatatableButtonComponent {
    constructor() {
        /**
         * allowMultipleSelection property
         * @type {boolean}
         */
        this.allowMultipleSelection = true;
        /**
         * disabled property
         * @type boolean
         */
        this.disabled = false;
        /**
         * click property
         * @type {EventEmitter<any>}
         */
        this.click = new EventEmitter();
    }
    /**
     * onClick method
     * @param {any} event
     * @return void
     */
    onClick(event) {
        this.click.emit(event);
        event.stopPropagation();
    }
};
__decorate([
    Input()
], DatatableButtonComponent.prototype, "icon", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "class", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "bTooltip", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "name", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "allowMultipleSelection", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "disabled", void 0);
__decorate([
    Output()
], DatatableButtonComponent.prototype, "click", void 0);
DatatableButtonComponent = __decorate([
    Component({
        selector: 'basis-datatable-button',
        template: "<p pTooltip=\"{{ bTooltip }}\">\n    <button\n        type=\"button\" tooltipPosition=\"bottom\" class=\"{{ class }}\"\n        icon=\"ui-icon-{{ icon }}\" (click)=\"onClick($event)\" [disabled]=\"disabled\" pButton>\n    </button>\n</p>\n"
    })
], DatatableButtonComponent);
export { DatatableButtonComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZS9kYXRhdGFibGUtYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDZixNQUFNLGVBQWUsQ0FBQztBQUN2Qjs7O0dBR0c7QUFLSCxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtJQUFyQztRQThCSTs7O1dBR0c7UUFFSCwyQkFBc0IsR0FBWSxJQUFJLENBQUM7UUFFdkM7OztXQUdHO1FBRUgsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUUxQjs7O1dBR0c7UUFFSCxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFXdkQsQ0FBQztJQVRHOzs7O09BSUc7SUFDSCxPQUFPLENBQUMsS0FBVTtRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBQ0osQ0FBQTtBQXJERztJQURDLEtBQUssRUFBRTtzREFDSztBQU9iO0lBREMsS0FBSyxFQUFFO3VEQUNNO0FBT2Q7SUFEQyxLQUFLLEVBQUU7MERBQ1M7QUFPakI7SUFEQyxLQUFLLEVBQUU7c0RBQ0s7QUFPYjtJQURDLEtBQUssRUFBRTt3RUFDK0I7QUFPdkM7SUFEQyxLQUFLLEVBQUU7MERBQ2tCO0FBTzFCO0lBREMsTUFBTSxFQUFFO3VEQUMwQztBQWpEMUMsd0JBQXdCO0lBSnBDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsMlBBQWdEO0tBQ25ELENBQUM7R0FDVyx3QkFBd0IsQ0E0RHBDO1NBNURZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBFdmVudEVtaXR0ZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIENsYXNzIERhdGF0YWJsZUJ1dHRvbkNvbXBvbmVudFxuICogQGNsYXNzXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYmFzaXMtZGF0YXRhYmxlLWJ1dHRvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RhdGF0YWJsZS1idXR0b24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERhdGF0YWJsZUJ1dHRvbkNvbXBvbmVudCB7XG5cbiAgICAvKipcbiAgICAgKiBpY29uIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGljb246IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIGNsYXNzIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGNsYXNzOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBiVG9vbHRpcCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBiVG9vbHRpcDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogbmFtZSBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBhbGxvd011bHRpcGxlU2VsZWN0aW9uIHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBhbGxvd011bHRpcGxlU2VsZWN0aW9uOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIGRpc2FibGVkIHByb3BlcnR5XG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGNsaWNrIHByb3BlcnR5XG4gICAgICogQHR5cGUge0V2ZW50RW1pdHRlcjxhbnk+fVxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqXG4gICAgICogb25DbGljayBtZXRob2RcbiAgICAgKiBAcGFyYW0ge2FueX0gZXZlbnRcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBvbkNsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgdGhpcy5jbGljay5lbWl0KGV2ZW50KTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxufVxuIl19