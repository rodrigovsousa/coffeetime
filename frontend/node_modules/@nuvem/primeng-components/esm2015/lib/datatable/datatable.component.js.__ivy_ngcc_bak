import { __decorate } from "tslib";
import { Component, ViewChild, Input, Output, ContentChildren, QueryList, ChangeDetectorRef, AfterViewInit, AfterContentInit, OnInit, EventEmitter, ViewEncapsulation, ElementRef, } from '@angular/core';
import { Table as DataTable } from 'primeng/table';
import { DataProviderFactory, DataProviderType } from './dataprovider-factory';
import { DatatableButtonComponent } from './datatable-button.component';
import { DatatableClickEvent } from './datatable-click-event';
import { Authorization, User } from '@nuvem/angular-base';
import { Column } from './p-column.directive';
/**
 * Class DatatableComponent
 * @class
 */
let DatatableComponent = class DatatableComponent {
    /**
     * constructor method
     * @constructor
     * @param {ChangeDetectorRef} changeDetectorRef
     * @param {DataProviderFactory} dataProviderFactory
     * @param {Authorization} authorizationService
     */
    constructor(changeDetectorRef, dataProviderFactory, authorizationService) {
        this.changeDetectorRef = changeDetectorRef;
        this.dataProviderFactory = dataProviderFactory;
        this.authorizationService = authorizationService;
        /**
         * filterParams property
         * @type {any}
         */
        this.filterParams = {};
        /**
         * footerMsg property
         * @type {string}
         */
        this.footerMsg = '';
        /**
         * orderInSort property
         * @type {boolean}
         */
        this.orderInSort = false;
        /**
         * value property
         * @type {any}
         */
        this.value = [];
        /**
         * type property
         * @type DataProviderType
         */
        this.type = DataProviderType.Server;
        /**
         * rows property
         * @type {number}
         */
        this.rows = 5;
        /**
         * showPaginationFooter property
         * @type {boolean}
         */
        this.showPaginationFooter = false;
        /**
         * disableEdit property
         * @type {boolean}
         */
        this.disableEdit = false;
        /**
         * disableView property
         * @type {boolean}
         */
        this.disableView = false;
        /**
         * disableDelete property
         * @type {boolean}
         */
        this.disableDelete = false;
        /**
         * selectionMode property
         * @type {string}
         */
        this.selectionMode = 'single';
        /**
         * enableButtonsScroll property
         * @type {boolean}
         */
        this.enableButtonsScroll = false;
        /**
         * emptyMessage property
         * @type {string}
         */
        this.emptyMessage = 'Nenhum registro encontrado.';
        /**
         * verticalButtons property
         * @type {boolean}
         */
        this.verticalButtons = true;
        /**
         * enableScroll property
         * @type {boolean}
         */
        this.enableScroll = false;
        /**
         * disableLoadingBlockUI property
         * @type {boolean}
         */
        this.disableLoadingBlockUI = false;
        /**
         * filterOnColumn property
         */
        this.filterOnColumn = false;
        /**
         * filterSelectOptions property
         */
        this.filterSelectOptions = [];
        /**
         * updateFiltroHistorico property
         */
        this.updateFilterColumn = false;
        /**
         * customFilterOptions property
         */
        this.customFilterOptions = {};
        /**
         * buttonClick property
         * @type {EventEmitter<any>}
         */
        this.buttonClick = new EventEmitter();
        /**
         * startedLoading property
         * @type {EventEmitter<void>}
         */
        this.startedLoading = new EventEmitter();
        /**
         * finishedLoading property
         * @type {EventEmitter<HttpErrorResponse>}
         */
        this.finishedLoading = new EventEmitter();
        /**
         * onRowSelected property
         * @type {EventEmitter<any>}
         */
        this.onRowSelected = new EventEmitter();
        /**
         * showHorizontalButtonsHeader property
         * @type {boolean}
         */
        this.showHorizontalButtonsHeader = false;
        /**
         * blockContent
         * @type {boolean}
         */
        this.blockContent = false;
        /**
         * visibleColumns property
         * @type {Object}
         */
        this.visibleColumns = {};
        /**
         * showVisibleColumnsControl property
         * @type {boolean}
         */
        this.showVisibleColumnsControl = false;
        /**
         * dataKey property
         * Identificador único para cada registro da tabela
         * @type {string}
         */
        this.dataKey = 'id';
        /**
         * onRowEditEvent property
         * Evento disparado quando o usuário realiza ações de edição em uma linha da tabela
         * @type {EventEmitter<void>}
         */
        this.onRowEditEvent = new EventEmitter();
        this.clonedRowData = {};
        /**
         * errorMessage property
         * @type {string}
         */
        this.errorMessage = 'Ocorreu um erro ao carregar os dados da tabela. Tente novamente.';
        this.editingRow = false;
    }
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit() {
        this.dataProvider = this.dataProviderFactory.create(this.type, this);
        this.pDatatableComponent.rows = this.rows;
        this.subscribeToLoadingEvents();
        this.initRowsPerPageOptionsIfPresent();
        this.defineIfShouldShowHorizontalButtonsHeader();
        this.updateOnValueChange();
        this.finishedLoading.subscribe(() => {
            this.updateOnValueChange();
        });
    }
    /**
     * subscribeFromValueChange method
     * @returns void
     */
    updateOnValueChange() {
        this.filterSelectOptions = [];
        if (this.value) {
            this.value.map((item) => {
                this.filterSelectOptions.push(item);
            });
        }
    }
    /**
     * subscribeToLoadingEvents method
     * @returns void
     */
    subscribeToLoadingEvents() {
        if (!this.disableLoadingBlockUI) {
            this.originalEmptyMessage = this.emptyMessage;
            this.startedLoading.subscribe(() => this.onStartedLoading());
            this.finishedLoading.subscribe(error => this.onFinishedLoading(error));
        }
    }
    /**
     * onStartedLoading method
     * @returns void
     */
    onStartedLoading() {
        this.blockContent = true;
        this.emptyMessage = this.originalEmptyMessage;
    }
    /**
     * onFinishedLoading method
     * @param {HttpErrorResponse} error
     * @returns void
     */
    onFinishedLoading(error) {
        this.blockContent = false;
        if (error) {
            this.emptyMessage = this.errorMessage;
        }
    }
    /**
     * initRowsPerPageOptionsIfPresent method
     * @returns void
     */
    initRowsPerPageOptionsIfPresent() {
        if (this.rowsPerPageOptions) {
            this.pDatatableComponent.rowsPerPageOptions = this.rowsPerPageOptions;
        }
    }
    /**
     * defineIfShouldShowHorizontalButtonsHeader method
     * @returns void
     */
    defineIfShouldShowHorizontalButtonsHeader() {
        if (this.horizontalButtonsHeader) {
            this.showHorizontalButtonsHeader = true;
        }
    }
    /**
     * ngAfterViewInit method
     * @returns void
     */
    ngAfterViewInit() {
        this.setExtraParams();
        this.pDatatableComponent.columns = this.columns;
        this.pDatatableComponent.ngAfterContentInit();
        this.setAllColumnsVisible();
        this.changeDetectorRef.detectChanges();
    }
    /**
     * setExtraParams method
     * @returns void
     */
    setExtraParams() {
        for (let i in this.extraParams) {
            this.pDatatableComponent[i] = this.extraParams[i];
        }
    }
    /**
     * ngAfterContentInit method
     * @returns void
     */
    ngAfterContentInit() {
        this.extraButtons.forEach((button) => {
            button.click.subscribe(event => {
                this.onClick(button.name, event);
            });
        });
    }
    /**
     * onClick method
     * @param {string} button
     * @param {any} event
     * @return void
     */
    onClick(button, event) {
        this.buttonClick.emit(new DatatableClickEvent(button, this.selectedRow));
        event.stopPropagation();
        this.resetSelectedRow(button);
    }
    /**
     * onSelectChange method
     * @param {any} event
     * @returns void
     */
    onSelectChange(event) {
        this.onRowSelected.emit(this.selectedRow);
        if (Array.isArray(this.selectedRow) && this.selectedRow.length > 1) {
            this.updateMultipleButtonsStatus(true);
        }
        else {
            this.updateMultipleButtonsStatus(false);
        }
    }
    /**
     * updateMultipleButtonsStatus method
     * @param {boolean} hasMultipleSelection
     * @return void
     */
    updateMultipleButtonsStatus(hasMultipleSelection) {
        this.extraButtons.forEach((button) => {
            if (hasMultipleSelection && !button.allowMultipleSelection) {
                button.disabled = true;
            }
            else {
                button.disabled = false;
            }
        });
    }
    /**
     * refresh method
     * @param query
     * @returns void
     */
    refresh(query) {
        this.dataProvider.load(query);
    }
    /**
     * resetSelectedRow method
     * @param button
     * @returns void
     */
    resetSelectedRow(button) {
        if (button === 'delete') {
            this.selectedRow = null;
        }
    }
    /**
     * reset method
     * @returns void
     */
    reset() {
        this.pDatatableComponent.first = 0;
        this.dataProvider.reset();
        this.refresh();
    }
    /**
     * paginationFooterText method
     * @param {string} msg
     * @returns string
     */
    paginationFooterText(msg) {
        const registros = this.totalRecords() === 1 ? 'registro' : 'registros';
        if (msg === '') {
            return `Exibindo: ${this.currentFirstIndex()} a ${this.currentLastIndex()} de ${this.totalRecords()} ${registros}`;
        }
        msg = msg.replace('{totalRecords}', this.totalRecords().toString());
        msg = msg.replace('{currentFirstIndex}', this.currentFirstIndex().toString());
        msg = msg.replace('{currentLastIndex}', this.currentLastIndex().toString());
        return msg;
    }
    /**
     * currentFirstIndex method
     * @returns number
     */
    currentFirstIndex() {
        return this.pDatatableComponent.first + 1;
    }
    /**
     * currentLastIndex method
     * @returns number
     */
    currentLastIndex() {
        const currentLastIndex = this.pDatatableComponent.first + this.pDatatableComponent.rows;
        if (currentLastIndex > this.totalRecords()) {
            return this.totalRecords();
        }
        return currentLastIndex;
    }
    /**
     * totalRecords method
     * @returns number
     */
    totalRecords() {
        return this.pDatatableComponent.totalRecords;
    }
    /**
     * checkRolesToButton method
     * @param {string} button
     * @return boolean
     */
    checkRolesToButton(button) {
        if (this[button]) {
            if (button === 'rulesToHide' || button === 'rulesToShowEdit' || button === 'rulesToShowDelete') {
                this.checkUseButtons(button);
                return this.authorizationService.hasRole(this[button]);
            }
            return !this.authorizationService.hasRole(this[button]);
        }
        return true;
    }
    /**
     * checkUseButtons method
     * @param {string} button
     * @returns void
     */
    checkUseButtons(button) {
        if (this[button] && this[button.replace('Show', 'Hide')]) {
            throw new Error('Não é possível definir dois valores de roles para os botões padrões.');
        }
    }
    /**
     * filter method
     * @returns void
     */
    filter() {
        for (let prop in this.filterParams) {
            if (this.filterParams[prop] === '' || (this.filterParams[prop].length === 0)) {
                delete this.filterParams[prop];
            }
        }
        if (Object.getOwnPropertyNames(this.filterParams).length === 0) {
            this.reset();
        }
        else {
            this.refresh(this.filterParams);
        }
    }
    /**
     * Método para filtrar por colunas
     * @param column chave da coluna na tabela
     * @param filters valor do filtro
     */
    filterColumn(column, filters) {
        const values = [];
        if (filters instanceof Array) {
            values[column] = [];
            for (let item in filters) {
                let val = (filters[item] instanceof Object) ? filters[item].value : filters[item];
                values[column].push(val);
            }
        }
        else {
            values[column] = filters;
        }
        this.filterParams = Object.assign(Object.assign({}, this.filterParams), values);
        return this.filter();
    }
    /**
     * Inicia todas as colunas da tabela como visíveis
     */
    setAllColumnsVisible() {
        this.columns.forEach((col) => {
            this.visibleColumns[col.field] = 'table-cell';
        });
    }
    /**
     * Verifica se uma coluna deve estar visível
     * @param column string
     * @param visibleColumns Array
     */
    visibleColumnCheck(column, visibleColumns) {
        return visibleColumns.some((item) => {
            return (item.field) ? item.field == column : true;
        });
    }
    /**
     * Atualzia os valores da variável 'visibleColuns' para mostrar ou não as colunas
     * @param columns array
     */
    updateVisibleColumns(columns) {
        for (let col in this.visibleColumns) {
            if (this.visibleColumnCheck(col, columns)) {
                this.visibleColumns[col] = 'table-cell';
            }
            else {
                this.visibleColumns[col] = 'none';
            }
        }
    }
    onRowEditInitEvent(event, rowData) {
        const tr = event.srcElement.closest('tr');
        setTimeout(() => {
            this.editingRow = true;
            const top = tr.offsetTop;
            const height = tr.offsetHeight;
            const editButtons = tr.querySelector('.editar-campos');
            editButtons.style.top = (top + height - 75) + 'px';
            editButtons.style.height = '75px';
            editButtons.style.backgroundColor = '#d0d0d0';
            editButtons.style.opacity = 1;
            this.clonedRowData[rowData.id] = Object.assign({}, rowData);
            this.onRowEditEvent.emit({ event: "init", data: rowData });
        }, null, tr);
    }
    onRowEditSaveEvent(event, rowData) {
        this.onRowEditEvent.emit({ event: "save", data: rowData });
        this.resetEditingMode(event);
    }
    onRowEditCancelEvent(event, rowData, index) {
        this.value[index] = this.clonedRowData[rowData.id];
        delete this.clonedRowData[rowData[this.dataKey]];
        this.onRowEditEvent.emit({ event: "cancel", data: rowData });
        this.resetEditingMode(event);
    }
    resetEditingMode(event) {
        const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
        editButtons.style.opacity = 0;
        editButtons.style.backgroundColor = '#0000006b';
        editButtons.style.display = 'none';
        this.editingRow = false;
    }
    editarLinhaOver(event) {
        if (!this.editingRow && this.editMode == 'row') {
            const top = event.srcElement.closest('tr').offsetTop;
            const height = event.srcElement.closest('tr').offsetHeight;
            const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
            editButtons.style.display = 'flex';
            editButtons.style.top = top + 'px';
            editButtons.style.height = height + 'px';
            editButtons.style.backgroundColor = '#0000006b';
            editButtons.style.opacity = 1;
        }
    }
    editarLinhaOut(event) {
        if (!this.editingRow) {
            const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
            editButtons.style.display = 'none';
            editButtons.style.opacity = 0;
        }
    }
};
DatatableComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DataProviderFactory },
    { type: Authorization }
];
__decorate([
    Input()
], DatatableComponent.prototype, "splitButton", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "value", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "type", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rows", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rowsPerPageOptions", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "url", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "extraParams", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "paginationParameters", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "showPaginationFooter", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableEdit", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableView", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableDelete", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "selectionMode", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "enableButtonsScroll", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "emptyMessage", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "verticalButtons", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "enableScroll", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "scrollHeight", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "scrollWidth", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHide", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToShowEdit", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToShowDelete", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHideView", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHideEdit", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHideDelete", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableLoadingBlockUI", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rowStyleClass", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "filterOnColumn", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "customFilterOptions", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "buttonClick", void 0);
__decorate([
    ViewChild(DataTable, { static: true })
], DatatableComponent.prototype, "pDatatableComponent", void 0);
__decorate([
    ContentChildren(DatatableButtonComponent)
], DatatableComponent.prototype, "extraButtons", void 0);
__decorate([
    ContentChildren(Column)
], DatatableComponent.prototype, "columns", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "startedLoading", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "finishedLoading", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "onRowSelected", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "showVisibleColumnsControl", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "editMode", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "dataKey", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "onRowEditEvent", void 0);
DatatableComponent = __decorate([
    Component({
        selector: 'basis-datatable',
        template: "<p-blockUI [blocked]=\"blockContent\">\n    <div class=\"center-spinner\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n<div [ngClass]=\"{'ui-g-2':verticalButtons, 'ui-g-5':!verticalButtons}\">&nbsp;</div>\n<div [ngClass]=\"verticalButtons ? 'ui-g-11' : 'ui-g-12'\">\n    <basis-show-column *ngIf=\"showVisibleColumnsControl\" [columns]=\"columns\" (updateVisibleColumns)=\"updateVisibleColumns($event)\"></basis-show-column>\n</div>\n<div [ngClass]=\"{\n        'ui-g-11' : verticalButtons,\n        'ui-g-12' : !verticalButtons,\n        'edicao-tabela' : editMode == 'row',\n        'editing-row': editingRow\n    }\">\n    <p-table\n        [value]=\"value\"\n        [rows]=\"rows\"\n        [paginator]=\"true\"\n        [selectionMode]=\"selectionMode\"\n        [responsive]=\"true\"\n        [scrollable]=\"enableScroll\"\n        [scrollHeight]=\"scrollHeight\"\n        [(selection)]=\"selectedRow\"\n        [editMode]=\"editMode\"\n        (onRowSelect)=\"onSelectChange($event)\"\n        (onRowUnselect)=\"onSelectChange($event)\"\n        #datatable\n        [dataKey]=\"dataKey\">\n        <ng-template pTemplate=\"header\" let-columns>\n            <div class=\"ui-g\" *ngIf=\"!verticalButtons\">\n                <div *ngIf=\"showHorizontalButtonsHeader\" class=\"ui-g-4 ui-sm-12\">\n                    <span class=\"horizontal-buttons-header\">{{ horizontalButtonsHeader }}</span>\n                </div>\n                <div [ngClass]=\"{\n                    'horizontal-buttons': true,\n                    'ui-sm-12': true,\n                    'ui-g-8': showHorizontalButtonsHeader,\n                    'ui-g-12': !showHorizontalButtonsHeader}\">\n                    <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n                    <ng-content select=\"horizontalButtons\"></ng-content>\n                </div>\n            </div>\n            <tr>\n                <th *ngFor=\"let col of columns\"\n                    [pSortableColumn]=\"col.sortable ? col.field : null\"\n                    [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    {{col.header}}\n                    <p-sortIcon *ngIf=\"col.sortable\" [field]=\"col.field\"></p-sortIcon>\n                </th>\n            </tr>\n            <tr *ngIf=\"filterOnColumn\">\n                <th *ngFor=\"let col of columns\" [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    <basis-filter-column\n                        [listaOriginal]=\"filterSelectOptions\"\n                        [lista]=\"filterSelectOptions\"\n                        [field]=\"col.field\"\n                        [updateFiltro]=\"updateFilterColumn\"\n                        (outputEvent)=\"filterColumn(col.field, $event)\"\n                        [filterType]=\"col.filterType\"\n                        [tableType]=\"type\"\n                        [customFilterOptions]=\"customFilterOptions\">\n                    </basis-filter-column>\n                </th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-editing=\"editing\" let-ri=\"rowIndex\">\n            <tr [pSelectableRow]=\"rowData\"\n                [pContextMenuRow]=\"rowData\"\n                [pEditableRow]=\"rowData\"\n                [ngClass]=\"{'editing': editing}\"\n                (mouseover)=\"editarLinhaOver($event)\"\n                (mouseleave)=\"editarLinhaOut($event)\">\n                <td *ngFor=\"let col of columns; last as isLast\" [ngStyle]=\"{'display': visibleColumns[col.field]}\" >\n                    <ng-container *ngIf=\"!editMode\">\n                        <span *ngIf=\"!col.bodyTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                        <ng-container\n                            *ngIf=\"col.bodyTemplate\"\n                            [ngTemplateOutlet]=\"col.bodyTemplate\"\n                            [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"editMode\">\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <span *ngIf=\"!col.outputTemplate && col.editable == false\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <div class=\"ui-md-12\" *ngIf=\"!col.inputTemplate && col.editable != false\">\n                                    <div class=\"ui-g form-group\">\n                                        <div class=\"ui-md-12\">\n                                            <span class=\"md-inputfield\">\n                                                <input pInputText type=\"text\" [(ngModel)]=\"rowData[col.field]\" [style]=\"{'width':'100%'}\">\n                                                <label>{{ col.header }}</label>\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <ng-container\n                                    *ngIf=\"col.inputTemplate\"\n                                    [ngTemplateOutlet]=\"col.inputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ 'rowData': rowData, 'col': col }\">\n                                </ng-container>\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                <span *ngIf=\"!col.outputTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <ng-container\n                                    *ngIf=\"col.outputTemplate\"\n                                    [ngTemplateOutlet]=\"col.outputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                                </ng-container>\n                            </ng-template>\n                        </p-cellEditor>\n                    </ng-container>\n                    <div *ngIf=\"isLast\" class=\"editar-campos\">\n                        <button *ngIf=\"!editing\" pButton type=\"button\" pInitEditableRow (click)=\"onRowEditInitEvent($event, rowData)\">Editar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pSaveEditableRow class=\"ui-button-success\" style=\"margin-right: .5em\" (click)=\"onRowEditSaveEvent($event, rowData)\">Salvar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pCancelEditableRow class=\"ui-button-danger\" (click)=\"onRowEditCancelEvent($event, rowData, ri)\">Cancelar</button>\n                    </div>\n                </td>\n            </tr>\n        </ng-template>\n        <ng-template *ngIf=\"emptyMessage\">\n            {{ emptyMessage }}\n        </ng-template>\n        <p-footer *ngIf=\"showPaginationFooter && totalRecords() > 0\">\n            {{ paginationFooterText(footerMsg) }}\n        </p-footer>\n\n    </p-table>\n</div>\n<div *ngIf=\"verticalButtons\"\n    class=\"ui-g-1 ui-g-nopad\"\n    [style.position]=\"enableButtonsScroll ? 'sticky' : ''\"\n    [style.top]=\"enableButtonsScroll ? '15%' : ''\">\n        <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n        <ng-content></ng-content>\n</div>\n\n<ng-template #defaultButtons>\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Editar' : 'Escolha um registro para editar.' \"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-success\" icon=\"edit\" (click)=\"onClick('edit', $event)\"\n        *ngIf=\"!disableEdit && checkRolesToButton('rulesToShowView') && checkRolesToButton('rulesToHideView')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Visualizar' : 'Escolha um registro para visualizar.'\"\n        [class.horizontal-button]=\"!verticalButtons\" icon=\"remove-red-eye\" (click)=\"onClick('view', $event)\"\n        *ngIf=\"!disableView && checkRolesToButton('rulesToShowEdit') && checkRolesToButton('rulesToHideEdit')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Excluir' : 'Escolha um registro para excluir.'\"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-danger\" icon=\"delete\" (click)=\"onClick('delete', $event)\"\n       *ngIf=\"!disableDelete && checkRolesToButton('rulesToShowDelete') && checkRolesToButton('rulesToHideDelete')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <datatable-splitbutton\n        [icon]=\"splitButton.icon\"\n        [class]=\"splitButton.class\"\n        [items]=\"splitButton.itens\"\n        [label]=\"splitButton.label\"\n        [method]=\"splitButton.method\"\n        *ngIf=\"splitButton\">\n    </datatable-splitbutton>\n</ng-template>\n",
        encapsulation: ViewEncapsulation.None,
        styles: ["body .ui-datatable .ui-datatable-data tr td{word-wrap:break-word}.horizontal-buttons{display:flex;flex-flow:row wrap;justify-content:flex-end}.horizontal-button{padding:0 3px}.horizontal-buttons-header{font-size:1.3em;word-wrap:break-word}.center-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}.text-right{text-align:right}basis-show-column .ui-multiselect-panel.ui-widget{width:100%;max-width:100%}.edicao-tabela,.edita-linha{position:relative}tr.editing td{padding-bottom:75px!important}.editar-campos{opacity:0;position:absolute;width:100%;background-color:#0000006b;left:0;margin-top:0;display:flex;align-items:center;justify-content:center;min-height:35px;transition:.3s ease-in-out;z-index:1}.editar-campos button{color:#fff;font-size:14px;padding:6px 30px 10px;border-radius:5px;height:28px;width:120px!important}.bt-cancelar,.bt-salvar{margin:0 10px}"]
    })
], DatatableComponent);
export { DatatableComponent };
//# sourceMappingURL=data:application/json;base64,