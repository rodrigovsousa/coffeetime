import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * Class DatatableService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
let DatatableService = class DatatableService {
    /**
     * constructor method
     * @constructor
     * @param {HttpClient} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * search method
     * @param {LazyLoadEvent} event
     * @param {String} url
     * @param {number} rows
     * @param {boolean} orderInSort
     * @param {any} query
     * @return Observable
     */
    search(event, url, rows, orderInSort, query) {
        let page = 0;
        if (event !== undefined && event.first > 0) {
            page = Math.floor(event.first / rows);
        }
        let order = event.sortOrder === 1 ? 'asc' : 'desc';
        let params = new HttpParams()
            .set('page', page.toString())
            .set('size', rows.toString());
        if (orderInSort) {
            if (event.sortField !== undefined) {
                params = params.set('sort', event.sortField + ',' + order);
            }
        }
        else {
            if (event.sortField !== undefined) {
                params = params
                    .set('sort', event.sortField)
                    .set('order', order);
            }
        }
        if ('string' === typeof query) {
            params = params.set('query', query);
        }
        if ('object' === typeof query) {
            Object.keys(query).forEach(key => params = params.set(key, query[key]));
        }
        return this.http.get(`${url}?${params.toString()}`, { observe: 'response' });
    }
};
DatatableService.ɵfac = function DatatableService_Factory(t) { return new (t || DatatableService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
DatatableService.ctorParameters = () => [
    { type: HttpClient }
];
DatatableService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DatatableService_Factory() { return new DatatableService(i0.ɵɵinject(i1.HttpClient)); }, token: DatatableService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
export { DatatableService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzL2xpYi9kYXRhdGFibGUvZGF0YXRhYmxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RDtBQUdNO0FBRk47QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBSUgsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7QUFDN0IsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFlBQW9CLElBQWdCO0FBQUksUUFBcEIsU0FBSSxHQUFKLElBQUksQ0FBWTtBQUFDLElBQUUsQ0FBQztBQUM1QyxJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxNQUFNLENBQUMsS0FBb0IsRUFBRSxHQUFXLEVBQUUsSUFBWSxFQUFFLFdBQW9CLEVBQUUsS0FBVztBQUM3RixRQUFRLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNyQixRQUFRLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtBQUNwRCxZQUFZLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDbEQsU0FBUztBQUNULFFBQ1EsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzNELFFBQVEsSUFBSSxNQUFNLEdBQWUsSUFBSSxVQUFVLEVBQUU7QUFDakQsYUFBUyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNyQyxhQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDdEMsUUFDUSxJQUFJLFdBQVcsRUFBRTtBQUN6QixZQUFZLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7QUFDL0MsZ0JBQWdCLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUMzRSxhQUFhO0FBQ2IsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7QUFDL0MsZ0JBQWdCLE1BQU0sR0FBRyxNQUFNO0FBQy9CLHFCQUFpQixHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDN0MscUJBQWlCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckMsYUFBYTtBQUNiLFNBQVM7QUFDVCxRQUNRLElBQUksUUFBUSxLQUFLLE9BQU8sS0FBSyxFQUFFO0FBQ3ZDLFlBQVksTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELFNBQVM7QUFDVCxRQUNRLElBQUksUUFBUSxLQUFLLE9BQU8sS0FBSyxFQUFFO0FBQ3ZDLFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRixTQUFTO0FBQ1QsUUFBUSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDckYsSUFBSSxDQUFDO0FBQ0wsQ0FBQzt5SUFBQTtBQUNEO0FBQTBDLFlBNUNaLFVBQVU7QUFBRztBQUUzQztBQVRhLGdCQUFnQixvQkFINUIsVUFBVSxDQUFDLFVBQ1IsVUFBVSxFQUFFO0FBQU0sTUFDckIsQ0FBQyxJQUNXO0NBQWdCLENBa0Q1Qjs7OzJFQUNEO0FBQUMsU0FuRFksZ0JBQWdCO0FBRTdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGF6eUxvYWRFdmVudCB9IGZyb20gJ3ByaW1lbmcnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLyoqXG4gKiBDbGFzcyBEYXRhdGFibGVTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46IFwicm9vdFwiXG59KVxuZXhwb3J0IGNsYXNzIERhdGF0YWJsZVNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtIdHRwQ2xpZW50fSBodHRwXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gICAgLyoqXG4gICAgICogc2VhcmNoIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7TGF6eUxvYWRFdmVudH0gZXZlbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd3NcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9yZGVySW5Tb3J0XG4gICAgICogQHBhcmFtIHthbnl9IHF1ZXJ5XG4gICAgICogQHJldHVybiBPYnNlcnZhYmxlXG4gICAgICovXG4gICAgc2VhcmNoKGV2ZW50OiBMYXp5TG9hZEV2ZW50LCB1cmw6IHN0cmluZywgcm93czogbnVtYmVyLCBvcmRlckluU29ydDogYm9vbGVhbiwgcXVlcnk/OiBhbnkpIHtcbiAgICAgICAgbGV0IHBhZ2UgPSAwO1xuICAgICAgICBpZiAoZXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5maXJzdCA+IDApIHtcbiAgICAgICAgICAgIHBhZ2UgPSBNYXRoLmZsb29yKGV2ZW50LmZpcnN0IC8gcm93cyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3JkZXIgPSBldmVudC5zb3J0T3JkZXIgPT09IDEgPyAnYXNjJyA6ICdkZXNjJztcbiAgICAgICAgbGV0IHBhcmFtczogSHR0cFBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKClcbiAgICAgICAgLnNldCgncGFnZScsIHBhZ2UudG9TdHJpbmcoKSlcbiAgICAgICAgLnNldCgnc2l6ZScsIHJvd3MudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgaWYgKG9yZGVySW5Tb3J0KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc29ydEZpZWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMuc2V0KCdzb3J0JywgZXZlbnQuc29ydEZpZWxkICsgJywnICsgb3JkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvcnRGaWVsZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zXG4gICAgICAgICAgICAgICAgLnNldCgnc29ydCcsIGV2ZW50LnNvcnRGaWVsZClcbiAgICAgICAgICAgICAgICAuc2V0KCdvcmRlcicsIG9yZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHF1ZXJ5KSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMuc2V0KCdxdWVyeScsIHF1ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHF1ZXJ5KSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhxdWVyeSkuZm9yRWFjaChrZXkgPT4gcGFyYW1zID0gcGFyYW1zLnNldChrZXksIHF1ZXJ5W2tleV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt1cmx9PyR7cGFyYW1zLnRvU3RyaW5nKCl9YCwgeyBvYnNlcnZlOiAncmVzcG9uc2UnIH0pO1xuICAgIH1cbn1cbiJdfQ==