import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * Class DatatableService
 * @class
 */
let DatatableService = class DatatableService {
    /**
     * constructor method
     * @constructor
     * @param {HttpClient} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * search method
     * @param {LazyLoadEvent} event
     * @param {String} url
     * @param {number} rows
     * @param {boolean} orderInSort
     * @param {any} query
     * @return Observable
     */
    search(event, url, rows, orderInSort, query) {
        let page = 0;
        if (event !== undefined && event.first > 0) {
            page = Math.floor(event.first / rows);
        }
        let order = event.sortOrder === 1 ? 'asc' : 'desc';
        let params = new HttpParams()
            .set('page', page.toString())
            .set('size', rows.toString());
        if (orderInSort) {
            if (event.sortField !== undefined) {
                params = params.set('sort', event.sortField + ',' + order);
            }
        }
        else {
            if (event.sortField !== undefined) {
                params = params
                    .set('sort', event.sortField)
                    .set('order', order);
            }
        }
        if ('string' === typeof query) {
            params = params.set('query', query);
        }
        if ('object' === typeof query) {
            Object.keys(query).forEach(key => params = params.set(key, query[key]));
        }
        return this.http.get(`${url}?${params.toString()}`, { observe: 'response' });
    }
};
DatatableService.ctorParameters = () => [
    { type: HttpClient }
];
DatatableService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DatatableService_Factory() { return new DatatableService(i0.ɵɵinject(i1.HttpClient)); }, token: DatatableService, providedIn: "root" });
DatatableService = __decorate([
    Injectable({
        providedIn: "root"
    })
], DatatableService);
export { DatatableService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZS9kYXRhdGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFFOUQ7OztHQUdHO0FBSUgsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFFekI7Ozs7T0FJRztJQUNILFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBRyxDQUFDO0lBRXhDOzs7Ozs7OztPQVFHO0lBQ0gsTUFBTSxDQUFDLEtBQW9CLEVBQUUsR0FBVyxFQUFFLElBQVksRUFBRSxXQUFvQixFQUFFLEtBQVc7UUFDckYsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ3hDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDbkQsSUFBSSxNQUFNLEdBQWUsSUFBSSxVQUFVLEVBQUU7YUFDeEMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDNUIsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUU5QixJQUFJLFdBQVcsRUFBRTtZQUNiLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7Z0JBQy9CLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQzthQUM5RDtTQUNKO2FBQU07WUFDSCxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO2dCQUMvQixNQUFNLEdBQUcsTUFBTTtxQkFDZCxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUM7cUJBQzVCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDeEI7U0FDSjtRQUVELElBQUksUUFBUSxLQUFLLE9BQU8sS0FBSyxFQUFFO1lBQzNCLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2QztRQUVELElBQUksUUFBUSxLQUFLLE9BQU8sS0FBSyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0U7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDakYsQ0FBQztDQUNKLENBQUE7O1lBM0M2QixVQUFVOzs7QUFQM0IsZ0JBQWdCO0lBSDVCLFVBQVUsQ0FBQztRQUNSLFVBQVUsRUFBRSxNQUFNO0tBQ3JCLENBQUM7R0FDVyxnQkFBZ0IsQ0FrRDVCO1NBbERZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExhenlMb2FkRXZlbnQgfSBmcm9tICdwcmltZW5nJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8qKlxuICogQ2xhc3MgRGF0YXRhYmxlU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBEYXRhdGFibGVTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SHR0cENsaWVudH0gaHR0cFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge31cblxuICAgIC8qKlxuICAgICAqIHNlYXJjaCBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0xhenlMb2FkRXZlbnR9IGV2ZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcmRlckluU29ydFxuICAgICAqIEBwYXJhbSB7YW55fSBxdWVyeVxuICAgICAqIEByZXR1cm4gT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIHNlYXJjaChldmVudDogTGF6eUxvYWRFdmVudCwgdXJsOiBzdHJpbmcsIHJvd3M6IG51bWJlciwgb3JkZXJJblNvcnQ6IGJvb2xlYW4sIHF1ZXJ5PzogYW55KSB7XG4gICAgICAgIGxldCBwYWdlID0gMDtcbiAgICAgICAgaWYgKGV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQuZmlyc3QgPiAwKSB7XG4gICAgICAgICAgICBwYWdlID0gTWF0aC5mbG9vcihldmVudC5maXJzdCAvIHJvd3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG9yZGVyID0gZXZlbnQuc29ydE9yZGVyID09PSAxID8gJ2FzYycgOiAnZGVzYyc7XG4gICAgICAgIGxldCBwYXJhbXM6IEh0dHBQYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpXG4gICAgICAgIC5zZXQoJ3BhZ2UnLCBwYWdlLnRvU3RyaW5nKCkpXG4gICAgICAgIC5zZXQoJ3NpemUnLCByb3dzLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgIGlmIChvcmRlckluU29ydCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvcnRGaWVsZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLnNldCgnc29ydCcsIGV2ZW50LnNvcnRGaWVsZCArICcsJyArIG9yZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3J0RmllbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtc1xuICAgICAgICAgICAgICAgIC5zZXQoJ3NvcnQnLCBldmVudC5zb3J0RmllbGQpXG4gICAgICAgICAgICAgICAgLnNldCgnb3JkZXInLCBvcmRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBxdWVyeSkge1xuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLnNldCgncXVlcnknLCBxdWVyeSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBxdWVyeSkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocXVlcnkpLmZvckVhY2goa2V5ID0+IHBhcmFtcyA9IHBhcmFtcy5zZXQoa2V5LCBxdWVyeVtrZXldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dXJsfT8ke3BhcmFtcy50b1N0cmluZygpfWAsIHsgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyB9KTtcbiAgICB9XG59XG4iXX0=