import { __decorate } from "tslib";
import { Component, EventEmitter, Output, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
let FilterColumn = class FilterColumn {
    constructor() {
        this.listaOriginal = [];
        this.lista = [];
        this.labelDefaultImplementation = false;
        this.updateFiltro = false;
        this.customFilterOptions = {};
        this.template = 'filter_text';
        this.outputEvent = new EventEmitter();
        this.debouncer = new Subject();
        this.resultado = [];
        this.listaFields = [];
    }
    ngOnInit() {
        this.debouncer
            .pipe(debounceTime((this.tableType === 'memory') ? 300 : 1000))
            .subscribe((value) => this.outputEvent.emit(value));
        this.template = `filter_${this.filterType}`;
    }
    ngOnChanges(changes) {
        if (this.checkChanges(changes, 'listaOriginal')) {
            this.preencherFields();
        }
    }
    checkChanges(changes, property) {
        return changes[property] && changes[property].previousValue != changes[property].currentValue;
    }
    /**
     * Método para propagar o evento de filtragem
     * @param event filtro
     */
    filtrar(event) {
        this.debouncer.next(this.filtro);
    }
    /**
     * Preenche os itens que serão exibidos no multiselect, removendo duplicidades
     */
    preencherFields() {
        this.listaFields = [];
        this.listaOriginal.filter(pi => pi[this.field] !== null).forEach(row => {
            let item = { label: row[this.field], value: row[this.field] };
            if (!this.verificarSeExisteField(item)) {
                this.listaFields.push(item);
            }
        });
    }
    /**
     *
     * @param field Verifica duplicidade de fields nas opções de seleção
     */
    verificarSeExisteField(field) {
        return this.listaFields.some(item => {
            return item.value == field.value;
        });
    }
    /**
     * Caso o usuaŕio não forneça uma lista para o options, será criada uma lista com
     * os valores presentes na tabela
     */
    getCustomFilterOptions() {
        if (this.customFilterOptions.hasOwnProperty(this.field)) {
            return this.customFilterOptions[this.field];
        }
        return this.listaFields;
    }
};
__decorate([
    Input()
], FilterColumn.prototype, "listaOriginal", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "lista", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "field", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "header", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "labelDefaultImplementation", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "labelDefaultName", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "updateFiltro", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "filterType", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "tableType", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "customFilterOptions", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "template", void 0);
__decorate([
    Output()
], FilterColumn.prototype, "outputEvent", void 0);
FilterColumn = __decorate([
    Component({
        selector: 'basis-filter-column',
        template: "<div [ngSwitch]=\"filterType\">\n    <div *ngSwitchCase=\"'text'\">\n        <div class=\"ui-g form-group\">\n            <div class=\"ui-md-12\">\n                <span class=\"md-inputfield\">\n                    <input type=\"text\" pInputText (input)=\"filtrar($event)\" [(ngModel)]=\"filtro\">\n                    <label>{{ (header) ? header : 'Filtro' }}</label>\n                </span>\n            </div>\n        </div>\n    </div>\n    <div *ngSwitchCase=\"'select'\">\n        <p-multiSelect\n            [options]=\"getCustomFilterOptions()\"\n            [defaultLabel]=\"(header)? header: '&nbsp;'\"\n            [optionLabel]=\"'label'\"\n            appendTo=\"body\"\n            [ngModelOptions]=\"{standalone: true}\"\n            (onChange)=\"filtrar($event)\"\n            [(ngModel)]=\"filtro\"\n            [style]=\"{'width':'100%'}\">\n        </p-multiSelect>\n    </div>\n</div>\n"
    })
], FilterColumn);
export { FilterColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZS9maWx0ZXItY29sdW1uL2ZpbHRlci1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFtQyxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU05QyxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0lBa0NyQjtRQWhDUyxrQkFBYSxHQUFVLEVBQUUsQ0FBQztRQUUxQixVQUFLLEdBQVUsRUFBRSxDQUFDO1FBTWxCLCtCQUEwQixHQUFZLEtBQUssQ0FBQztRQUk1QyxpQkFBWSxHQUFZLEtBQUssQ0FBQztRQU05Qix3QkFBbUIsR0FBVyxFQUFFLENBQUM7UUFFakMsYUFBUSxHQUFHLGFBQWEsQ0FBQztRQUV4QixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFbkMsY0FBUyxHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDO1FBSXJELGNBQVMsR0FBVSxFQUFFLENBQUM7UUFFZCxnQkFBVyxHQUFVLEVBQUUsQ0FBQztJQUVoQixDQUFDO0lBRWpCLFFBQVE7UUFDSixJQUFJLENBQUMsU0FBUzthQUNULElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLFFBQVEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzdELFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRCxXQUFXLENBQUMsT0FBNkM7UUFDckQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQTZDLEVBQUUsUUFBUTtRQUNoRSxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDbEcsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7UUFDWCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ25FLElBQUksSUFBSSxHQUFHLEVBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7T0FHRztJQUNILHNCQUFzQixDQUFDLEtBQUs7UUFDeEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7O09BR0c7SUFDSCxzQkFBc0I7UUFDbEIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDNUIsQ0FBQztDQUVKLENBQUE7QUEvRlk7SUFBUixLQUFLLEVBQUU7bURBQTJCO0FBRTFCO0lBQVIsS0FBSyxFQUFFOzJDQUFtQjtBQUVsQjtJQUFSLEtBQUssRUFBRTsyQ0FBZTtBQUVkO0lBQVIsS0FBSyxFQUFFOzRDQUFnQjtBQUVmO0lBQVIsS0FBSyxFQUFFO2dFQUE2QztBQUU1QztJQUFSLEtBQUssRUFBRTtzREFBMEI7QUFFekI7SUFBUixLQUFLLEVBQUU7a0RBQStCO0FBRTlCO0lBQVIsS0FBSyxFQUFFO2dEQUFvQjtBQUVuQjtJQUFSLEtBQUssRUFBRTsrQ0FBbUI7QUFFbEI7SUFBUixLQUFLLEVBQUU7eURBQWtDO0FBRWpDO0lBQVIsS0FBSyxFQUFFOzhDQUEwQjtBQUV4QjtJQUFULE1BQU0sRUFBRTtpREFBa0M7QUF4QmxDLFlBQVk7SUFKeEIsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQiwwNUJBQTZDO0tBQ2hELENBQUM7R0FDVyxZQUFZLENBaUd4QjtTQWpHWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdiYXNpcy1maWx0ZXItY29sdW1uJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZmlsdGVyLWNvbHVtbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRmlsdGVyQ29sdW1uIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQge1xuXG4gICAgQElucHV0KCkgbGlzdGFPcmlnaW5hbDogYW55W10gPSBbXTtcblxuICAgIEBJbnB1dCgpIGxpc3RhOiBhbnlbXSA9IFtdO1xuXG4gICAgQElucHV0KCkgZmllbGQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGhlYWRlcjogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgbGFiZWxEZWZhdWx0SW1wbGVtZW50YXRpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpIGxhYmVsRGVmYXVsdE5hbWU6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIHVwZGF0ZUZpbHRybzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQElucHV0KCkgZmlsdGVyVHlwZTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgdGFibGVUeXBlOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBjdXN0b21GaWx0ZXJPcHRpb25zOiBPYmplY3QgPSB7fTtcblxuICAgIEBJbnB1dCgpIHRlbXBsYXRlID0gJ2ZpbHRlcl90ZXh0JztcblxuICAgIEBPdXRwdXQoKSBvdXRwdXRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHByaXZhdGUgZGVib3VuY2VyOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICBmaWx0cm86IGFueTtcblxuICAgIHJlc3VsdGFkbzogYW55W10gPSBbXTtcblxuICAgIHByaXZhdGUgbGlzdGFGaWVsZHM6IGFueVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VyXG4gICAgICAgICAgICAucGlwZShkZWJvdW5jZVRpbWUoKHRoaXMudGFibGVUeXBlID09PSAnbWVtb3J5Jyk/IDMwMCA6IDEwMDApKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgodmFsdWUpID0+IHRoaXMub3V0cHV0RXZlbnQuZW1pdCh2YWx1ZSkpO1xuXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBgZmlsdGVyXyR7dGhpcy5maWx0ZXJUeXBlfWA7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogeyBbcHJvcE5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZSB9KSB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hhbmdlcyhjaGFuZ2VzLCAnbGlzdGFPcmlnaW5hbCcpKSB7XG4gICAgICAgICAgICB0aGlzLnByZWVuY2hlckZpZWxkcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tDaGFuZ2VzKGNoYW5nZXM6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBTaW1wbGVDaGFuZ2UgfSwgcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZXNbcHJvcGVydHldICYmIGNoYW5nZXNbcHJvcGVydHldLnByZXZpb3VzVmFsdWUgIT0gY2hhbmdlc1twcm9wZXJ0eV0uY3VycmVudFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcGFyYSBwcm9wYWdhciBvIGV2ZW50byBkZSBmaWx0cmFnZW1cbiAgICAgKiBAcGFyYW0gZXZlbnQgZmlsdHJvXG4gICAgICovXG4gICAgZmlsdHJhcihldmVudCkge1xuICAgICAgICB0aGlzLmRlYm91bmNlci5uZXh0KHRoaXMuZmlsdHJvKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmVlbmNoZSBvcyBpdGVucyBxdWUgc2Vyw6NvIGV4aWJpZG9zIG5vIG11bHRpc2VsZWN0LCByZW1vdmVuZG8gZHVwbGljaWRhZGVzXG4gICAgICovXG4gICAgcHJlZW5jaGVyRmllbGRzKCkge1xuICAgICAgICB0aGlzLmxpc3RhRmllbGRzID0gW107XG4gICAgICAgIHRoaXMubGlzdGFPcmlnaW5hbC5maWx0ZXIocGkgPT4gcGlbdGhpcy5maWVsZF0gIT09IG51bGwpLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICAgIGxldCBpdGVtID0ge2xhYmVsOiByb3dbdGhpcy5maWVsZF0sIHZhbHVlOiByb3dbdGhpcy5maWVsZF19O1xuICAgICAgICAgICAgaWYgKCF0aGlzLnZlcmlmaWNhclNlRXhpc3RlRmllbGQoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RhRmllbGRzLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpZWxkIFZlcmlmaWNhIGR1cGxpY2lkYWRlIGRlIGZpZWxkcyBuYXMgb3DDp8O1ZXMgZGUgc2VsZcOnw6NvXG4gICAgICovXG4gICAgdmVyaWZpY2FyU2VFeGlzdGVGaWVsZChmaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0YUZpZWxkcy5zb21lKGl0ZW0gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWUgPT0gZmllbGQudmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc28gbyB1c3VhxZVpbyBuw6NvIGZvcm5lw6dhIHVtYSBsaXN0YSBwYXJhIG8gb3B0aW9ucywgc2Vyw6EgY3JpYWRhIHVtYSBsaXN0YSBjb21cbiAgICAgKiBvcyB2YWxvcmVzIHByZXNlbnRlcyBuYSB0YWJlbGFcbiAgICAgKi9cbiAgICBnZXRDdXN0b21GaWx0ZXJPcHRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5jdXN0b21GaWx0ZXJPcHRpb25zLmhhc093blByb3BlcnR5KHRoaXMuZmllbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21GaWx0ZXJPcHRpb25zW3RoaXMuZmllbGRdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGFGaWVsZHM7XG4gICAgfVxuXG59XG4iXX0=