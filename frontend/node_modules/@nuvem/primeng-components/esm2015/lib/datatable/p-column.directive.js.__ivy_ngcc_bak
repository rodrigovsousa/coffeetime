import { __decorate } from "tslib";
import { Input, EventEmitter, TemplateRef, Output, ContentChildren, ContentChild, Directive } from '@angular/core';
import { PrimeTemplate } from 'primeng';
let Column = class Column {
    constructor() {
        this.filterType = 'text';
        this.exportable = true;
        this.resizable = true;
        this.sortFunction = new EventEmitter();
    }
    ngAfterContentInit() {
        this.templates.forEach((item) => {
            switch (item.getType()) {
                case 'header':
                    this.headerTemplate = item.template;
                    break;
                case 'body':
                    this.bodyTemplate = item.template;
                    break;
                case 'footer':
                    this.footerTemplate = item.template;
                    break;
                case 'filter':
                    this.filterTemplate = item.template;
                    break;
                case 'editor':
                    this.editorTemplate = item.template;
                    break;
                case 'input':
                    this.inputTemplate = item.template;
                    break;
                case 'output':
                    this.outputTemplate = item.template;
                    break;
                default:
                    this.bodyTemplate = item.template;
                    break;
            }
        });
    }
};
__decorate([
    Input()
], Column.prototype, "field", void 0);
__decorate([
    Input()
], Column.prototype, "colId", void 0);
__decorate([
    Input()
], Column.prototype, "sortField", void 0);
__decorate([
    Input()
], Column.prototype, "filterField", void 0);
__decorate([
    Input()
], Column.prototype, "header", void 0);
__decorate([
    Input()
], Column.prototype, "footer", void 0);
__decorate([
    Input()
], Column.prototype, "sortable", void 0);
__decorate([
    Input()
], Column.prototype, "editable", void 0);
__decorate([
    Input()
], Column.prototype, "filter", void 0);
__decorate([
    Input()
], Column.prototype, "filterMatchMode", void 0);
__decorate([
    Input()
], Column.prototype, "filterType", void 0);
__decorate([
    Input()
], Column.prototype, "excludeGlobalFilter", void 0);
__decorate([
    Input()
], Column.prototype, "rowspan", void 0);
__decorate([
    Input()
], Column.prototype, "colspan", void 0);
__decorate([
    Input()
], Column.prototype, "scope", void 0);
__decorate([
    Input()
], Column.prototype, "style", void 0);
__decorate([
    Input()
], Column.prototype, "styleClass", void 0);
__decorate([
    Input()
], Column.prototype, "exportable", void 0);
__decorate([
    Input()
], Column.prototype, "headerStyle", void 0);
__decorate([
    Input()
], Column.prototype, "headerStyleClass", void 0);
__decorate([
    Input()
], Column.prototype, "bodyStyle", void 0);
__decorate([
    Input()
], Column.prototype, "bodyStyleClass", void 0);
__decorate([
    Input()
], Column.prototype, "footerStyle", void 0);
__decorate([
    Input()
], Column.prototype, "footerStyleClass", void 0);
__decorate([
    Input()
], Column.prototype, "hidden", void 0);
__decorate([
    Input()
], Column.prototype, "expander", void 0);
__decorate([
    Input()
], Column.prototype, "selectionMode", void 0);
__decorate([
    Input()
], Column.prototype, "filterPlaceholder", void 0);
__decorate([
    Input()
], Column.prototype, "filterMaxlength", void 0);
__decorate([
    Input()
], Column.prototype, "frozen", void 0);
__decorate([
    Input()
], Column.prototype, "resizable", void 0);
__decorate([
    Output()
], Column.prototype, "sortFunction", void 0);
__decorate([
    ContentChildren(PrimeTemplate)
], Column.prototype, "templates", void 0);
__decorate([
    ContentChild(TemplateRef)
], Column.prototype, "template", void 0);
Column = __decorate([
    Directive({
        selector: 'p-column'
    })
], Column);
export { Column };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicC1jb2x1bW4uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL3ByaW1lbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhdGFibGUvcC1jb2x1bW4uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBYSxXQUFXLEVBQW9CLE1BQU0sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoSixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBS3hDLElBQWEsTUFBTSxHQUFuQixNQUFhLE1BQU07SUFBbkI7UUFzQmEsZUFBVSxHQUFXLE1BQU0sQ0FBQztRQWM1QixlQUFVLEdBQVksSUFBSSxDQUFDO1FBMEIzQixjQUFTLEdBQVksSUFBSSxDQUFDO1FBRXpCLGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUF5RG5FLENBQUM7SUFyQ0csa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUM1QixRQUFRLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDcEIsS0FBSyxRQUFRO29CQUNULElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDcEMsTUFBTTtnQkFFVixLQUFLLE1BQU07b0JBQ1AsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO29CQUNsQyxNQUFNO2dCQUVWLEtBQUssUUFBUTtvQkFDVCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7b0JBQ3BDLE1BQU07Z0JBRVYsS0FBSyxRQUFRO29CQUNULElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDcEMsTUFBTTtnQkFFVixLQUFLLFFBQVE7b0JBQ1QsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO29CQUNwQyxNQUFNO2dCQUVWLEtBQUssT0FBTztvQkFDUixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7b0JBQ25DLE1BQU07Z0JBRVYsS0FBSyxRQUFRO29CQUNULElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDcEMsTUFBTTtnQkFFVjtvQkFDSSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7b0JBQ2xDLE1BQU07YUFDYjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUE7QUF2SFk7SUFBUixLQUFLLEVBQUU7cUNBQWU7QUFFZDtJQUFSLEtBQUssRUFBRTtxQ0FBZTtBQUVkO0lBQVIsS0FBSyxFQUFFO3lDQUFtQjtBQUVsQjtJQUFSLEtBQUssRUFBRTsyQ0FBcUI7QUFFcEI7SUFBUixLQUFLLEVBQUU7c0NBQWdCO0FBRWY7SUFBUixLQUFLLEVBQUU7c0NBQWdCO0FBRWY7SUFBUixLQUFLLEVBQUU7d0NBQWU7QUFFZDtJQUFSLEtBQUssRUFBRTt3Q0FBbUI7QUFFbEI7SUFBUixLQUFLLEVBQUU7c0NBQWlCO0FBRWhCO0lBQVIsS0FBSyxFQUFFOytDQUF5QjtBQUV4QjtJQUFSLEtBQUssRUFBRTswQ0FBNkI7QUFFNUI7SUFBUixLQUFLLEVBQUU7bURBQThCO0FBRTdCO0lBQVIsS0FBSyxFQUFFO3VDQUFpQjtBQUVoQjtJQUFSLEtBQUssRUFBRTt1Q0FBaUI7QUFFaEI7SUFBUixLQUFLLEVBQUU7cUNBQWU7QUFFZDtJQUFSLEtBQUssRUFBRTtxQ0FBWTtBQUVYO0lBQVIsS0FBSyxFQUFFOzBDQUFvQjtBQUVuQjtJQUFSLEtBQUssRUFBRTswQ0FBNEI7QUFFM0I7SUFBUixLQUFLLEVBQUU7MkNBQWtCO0FBRWpCO0lBQVIsS0FBSyxFQUFFO2dEQUEwQjtBQUV6QjtJQUFSLEtBQUssRUFBRTt5Q0FBZ0I7QUFFZjtJQUFSLEtBQUssRUFBRTs4Q0FBd0I7QUFFdkI7SUFBUixLQUFLLEVBQUU7MkNBQWtCO0FBRWpCO0lBQVIsS0FBSyxFQUFFO2dEQUEwQjtBQUV6QjtJQUFSLEtBQUssRUFBRTtzQ0FBaUI7QUFFaEI7SUFBUixLQUFLLEVBQUU7d0NBQW1CO0FBRWxCO0lBQVIsS0FBSyxFQUFFOzZDQUF1QjtBQUV0QjtJQUFSLEtBQUssRUFBRTtpREFBMkI7QUFFMUI7SUFBUixLQUFLLEVBQUU7K0NBQXlCO0FBRXhCO0lBQVIsS0FBSyxFQUFFO3NDQUFpQjtBQUVoQjtJQUFSLEtBQUssRUFBRTt5Q0FBMkI7QUFFekI7SUFBVCxNQUFNLEVBQUU7NENBQXNEO0FBRS9CO0lBQS9CLGVBQWUsQ0FBQyxhQUFhLENBQUM7eUNBQTJCO0FBRS9CO0lBQTFCLFlBQVksQ0FBQyxXQUFXLENBQUM7d0NBQTRCO0FBcEU3QyxNQUFNO0lBSGxCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxVQUFVO0tBQ3ZCLENBQUM7R0FDVyxNQUFNLENBeUhsQjtTQXpIWSxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgQWZ0ZXJDb250ZW50SW5pdCwgT3V0cHV0LCBDb250ZW50Q2hpbGRyZW4sIENvbnRlbnRDaGlsZCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcmltZVRlbXBsYXRlIH0gZnJvbSAncHJpbWVuZyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAncC1jb2x1bW4nXG59KVxuZXhwb3J0IGNsYXNzIENvbHVtbiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gICAgQElucHV0KCkgZmllbGQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGNvbElkOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBzb3J0RmllbGQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGZpbHRlckZpZWxkOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBoZWFkZXI6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGZvb3Rlcjogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgc29ydGFibGU6IGFueTtcblxuICAgIEBJbnB1dCgpIGVkaXRhYmxlOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgZmlsdGVyOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgZmlsdGVyTWF0Y2hNb2RlOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBmaWx0ZXJUeXBlOiBzdHJpbmcgPSAndGV4dCc7XG5cbiAgICBASW5wdXQoKSBleGNsdWRlR2xvYmFsRmlsdGVyOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgcm93c3BhbjogbnVtYmVyO1xuXG4gICAgQElucHV0KCkgY29sc3BhbjogbnVtYmVyO1xuXG4gICAgQElucHV0KCkgc2NvcGU6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIHN0eWxlOiBhbnk7XG5cbiAgICBASW5wdXQoKSBzdHlsZUNsYXNzOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBleHBvcnRhYmxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpIGhlYWRlclN0eWxlOiBhbnk7XG5cbiAgICBASW5wdXQoKSBoZWFkZXJTdHlsZUNsYXNzOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBib2R5U3R5bGU6IGFueTtcblxuICAgIEBJbnB1dCgpIGJvZHlTdHlsZUNsYXNzOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBmb290ZXJTdHlsZTogYW55O1xuXG4gICAgQElucHV0KCkgZm9vdGVyU3R5bGVDbGFzczogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgaGlkZGVuOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgZXhwYW5kZXI6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKSBzZWxlY3Rpb25Nb2RlOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBmaWx0ZXJQbGFjZWhvbGRlcjogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgZmlsdGVyTWF4bGVuZ3RoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKSBmcm96ZW46IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKSByZXNpemFibGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgQE91dHB1dCgpIHNvcnRGdW5jdGlvbjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKFByaW1lVGVtcGxhdGUpIHRlbXBsYXRlczogUXVlcnlMaXN0PGFueT47XG5cbiAgICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIHB1YmxpYyBoZWFkZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIHB1YmxpYyBib2R5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBwdWJsaWMgZm9vdGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBwdWJsaWMgZmlsdGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBwdWJsaWMgZWRpdG9yVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBwdWJsaWMgaW5wdXRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIHB1YmxpYyBvdXRwdXRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChpdGVtLmdldFR5cGUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hlYWRlcic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyVGVtcGxhdGUgPSBpdGVtLnRlbXBsYXRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvZHlUZW1wbGF0ZSA9IGl0ZW0udGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZm9vdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb290ZXJUZW1wbGF0ZSA9IGl0ZW0udGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsdGVyJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJUZW1wbGF0ZSA9IGl0ZW0udGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZWRpdG9yJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JUZW1wbGF0ZSA9IGl0ZW0udGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0VGVtcGxhdGUgPSBpdGVtLnRlbXBsYXRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ291dHB1dCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0VGVtcGxhdGUgPSBpdGVtLnRlbXBsYXRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9keVRlbXBsYXRlID0gaXRlbS50ZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==