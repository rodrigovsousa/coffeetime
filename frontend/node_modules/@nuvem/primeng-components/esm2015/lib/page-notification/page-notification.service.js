import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { MessageService } from 'primeng';
import { NotificationProvider } from '@nuvem/angular-base';
import * as i0 from "@angular/core";
import * as i1 from "primeng/api";
/**
 * Class PageNotificationService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'primeng';
let PageNotificationService = class PageNotificationService extends NotificationProvider {
    /**
     * constructor method
     * @constructor
     * @param {MessageService} messageService
     */
    constructor(messageService) {
        super();
        this.messageService = messageService;
        /**
         * successSeverity property
         * @type {string}
         */
        this.successSeverity = 'success';
        /**
         * infoSeverity property
         * @type {string}
         */
        this.infoSeverity = 'info';
        /**
         * warnSeverity property
         * @type {string}
         */
        this.warnSeverity = 'warn';
        /**
         * errorSeverity property
         * @type {string}
         */
        this.errorSeverity = 'error';
        /**
         * createMsg property
         * @type {string}
         */
        this.createMsg = 'Registro incluído com sucesso!';
        /**
         * updateMsg property
         * @type {string}
         */
        this.updateMsg = 'Registro alterado com sucesso!';
        /**
         * deleteMsg property
         * @type {string}
         */
        this.deleteMsg = 'Registro excluído com sucesso!';
    }
    /**
     * addCreateMsg method
     * @param {string} title
     */
    addCreateMsg(title) {
        this.addSuccessMessage(this.createMsg, title);
    }
    /**
     * addSuccessMessage method
     * @param {string} message
     * @param {string} title
     */
    addSuccessMessage(message, title) {
        this.addMsg(this.successSeverity, message, title);
    }
    /**
     * addMsg method
     * @param {string} severity
     * @param {string} msg
     * @param {string} title
     */
    addMsg(severity, msg, title) {
        this.messageService.add({
            severity: severity,
            summary: title,
            detail: msg
        });
    }
    /**
     * addUpdateMsg method
     * @param {string} title
     */
    addUpdateMsg(title) {
        this.addSuccessMessage(this.updateMsg, title);
    }
    /**
     * addDeleteMsg method
     * @param {string} title
     */
    addDeleteMsg(title) {
        this.addSuccessMessage(this.deleteMsg, title);
    }
    /**
     * addInfoMessage method
     * @param {string} message
     * @param {string} title
     */
    addInfoMessage(message, title) {
        this.addMsg(this.infoSeverity, message, title);
    }
    /**
     * addWarnMessage method
     * @param {string} message
     * @param {string} title
     */
    addWarnMessage(message, title) {
        this.addMsg(this.warnSeverity, message, title);
    }
    /**
     * addErrorMessage method
     * @param {string} message
     * @param {string} title
     */
    addErrorMessage(message, title) {
        this.addMsg(this.errorSeverity, message, title);
    }
    /**
     * addErrorProblem method
     * @param {ApplicationProblemType} problem
     */
    addErrorProblem(problem) {
        this.addMsg(this.errorSeverity, problem.detail, problem.title);
    }
};
PageNotificationService.ɵfac = function PageNotificationService_Factory(t) { return new (t || PageNotificationService)(ɵngcc0.ɵɵinject(ɵngcc1.MessageService)); };
PageNotificationService.ctorParameters = () => [
    { type: MessageService }
];
PageNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageNotificationService_Factory() { return new PageNotificationService(i0.ɵɵinject(i1.MessageService)); }, token: PageNotificationService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PageNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.MessageService }]; }, null); })();
export { PageNotificationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BudXZlbS9wcmltZW5nLWNvbXBvbmVudHMvbGliL3BhZ2Utbm90aWZpY2F0aW9uL3BhZ2Utbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsb0JBQW9CLEVBQTBCLE1BQU0scUJBQXFCLENBQUM7QUFDbkY7QUFFZ0M7QUFEaEM7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBSUgsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBd0IsU0FBUSxvQkFBb0I7QUFDakUsSUEyQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUFvQixjQUE4QjtBQUN0RCxRQUFRLEtBQUssRUFBRSxDQUFDO0FBQ2hCLFFBRndCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUFDLFFBL0NuRDtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFBcUIsb0JBQWUsR0FBRyxTQUFTLENBQUM7QUFDakQsUUFDSTtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFBcUIsaUJBQVksR0FBRyxNQUFNLENBQUM7QUFDM0MsUUFDSTtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFBcUIsaUJBQVksR0FBRyxNQUFNLENBQUM7QUFDM0MsUUFDSTtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFBcUIsa0JBQWEsR0FBRyxPQUFPLENBQUM7QUFDN0MsUUFDSTtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFBcUIsY0FBUyxHQUFHLGdDQUFnQyxDQUFDO0FBQ2xFLFFBQ0k7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQXFCLGNBQVMsR0FBRyxnQ0FBZ0MsQ0FBQztBQUNsRSxRQUNJO0FBQ0o7QUFDSTtBQUVKLFdBRE87QUFDUCxRQUFxQixjQUFTLEdBQUcsZ0NBQWdDLENBQUM7QUFDbEUsSUFRSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUFZLENBQUMsS0FBYztBQUMvQixRQUFRLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3RELElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxpQkFBaUIsQ0FBQyxPQUFlLEVBQUUsS0FBYztBQUNyRCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUQsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQVksTUFBTSxDQUFDLFFBQWdCLEVBQUUsR0FBVyxFQUFFLEtBQWM7QUFDaEUsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztBQUNoQyxZQUFVLFFBQVEsRUFBRSxRQUFRO0FBQzVCLFlBQVUsT0FBTyxFQUFFLEtBQUs7QUFDeEIsWUFBVSxNQUFNLEVBQUUsR0FBRztBQUNyQixTQUFTLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksWUFBWSxDQUFDLEtBQWM7QUFDL0IsUUFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RCxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFlBQVksQ0FBQyxLQUFjO0FBQy9CLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEQsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGNBQWMsQ0FBQyxPQUFlLEVBQUUsS0FBYztBQUNsRCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkQsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGNBQWMsQ0FBQyxPQUFlLEVBQUUsS0FBYztBQUNsRCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkQsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGVBQWUsQ0FBQyxPQUFlLEVBQUUsS0FBYztBQUNuRCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEQsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxlQUFlLENBQUMsT0FBK0I7QUFBSSxRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkUsSUFBSSxDQUFDO0FBQ0wsQ0FDQztrS0FBQTtBQUNEO0FBQWlELFlBdkZULGNBQWM7QUFBRztBQUN2RDtBQWxEVyx1QkFBdUIsb0JBSG5DLFVBQVUsQ0FBQyxVQUNSLFVBQVUsRUFBRTtBQUFNLE1BQ3JCLENBQUMsSUFDVztRQUF1QixDQXVJbkM7OzsrRUFDRDtBQUFDLFNBeElZLHVCQUF1QjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICdwcmltZW5nJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByb3ZpZGVyLCBBcHBsaWNhdGlvblByb2JsZW1UeXBlIH0gZnJvbSAnQG51dmVtL2FuZ3VsYXItYmFzZSc7XG5cbi8qKlxuICogQ2xhc3MgUGFnZU5vdGlmaWNhdGlvblNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgTm90aWZpY2F0aW9uUHJvdmlkZXIge1xuXG4gICAgLyoqXG4gICAgICogc3VjY2Vzc1NldmVyaXR5IHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHN1Y2Nlc3NTZXZlcml0eSA9ICdzdWNjZXNzJztcblxuICAgIC8qKlxuICAgICAqIGluZm9TZXZlcml0eSBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbmZvU2V2ZXJpdHkgPSAnaW5mbyc7XG5cbiAgICAvKipcbiAgICAgKiB3YXJuU2V2ZXJpdHkgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgd2FyblNldmVyaXR5ID0gJ3dhcm4nO1xuXG4gICAgLyoqXG4gICAgICogZXJyb3JTZXZlcml0eSBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBlcnJvclNldmVyaXR5ID0gJ2Vycm9yJztcblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZU1zZyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBjcmVhdGVNc2cgPSAnUmVnaXN0cm8gaW5jbHXDrWRvIGNvbSBzdWNlc3NvISc7XG5cbiAgICAvKipcbiAgICAgKiB1cGRhdGVNc2cgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdXBkYXRlTXNnID0gJ1JlZ2lzdHJvIGFsdGVyYWRvIGNvbSBzdWNlc3NvISc7XG5cbiAgICAvKipcbiAgICAgKiBkZWxldGVNc2cgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVsZXRlTXNnID0gJ1JlZ2lzdHJvIGV4Y2x1w61kbyBjb20gc3VjZXNzbyEnO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtNZXNzYWdlU2VydmljZX0gbWVzc2FnZVNlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1lc3NhZ2VTZXJ2aWNlOiBNZXNzYWdlU2VydmljZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZENyZWF0ZU1zZyBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBhZGRDcmVhdGVNc2codGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRTdWNjZXNzTWVzc2FnZSh0aGlzLmNyZWF0ZU1zZywgdGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZFN1Y2Nlc3NNZXNzYWdlIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgYWRkU3VjY2Vzc01lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZE1zZyh0aGlzLnN1Y2Nlc3NTZXZlcml0eSwgbWVzc2FnZSwgdGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZE1zZyBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2V2ZXJpdHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgcHJpdmF0ZSBhZGRNc2coc2V2ZXJpdHk6IHN0cmluZywgbXNnOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZVNlcnZpY2UuYWRkKHtcbiAgICAgICAgICBzZXZlcml0eTogc2V2ZXJpdHksXG4gICAgICAgICAgc3VtbWFyeTogdGl0bGUsXG4gICAgICAgICAgZGV0YWlsOiBtc2dcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkVXBkYXRlTXNnIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIGFkZFVwZGF0ZU1zZyh0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZFN1Y2Nlc3NNZXNzYWdlKHRoaXMudXBkYXRlTXNnLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkRGVsZXRlTXNnIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIGFkZERlbGV0ZU1zZyh0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZFN1Y2Nlc3NNZXNzYWdlKHRoaXMuZGVsZXRlTXNnLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkSW5mb01lc3NhZ2UgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBhZGRJbmZvTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkTXNnKHRoaXMuaW5mb1NldmVyaXR5LCBtZXNzYWdlLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkV2Fybk1lc3NhZ2UgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBhZGRXYXJuTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkTXNnKHRoaXMud2FyblNldmVyaXR5LCBtZXNzYWdlLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkRXJyb3JNZXNzYWdlIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgYWRkRXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRNc2codGhpcy5lcnJvclNldmVyaXR5LCBtZXNzYWdlLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkRXJyb3JQcm9ibGVtIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7QXBwbGljYXRpb25Qcm9ibGVtVHlwZX0gcHJvYmxlbVxuICAgICAqL1xuICAgIGFkZEVycm9yUHJvYmxlbShwcm9ibGVtOiBBcHBsaWNhdGlvblByb2JsZW1UeXBlKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWRkTXNnKHRoaXMuZXJyb3JTZXZlcml0eSwgcHJvYmxlbS5kZXRhaWwsIHByb2JsZW0udGl0bGUpO1xuICAgIH1cblxufVxuIl19