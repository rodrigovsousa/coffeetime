import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { MessageService } from 'primeng';
import { NotificationProvider } from '@nuvem/angular-base';
import * as i0 from "@angular/core";
import * as i1 from "primeng/api";
/**
 * Class PageNotificationService
 * @class
 */
let PageNotificationService = class PageNotificationService extends NotificationProvider {
    /**
     * constructor method
     * @constructor
     * @param {MessageService} messageService
     */
    constructor(messageService) {
        super();
        this.messageService = messageService;
        /**
         * successSeverity property
         * @type {string}
         */
        this.successSeverity = 'success';
        /**
         * infoSeverity property
         * @type {string}
         */
        this.infoSeverity = 'info';
        /**
         * warnSeverity property
         * @type {string}
         */
        this.warnSeverity = 'warn';
        /**
         * errorSeverity property
         * @type {string}
         */
        this.errorSeverity = 'error';
        /**
         * createMsg property
         * @type {string}
         */
        this.createMsg = 'Registro incluído com sucesso!';
        /**
         * updateMsg property
         * @type {string}
         */
        this.updateMsg = 'Registro alterado com sucesso!';
        /**
         * deleteMsg property
         * @type {string}
         */
        this.deleteMsg = 'Registro excluído com sucesso!';
    }
    /**
     * addCreateMsg method
     * @param {string} title
     */
    addCreateMsg(title) {
        this.addSuccessMessage(this.createMsg, title);
    }
    /**
     * addSuccessMessage method
     * @param {string} message
     * @param {string} title
     */
    addSuccessMessage(message, title) {
        this.addMsg(this.successSeverity, message, title);
    }
    /**
     * addMsg method
     * @param {string} severity
     * @param {string} msg
     * @param {string} title
     */
    addMsg(severity, msg, title) {
        this.messageService.add({
            severity: severity,
            summary: title,
            detail: msg
        });
    }
    /**
     * addUpdateMsg method
     * @param {string} title
     */
    addUpdateMsg(title) {
        this.addSuccessMessage(this.updateMsg, title);
    }
    /**
     * addDeleteMsg method
     * @param {string} title
     */
    addDeleteMsg(title) {
        this.addSuccessMessage(this.deleteMsg, title);
    }
    /**
     * addInfoMessage method
     * @param {string} message
     * @param {string} title
     */
    addInfoMessage(message, title) {
        this.addMsg(this.infoSeverity, message, title);
    }
    /**
     * addWarnMessage method
     * @param {string} message
     * @param {string} title
     */
    addWarnMessage(message, title) {
        this.addMsg(this.warnSeverity, message, title);
    }
    /**
     * addErrorMessage method
     * @param {string} message
     * @param {string} title
     */
    addErrorMessage(message, title) {
        this.addMsg(this.errorSeverity, message, title);
    }
    /**
     * addErrorProblem method
     * @param {ApplicationProblemType} problem
     */
    addErrorProblem(problem) {
        this.addMsg(this.errorSeverity, problem.detail, problem.title);
    }
};
PageNotificationService.ctorParameters = () => [
    { type: MessageService }
];
PageNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageNotificationService_Factory() { return new PageNotificationService(i0.ɵɵinject(i1.MessageService)); }, token: PageNotificationService, providedIn: "root" });
PageNotificationService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], PageNotificationService);
export { PageNotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9wcmltZW5nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvcGFnZS1ub3RpZmljYXRpb24vcGFnZS1ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxvQkFBb0IsRUFBMEIsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRW5GOzs7R0FHRztBQUlILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXdCLFNBQVEsb0JBQW9CO0lBNEM3RDs7OztPQUlHO0lBQ0gsWUFBb0IsY0FBOEI7UUFDOUMsS0FBSyxFQUFFLENBQUM7UUFEUSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUEvQ2xEOzs7V0FHRztRQUNjLG9CQUFlLEdBQUcsU0FBUyxDQUFDO1FBRTdDOzs7V0FHRztRQUNjLGlCQUFZLEdBQUcsTUFBTSxDQUFDO1FBRXZDOzs7V0FHRztRQUNjLGlCQUFZLEdBQUcsTUFBTSxDQUFDO1FBRXZDOzs7V0FHRztRQUNjLGtCQUFhLEdBQUcsT0FBTyxDQUFDO1FBRXpDOzs7V0FHRztRQUNjLGNBQVMsR0FBRyxnQ0FBZ0MsQ0FBQztRQUU5RDs7O1dBR0c7UUFDYyxjQUFTLEdBQUcsZ0NBQWdDLENBQUM7UUFFOUQ7OztXQUdHO1FBQ2MsY0FBUyxHQUFHLGdDQUFnQyxDQUFDO0lBUzlELENBQUM7SUFFRDs7O09BR0c7SUFDSCxZQUFZLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGlCQUFpQixDQUFDLE9BQWUsRUFBRSxLQUFjO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssTUFBTSxDQUFDLFFBQWdCLEVBQUUsR0FBVyxFQUFFLEtBQWM7UUFDeEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7WUFDdEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxNQUFNLEVBQUUsR0FBRztTQUNaLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7O09BR0c7SUFDSCxZQUFZLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsWUFBWSxDQUFDLEtBQWM7UUFDdkIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxjQUFjLENBQUMsT0FBZSxFQUFFLEtBQWM7UUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGNBQWMsQ0FBQyxPQUFlLEVBQUUsS0FBYztRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsZUFBZSxDQUFDLE9BQWUsRUFBRSxLQUFjO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOzs7T0FHRztJQUNILGVBQWUsQ0FBQyxPQUErQjtRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQztDQUVKLENBQUE7O1lBdEZ1QyxjQUFjOzs7QUFqRHpDLHVCQUF1QjtJQUhuQyxVQUFVLENBQUM7UUFDUixVQUFVLEVBQUUsTUFBTTtLQUNyQixDQUFDO0dBQ1csdUJBQXVCLENBdUluQztTQXZJWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZXNzYWdlU2VydmljZSB9IGZyb20gJ3ByaW1lbmcnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJvdmlkZXIsIEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUgfSBmcm9tICdAbnV2ZW0vYW5ndWxhci1iYXNlJztcblxuLyoqXG4gKiBDbGFzcyBQYWdlTm90aWZpY2F0aW9uU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGFnZU5vdGlmaWNhdGlvblNlcnZpY2UgZXh0ZW5kcyBOb3RpZmljYXRpb25Qcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBzdWNjZXNzU2V2ZXJpdHkgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3VjY2Vzc1NldmVyaXR5ID0gJ3N1Y2Nlc3MnO1xuXG4gICAgLyoqXG4gICAgICogaW5mb1NldmVyaXR5IHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGluZm9TZXZlcml0eSA9ICdpbmZvJztcblxuICAgIC8qKlxuICAgICAqIHdhcm5TZXZlcml0eSBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSB3YXJuU2V2ZXJpdHkgPSAnd2Fybic7XG5cbiAgICAvKipcbiAgICAgKiBlcnJvclNldmVyaXR5IHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGVycm9yU2V2ZXJpdHkgPSAnZXJyb3InO1xuXG4gICAgLyoqXG4gICAgICogY3JlYXRlTXNnIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNyZWF0ZU1zZyA9ICdSZWdpc3RybyBpbmNsdcOtZG8gY29tIHN1Y2Vzc28hJztcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZU1zZyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSB1cGRhdGVNc2cgPSAnUmVnaXN0cm8gYWx0ZXJhZG8gY29tIHN1Y2Vzc28hJztcblxuICAgIC8qKlxuICAgICAqIGRlbGV0ZU1zZyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBkZWxldGVNc2cgPSAnUmVnaXN0cm8gZXhjbHXDrWRvIGNvbSBzdWNlc3NvISc7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge01lc3NhZ2VTZXJ2aWNlfSBtZXNzYWdlU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkQ3JlYXRlTXNnIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIGFkZENyZWF0ZU1zZyh0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZFN1Y2Nlc3NNZXNzYWdlKHRoaXMuY3JlYXRlTXNnLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkU3VjY2Vzc01lc3NhZ2UgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBhZGRTdWNjZXNzTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkTXNnKHRoaXMuc3VjY2Vzc1NldmVyaXR5LCBtZXNzYWdlLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkTXNnIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXZlcml0eVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtc2dcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZE1zZyhzZXZlcml0eTogc3RyaW5nLCBtc2c6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlU2VydmljZS5hZGQoe1xuICAgICAgICAgIHNldmVyaXR5OiBzZXZlcml0eSxcbiAgICAgICAgICBzdW1tYXJ5OiB0aXRsZSxcbiAgICAgICAgICBkZXRhaWw6IG1zZ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRVcGRhdGVNc2cgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgYWRkVXBkYXRlTXNnKHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkU3VjY2Vzc01lc3NhZ2UodGhpcy51cGRhdGVNc2csIHRpdGxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGREZWxldGVNc2cgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgYWRkRGVsZXRlTXNnKHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkU3VjY2Vzc01lc3NhZ2UodGhpcy5kZWxldGVNc2csIHRpdGxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRJbmZvTWVzc2FnZSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIGFkZEluZm9NZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRNc2codGhpcy5pbmZvU2V2ZXJpdHksIG1lc3NhZ2UsIHRpdGxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRXYXJuTWVzc2FnZSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIGFkZFdhcm5NZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRNc2codGhpcy53YXJuU2V2ZXJpdHksIG1lc3NhZ2UsIHRpdGxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRFcnJvck1lc3NhZ2UgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBhZGRFcnJvck1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZE1zZyh0aGlzLmVycm9yU2V2ZXJpdHksIG1lc3NhZ2UsIHRpdGxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRFcnJvclByb2JsZW0gbWV0aG9kXG4gICAgICogQHBhcmFtIHtBcHBsaWNhdGlvblByb2JsZW1UeXBlfSBwcm9ibGVtXG4gICAgICovXG4gICAgYWRkRXJyb3JQcm9ibGVtKHByb2JsZW06IEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hZGRNc2codGhpcy5lcnJvclNldmVyaXR5LCBwcm9ibGVtLmRldGFpbCwgcHJvYmxlbS50aXRsZSk7XG4gICAgfVxuXG59XG4iXX0=