import { __decorate } from "tslib";
import { BlockUiStatus, BlockUiService } from '@nuvem/angular-base';
import { Component } from '@angular/core';
/**
 * Class BlockUiComponent
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@nuvem/angular-base';
import * as ɵngcc2 from 'primeng';
var BlockUiComponent = /** @class */ (function () {
    /**
     * constructor method
     * @constructor
     * @param {BlockUiService} service
     */
    function BlockUiComponent(service) {
        this.service = service;
        /**
         * status property
         * @type {boolean}
         * @public
         */
        this.status = false;
    }
    /**
     * ngOnInit method
     * @returns void
     */
    BlockUiComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.service.loaderStatus.subscribe(function (blockui) {
            _this.status = blockui.status;
        });
    };
    /**
     * ngOnDestroy methods
     * @returns void
     */
    BlockUiComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    /**
     * isBlocked method
     * @returns boolean
     */
    BlockUiComponent.prototype.isBlocked = function () {
        return this.status;
    };
    /**
     * show method
     * @returns false
     */
    BlockUiComponent.prototype.show = function () {
        this.status = true;
    };
    /**
     * hide methods
     * @returns void
     */
    BlockUiComponent.prototype.hide = function () {
        this.status = false;
    };
    BlockUiComponent.ctorParameters = function () { return [
        { type: BlockUiService }
    ]; };
BlockUiComponent.ɵfac = function BlockUiComponent_Factory(t) { return new (t || BlockUiComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BlockUiService)); };
BlockUiComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BlockUiComponent, selectors: [["basis-block-ui"]], decls: 3, vars: 1, consts: [[3, "blocked"], [1, "center-screen"]], template: function BlockUiComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p-blockUI", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "p-progressSpinner");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("blocked", ctx.isBlocked());
    } }, directives: [ɵngcc2.BlockUI, ɵngcc2.ProgressSpinner], styles: [".center-screen[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUiComponent, [{
        type: Component,
        args: [{
                selector: 'basis-block-ui',
                template: "<p-blockUI [blocked]=\"isBlocked()\">\n    <div class=\"center-screen\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n",
                styles: [".center-screen{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}"]
            }]
    }], function () { return [{ type: ɵngcc1.BlockUiService }]; }, null); })();
    return BlockUiComponent;
}());
export { BlockUiComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovQG51dmVtL3ByaW1lbmctY29tcG9uZW50cy9saWIvYmxvY2stdWkvYmxvY2stdWkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBRzdEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7Ozs7QUFNSDtBQUFvRCxJQWVoRDtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLDBCQUFvQixPQUF1QjtBQUFJLFFBQTNCLFlBQU8sR0FBUCxPQUFPLENBQWdCO0FBQUMsUUFuQjVDO0FBQ0o7QUFDSTtBQUNJO0FBRUosV0FERztBQUNQLFFBQUksV0FBTSxHQUFHLEtBQUssQ0FBQztBQUNuQixJQWFtRCxDQUFDO0FBQ3BELElBQ0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksbUNBQVEsR0FBUjtBQUNILFFBREcsaUJBSUM7QUFDTCxRQUpRLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQUMsT0FBc0I7QUFBSSxZQUMvRSxLQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDekMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUVMLElBQUk7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksc0NBQVcsR0FBWDtBQUFjLFFBQ1YsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN4QyxJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLG9DQUFTLEdBQVQ7QUFDSixRQUFRLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQixJQUFJLENBQUM7QUFFTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLCtCQUFJLEdBQUo7QUFDQyxRQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQzNCLElBQUksQ0FBQztBQUVMLElBQUk7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksK0JBQUksR0FBSjtBQUNDLFFBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDNUIsSUFBSSxDQUFDO0FBQ0o7QUFDMkQsZ0JBNUMzQixjQUFjO0FBQUc7SUFwQnJDLGdCQUFnQix3QkFMNUIsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLGdCQUFnQixjQUMxQjtzSEFBd0M7b0NBRTNDLENBQUMsUUFDVztXQUFnQixDQStENUI7Ozs7Ozs7Ozs7Ozs7OytFQUNEO0FBQUMsSUFERCx1QkFBQztBQUNBLENBREEsQUEvREQsSUErREM7QUFDRCxTQWhFYSxnQkFBZ0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsb2NrVWlTdGF0dXMsIEJsb2NrVWlTZXJ2aWNlIH0gZnJvbSAnQG51dmVtL2FuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBDbGFzcyBCbG9ja1VpQ29tcG9uZW50XG4gKiBAY2xhc3NcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdiYXNpcy1ibG9jay11aScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Jsb2NrLXVpLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsgJy4vYmxvY2stdWkuY29tcG9uZW50LmNzcycgXSxcbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tVaUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCAsIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogc3RhdHVzIHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHN0YXR1cyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogc3Vic2NyaXB0aW9uIHByb3BlcnR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7U3Vic2NyaXB0aW9ufVxuICAgICAqL1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0Jsb2NrVWlTZXJ2aWNlfSBzZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBCbG9ja1VpU2VydmljZSkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBuZ09uSW5pdCBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlLmxvYWRlclN0YXR1cy5zdWJzY3JpYmUoKGJsb2NrdWk6IEJsb2NrVWlTdGF0dXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gYmxvY2t1aS5zdGF0dXM7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5nT25EZXN0cm95IG1ldGhvZHNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaXNCbG9ja2VkIG1ldGhvZFxuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICAgKi9cbiAgICBpc0Jsb2NrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzaG93IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIGZhbHNlXG4gICAgICovXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGhpZGUgbWV0aG9kc1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==