import { __decorate, __read, __spread } from "tslib";
import { Component } from '@angular/core';
import { MenuItem, MessageService, Message } from 'primeng';
import { BreadcrumbService } from './breadcrumb.service';
import { AccessbilityService } from '@nuvem/angular-base';
import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';
import { filter, distinctUntilChanged } from 'rxjs/operators';
var BreadcrumbComponent = /** @class */ (function () {
    function BreadcrumbComponent(router, activatedRoute, breadcrumbService, messages, accessibilityService) {
        var _this = this;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.breadcrumbService = breadcrumbService;
        this.messages = messages;
        this.accessibilityService = accessibilityService;
        this.highContrastEnabled = false;
        this.subscription = breadcrumbService.itemsHandler.subscribe(function (response) {
            _this.items = response;
        });
    }
    BreadcrumbComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.router.events.pipe(filter(function (event) { return event instanceof NavigationEnd; }), distinctUntilChanged()).subscribe(function (event) {
            _this.items = _this.buildBreadCrumb(_this.activatedRoute.root);
        });
    };
    BreadcrumbComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    BreadcrumbComponent.prototype.enableHighContrast = function () {
        this.highContrastEnabled = true;
        this.accessibilityService.enableHighContrast();
    };
    BreadcrumbComponent.prototype.disableHighContrast = function () {
        this.highContrastEnabled = false;
        this.accessibilityService.disableHighContrast();
    };
    BreadcrumbComponent.prototype.increaseFontSize = function () {
        this.accessibilityService.increaseFontSize();
    };
    BreadcrumbComponent.prototype.decreaseFontSize = function () {
        this.accessibilityService.decreaseFontSize();
    };
    BreadcrumbComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.messages.messageObserver.subscribe(function (msg) {
            _this.accessibilityService.addAccessibilityMessages({ severity: msg.severity });
        });
        this.accessibilityService.addAccessibilityIcons();
    };
    BreadcrumbComponent.prototype.buildBreadCrumb = function (route, url, breadcrumbs) {
        if (url === void 0) { url = ''; }
        if (breadcrumbs === void 0) { breadcrumbs = []; }
        var label = route.routeConfig && route.routeConfig.data ? route.routeConfig.data.breadcrumb : '';
        var path = route.routeConfig && route.routeConfig.data ? route.routeConfig.path : '';
        var lastRoutePart = path.split('/').pop();
        var isDynamicRoute = lastRoutePart.startsWith(':');
        if (isDynamicRoute && !!route.snapshot) {
            for (var key in route.snapshot.params) {
                path = path.replace(":" + key, route.snapshot.params[key]);
            }
            label = Object.values(route.snapshot.params).join(' ');
        }
        var nextUrl = path ? url + "/" + path : url;
        var menuItem = {
            "label": label,
            "routerLink": nextUrl
        };
        var newBreadcrumbs = menuItem.label ? __spread(breadcrumbs, [menuItem]) : __spread(breadcrumbs);
        if (route.firstChild) {
            return this.buildBreadCrumb(route.firstChild, nextUrl, newBreadcrumbs);
        }
        return newBreadcrumbs;
    };
    BreadcrumbComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: BreadcrumbService },
        { type: MessageService },
        { type: AccessbilityService }
    ]; };
    BreadcrumbComponent = __decorate([
        Component({
            selector: 'breadcrumb',
            template: "<div class=\"layout-breadcrumb\">\n    <ul>\n        <li>\n            <a routerLink=\"\">\n                <i class=\"material-icons\">home</i>\n            </a>\n        </li>\n        <li>/</li>\n        <ng-template ngFor let-item let-last=\"last\" [ngForOf]=\"items\">\n            <li>\n                <a [routerLink]=\"item.routerLink\" *ngIf=\"item.routerLink\">{{item.label}}</a>\n\n                <ng-container *ngIf=\"!item.routerLink\">{{item.label}}</ng-container>\n            </li>\n            <li *ngIf=\"!last\">/</li>\n        </ng-template>\n    </ul>\n    <div class=\"layout-breadcrumb-options\">\n        <a (click)=\"highContrastEnabled ? disableHighContrast() : enableHighContrast()\" [ngStyle]=\"{'cursor': 'pointer'}\"\n            title=\"{{ highContrastEnabled ? 'Desabilitar alto contraste' : 'Habilitar alto contraste' }}\">\n            <i class=\"material-icons\">{{ highContrastEnabled ? 'visibility_off' : 'visibility' }}</i>\n        </a>\n        <a (click)=\"increaseFontSize()\" title=\"Aumentar fonte\" [ngStyle]=\"{'cursor': 'pointer'}\">\n            <i class=\"material-icons\">exposure_plus_1</i>\n        </a>\n        <a (click)=\"decreaseFontSize()\" title=\"Diminuir fonte\" [ngStyle]=\"{'cursor': 'pointer'}\">\n            <i class=\"material-icons\">exposure_neg_1</i>\n        </a>\n    </div>\n    <ng-content></ng-content>\n</div>\n",
            styles: [""]
        })
    ], BreadcrumbComponent);
    return BreadcrumbComponent;
}());
export { BreadcrumbComponent };
//# sourceMappingURL=data:application/json;base64,