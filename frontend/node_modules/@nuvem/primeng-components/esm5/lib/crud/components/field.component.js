import { __decorate, __extends } from "tslib";
import { Injector, Input, OnInit, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter, Directive } from "@angular/core";
import { WrappedFormControlSuperclass } from "@nuvem/angular-base";
import { ControlContainer } from "@angular/forms";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';

var _c0 = ["input"];
var FieldComponent = /** @class */ (function (_super) {
    __extends(FieldComponent, _super);
    function FieldComponent(controlContainer, injector) {
        var _this = _super.call(this, injector) || this;
        _this.controlContainer = controlContainer;
        _this.injector = injector;
        _this.onBlur = new EventEmitter();
        _this.onSelect = new EventEmitter();
        _this.onFocus = new EventEmitter();
        return _this;
    }
    Object.defineProperty(FieldComponent.prototype, "name", {
        get: function () {
            return this._name ? this._name : this.formControlName;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldComponent.prototype, "label", {
        get: function () {
            return this.required ? this._label + "*" : this._label;
        },
        set: function (value) {
            this._label = value;
        },
        enumerable: true,
        configurable: true
    });
    FieldComponent.prototype.ngOnInit = function () {
        this.setValidators();
        this.setRequired();
    };
    FieldComponent.prototype.setRequired = function () {
        if (this.required) {
            if (this.input instanceof ElementRef) {
                this.input.nativeElement.required = true;
            }
            else {
                this.input.required = true;
            }
        }
    };
    FieldComponent.prototype.setElementRefAttr = function (attr, value) {
        if (value && this.input instanceof ElementRef) {
            this.input.nativeElement[attr] = value;
        }
    };
    FieldComponent.prototype.setFormControlValidators = function () {
        if (this.controlContainer && this.formControlName) {
            var validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    };
    FieldComponent.prototype.setValidators = function () {
        if (this.controlContainer && this.formControlName) {
            var validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    };
    FieldComponent.prototype.ngAfterViewInit = function () {
        for (var i in this.extraParams) {
            this.input[i] = this.extraParams[i];
        }
    };
    FieldComponent.prototype.onBlurEvent = function (event) {
        this.onBlur.emit(event);
    };
    FieldComponent.prototype.onSelectEvent = function (event) {
        this.onSelect.emit(event);
    };
    FieldComponent.prototype.onFocusEvent = function (event) {
        this.onFocus.emit(event);
    };
    FieldComponent.ctorParameters = function () { return [
        { type: ControlContainer },
        { type: Injector }
    ]; };
    __decorate([
        Input()
    ], FieldComponent.prototype, "form", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "formControlName", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "extraParams", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "required", void 0);
    __decorate([
        Output()
    ], FieldComponent.prototype, "onBlur", void 0);
    __decorate([
        Output()
    ], FieldComponent.prototype, "onSelect", void 0);
    __decorate([
        Output()
    ], FieldComponent.prototype, "onFocus", void 0);
    __decorate([
        ViewChild("input", { static: false })
    ], FieldComponent.prototype, "input", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "name", null);
    __decorate([
        Input()
    ], FieldComponent.prototype, "label", null);
FieldComponent.ɵfac = function FieldComponent_Factory(t) { return new (t || FieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
FieldComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FieldComponent, selectors: [["", "nField", ""]], viewQuery: function FieldComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, inputs: { name: "name", label: "label", form: "form", formControlName: "formControlName", extraParams: "extraParams", required: "required" }, outputs: { onBlur: "onBlur", onSelect: "onSelect", onFocus: "onFocus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FieldComponent, [{
        type: Directive,
        args: [{
                selector: "[nField]"
            }]
    }], function () { return [{ type: ɵngcc1.ControlContainer }, { type: ɵngcc0.Injector }]; }, { name: [{
            type: Input
        }], label: [{
            type: Input
        }], form: [{
            type: Input
        }], formControlName: [{
            type: Input
        }], extraParams: [{
            type: Input
        }], required: [{
            type: Input
        }], onBlur: [{
            type: Output
        }], onSelect: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], input: [{
            type: ViewChild,
            args: ["input", { static: false }]
        }] }); })();
    return FieldComponent;
}(WrappedFormControlSuperclass));
export { FieldComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,