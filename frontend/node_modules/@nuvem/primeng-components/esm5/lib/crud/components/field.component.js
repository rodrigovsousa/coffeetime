import { __decorate, __extends } from "tslib";
import { Injector, Input, OnInit, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter, Directive } from "@angular/core";
import { WrappedFormControlSuperclass } from "@nuvem/angular-base";
import { ControlContainer } from "@angular/forms";
var FieldComponent = /** @class */ (function (_super) {
    __extends(FieldComponent, _super);
    function FieldComponent(controlContainer, injector) {
        var _this = _super.call(this, injector) || this;
        _this.controlContainer = controlContainer;
        _this.injector = injector;
        _this.onBlur = new EventEmitter();
        _this.onSelect = new EventEmitter();
        _this.onFocus = new EventEmitter();
        return _this;
    }
    Object.defineProperty(FieldComponent.prototype, "name", {
        get: function () {
            return this._name ? this._name : this.formControlName;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldComponent.prototype, "label", {
        get: function () {
            return this.required ? this._label + "*" : this._label;
        },
        set: function (value) {
            this._label = value;
        },
        enumerable: true,
        configurable: true
    });
    FieldComponent.prototype.ngOnInit = function () {
        this.setValidators();
        this.setRequired();
    };
    FieldComponent.prototype.setRequired = function () {
        if (this.required) {
            if (this.input instanceof ElementRef) {
                this.input.nativeElement.required = true;
            }
            else {
                this.input.required = true;
            }
        }
    };
    FieldComponent.prototype.setElementRefAttr = function (attr, value) {
        if (value && this.input instanceof ElementRef) {
            this.input.nativeElement[attr] = value;
        }
    };
    FieldComponent.prototype.setFormControlValidators = function () {
        if (this.controlContainer && this.formControlName) {
            var validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    };
    FieldComponent.prototype.setValidators = function () {
        if (this.controlContainer && this.formControlName) {
            var validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    };
    FieldComponent.prototype.ngAfterViewInit = function () {
        for (var i in this.extraParams) {
            this.input[i] = this.extraParams[i];
        }
    };
    FieldComponent.prototype.onBlurEvent = function (event) {
        this.onBlur.emit(event);
    };
    FieldComponent.prototype.onSelectEvent = function (event) {
        this.onSelect.emit(event);
    };
    FieldComponent.prototype.onFocusEvent = function (event) {
        this.onFocus.emit(event);
    };
    FieldComponent.ctorParameters = function () { return [
        { type: ControlContainer },
        { type: Injector }
    ]; };
    __decorate([
        Input()
    ], FieldComponent.prototype, "form", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "formControlName", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "extraParams", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "required", void 0);
    __decorate([
        Output()
    ], FieldComponent.prototype, "onBlur", void 0);
    __decorate([
        Output()
    ], FieldComponent.prototype, "onSelect", void 0);
    __decorate([
        Output()
    ], FieldComponent.prototype, "onFocus", void 0);
    __decorate([
        ViewChild("input", { static: false })
    ], FieldComponent.prototype, "input", void 0);
    __decorate([
        Input()
    ], FieldComponent.prototype, "name", null);
    __decorate([
        Input()
    ], FieldComponent.prototype, "label", null);
    FieldComponent = __decorate([
        Directive({
            selector: "[nField]"
        })
    ], FieldComponent);
    return FieldComponent;
}(WrappedFormControlSuperclass));
export { FieldComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL3ByaW1lbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jcnVkL2NvbXBvbmVudHMvZmllbGQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0gsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLbEQ7SUFDWSxrQ0FBa0Q7SUF5QzFELHdCQUNZLGdCQUFrQyxFQUNsQyxRQUFrQjtRQUY5QixZQUdJLGtCQUFNLFFBQVEsQ0FBQyxTQUNsQjtRQUhXLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsY0FBUSxHQUFSLFFBQVEsQ0FBVTtRQWhDcEIsWUFBTSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRXBELGNBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUV0RCxhQUFPLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7O0lBOEIvRCxDQUFDO0lBdEJELHNCQUFJLGdDQUFJO2FBQVI7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDMUQsQ0FBQzthQUdELFVBQVMsS0FBYTtZQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUN2QixDQUFDOzs7T0FMQTtJQU9ELHNCQUFJLGlDQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFJLElBQUks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RSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7aURBQVk7SUFXbEQ7UUFEQyxLQUFLLEVBQUU7OENBR1A7SUFPRDtRQURDLEtBQUssRUFBRTsrQ0FHUDtJQXhDUSxjQUFjO1FBSDFCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1NBQ3ZCLENBQUM7T0FDVyxjQUFjLENBeUcxQjtJQUFELHFCQUFDO0NBQUEsQUF6R0QsQ0FDWSw0QkFBNEIsR0F3R3ZDO1NBekdZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFdyYXBwZWRGb3JtQ29udHJvbFN1cGVyY2xhc3MgfSBmcm9tIFwiQG51dmVtL2FuZ3VsYXItYmFzZVwiO1xuaW1wb3J0IHsgQ29udHJvbENvbnRhaW5lciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogXCJbbkZpZWxkXVwiXG59KVxuZXhwb3J0IGNsYXNzIEZpZWxkQ29tcG9uZW50PE91dGVyVHlwZSwgSW5uZXJUeXBlID0gT3V0ZXJUeXBlPlxuICAgIGV4dGVuZHMgV3JhcHBlZEZvcm1Db250cm9sU3VwZXJjbGFzczxPdXRlclR5cGUsIElubmVyVHlwZT5cbiAgICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBASW5wdXQoKSBmb3JtOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKSBmb3JtQ29udHJvbE5hbWU6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGV4dHJhUGFyYW1zOiBhbnk7XG5cbiAgICBASW5wdXQoKSByZXF1aXJlZDogYm9vbGVhbjtcblxuICAgIEBPdXRwdXQoKSBvbkJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBAT3V0cHV0KCkgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBAT3V0cHV0KCkgb25Gb2N1czogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIEBWaWV3Q2hpbGQoXCJpbnB1dFwiLCB7IHN0YXRpYzogZmFsc2UgfSkgaW5wdXQ6IGFueTtcblxuICAgIHByaXZhdGUgX25hbWU6IHN0cmluZztcblxuICAgIHByaXZhdGUgX2xhYmVsOiBzdHJpbmc7XG5cbiAgICBnZXQgbmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZSA/IHRoaXMuX25hbWUgOiB0aGlzLmZvcm1Db250cm9sTmFtZTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBsYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1aXJlZCA/IGAke3RoaXMuX2xhYmVsfSpgIDogdGhpcy5fbGFiZWw7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgbGFiZWwodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYWJlbCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGNvbnRyb2xDb250YWluZXI6IENvbnRyb2xDb250YWluZXIsXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgICAgIHN1cGVyKGluamVjdG9yKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zZXRWYWxpZGF0b3JzKCk7XG4gICAgICAgIHRoaXMuc2V0UmVxdWlyZWQoKTtcbiAgICB9XG5cbiAgICBzZXRSZXF1aXJlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlucHV0IGluc3RhbmNlb2YgRWxlbWVudFJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RWxlbWVudFJlZkF0dHIoYXR0cjogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0aGlzLmlucHV0IGluc3RhbmNlb2YgRWxlbWVudFJlZikge1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50W2F0dHJdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRGb3JtQ29udHJvbFZhbGlkYXRvcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xDb250YWluZXIgJiYgdGhpcy5mb3JtQ29udHJvbE5hbWUpIHtcbiAgICAgICAgICAgIGxldCB2YWxpZGF0b3IgPSB0aGlzLmNvbnRyb2xDb250YWluZXIuY29udHJvbC5nZXQodGhpcy5mb3JtQ29udHJvbE5hbWUpLnZhbGlkYXRvcjtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1Db250cm9sLnNldFZhbGlkYXRvcnModmFsaWRhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgc2V0VmFsaWRhdG9ycygpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbENvbnRhaW5lciAmJiB0aGlzLmZvcm1Db250cm9sTmFtZSkge1xuICAgICAgICAgICAgbGV0IHZhbGlkYXRvciA9IHRoaXMuY29udHJvbENvbnRhaW5lci5jb250cm9sLmdldCh0aGlzLmZvcm1Db250cm9sTmFtZSkudmFsaWRhdG9yO1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuc2V0VmFsaWRhdG9ycyh2YWxpZGF0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZXh0cmFQYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRbaV0gPSB0aGlzLmV4dHJhUGFyYW1zW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25CbHVyRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5vbkJsdXIuZW1pdChldmVudCk7XG4gICAgfVxuXG4gICAgb25TZWxlY3RFdmVudChldmVudCkge1xuICAgICAgICB0aGlzLm9uU2VsZWN0LmVtaXQoZXZlbnQpO1xuICAgIH1cblxuICAgIG9uRm9jdXNFdmVudChldmVudCkge1xuICAgICAgICB0aGlzLm9uRm9jdXMuZW1pdChldmVudCk7XG4gICAgfVxufVxuIl19