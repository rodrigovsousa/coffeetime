import { __decorate } from "tslib";
import { Component, Input } from "@angular/core";
import { ActivatedRoute } from "@angular/router";
var CrudFormComponent = /** @class */ (function () {
    function CrudFormComponent(route) {
        this.route = route;
        this.disableSave = false;
        this.listRoute = "../../list";
    }
    CrudFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route.paramMap.subscribe(function (params) {
            _this.action = params.get('action');
            if (params.get('id')) {
                _this.route.data.subscribe(function (data) {
                    if (data.value) {
                        _this.form.patchValue(data.value);
                    }
                });
            }
            else {
                _this.listRoute = "../list";
            }
            if (_this.action === "view") {
                _this.form.disable();
            }
            else if (_this.form.disabled) {
                _this.form.enable();
            }
        });
    };
    CrudFormComponent.ctorParameters = function () { return [
        { type: ActivatedRoute }
    ]; };
    __decorate([
        Input()
    ], CrudFormComponent.prototype, "form", void 0);
    __decorate([
        Input()
    ], CrudFormComponent.prototype, "service", void 0);
    __decorate([
        Input()
    ], CrudFormComponent.prototype, "disableSave", void 0);
    CrudFormComponent = __decorate([
        Component({
            selector: 'nCrudForm',
            template: "<nForm [form]=\"form\" [action]=\"action\" [route]=\"[listRoute]\" [disableSave]=\"disableSave\">\n    <ng-content></ng-content>\n    <div nButton class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\">\n        <button pButton type=\"button\" [routerLink]=\"[listRoute]\" label=\"Voltar\"></button>\n    </div>\n</nForm>\n"
        })
    ], CrudFormComponent);
    return CrudFormComponent;
}());
export { CrudFormComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J1ZC1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9wcmltZW5nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY3J1ZC9jcnVkLWZvcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNakQ7SUFZSSwyQkFBb0IsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFOaEMsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFJN0IsY0FBUyxHQUFXLFlBQVksQ0FBQztJQUVZLENBQUM7SUFFOUMsb0NBQVEsR0FBUjtRQUFBLGlCQW1CQztRQWxCRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNO1lBQ2pDLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVuQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xCLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFDLElBQUk7b0JBQzNCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTt3QkFDWixLQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3BDO2dCQUNMLENBQUMsQ0FBQyxDQUFDO2FBQ047aUJBQU07Z0JBQ0gsS0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7YUFDOUI7WUFDRCxJQUFJLEtBQUksQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO2dCQUN4QixLQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3ZCO2lCQUFNLElBQUksS0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQzNCLEtBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDdEI7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQXJCMEIsY0FBYzs7SUFWaEM7UUFBUixLQUFLLEVBQUU7bURBQWlCO0lBRWhCO1FBQVIsS0FBSyxFQUFFO3NEQUFnQztJQUUvQjtRQUFSLEtBQUssRUFBRTswREFBcUI7SUFOcEIsaUJBQWlCO1FBSjdCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLG1VQUF5QztTQUM1QyxDQUFDO09BQ1csaUJBQWlCLENBbUM3QjtJQUFELHdCQUFDO0NBQUEsQUFuQ0QsSUFtQ0M7U0FuQ1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQ3J1ZFNlcnZpY2UgfSBmcm9tIFwiLi9jcnVkLXNlcnZpY2Uuc2VydmljZVwiO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbkNydWRGb3JtJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY3J1ZC1mb3JtLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQ3J1ZEZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgQElucHV0KCkgZm9ybTogRm9ybUdyb3VwO1xuXG4gICAgQElucHV0KCkgc2VydmljZTogQ3J1ZFNlcnZpY2U8YW55LCBhbnk+O1xuXG4gICAgQElucHV0KCkgZGlzYWJsZVNhdmUgPSBmYWxzZTtcblxuICAgIGFjdGlvbjogc3RyaW5nO1xuXG4gICAgbGlzdFJvdXRlOiBzdHJpbmcgPSBcIi4uLy4uL2xpc3RcIjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7IH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJvdXRlLnBhcmFtTWFwLnN1YnNjcmliZSgocGFyYW1zKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IHBhcmFtcy5nZXQoJ2FjdGlvbicpO1xuXG4gICAgICAgICAgICBpZiAocGFyYW1zLmdldCgnaWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucm91dGUuZGF0YS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS5wYXRjaFZhbHVlKGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdFJvdXRlID0gXCIuLi9saXN0XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09IFwidmlld1wiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtLmRpc2FibGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5mb3JtLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtLmVuYWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbiJdfQ==