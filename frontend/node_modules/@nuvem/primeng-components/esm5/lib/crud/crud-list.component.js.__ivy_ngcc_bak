import { __decorate, __param } from "tslib";
import { Component, Inject, Input, Output, EventEmitter, ViewChild, ContentChildren } from "@angular/core";
import { CRUD_SERVICE } from "./crud-service.service";
import { Router, ActivatedRoute } from "@angular/router";
import { Column } from '../datatable/p-column.directive';
import { ConfirmationService } from 'primeng/api';
var CrudListComponent = /** @class */ (function () {
    function CrudListComponent(crudService, confirmationService, route, router) {
        this.crudService = crudService;
        this.confirmationService = confirmationService;
        this.route = route;
        this.router = router;
        this.action = "findAll";
        this.findLabel = "Pesquisar";
        this.disableSave = false;
        this.disableEdit = false;
        this.disableView = false;
        this.disableDelete = false;
        this.find = new EventEmitter();
    }
    CrudListComponent.prototype.ngOnInit = function () {
        if (this.service) {
            this.crudService = this.service;
        }
        if (!this.url) {
            this.url = this.crudService.uri;
        }
    };
    CrudListComponent.prototype.datatableClick = function (event) {
        var _this = this;
        if (event.selection) {
            switch (event.button) {
                case "edit":
                case "view":
                    this.router.navigate(["../" + event.button, event.selection.id], { relativeTo: this.route });
                    break;
                case "delete":
                    this.confirmationService.confirm({
                        message: 'VocÃª tem certeza que deseja excluir o registro?',
                        accept: function () { return _this.crudService.delete(event.selection.id)
                            .subscribe(function () { return _this.datatable.filter(); }); }
                    });
                    break;
            }
        }
    };
    CrudListComponent.prototype.findAll = function (event) {
        var _this = this;
        if (this.find.observers.length) {
            this.find.emit(this.form.value);
        }
        else {
            this.datatable.filterParams = {};
            Object.keys(this.form.value).forEach(function (element) {
                var value = _this.form.value[element];
                if (value) {
                    _this.datatable.filterParams[element] =
                        value instanceof Date ? JSON.stringify(value).replace(/"/g, "") : value;
                }
            });
            this.datatable.filter();
        }
    };
    CrudListComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var datatableNgAfterContentInit = this.datatable.pDatatableComponent.ngAfterContentInit;
        this.datatable.pDatatableComponent.ngAfterContentInit = function () {
            _this.datatable.pDatatableComponent.columns = _this.columns.toArray();
            datatableNgAfterContentInit.call(_this.datatable.pDatatableComponent);
        };
    };
    CrudListComponent.prototype.ngAfterViewInit = function () {
        for (var i in this.datatableExtraParams) {
            this.datatable[i] = this.datatableExtraParams[i];
        }
    };
    CrudListComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CRUD_SERVICE,] }] },
        { type: ConfirmationService },
        { type: ActivatedRoute },
        { type: Router }
    ]; };
    __decorate([
        Input()
    ], CrudListComponent.prototype, "form", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "action", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "findLabel", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "service", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "url", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "disableSave", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "disableEdit", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "disableView", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "disableDelete", void 0);
    __decorate([
        Input()
    ], CrudListComponent.prototype, "datatableExtraParams", void 0);
    __decorate([
        Output()
    ], CrudListComponent.prototype, "find", void 0);
    __decorate([
        ViewChild('datatable', { static: true })
    ], CrudListComponent.prototype, "datatable", void 0);
    __decorate([
        ContentChildren(Column)
    ], CrudListComponent.prototype, "columns", void 0);
    CrudListComponent = __decorate([
        Component({
            selector: 'nCrudList',
            template: "<nForm [form]=\"form\" (save)=\"findAll($event)\" [saveLabel]=\"findLabel\">\n    <ng-content select=\"[nForm]\"></ng-content>\n    <div nButton class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\">\n        <button pButton type=\"button\" [routerLink]=\"['../save']\" label=\"Novo\" *ngIf=\"!disableSave\"></button>\n    </div>\n</nForm>\n\n<basis-datatable #datatable [value]=\"result\" (buttonClick)=\"datatableClick($event)\" [url]=\"url\"\n    [disableEdit]=\"disableEdit\" [disableView]=\"disableView\" [disableDelete]=\"disableDelete\">\n    <ng-content select=\"p-column\"></ng-content>\n</basis-datatable>\n\n<p-confirmDialog header=\"Confirmar Exclus\u00E3o\" acceptLabel=\"Sim\" rejectLabel=\"N\u00E3o\" icon=\"pi pi-exclamation-triangle\"></p-confirmDialog>\n"
        }),
        __param(0, Inject(CRUD_SERVICE))
    ], CrudListComponent);
    return CrudListComponent;
}());
export { CrudListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J1ZC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9wcmltZW5nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY3J1ZC9jcnVkLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFDdEQsU0FBUyxFQUFFLGVBQWUsRUFDN0IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFlLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBSXpELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQU9sRDtJQThCSSwyQkFFVyxXQUFrQyxFQUNqQyxtQkFBd0MsRUFDeEMsS0FBcUIsRUFDckIsTUFBYztRQUhmLGdCQUFXLEdBQVgsV0FBVyxDQUF1QjtRQUNqQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLFdBQU0sR0FBTixNQUFNLENBQVE7UUEvQmpCLFdBQU0sR0FBVyxTQUFTLENBQUM7UUFFM0IsY0FBUyxHQUFXLFdBQVcsQ0FBQztRQU1oQyxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUlyQixTQUFJLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFjdkQsQ0FBQztJQUVOLG9DQUFRLEdBQVI7UUFDSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNYLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUE7U0FDbEM7SUFDTCxDQUFDO0lBRUQsMENBQWMsR0FBZCxVQUFlLEtBQTBCO1FBQXpDLGlCQWdCQztRQWZHLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNqQixRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xCLEtBQUssTUFBTSxDQUFDO2dCQUNaLEtBQUssTUFBTTtvQkFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQU0sS0FBSyxDQUFDLE1BQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUM3RixNQUFNO2dCQUNWLEtBQUssUUFBUTtvQkFDVCxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDO3dCQUM3QixPQUFPLEVBQUUsaURBQWlEO3dCQUMxRCxNQUFNLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDOzZCQUNwRCxTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQXZCLENBQXVCLENBQUMsRUFEL0IsQ0FDK0I7cUJBQ2hELENBQUMsQ0FBQztvQkFDSCxNQUFNO2FBQ2I7U0FDSjtJQUNMLENBQUM7SUFFRCxtQ0FBTyxHQUFQLFVBQVEsS0FBVTtRQUFsQixpQkFjQztRQWJHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNILElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztZQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsT0FBTztnQkFDeEMsSUFBSSxLQUFLLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3JDLElBQUksS0FBSyxFQUFFO29CQUNQLEtBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQzt3QkFDaEMsS0FBSyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7aUJBQy9FO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztJQUVELDhDQUFrQixHQUFsQjtRQUFBLGlCQU1DO1FBTEcsSUFBTSwyQkFBMkIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDO1FBQzFGLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUc7WUFDcEQsS0FBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwRSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFRCwyQ0FBZSxHQUFmO1FBQ0ksS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7SUFDTCxDQUFDOztnREE5REksTUFBTSxTQUFDLFlBQVk7Z0JBRVMsbUJBQW1CO2dCQUNqQyxjQUFjO2dCQUNiLE1BQU07O0lBakNqQjtRQUFSLEtBQUssRUFBRTttREFBaUI7SUFFaEI7UUFBUixLQUFLLEVBQUU7cURBQTRCO0lBRTNCO1FBQVIsS0FBSyxFQUFFO3dEQUFpQztJQUVoQztRQUFSLEtBQUssRUFBRTtzREFBZ0M7SUFFL0I7UUFBUixLQUFLLEVBQUU7a0RBQWE7SUFFWjtRQUFSLEtBQUssRUFBRTswREFBcUI7SUFFcEI7UUFBUixLQUFLLEVBQUU7MERBQXFCO0lBRXBCO1FBQVIsS0FBSyxFQUFFOzBEQUFxQjtJQUVwQjtRQUFSLEtBQUssRUFBRTs0REFBdUI7SUFFdEI7UUFBUixLQUFLLEVBQUU7bUVBQTJCO0lBRXpCO1FBQVQsTUFBTSxFQUFFO21EQUFtRDtJQUVsQjtRQUF6QyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO3dEQUErQjtJQUUvQztRQUF4QixlQUFlLENBQUMsTUFBTSxDQUFDO3NEQUE0QjtJQTFCM0MsaUJBQWlCO1FBSjdCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLHF3QkFBeUM7U0FDNUMsQ0FBQztRQWdDTyxXQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtPQS9CaEIsaUJBQWlCLENBK0Y3QjtJQUFELHdCQUFDO0NBQUEsQUEvRkQsSUErRkM7U0EvRlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsIE9uSW5pdCwgSW5qZWN0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEFmdGVyQ29udGVudEluaXQsXG4gICAgVmlld0NoaWxkLCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCwgQ2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQ3J1ZFNlcnZpY2UsIENSVURfU0VSVklDRSB9IGZyb20gXCIuL2NydWQtc2VydmljZS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnLi4vZGF0YXRhYmxlL3AtY29sdW1uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEYXRhdGFibGVDb21wb25lbnQgfSBmcm9tICcuLi9kYXRhdGFibGUvZGF0YXRhYmxlLmNvbXBvbmVudCdcbmltcG9ydCB7IERhdGF0YWJsZUNsaWNrRXZlbnQgfSBmcm9tICcuLi9kYXRhdGFibGUvZGF0YXRhYmxlLWNsaWNrLWV2ZW50J1xuXG5pbXBvcnQgeyBDb25maXJtYXRpb25TZXJ2aWNlIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgVXJsIH0gZnJvbSAndXJsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduQ3J1ZExpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jcnVkLWxpc3QuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENydWRMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcblxuICAgIEBJbnB1dCgpIGZvcm06IEZvcm1Hcm91cDtcblxuICAgIEBJbnB1dCgpIGFjdGlvbjogc3RyaW5nID0gXCJmaW5kQWxsXCI7XG5cbiAgICBASW5wdXQoKSBmaW5kTGFiZWw6IHN0cmluZyA9IFwiUGVzcXVpc2FyXCI7XG5cbiAgICBASW5wdXQoKSBzZXJ2aWNlOiBDcnVkU2VydmljZTxhbnksIGFueT47XG5cbiAgICBASW5wdXQoKSB1cmw6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGRpc2FibGVTYXZlID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKSBkaXNhYmxlRWRpdCA9IGZhbHNlO1xuXG4gICAgQElucHV0KCkgZGlzYWJsZVZpZXcgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpIGRpc2FibGVEZWxldGUgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpIGRhdGF0YWJsZUV4dHJhUGFyYW1zOiBhbnk7XG5cbiAgICBAT3V0cHV0KCkgZmluZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIEBWaWV3Q2hpbGQoJ2RhdGF0YWJsZScsIHsgc3RhdGljOiB0cnVlIH0pIGRhdGF0YWJsZTogRGF0YXRhYmxlQ29tcG9uZW50O1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihDb2x1bW4pIGNvbHVtbnM6IFF1ZXJ5TGlzdDxDb2x1bW4+O1xuXG4gICAgcmVzdWx0OiBhbnlbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KENSVURfU0VSVklDRSlcbiAgICAgICAgcHVibGljIGNydWRTZXJ2aWNlOiBDcnVkU2VydmljZTxhbnksIGFueT4sXG4gICAgICAgIHByaXZhdGUgY29uZmlybWF0aW9uU2VydmljZTogQ29uZmlybWF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgICApIHsgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLmNydWRTZXJ2aWNlID0gdGhpcy5zZXJ2aWNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy51cmwpIHtcbiAgICAgICAgICAgIHRoaXMudXJsID0gdGhpcy5jcnVkU2VydmljZS51cmlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRhdGF0YWJsZUNsaWNrKGV2ZW50OiBEYXRhdGFibGVDbGlja0V2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5zZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuYnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImVkaXRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwidmlld1wiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYC4uLyR7ZXZlbnQuYnV0dG9ufWAsIGV2ZW50LnNlbGVjdGlvbi5pZF0sIHsgcmVsYXRpdmVUbzogdGhpcy5yb3V0ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpcm1hdGlvblNlcnZpY2UuY29uZmlybSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVm9jw6ogdGVtIGNlcnRlemEgcXVlIGRlc2VqYSBleGNsdWlyIG8gcmVnaXN0cm8/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdDogKCkgPT4gdGhpcy5jcnVkU2VydmljZS5kZWxldGUoZXZlbnQuc2VsZWN0aW9uLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5kYXRhdGFibGUuZmlsdGVyKCkpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmRBbGwoZXZlbnQ6IGFueSkge1xuICAgICAgICBpZiAodGhpcy5maW5kLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZmluZC5lbWl0KHRoaXMuZm9ybS52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhdGF0YWJsZS5maWx0ZXJQYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZm9ybS52YWx1ZSkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmZvcm0udmFsdWVbZWxlbWVudF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXRhYmxlLmZpbHRlclBhcmFtc1tlbGVtZW50XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXCIvZywgXCJcIikgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YXRhYmxlLmZpbHRlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICBjb25zdCBkYXRhdGFibGVOZ0FmdGVyQ29udGVudEluaXQgPSB0aGlzLmRhdGF0YWJsZS5wRGF0YXRhYmxlQ29tcG9uZW50Lm5nQWZ0ZXJDb250ZW50SW5pdDtcbiAgICAgICAgdGhpcy5kYXRhdGFibGUucERhdGF0YWJsZUNvbXBvbmVudC5uZ0FmdGVyQ29udGVudEluaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGF0YWJsZS5wRGF0YXRhYmxlQ29tcG9uZW50LmNvbHVtbnMgPSB0aGlzLmNvbHVtbnMudG9BcnJheSgpO1xuICAgICAgICAgICAgZGF0YXRhYmxlTmdBZnRlckNvbnRlbnRJbml0LmNhbGwodGhpcy5kYXRhdGFibGUucERhdGF0YWJsZUNvbXBvbmVudCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZGF0YXRhYmxlRXh0cmFQYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YXRhYmxlW2ldID0gdGhpcy5kYXRhdGFibGVFeHRyYVBhcmFtc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19