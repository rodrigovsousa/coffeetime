import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HTTP_INTERCEPTORS, HttpResponse } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { PageNotificationService } from '../page-notification/page-notification.service';
import * as i0 from "@angular/core";
import * as i1 from "../page-notification/page-notification.service";
import * as ɵngcc0 from '@angular/core';
var STATUS;
(function (STATUS) {
    STATUS[STATUS["OK"] = 200] = "OK";
    STATUS[STATUS["CREATED"] = 201] = "CREATED";
})(STATUS || (STATUS = {}));
var SuccessMessageHandlerInterceptor = /** @class */ (function () {
    function SuccessMessageHandlerInterceptor(notification) {
        this.notification = notification;
    }
    SuccessMessageHandlerInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        return next.handle(req).pipe(tap(function (event) {
            if (event instanceof HttpResponse) {
                if (event.headers.has("X-nuvem-alert")) {
                    _this.notification.addSuccessMessage(event.headers.get("X-nuvem-alert"));
                }
                else if ((event.status === STATUS.OK || event.status === STATUS.CREATED) && req.method != "GET") {
                    _this.notification.addSuccessMessage("Operação realizada com sucesso!");
                }
            }
        }));
    };
    SuccessMessageHandlerInterceptor.ctorParameters = function () { return [
        { type: PageNotificationService }
    ]; };
    SuccessMessageHandlerInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function SuccessMessageHandlerInterceptor_Factory() { return new SuccessMessageHandlerInterceptor(i0.ɵɵinject(i1.PageNotificationService)); }, token: SuccessMessageHandlerInterceptor, providedIn: "root" });
SuccessMessageHandlerInterceptor.ɵfac = function SuccessMessageHandlerInterceptor_Factory(t) { return new (t || SuccessMessageHandlerInterceptor)(ɵngcc0.ɵɵinject(PageNotificationService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SuccessMessageHandlerInterceptor, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: PageNotificationService }]; }, null); })();
    return SuccessMessageHandlerInterceptor;
}());
export { SuccessMessageHandlerInterceptor };
export var httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: SuccessMessageHandlerInterceptor, multi: true },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VjY2Vzcy1tZXNzYWdlLWhhbmRsZXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIm5nOi9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzL2xpYi9jcnVkL3N1Y2Nlc3MtbWVzc2FnZS1oYW5kbGVyLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDaUQsaUJBQWlCLEVBQUUsWUFBWSxFQUN0RixNQUFNLHNCQUFzQixDQUFDO0FBRzlCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN6RjtBQUNvQzs7QUFBcEMsSUFBSyxNQUErQjtBQUFwQyxXQUFLLE1BQU07QUFBSSxJQUFELGlDQUFNLENBQUE7QUFBQyxJQUFDLDJDQUFXLENBQUE7QUFBRSxDQUFDLEVBQS9CLE1BQU0sS0FBTixNQUFNLFFBQXlCO0FBR3BDO0FBQW9FLElBRWxFLDBDQUFvQixZQUFxQztBQUMzRCxRQURzQixpQkFBWSxHQUFaLFlBQVksQ0FBeUI7QUFBQyxJQUUxRCxDQUFDO0FBQ0gsSUFDRSxvREFBUyxHQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtBQUFJLFFBQXRELGlCQVlDO0FBQ0gsUUFaSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUN4QixHQUFHLENBQUMsVUFBQyxLQUFLO0FBQUksWUFDWixJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7QUFDN0MsZ0JBQVksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRTtBQUNwRCxvQkFBYyxLQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFDdEYsaUJBQWE7QUFBQyxxQkFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksS0FBSyxFQUFFO0FBQy9HLG9CQUFjLEtBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUNyRixpQkFBYTtBQUNiLGFBQVc7QUFDWCxRQUFRLENBQUMsQ0FBQyxDQUNMLENBQUM7QUFDTixJQUFFLENBQUM7QUFFSDtBQUdnQyxnQkFyQkksdUJBQXVCO0FBQUc7QUFJM0Q7SUFOVSxnQ0FBZ0Msd0JBRDVDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxRQUN0QixnQ0FBZ0MsQ0FvQjVDOzs7O2lGQUNEO0FBQ0EsMkNBbENBO0FBQUUsQ0FnQ0QsQUFwQkQsSUFvQkM7QUFDRCxTQXJCYSxnQ0FBZ0M7QUFzQjdDLE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHO0FBQ3hDLElBQUUsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLGdDQUFnQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDekYsQ0FBQyxDQUFDO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwRXZlbnQsIEh0dHBJbnRlcmNlcHRvciwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0LCBIVFRQX0lOVEVSQ0VQVE9SUywgSHR0cFJlc3BvbnNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGFnZU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9wYWdlLW5vdGlmaWNhdGlvbi9wYWdlLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcblxuZW51bSBTVEFUVVMgeyBPSz0yMDAsIENSRUFURUQ9MjAxICB9XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgU3VjY2Vzc01lc3NhZ2VIYW5kbGVySW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZpY2F0aW9uOiBQYWdlTm90aWZpY2F0aW9uU2VydmljZSkge1xuXG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgICB0YXAoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuaGVhZGVycy5oYXMoXCJYLW51dmVtLWFsZXJ0XCIpKSB7XG4gICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uLmFkZFN1Y2Nlc3NNZXNzYWdlKGV2ZW50LmhlYWRlcnMuZ2V0KFwiWC1udXZlbS1hbGVydFwiKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChldmVudC5zdGF0dXMgPT09IFNUQVRVUy5PSyB8fCBldmVudC5zdGF0dXMgPT09IFNUQVRVUy5DUkVBVEVEKSAmJiByZXEubWV0aG9kICE9IFwiR0VUXCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb24uYWRkU3VjY2Vzc01lc3NhZ2UoXCJPcGVyYcOnw6NvIHJlYWxpemFkYSBjb20gc3VjZXNzbyFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICk7XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgaHR0cEludGVyY2VwdG9yUHJvdmlkZXJzID0gW1xuICB7IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogU3VjY2Vzc01lc3NhZ2VIYW5kbGVySW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH0sXG5dO1xuIl19