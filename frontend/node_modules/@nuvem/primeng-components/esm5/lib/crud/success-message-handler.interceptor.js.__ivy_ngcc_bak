import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HTTP_INTERCEPTORS, HttpResponse } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { PageNotificationService } from '../page-notification/page-notification.service';
import * as i0 from "@angular/core";
import * as i1 from "../page-notification/page-notification.service";
var STATUS;
(function (STATUS) {
    STATUS[STATUS["OK"] = 200] = "OK";
    STATUS[STATUS["CREATED"] = 201] = "CREATED";
})(STATUS || (STATUS = {}));
var SuccessMessageHandlerInterceptor = /** @class */ (function () {
    function SuccessMessageHandlerInterceptor(notification) {
        this.notification = notification;
    }
    SuccessMessageHandlerInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        return next.handle(req).pipe(tap(function (event) {
            if (event instanceof HttpResponse) {
                if (event.headers.has("X-nuvem-alert")) {
                    _this.notification.addSuccessMessage(event.headers.get("X-nuvem-alert"));
                }
                else if ((event.status === STATUS.OK || event.status === STATUS.CREATED) && req.method != "GET") {
                    _this.notification.addSuccessMessage("Operação realizada com sucesso!");
                }
            }
        }));
    };
    SuccessMessageHandlerInterceptor.ctorParameters = function () { return [
        { type: PageNotificationService }
    ]; };
    SuccessMessageHandlerInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function SuccessMessageHandlerInterceptor_Factory() { return new SuccessMessageHandlerInterceptor(i0.ɵɵinject(i1.PageNotificationService)); }, token: SuccessMessageHandlerInterceptor, providedIn: "root" });
    SuccessMessageHandlerInterceptor = __decorate([
        Injectable({ providedIn: 'root' })
    ], SuccessMessageHandlerInterceptor);
    return SuccessMessageHandlerInterceptor;
}());
export { SuccessMessageHandlerInterceptor };
export var httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: SuccessMessageHandlerInterceptor, multi: true },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VjY2Vzcy1tZXNzYWdlLWhhbmRsZXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NydWQvc3VjY2Vzcy1tZXNzYWdlLWhhbmRsZXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNpRCxpQkFBaUIsRUFBRSxZQUFZLEVBQ3RGLE1BQU0sc0JBQXNCLENBQUM7QUFHOUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOzs7QUFFekYsSUFBSyxNQUErQjtBQUFwQyxXQUFLLE1BQU07SUFBRyxpQ0FBTSxDQUFBO0lBQUUsMkNBQVcsQ0FBQTtBQUFFLENBQUMsRUFBL0IsTUFBTSxLQUFOLE1BQU0sUUFBeUI7QUFHcEM7SUFFRSwwQ0FBb0IsWUFBcUM7UUFBckMsaUJBQVksR0FBWixZQUFZLENBQXlCO0lBRXpELENBQUM7SUFFRCxvREFBUyxHQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtRQUFsRCxpQkFZQztRQVhDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ3hCLEdBQUcsQ0FBQyxVQUFDLEtBQUs7WUFDUixJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7Z0JBQ2pDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUU7b0JBQ3RDLEtBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztpQkFDekU7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUssRUFBRTtvQkFDakcsS0FBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO2lCQUN4RTthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNKLENBQUM7O2dCQWhCaUMsdUJBQXVCOzs7SUFGOUMsZ0NBQWdDO1FBRDVDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztPQUN0QixnQ0FBZ0MsQ0FvQjVDOzJDQWhDRDtDQWdDQyxBQXBCRCxJQW9CQztTQXBCWSxnQ0FBZ0M7QUFzQjdDLE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHO0lBQ3RDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxnQ0FBZ0MsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0NBQ3hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwRXZlbnQsIEh0dHBJbnRlcmNlcHRvciwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0LCBIVFRQX0lOVEVSQ0VQVE9SUywgSHR0cFJlc3BvbnNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGFnZU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9wYWdlLW5vdGlmaWNhdGlvbi9wYWdlLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcblxuZW51bSBTVEFUVVMgeyBPSz0yMDAsIENSRUFURUQ9MjAxICB9XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgU3VjY2Vzc01lc3NhZ2VIYW5kbGVySW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZpY2F0aW9uOiBQYWdlTm90aWZpY2F0aW9uU2VydmljZSkge1xuXG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgICB0YXAoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuaGVhZGVycy5oYXMoXCJYLW51dmVtLWFsZXJ0XCIpKSB7XG4gICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uLmFkZFN1Y2Nlc3NNZXNzYWdlKGV2ZW50LmhlYWRlcnMuZ2V0KFwiWC1udXZlbS1hbGVydFwiKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChldmVudC5zdGF0dXMgPT09IFNUQVRVUy5PSyB8fCBldmVudC5zdGF0dXMgPT09IFNUQVRVUy5DUkVBVEVEKSAmJiByZXEubWV0aG9kICE9IFwiR0VUXCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb24uYWRkU3VjY2Vzc01lc3NhZ2UoXCJPcGVyYcOnw6NvIHJlYWxpemFkYSBjb20gc3VjZXNzbyFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICk7XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgaHR0cEludGVyY2VwdG9yUHJvdmlkZXJzID0gW1xuICB7IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogU3VjY2Vzc01lc3NhZ2VIYW5kbGVySW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH0sXG5dO1xuIl19