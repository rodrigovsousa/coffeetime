import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { DatatableService } from './datatable.service';
import { ServerDataProvider } from './server-dataprovider';
import { MemoryDataProvider } from './memory-dataprovider';
import * as i0 from "@angular/core";
import * as i1 from "./datatable.service";
/**
 * Enum DataProviderType
 * @enum
 */
export var DataProviderType;
(function (DataProviderType) {
    DataProviderType["Memory"] = "memory";
    DataProviderType["Server"] = "server";
})(DataProviderType || (DataProviderType = {}));
/**
 * Class DataProviderFactory
 * @class
 */
var DataProviderFactory = /** @class */ (function () {
    /**
     * constructor method
     * @constructor
     * @param {DatatableService} datatableService
     */
    function DataProviderFactory(datatableService) {
        this.datatableService = datatableService;
    }
    /**
     * create method
     * @param {DataProviderType} type
     * @param {DatatableComponent} component
     * @public
     * @returns DataProvider
     */
    DataProviderFactory.prototype.create = function (type, component) {
        if (DataProviderType.Server === type) {
            return new ServerDataProvider(this.datatableService, component);
        }
        if (DataProviderType.Memory === type) {
            return new MemoryDataProvider(component);
        }
    };
    DataProviderFactory.ctorParameters = function () { return [
        { type: DatatableService }
    ]; };
    DataProviderFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function DataProviderFactory_Factory() { return new DataProviderFactory(i0.ɵɵinject(i1.DatatableService)); }, token: DataProviderFactory, providedIn: "root" });
    DataProviderFactory = __decorate([
        Injectable({
            providedIn: "root"
        })
    ], DataProviderFactory);
    return DataProviderFactory;
}());
export { DataProviderFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXByb3ZpZGVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbnV2ZW0vcHJpbWVuZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZS9kYXRhcHJvdmlkZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUl2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRTNEOzs7R0FHRztBQUNILE1BQU0sQ0FBTixJQUFZLGdCQUdYO0FBSEQsV0FBWSxnQkFBZ0I7SUFDeEIscUNBQWlCLENBQUE7SUFDakIscUNBQWlCLENBQUE7QUFDckIsQ0FBQyxFQUhXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFHM0I7QUFDRDs7O0dBR0c7QUFJSDtJQUVJOzs7O09BSUc7SUFDSCw2QkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBRTFEOzs7Ozs7T0FNRztJQUNJLG9DQUFNLEdBQWIsVUFBYyxJQUFzQixFQUFFLFNBQTZCO1FBQy9ELElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtZQUNsQyxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ2xDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7O2dCQWpCcUMsZ0JBQWdCOzs7SUFQN0MsbUJBQW1CO1FBSC9CLFVBQVUsQ0FBQztZQUNSLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUM7T0FDVyxtQkFBbUIsQ0F5Qi9COzhCQWhERDtDQWdEQyxBQXpCRCxJQXlCQztTQXpCWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhdGFibGVTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhdGFibGUuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhdGFibGVDb21wb25lbnQgfSBmcm9tICcuL2RhdGF0YWJsZS5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBEYXRhUHJvdmlkZXIgfSBmcm9tICcuL2RhdGFwcm92aWRlcic7XG5pbXBvcnQgeyBTZXJ2ZXJEYXRhUHJvdmlkZXIgfSBmcm9tICcuL3NlcnZlci1kYXRhcHJvdmlkZXInO1xuaW1wb3J0IHsgTWVtb3J5RGF0YVByb3ZpZGVyIH0gZnJvbSAnLi9tZW1vcnktZGF0YXByb3ZpZGVyJztcblxuLyoqXG4gKiBFbnVtIERhdGFQcm92aWRlclR5cGVcbiAqIEBlbnVtXG4gKi9cbmV4cG9ydCBlbnVtIERhdGFQcm92aWRlclR5cGUge1xuICAgIE1lbW9yeSA9ICdtZW1vcnknLFxuICAgIFNlcnZlciA9ICdzZXJ2ZXInXG59XG4vKipcbiAqIENsYXNzIERhdGFQcm92aWRlckZhY3RvcnlcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogXCJyb290XCJcbn0pXG5leHBvcnQgY2xhc3MgRGF0YVByb3ZpZGVyRmFjdG9yeSB7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0RhdGF0YWJsZVNlcnZpY2V9IGRhdGF0YWJsZVNlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGF0YWJsZVNlcnZpY2U6IERhdGF0YWJsZVNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgbWV0aG9kXG4gICAgICogQHBhcmFtIHtEYXRhUHJvdmlkZXJUeXBlfSB0eXBlXG4gICAgICogQHBhcmFtIHtEYXRhdGFibGVDb21wb25lbnR9IGNvbXBvbmVudFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyBEYXRhUHJvdmlkZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlKHR5cGU6IERhdGFQcm92aWRlclR5cGUsIGNvbXBvbmVudDogRGF0YXRhYmxlQ29tcG9uZW50KTogRGF0YVByb3ZpZGVyIHtcbiAgICAgICAgaWYgKERhdGFQcm92aWRlclR5cGUuU2VydmVyID09PSB0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlcnZlckRhdGFQcm92aWRlcih0aGlzLmRhdGF0YWJsZVNlcnZpY2UsIGNvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoRGF0YVByb3ZpZGVyVHlwZS5NZW1vcnkgPT09IHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWVtb3J5RGF0YVByb3ZpZGVyKGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=