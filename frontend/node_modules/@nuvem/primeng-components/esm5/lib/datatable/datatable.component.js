import { __assign, __decorate } from "tslib";
import { Component, ViewChild, Input, Output, ContentChildren, QueryList, ChangeDetectorRef, AfterViewInit, AfterContentInit, OnInit, EventEmitter, ViewEncapsulation, ElementRef, } from '@angular/core';
import { Table as DataTable } from 'primeng/table';
import { DataProviderFactory, DataProviderType } from './dataprovider-factory';
import { DatatableButtonComponent } from './datatable-button.component';
import { DatatableClickEvent } from './datatable-click-event';
import { Authorization, User } from '@nuvem/angular-base';
import { Column } from './p-column.directive';
/**
 * Class DatatableComponent
 * @class
 */
var DatatableComponent = /** @class */ (function () {
    /**
     * constructor method
     * @constructor
     * @param {ChangeDetectorRef} changeDetectorRef
     * @param {DataProviderFactory} dataProviderFactory
     * @param {Authorization} authorizationService
     */
    function DatatableComponent(changeDetectorRef, dataProviderFactory, authorizationService) {
        this.changeDetectorRef = changeDetectorRef;
        this.dataProviderFactory = dataProviderFactory;
        this.authorizationService = authorizationService;
        /**
         * filterParams property
         * @type {any}
         */
        this.filterParams = {};
        /**
         * footerMsg property
         * @type {string}
         */
        this.footerMsg = '';
        /**
         * orderInSort property
         * @type {boolean}
         */
        this.orderInSort = false;
        /**
         * value property
         * @type {any}
         */
        this.value = [];
        /**
         * type property
         * @type DataProviderType
         */
        this.type = DataProviderType.Server;
        /**
         * rows property
         * @type {number}
         */
        this.rows = 5;
        /**
         * showPaginationFooter property
         * @type {boolean}
         */
        this.showPaginationFooter = false;
        /**
         * disableEdit property
         * @type {boolean}
         */
        this.disableEdit = false;
        /**
         * disableView property
         * @type {boolean}
         */
        this.disableView = false;
        /**
         * disableDelete property
         * @type {boolean}
         */
        this.disableDelete = false;
        /**
         * selectionMode property
         * @type {string}
         */
        this.selectionMode = 'single';
        /**
         * enableButtonsScroll property
         * @type {boolean}
         */
        this.enableButtonsScroll = false;
        /**
         * emptyMessage property
         * @type {string}
         */
        this.emptyMessage = 'Nenhum registro encontrado.';
        /**
         * verticalButtons property
         * @type {boolean}
         */
        this.verticalButtons = true;
        /**
         * enableScroll property
         * @type {boolean}
         */
        this.enableScroll = false;
        /**
         * disableLoadingBlockUI property
         * @type {boolean}
         */
        this.disableLoadingBlockUI = false;
        /**
         * filterOnColumn property
         */
        this.filterOnColumn = false;
        /**
         * filterSelectOptions property
         */
        this.filterSelectOptions = [];
        /**
         * updateFiltroHistorico property
         */
        this.updateFilterColumn = false;
        /**
         * customFilterOptions property
         */
        this.customFilterOptions = {};
        /**
         * buttonClick property
         * @type {EventEmitter<any>}
         */
        this.buttonClick = new EventEmitter();
        /**
         * startedLoading property
         * @type {EventEmitter<void>}
         */
        this.startedLoading = new EventEmitter();
        /**
         * finishedLoading property
         * @type {EventEmitter<HttpErrorResponse>}
         */
        this.finishedLoading = new EventEmitter();
        /**
         * onRowSelected property
         * @type {EventEmitter<any>}
         */
        this.onRowSelected = new EventEmitter();
        /**
         * showHorizontalButtonsHeader property
         * @type {boolean}
         */
        this.showHorizontalButtonsHeader = false;
        /**
         * blockContent
         * @type {boolean}
         */
        this.blockContent = false;
        /**
         * visibleColumns property
         * @type {Object}
         */
        this.visibleColumns = {};
        /**
         * showVisibleColumnsControl property
         * @type {boolean}
         */
        this.showVisibleColumnsControl = false;
        /**
         * dataKey property
         * Identificador único para cada registro da tabela
         * @type {string}
         */
        this.dataKey = 'id';
        /**
         * onRowEditEvent property
         * Evento disparado quando o usuário realiza ações de edição em uma linha da tabela
         * @type {EventEmitter<void>}
         */
        this.onRowEditEvent = new EventEmitter();
        this.clonedRowData = {};
        /**
         * errorMessage property
         * @type {string}
         */
        this.errorMessage = 'Ocorreu um erro ao carregar os dados da tabela. Tente novamente.';
        this.editingRow = false;
    }
    /**
     * ngOnInit method
     * @returns void
     */
    DatatableComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataProvider = this.dataProviderFactory.create(this.type, this);
        this.pDatatableComponent.rows = this.rows;
        this.subscribeToLoadingEvents();
        this.initRowsPerPageOptionsIfPresent();
        this.defineIfShouldShowHorizontalButtonsHeader();
        this.updateOnValueChange();
        this.finishedLoading.subscribe(function () {
            _this.updateOnValueChange();
        });
    };
    /**
     * subscribeFromValueChange method
     * @returns void
     */
    DatatableComponent.prototype.updateOnValueChange = function () {
        var _this = this;
        this.filterSelectOptions = [];
        if (this.value) {
            this.value.map(function (item) {
                _this.filterSelectOptions.push(item);
            });
        }
    };
    /**
     * subscribeToLoadingEvents method
     * @returns void
     */
    DatatableComponent.prototype.subscribeToLoadingEvents = function () {
        var _this = this;
        if (!this.disableLoadingBlockUI) {
            this.originalEmptyMessage = this.emptyMessage;
            this.startedLoading.subscribe(function () { return _this.onStartedLoading(); });
            this.finishedLoading.subscribe(function (error) { return _this.onFinishedLoading(error); });
        }
    };
    /**
     * onStartedLoading method
     * @returns void
     */
    DatatableComponent.prototype.onStartedLoading = function () {
        this.blockContent = true;
        this.emptyMessage = this.originalEmptyMessage;
    };
    /**
     * onFinishedLoading method
     * @param {HttpErrorResponse} error
     * @returns void
     */
    DatatableComponent.prototype.onFinishedLoading = function (error) {
        this.blockContent = false;
        if (error) {
            this.emptyMessage = this.errorMessage;
        }
    };
    /**
     * initRowsPerPageOptionsIfPresent method
     * @returns void
     */
    DatatableComponent.prototype.initRowsPerPageOptionsIfPresent = function () {
        if (this.rowsPerPageOptions) {
            this.pDatatableComponent.rowsPerPageOptions = this.rowsPerPageOptions;
        }
    };
    /**
     * defineIfShouldShowHorizontalButtonsHeader method
     * @returns void
     */
    DatatableComponent.prototype.defineIfShouldShowHorizontalButtonsHeader = function () {
        if (this.horizontalButtonsHeader) {
            this.showHorizontalButtonsHeader = true;
        }
    };
    /**
     * ngAfterViewInit method
     * @returns void
     */
    DatatableComponent.prototype.ngAfterViewInit = function () {
        this.setExtraParams();
        this.pDatatableComponent.columns = this.columns;
        this.pDatatableComponent.ngAfterContentInit();
        this.setAllColumnsVisible();
        this.changeDetectorRef.detectChanges();
    };
    /**
     * setExtraParams method
     * @returns void
     */
    DatatableComponent.prototype.setExtraParams = function () {
        for (var i in this.extraParams) {
            this.pDatatableComponent[i] = this.extraParams[i];
        }
    };
    /**
     * ngAfterContentInit method
     * @returns void
     */
    DatatableComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.extraButtons.forEach(function (button) {
            button.click.subscribe(function (event) {
                _this.onClick(button.name, event);
            });
        });
    };
    /**
     * onClick method
     * @param {string} button
     * @param {any} event
     * @return void
     */
    DatatableComponent.prototype.onClick = function (button, event) {
        this.buttonClick.emit(new DatatableClickEvent(button, this.selectedRow));
        event.stopPropagation();
        this.resetSelectedRow(button);
    };
    /**
     * onSelectChange method
     * @param {any} event
     * @returns void
     */
    DatatableComponent.prototype.onSelectChange = function (event) {
        this.onRowSelected.emit(this.selectedRow);
        if (Array.isArray(this.selectedRow) && this.selectedRow.length > 1) {
            this.updateMultipleButtonsStatus(true);
        }
        else {
            this.updateMultipleButtonsStatus(false);
        }
    };
    /**
     * updateMultipleButtonsStatus method
     * @param {boolean} hasMultipleSelection
     * @return void
     */
    DatatableComponent.prototype.updateMultipleButtonsStatus = function (hasMultipleSelection) {
        this.extraButtons.forEach(function (button) {
            if (hasMultipleSelection && !button.allowMultipleSelection) {
                button.disabled = true;
            }
            else {
                button.disabled = false;
            }
        });
    };
    /**
     * refresh method
     * @param query
     * @returns void
     */
    DatatableComponent.prototype.refresh = function (query) {
        this.dataProvider.load(query);
    };
    /**
     * resetSelectedRow method
     * @param button
     * @returns void
     */
    DatatableComponent.prototype.resetSelectedRow = function (button) {
        if (button === 'delete') {
            this.selectedRow = null;
        }
    };
    /**
     * reset method
     * @returns void
     */
    DatatableComponent.prototype.reset = function () {
        this.pDatatableComponent.first = 0;
        this.dataProvider.reset();
        this.refresh();
    };
    /**
     * paginationFooterText method
     * @param {string} msg
     * @returns string
     */
    DatatableComponent.prototype.paginationFooterText = function (msg) {
        var registros = this.totalRecords() === 1 ? 'registro' : 'registros';
        if (msg === '') {
            return "Exibindo: " + this.currentFirstIndex() + " a " + this.currentLastIndex() + " de " + this.totalRecords() + " " + registros;
        }
        msg = msg.replace('{totalRecords}', this.totalRecords().toString());
        msg = msg.replace('{currentFirstIndex}', this.currentFirstIndex().toString());
        msg = msg.replace('{currentLastIndex}', this.currentLastIndex().toString());
        return msg;
    };
    /**
     * currentFirstIndex method
     * @returns number
     */
    DatatableComponent.prototype.currentFirstIndex = function () {
        return this.pDatatableComponent.first + 1;
    };
    /**
     * currentLastIndex method
     * @returns number
     */
    DatatableComponent.prototype.currentLastIndex = function () {
        var currentLastIndex = this.pDatatableComponent.first + this.pDatatableComponent.rows;
        if (currentLastIndex > this.totalRecords()) {
            return this.totalRecords();
        }
        return currentLastIndex;
    };
    /**
     * totalRecords method
     * @returns number
     */
    DatatableComponent.prototype.totalRecords = function () {
        return this.pDatatableComponent.totalRecords;
    };
    /**
     * checkRolesToButton method
     * @param {string} button
     * @return boolean
     */
    DatatableComponent.prototype.checkRolesToButton = function (button) {
        if (this[button]) {
            if (button === 'rulesToHide' || button === 'rulesToShowEdit' || button === 'rulesToShowDelete') {
                this.checkUseButtons(button);
                return this.authorizationService.hasRole(this[button]);
            }
            return !this.authorizationService.hasRole(this[button]);
        }
        return true;
    };
    /**
     * checkUseButtons method
     * @param {string} button
     * @returns void
     */
    DatatableComponent.prototype.checkUseButtons = function (button) {
        if (this[button] && this[button.replace('Show', 'Hide')]) {
            throw new Error('Não é possível definir dois valores de roles para os botões padrões.');
        }
    };
    /**
     * filter method
     * @returns void
     */
    DatatableComponent.prototype.filter = function () {
        for (var prop in this.filterParams) {
            if (this.filterParams[prop] === '' || (this.filterParams[prop].length === 0)) {
                delete this.filterParams[prop];
            }
        }
        if (Object.getOwnPropertyNames(this.filterParams).length === 0) {
            this.reset();
        }
        else {
            this.refresh(this.filterParams);
        }
    };
    /**
     * Método para filtrar por colunas
     * @param column chave da coluna na tabela
     * @param filters valor do filtro
     */
    DatatableComponent.prototype.filterColumn = function (column, filters) {
        var values = [];
        if (filters instanceof Array) {
            values[column] = [];
            for (var item in filters) {
                var val = (filters[item] instanceof Object) ? filters[item].value : filters[item];
                values[column].push(val);
            }
        }
        else {
            values[column] = filters;
        }
        this.filterParams = __assign(__assign({}, this.filterParams), values);
        return this.filter();
    };
    /**
     * Inicia todas as colunas da tabela como visíveis
     */
    DatatableComponent.prototype.setAllColumnsVisible = function () {
        var _this = this;
        this.columns.forEach(function (col) {
            _this.visibleColumns[col.field] = 'table-cell';
        });
    };
    /**
     * Verifica se uma coluna deve estar visível
     * @param column string
     * @param visibleColumns Array
     */
    DatatableComponent.prototype.visibleColumnCheck = function (column, visibleColumns) {
        return visibleColumns.some(function (item) {
            return (item.field) ? item.field == column : true;
        });
    };
    /**
     * Atualzia os valores da variável 'visibleColuns' para mostrar ou não as colunas
     * @param columns array
     */
    DatatableComponent.prototype.updateVisibleColumns = function (columns) {
        for (var col in this.visibleColumns) {
            if (this.visibleColumnCheck(col, columns)) {
                this.visibleColumns[col] = 'table-cell';
            }
            else {
                this.visibleColumns[col] = 'none';
            }
        }
    };
    DatatableComponent.prototype.onRowEditInitEvent = function (event, rowData) {
        var _this = this;
        var tr = event.srcElement.closest('tr');
        setTimeout(function () {
            _this.editingRow = true;
            var top = tr.offsetTop;
            var height = tr.offsetHeight;
            var editButtons = tr.querySelector('.editar-campos');
            editButtons.style.top = (top + height - 75) + 'px';
            editButtons.style.height = '75px';
            editButtons.style.backgroundColor = '#d0d0d0';
            editButtons.style.opacity = 1;
            _this.clonedRowData[rowData.id] = __assign({}, rowData);
            _this.onRowEditEvent.emit({ event: "init", data: rowData });
        }, null, tr);
    };
    DatatableComponent.prototype.onRowEditSaveEvent = function (event, rowData) {
        this.onRowEditEvent.emit({ event: "save", data: rowData });
        this.resetEditingMode(event);
    };
    DatatableComponent.prototype.onRowEditCancelEvent = function (event, rowData, index) {
        this.value[index] = this.clonedRowData[rowData.id];
        delete this.clonedRowData[rowData[this.dataKey]];
        this.onRowEditEvent.emit({ event: "cancel", data: rowData });
        this.resetEditingMode(event);
    };
    DatatableComponent.prototype.resetEditingMode = function (event) {
        var editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
        editButtons.style.opacity = 0;
        editButtons.style.backgroundColor = '#0000006b';
        editButtons.style.display = 'none';
        this.editingRow = false;
    };
    DatatableComponent.prototype.editarLinhaOver = function (event) {
        if (!this.editingRow && this.editMode == 'row') {
            var top_1 = event.srcElement.closest('tr').offsetTop;
            var height = event.srcElement.closest('tr').offsetHeight;
            var editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
            editButtons.style.display = 'flex';
            editButtons.style.top = top_1 + 'px';
            editButtons.style.height = height + 'px';
            editButtons.style.backgroundColor = '#0000006b';
            editButtons.style.opacity = 1;
        }
    };
    DatatableComponent.prototype.editarLinhaOut = function (event) {
        if (!this.editingRow) {
            var editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
            editButtons.style.display = 'none';
            editButtons.style.opacity = 0;
        }
    };
    DatatableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: DataProviderFactory },
        { type: Authorization }
    ]; };
    __decorate([
        Input()
    ], DatatableComponent.prototype, "splitButton", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rows", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rowsPerPageOptions", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "url", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "extraParams", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "paginationParameters", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "showPaginationFooter", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "disableEdit", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "disableView", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "disableDelete", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "selectionMode", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "enableButtonsScroll", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "emptyMessage", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "verticalButtons", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "enableScroll", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "scrollHeight", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "scrollWidth", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rulesToHide", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rulesToShowEdit", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rulesToShowDelete", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rulesToHideView", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rulesToHideEdit", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rulesToHideDelete", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "disableLoadingBlockUI", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "rowStyleClass", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "filterOnColumn", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "customFilterOptions", void 0);
    __decorate([
        Output()
    ], DatatableComponent.prototype, "buttonClick", void 0);
    __decorate([
        ViewChild(DataTable, { static: true })
    ], DatatableComponent.prototype, "pDatatableComponent", void 0);
    __decorate([
        ContentChildren(DatatableButtonComponent)
    ], DatatableComponent.prototype, "extraButtons", void 0);
    __decorate([
        ContentChildren(Column)
    ], DatatableComponent.prototype, "columns", void 0);
    __decorate([
        Output()
    ], DatatableComponent.prototype, "startedLoading", void 0);
    __decorate([
        Output()
    ], DatatableComponent.prototype, "finishedLoading", void 0);
    __decorate([
        Output()
    ], DatatableComponent.prototype, "onRowSelected", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "showVisibleColumnsControl", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "editMode", void 0);
    __decorate([
        Input()
    ], DatatableComponent.prototype, "dataKey", void 0);
    __decorate([
        Output()
    ], DatatableComponent.prototype, "onRowEditEvent", void 0);
    DatatableComponent = __decorate([
        Component({
            selector: 'basis-datatable',
            template: "<p-blockUI [blocked]=\"blockContent\">\n    <div class=\"center-spinner\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n<div [ngClass]=\"{'ui-g-2':verticalButtons, 'ui-g-5':!verticalButtons}\">&nbsp;</div>\n<div [ngClass]=\"verticalButtons ? 'ui-g-11' : 'ui-g-12'\">\n    <basis-show-column *ngIf=\"showVisibleColumnsControl\" [columns]=\"columns\" (updateVisibleColumns)=\"updateVisibleColumns($event)\"></basis-show-column>\n</div>\n<div [ngClass]=\"{\n        'ui-g-11' : verticalButtons,\n        'ui-g-12' : !verticalButtons,\n        'edicao-tabela' : editMode == 'row',\n        'editing-row': editingRow\n    }\">\n    <p-table\n        [value]=\"value\"\n        [rows]=\"rows\"\n        [paginator]=\"true\"\n        [selectionMode]=\"selectionMode\"\n        [responsive]=\"true\"\n        [scrollable]=\"enableScroll\"\n        [scrollHeight]=\"scrollHeight\"\n        [(selection)]=\"selectedRow\"\n        [editMode]=\"editMode\"\n        (onRowSelect)=\"onSelectChange($event)\"\n        (onRowUnselect)=\"onSelectChange($event)\"\n        #datatable\n        [dataKey]=\"dataKey\">\n        <ng-template pTemplate=\"header\" let-columns>\n            <div class=\"ui-g\" *ngIf=\"!verticalButtons\">\n                <div *ngIf=\"showHorizontalButtonsHeader\" class=\"ui-g-4 ui-sm-12\">\n                    <span class=\"horizontal-buttons-header\">{{ horizontalButtonsHeader }}</span>\n                </div>\n                <div [ngClass]=\"{\n                    'horizontal-buttons': true,\n                    'ui-sm-12': true,\n                    'ui-g-8': showHorizontalButtonsHeader,\n                    'ui-g-12': !showHorizontalButtonsHeader}\">\n                    <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n                    <ng-content select=\"horizontalButtons\"></ng-content>\n                </div>\n            </div>\n            <tr>\n                <th *ngFor=\"let col of columns\"\n                    [pSortableColumn]=\"col.sortable ? col.field : null\"\n                    [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    {{col.header}}\n                    <p-sortIcon *ngIf=\"col.sortable\" [field]=\"col.field\"></p-sortIcon>\n                </th>\n            </tr>\n            <tr *ngIf=\"filterOnColumn\">\n                <th *ngFor=\"let col of columns\" [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    <basis-filter-column\n                        [listaOriginal]=\"filterSelectOptions\"\n                        [lista]=\"filterSelectOptions\"\n                        [field]=\"col.field\"\n                        [updateFiltro]=\"updateFilterColumn\"\n                        (outputEvent)=\"filterColumn(col.field, $event)\"\n                        [filterType]=\"col.filterType\"\n                        [tableType]=\"type\"\n                        [customFilterOptions]=\"customFilterOptions\">\n                    </basis-filter-column>\n                </th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-editing=\"editing\" let-ri=\"rowIndex\">\n            <tr [pSelectableRow]=\"rowData\"\n                [pContextMenuRow]=\"rowData\"\n                [pEditableRow]=\"rowData\"\n                [ngClass]=\"{'editing': editing}\"\n                (mouseover)=\"editarLinhaOver($event)\"\n                (mouseleave)=\"editarLinhaOut($event)\">\n                <td *ngFor=\"let col of columns; last as isLast\" [ngStyle]=\"{'display': visibleColumns[col.field]}\" >\n                    <ng-container *ngIf=\"!editMode\">\n                        <span *ngIf=\"!col.bodyTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                        <ng-container\n                            *ngIf=\"col.bodyTemplate\"\n                            [ngTemplateOutlet]=\"col.bodyTemplate\"\n                            [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"editMode\">\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <span *ngIf=\"!col.outputTemplate && col.editable == false\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <div class=\"ui-md-12\" *ngIf=\"!col.inputTemplate && col.editable != false\">\n                                    <div class=\"ui-g form-group\">\n                                        <div class=\"ui-md-12\">\n                                            <span class=\"md-inputfield\">\n                                                <input pInputText type=\"text\" [(ngModel)]=\"rowData[col.field]\" [style]=\"{'width':'100%'}\">\n                                                <label>{{ col.header }}</label>\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <ng-container\n                                    *ngIf=\"col.inputTemplate\"\n                                    [ngTemplateOutlet]=\"col.inputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ 'rowData': rowData, 'col': col }\">\n                                </ng-container>\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                <span *ngIf=\"!col.outputTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <ng-container\n                                    *ngIf=\"col.outputTemplate\"\n                                    [ngTemplateOutlet]=\"col.outputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                                </ng-container>\n                            </ng-template>\n                        </p-cellEditor>\n                    </ng-container>\n                    <div *ngIf=\"isLast\" class=\"editar-campos\">\n                        <button *ngIf=\"!editing\" pButton type=\"button\" pInitEditableRow (click)=\"onRowEditInitEvent($event, rowData)\">Editar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pSaveEditableRow class=\"ui-button-success\" style=\"margin-right: .5em\" (click)=\"onRowEditSaveEvent($event, rowData)\">Salvar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pCancelEditableRow class=\"ui-button-danger\" (click)=\"onRowEditCancelEvent($event, rowData, ri)\">Cancelar</button>\n                    </div>\n                </td>\n            </tr>\n        </ng-template>\n        <ng-template *ngIf=\"emptyMessage\">\n            {{ emptyMessage }}\n        </ng-template>\n        <p-footer *ngIf=\"showPaginationFooter && totalRecords() > 0\">\n            {{ paginationFooterText(footerMsg) }}\n        </p-footer>\n\n    </p-table>\n</div>\n<div *ngIf=\"verticalButtons\"\n    class=\"ui-g-1 ui-g-nopad\"\n    [style.position]=\"enableButtonsScroll ? 'sticky' : ''\"\n    [style.top]=\"enableButtonsScroll ? '15%' : ''\">\n        <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n        <ng-content></ng-content>\n</div>\n\n<ng-template #defaultButtons>\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Editar' : 'Escolha um registro para editar.' \"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-success\" icon=\"edit\" (click)=\"onClick('edit', $event)\"\n        *ngIf=\"!disableEdit && checkRolesToButton('rulesToShowView') && checkRolesToButton('rulesToHideView')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Visualizar' : 'Escolha um registro para visualizar.'\"\n        [class.horizontal-button]=\"!verticalButtons\" icon=\"remove-red-eye\" (click)=\"onClick('view', $event)\"\n        *ngIf=\"!disableView && checkRolesToButton('rulesToShowEdit') && checkRolesToButton('rulesToHideEdit')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Excluir' : 'Escolha um registro para excluir.'\"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-danger\" icon=\"delete\" (click)=\"onClick('delete', $event)\"\n       *ngIf=\"!disableDelete && checkRolesToButton('rulesToShowDelete') && checkRolesToButton('rulesToHideDelete')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <datatable-splitbutton\n        [icon]=\"splitButton.icon\"\n        [class]=\"splitButton.class\"\n        [items]=\"splitButton.itens\"\n        [label]=\"splitButton.label\"\n        [method]=\"splitButton.method\"\n        *ngIf=\"splitButton\">\n    </datatable-splitbutton>\n</ng-template>\n",
            encapsulation: ViewEncapsulation.None,
            styles: ["body .ui-datatable .ui-datatable-data tr td{word-wrap:break-word}.horizontal-buttons{display:flex;flex-flow:row wrap;justify-content:flex-end}.horizontal-button{padding:0 3px}.horizontal-buttons-header{font-size:1.3em;word-wrap:break-word}.center-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}.text-right{text-align:right}basis-show-column .ui-multiselect-panel.ui-widget{width:100%;max-width:100%}.edicao-tabela,.edita-linha{position:relative}tr.editing td{padding-bottom:75px!important}.editar-campos{opacity:0;position:absolute;width:100%;background-color:#0000006b;left:0;margin-top:0;display:flex;align-items:center;justify-content:center;min-height:35px;transition:.3s ease-in-out;z-index:1}.editar-campos button{color:#fff;font-size:14px;padding:6px 30px 10px;border-radius:5px;height:28px;width:120px!important}.bt-cancelar,.bt-salvar{margin:0 10px}"]
        })
    ], DatatableComponent);
    return DatatableComponent;
}());
export { DatatableComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9wcmltZW5nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvZGF0YXRhYmxlL2RhdGF0YWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sZUFBZSxFQUNmLFNBQVMsRUFDVCxpQkFBaUIsRUFDakIsYUFBYSxFQUNiLGdCQUFnQixFQUNoQixNQUFNLEVBQ04sWUFBWSxFQUNaLGlCQUFpQixFQUNqQixVQUFVLEdBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLEtBQUssSUFBSSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFOUM7OztHQUdHO0FBT0g7SUFrVUk7Ozs7OztPQU1HO0lBQ0gsNEJBQ1ksaUJBQW9DLEVBQ3BDLG1CQUF3QyxFQUN4QyxvQkFBbUM7UUFGbkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBZTtRQTlUL0M7OztXQUdHO1FBQ0gsaUJBQVksR0FBUSxFQUFFLENBQUM7UUFFdkI7OztXQUdHO1FBQ0gsY0FBUyxHQUFXLEVBQUUsQ0FBQztRQUV2Qjs7O1dBR0c7UUFDSCxn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QUFDO09BQ1csa0JBQWtCLENBNHRCOUI7SUFBRCx5QkFBQztDQUFBLEFBNXRCRCxJQTR0QkM7U0E1dEJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIFZpZXdDaGlsZCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgT25Jbml0LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgICBFbGVtZW50UmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhYmxlIGFzIERhdGFUYWJsZSB9IGZyb20gJ3ByaW1lbmcvdGFibGUnO1xuaW1wb3J0IHsgRGF0YVByb3ZpZGVyIH0gZnJvbSAnLi9kYXRhcHJvdmlkZXInO1xuaW1wb3J0IHsgRGF0YVByb3ZpZGVyRmFjdG9yeSwgRGF0YVByb3ZpZGVyVHlwZSB9IGZyb20gJy4vZGF0YXByb3ZpZGVyLWZhY3RvcnknO1xuaW1wb3J0IHsgRGF0YXRhYmxlQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRhdGFibGUtYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhdGFibGVDbGlja0V2ZW50IH0gZnJvbSAnLi9kYXRhdGFibGUtY2xpY2stZXZlbnQnO1xuaW1wb3J0IHsgRGF0YXRhYmxlUGFnaW5hdGlvblBhcmFtZXRlcnMgfSBmcm9tICcuL2RhdGF0YWJsZS1wYWdpbmF0aW9uLXBhcmFtZXRlcnMnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBBdXRob3JpemF0aW9uLCBVc2VyIH0gZnJvbSAnQG51dmVtL2FuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuL3AtY29sdW1uLmRpcmVjdGl2ZSc7XG5cbi8qKlxuICogQ2xhc3MgRGF0YXRhYmxlQ29tcG9uZW50XG4gKiBAY2xhc3NcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdiYXNpcy1kYXRhdGFibGUnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kYXRhdGFibGUuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2RhdGF0YWJsZS5jb21wb25lbnQuY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBEYXRhdGFibGVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkluaXQge1xuXG4gICAgLyoqXG4gICAgICogc2VsZWN0ZWRSb3cgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7YW55fVxuICAgICAqL1xuICAgIHNlbGVjdGVkUm93OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBkYXRhUHJvdmlkZXIgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7RGF0YVByb3ZpZGVyfVxuICAgICAqL1xuICAgIGRhdGFQcm92aWRlcjogRGF0YVByb3ZpZGVyO1xuXG4gICAgLyoqXG4gICAgICogZmlsdGVyUGFyYW1zIHByb3BlcnR5XG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBmaWx0ZXJQYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogZm9vdGVyTXNnIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBmb290ZXJNc2c6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogb3JkZXJJblNvcnQgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBvcmRlckluU29ydDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogc3BsaXRCdXR0b24gcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7YW55fVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHNwbGl0QnV0dG9uOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiB2YWx1ZSBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgQElucHV0KCkgdmFsdWU6IGFueVtdID0gW107XG5cbiAgICAvKipcbiAgICAgKiB0eXBlIHByb3BlcnR5XG4gICAgICogQHR5cGUgRGF0YVByb3ZpZGVyVHlwZVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHR5cGU6IERhdGFQcm92aWRlclR5cGUgPSBEYXRhUHJvdmlkZXJUeXBlLlNlcnZlcjtcblxuICAgIC8qKlxuICAgICAqIHJvd3MgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHJvd3M6IG51bWJlciA9IDU7XG5cbiAgICAvKipcbiAgICAgKiByb3dzUGVyUGFnZU9wdGlvbnMgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7bnVtYmVyW119XG4gICAgICovXG4gICAgQElucHV0KCkgcm93c1BlclBhZ2VPcHRpb25zOiBudW1iZXJbXTtcblxuICAgIC8qKlxuICAgICAqIHVybCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KCkgdXJsOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBleHRyYVBhcmFtcyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgQElucHV0KCkgZXh0cmFQYXJhbXM6IGFueTtcblxuICAgIC8qKlxuICAgICAqIHBhZ2luYXRpb25QYXJhbWV0ZXJzIHByb3BlcnR5XG4gICAgICogQHR5cGUge0RhdGF0YWJsZVBhZ2luYXRpb25QYXJhbWV0ZXJzfVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHBhZ2luYXRpb25QYXJhbWV0ZXJzOiBEYXRhdGFibGVQYWdpbmF0aW9uUGFyYW1ldGVycztcblxuICAgIC8qKlxuICAgICAqIHNob3dQYWdpbmF0aW9uRm9vdGVyIHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgQElucHV0KCkgc2hvd1BhZ2luYXRpb25Gb290ZXIgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGRpc2FibGVFZGl0IHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgQElucHV0KCkgZGlzYWJsZUVkaXQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGRpc2FibGVWaWV3IHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgQElucHV0KCkgZGlzYWJsZVZpZXcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGRpc2FibGVEZWxldGUgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBASW5wdXQoKSBkaXNhYmxlRGVsZXRlID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBzZWxlY3Rpb25Nb2RlIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBASW5wdXQoKSBzZWxlY3Rpb25Nb2RlID0gJ3NpbmdsZSc7XG5cbiAgICAvKipcbiAgICAgKiBlbmFibGVCdXR0b25zU2Nyb2xsIHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgQElucHV0KCkgZW5hYmxlQnV0dG9uc1Njcm9sbCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogZW1wdHlNZXNzYWdlIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBASW5wdXQoKSBlbXB0eU1lc3NhZ2UgPSAnTmVuaHVtIHJlZ2lzdHJvIGVuY29udHJhZG8uJztcblxuICAgIC8qKlxuICAgICAqIHZlcnRpY2FsQnV0dG9ucyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHZlcnRpY2FsQnV0dG9ucyA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBlbmFibGVTY3JvbGwgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBASW5wdXQoKSBlbmFibGVTY3JvbGwgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIHNjcm9sbEhlaWdodCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KCkgc2Nyb2xsSGVpZ2h0OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBzY3JvbGxXaWR0aCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KCkgc2Nyb2xsV2lkdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIHJ1bGVzVG9IaWRlIHByb3BlcnR5XG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBASW5wdXQoKSBydWxlc1RvSGlkZTogYW55O1xuXG4gICAgLyoqXG4gICAgICogcnVsZXNUb1Nob3dFZGl0IHByb3BlcnR5XG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBASW5wdXQoKSBydWxlc1RvU2hvd0VkaXQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIHJ1bGVzVG9TaG93RGVsZXRlIHByb3BlcnR5XG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBASW5wdXQoKSBydWxlc1RvU2hvd0RlbGV0ZTogYW55O1xuXG4gICAgLyoqXG4gICAgICogcnVsZXNUb0hpZGVWaWV3IHByb3BlcnR5XG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBASW5wdXQoKSBydWxlc1RvSGlkZVZpZXc6IGFueTtcblxuICAgIC8qKlxuICAgICAqIHJ1bGVzVG9IaWRlRWRpdCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgQElucHV0KCkgcnVsZXNUb0hpZGVFZGl0OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBydWxlc1RvSGlkZURlbGV0ZSBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgQElucHV0KCkgcnVsZXNUb0hpZGVEZWxldGU6IGFueTtcblxuICAgIC8qKlxuICAgICAqIGhvcml6b250YWxCdXR0b25zSGVhZGVyIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBob3Jpem9udGFsQnV0dG9uc0hlYWRlcjogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogZGlzYWJsZUxvYWRpbmdCbG9ja1VJIHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgQElucHV0KCkgZGlzYWJsZUxvYWRpbmdCbG9ja1VJID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiByb3dTdHlsZUNsYXNzIHByb3BlcnR5XG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBASW5wdXQoKSByb3dTdHlsZUNsYXNzOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBmaWx0ZXJPbkNvbHVtbiBwcm9wZXJ0eVxuICAgICAqL1xuICAgIEBJbnB1dCgpIGZpbHRlck9uQ29sdW1uID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBmaWx0ZXJTZWxlY3RPcHRpb25zIHByb3BlcnR5XG4gICAgICovXG4gICAgZmlsdGVyU2VsZWN0T3B0aW9uczogYW55W10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZUZpbHRyb0hpc3RvcmljbyBwcm9wZXJ0eVxuICAgICAqL1xuICAgIHVwZGF0ZUZpbHRlckNvbHVtbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogY3VzdG9tRmlsdGVyT3B0aW9ucyBwcm9wZXJ0eVxuICAgICAqL1xuICAgIEBJbnB1dCgpIGN1c3RvbUZpbHRlck9wdGlvbnM6IE9iamVjdCA9IHt9XG5cbiAgICAvKipcbiAgICAgKiBidXR0b25DbGljayBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtFdmVudEVtaXR0ZXI8YW55Pn1cbiAgICAgKi9cbiAgICBAT3V0cHV0KCkgYnV0dG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKipcbiAgICAgKiBwRGF0YXRhYmxlQ29tcG9uZW50IHByb3BlcnR5XG4gICAgICogQHR5cGUge1RhYmxlfVxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoRGF0YVRhYmxlLCB7IHN0YXRpYzogdHJ1ZSB9KSBwRGF0YXRhYmxlQ29tcG9uZW50OiBEYXRhVGFibGU7XG5cbiAgICAvKipcbiAgICAgKiBleHRyYUJ1dHRvbnMgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7UXVlcnlMaXN0PERhdGF0YWJsZUJ1dHRvbkNvbXBvbmVudD59XG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZHJlbihEYXRhdGFibGVCdXR0b25Db21wb25lbnQpIGV4dHJhQnV0dG9uczogUXVlcnlMaXN0PERhdGF0YWJsZUJ1dHRvbkNvbXBvbmVudD47XG5cbiAgICAvKipcbiAgICAgKiBjb2x1bW5zIHByb3BlcnR5XG4gICAgICogQHR5cGUge2FueVtdfVxuICAgICAqL1xuICAgIEBDb250ZW50Q2hpbGRyZW4oQ29sdW1uKSBjb2x1bW5zOiBDb2x1bW5bXTtcblxuICAgIC8qKlxuICAgICAqIHN0YXJ0ZWRMb2FkaW5nIHByb3BlcnR5XG4gICAgICogQHR5cGUge0V2ZW50RW1pdHRlcjx2b2lkPn1cbiAgICAgKi9cbiAgICBAT3V0cHV0KCkgc3RhcnRlZExvYWRpbmc6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIC8qKlxuICAgICAqIGZpbmlzaGVkTG9hZGluZyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtFdmVudEVtaXR0ZXI8SHR0cEVycm9yUmVzcG9uc2U+fVxuICAgICAqL1xuICAgIEBPdXRwdXQoKSBmaW5pc2hlZExvYWRpbmc6IEV2ZW50RW1pdHRlcjxIdHRwRXJyb3JSZXNwb25zZT4gPSBuZXcgRXZlbnRFbWl0dGVyPEh0dHBFcnJvclJlc3BvbnNlPigpO1xuXG4gICAgLyoqXG4gICAgICogb25Sb3dTZWxlY3RlZCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtFdmVudEVtaXR0ZXI8YW55Pn1cbiAgICAgKi9cbiAgICBAT3V0cHV0KCkgb25Sb3dTZWxlY3RlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKlxuICAgICAqIHNob3dIb3Jpem9udGFsQnV0dG9uc0hlYWRlciBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHNob3dIb3Jpem9udGFsQnV0dG9uc0hlYWRlciA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogYmxvY2tDb250ZW50XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgYmxvY2tDb250ZW50ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiB2aXNpYmxlQ29sdW1ucyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdmlzaWJsZUNvbHVtbnM6IE9iamVjdCA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogc2hvd1Zpc2libGVDb2x1bW5zQ29udHJvbCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHNob3dWaXNpYmxlQ29sdW1uc0NvbnRyb2w6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGVkaXRNb2RlIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBASW5wdXQoKSBlZGl0TW9kZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogZGF0YUtleSBwcm9wZXJ0eVxuICAgICAqIElkZW50aWZpY2Fkb3Igw7puaWNvIHBhcmEgY2FkYSByZWdpc3RybyBkYSB0YWJlbGFcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEBJbnB1dCgpIGRhdGFLZXk6IHN0cmluZyA9ICdpZCc7XG5cbiAgICAvKipcbiAgICAgKiBvblJvd0VkaXRFdmVudCBwcm9wZXJ0eVxuICAgICAqIEV2ZW50byBkaXNwYXJhZG8gcXVhbmRvIG8gdXN1w6FyaW8gcmVhbGl6YSBhw6fDtWVzIGRlIGVkacOnw6NvIGVtIHVtYSBsaW5oYSBkYSB0YWJlbGFcbiAgICAgKiBAdHlwZSB7RXZlbnRFbWl0dGVyPHZvaWQ+fVxuICAgICAqL1xuICAgIEBPdXRwdXQoKSBvblJvd0VkaXRFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGNsb25lZFJvd0RhdGE6IHsgW3M6IHN0cmluZ106IGFueTsgfSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogZXJyb3JNZXNzYWdlIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIGVycm9yTWVzc2FnZSA9ICdPY29ycmV1IHVtIGVycm8gYW8gY2FycmVnYXIgb3MgZGFkb3MgZGEgdGFiZWxhLiBUZW50ZSBub3ZhbWVudGUuJztcblxuICAgIC8qKlxuICAgICAqIG9yaWdpbmFsRW1wdHlNZXNzYWdlIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIG9yaWdpbmFsRW1wdHlNZXNzYWdlOiBzdHJpbmc7XG5cbiAgICBlZGl0aW5nUm93ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0NoYW5nZURldGVjdG9yUmVmfSBjaGFuZ2VEZXRlY3RvclJlZlxuICAgICAqIEBwYXJhbSB7RGF0YVByb3ZpZGVyRmFjdG9yeX0gZGF0YVByb3ZpZGVyRmFjdG9yeVxuICAgICAqIEBwYXJhbSB7QXV0aG9yaXphdGlvbn0gYXV0aG9yaXphdGlvblNlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIHByaXZhdGUgZGF0YVByb3ZpZGVyRmFjdG9yeTogRGF0YVByb3ZpZGVyRmFjdG9yeSxcbiAgICAgICAgcHJpdmF0ZSBhdXRob3JpemF0aW9uU2VydmljZTogQXV0aG9yaXphdGlvblxuICAgICkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBuZ09uSW5pdCBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZGF0YVByb3ZpZGVyID0gdGhpcy5kYXRhUHJvdmlkZXJGYWN0b3J5LmNyZWF0ZSh0aGlzLnR5cGUsIHRoaXMpO1xuICAgICAgICB0aGlzLnBEYXRhdGFibGVDb21wb25lbnQucm93cyA9IHRoaXMucm93cztcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb0xvYWRpbmdFdmVudHMoKTtcbiAgICAgICAgdGhpcy5pbml0Um93c1BlclBhZ2VPcHRpb25zSWZQcmVzZW50KCk7XG4gICAgICAgIHRoaXMuZGVmaW5lSWZTaG91bGRTaG93SG9yaXpvbnRhbEJ1dHRvbnNIZWFkZXIoKTtcbiAgICAgICAgdGhpcy51cGRhdGVPblZhbHVlQ2hhbmdlKCk7XG5cbiAgICAgICAgdGhpcy5maW5pc2hlZExvYWRpbmcuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlT25WYWx1ZUNoYW5nZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzdWJzY3JpYmVGcm9tVmFsdWVDaGFuZ2UgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlT25WYWx1ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJTZWxlY3RPcHRpb25zID0gW107XG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJTZWxlY3RPcHRpb25zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHN1YnNjcmliZVRvTG9hZGluZ0V2ZW50cyBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb0xvYWRpbmdFdmVudHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlTG9hZGluZ0Jsb2NrVUkpIHtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxFbXB0eU1lc3NhZ2UgPSB0aGlzLmVtcHR5TWVzc2FnZTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZExvYWRpbmcuc3Vic2NyaWJlKCgpID0+IHRoaXMub25TdGFydGVkTG9hZGluZygpKTtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWRMb2FkaW5nLnN1YnNjcmliZShlcnJvciA9PiB0aGlzLm9uRmluaXNoZWRMb2FkaW5nKGVycm9yKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvblN0YXJ0ZWRMb2FkaW5nIG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBwcml2YXRlIG9uU3RhcnRlZExvYWRpbmcoKSB7XG4gICAgICAgIHRoaXMuYmxvY2tDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbXB0eU1lc3NhZ2UgPSB0aGlzLm9yaWdpbmFsRW1wdHlNZXNzYWdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBvbkZpbmlzaGVkTG9hZGluZyBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBwcml2YXRlIG9uRmluaXNoZWRMb2FkaW5nKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICB0aGlzLmJsb2NrQ29udGVudCA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZW1wdHlNZXNzYWdlID0gdGhpcy5lcnJvck1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbml0Um93c1BlclBhZ2VPcHRpb25zSWZQcmVzZW50IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRSb3dzUGVyUGFnZU9wdGlvbnNJZlByZXNlbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvd3NQZXJQYWdlT3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5wRGF0YXRhYmxlQ29tcG9uZW50LnJvd3NQZXJQYWdlT3B0aW9ucyA9IHRoaXMucm93c1BlclBhZ2VPcHRpb25zO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZGVmaW5lSWZTaG91bGRTaG93SG9yaXpvbnRhbEJ1dHRvbnNIZWFkZXIgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIHByaXZhdGUgZGVmaW5lSWZTaG91bGRTaG93SG9yaXpvbnRhbEJ1dHRvbnNIZWFkZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmhvcml6b250YWxCdXR0b25zSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dIb3Jpem9udGFsQnV0dG9uc0hlYWRlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuZ0FmdGVyVmlld0luaXQgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5zZXRFeHRyYVBhcmFtcygpO1xuICAgICAgICB0aGlzLnBEYXRhdGFibGVDb21wb25lbnQuY29sdW1ucyA9IHRoaXMuY29sdW1ucztcbiAgICAgICAgdGhpcy5wRGF0YXRhYmxlQ29tcG9uZW50Lm5nQWZ0ZXJDb250ZW50SW5pdCgpO1xuICAgICAgICB0aGlzLnNldEFsbENvbHVtbnNWaXNpYmxlKCk7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldEV4dHJhUGFyYW1zIG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEV4dHJhUGFyYW1zKCkge1xuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZXh0cmFQYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMucERhdGF0YWJsZUNvbXBvbmVudFtpXSA9IHRoaXMuZXh0cmFQYXJhbXNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogbmdBZnRlckNvbnRlbnRJbml0IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIHRoaXMuZXh0cmFCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLmNsaWNrLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrKGJ1dHRvbi5uYW1lLCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb25DbGljayBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnV0dG9uXG4gICAgICogQHBhcmFtIHthbnl9IGV2ZW50XG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgb25DbGljayhidXR0b246IHN0cmluZywgZXZlbnQ6IGFueSkge1xuICAgICAgICB0aGlzLmJ1dHRvbkNsaWNrLmVtaXQobmV3IERhdGF0YWJsZUNsaWNrRXZlbnQoYnV0dG9uLCB0aGlzLnNlbGVjdGVkUm93KSk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnJlc2V0U2VsZWN0ZWRSb3coYnV0dG9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvblNlbGVjdENoYW5nZSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge2FueX0gZXZlbnRcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgb25TZWxlY3RDaGFuZ2UoZXZlbnQ6IGFueSkge1xuICAgICAgICB0aGlzLm9uUm93U2VsZWN0ZWQuZW1pdCh0aGlzLnNlbGVjdGVkUm93KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5zZWxlY3RlZFJvdykgJiYgdGhpcy5zZWxlY3RlZFJvdy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU11bHRpcGxlQnV0dG9uc1N0YXR1cyh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTXVsdGlwbGVCdXR0b25zU3RhdHVzKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZU11bHRpcGxlQnV0dG9uc1N0YXR1cyBtZXRob2RcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc011bHRpcGxlU2VsZWN0aW9uXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgcHJpdmF0ZSB1cGRhdGVNdWx0aXBsZUJ1dHRvbnNTdGF0dXMoaGFzTXVsdGlwbGVTZWxlY3Rpb246IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5leHRyYUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGFzTXVsdGlwbGVTZWxlY3Rpb24gJiYgIWJ1dHRvbi5hbGxvd011bHRpcGxlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlZnJlc2ggbWV0aG9kXG4gICAgICogQHBhcmFtIHF1ZXJ5XG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIHJlZnJlc2gocXVlcnk/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5kYXRhUHJvdmlkZXIubG9hZChxdWVyeSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVzZXRTZWxlY3RlZFJvdyBtZXRob2RcbiAgICAgKiBAcGFyYW0gYnV0dG9uXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIHJlc2V0U2VsZWN0ZWRSb3coYnV0dG9uOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGJ1dHRvbiA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3cgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVzZXQgbWV0aG9kXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnBEYXRhdGFibGVDb21wb25lbnQuZmlyc3QgPSAwO1xuICAgICAgICB0aGlzLmRhdGFQcm92aWRlci5yZXNldCgpO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwYWdpbmF0aW9uRm9vdGVyVGV4dCBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gICAgICogQHJldHVybnMgc3RyaW5nXG4gICAgICovXG4gICAgcGFnaW5hdGlvbkZvb3RlclRleHQobXNnOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCByZWdpc3Ryb3MgPSB0aGlzLnRvdGFsUmVjb3JkcygpID09PSAxID8gJ3JlZ2lzdHJvJyA6ICdyZWdpc3Ryb3MnO1xuICAgICAgICBpZiAobXNnID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIGBFeGliaW5kbzogJHt0aGlzLmN1cnJlbnRGaXJzdEluZGV4KCl9IGEgJHt0aGlzLmN1cnJlbnRMYXN0SW5kZXgoKX0gZGUgJHt0aGlzLnRvdGFsUmVjb3JkcygpfSAke3JlZ2lzdHJvc31gO1xuICAgICAgICB9XG4gICAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKCd7dG90YWxSZWNvcmRzfScsIHRoaXMudG90YWxSZWNvcmRzKCkudG9TdHJpbmcoKSk7XG4gICAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKCd7Y3VycmVudEZpcnN0SW5kZXh9JywgdGhpcy5jdXJyZW50Rmlyc3RJbmRleCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBtc2cgPSBtc2cucmVwbGFjZSgne2N1cnJlbnRMYXN0SW5kZXh9JywgdGhpcy5jdXJyZW50TGFzdEluZGV4KCkudG9TdHJpbmcoKSk7XG4gICAgICAgIHJldHVybiBtc2c7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3VycmVudEZpcnN0SW5kZXggbWV0aG9kXG4gICAgICogQHJldHVybnMgbnVtYmVyXG4gICAgICovXG4gICAgY3VycmVudEZpcnN0SW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucERhdGF0YWJsZUNvbXBvbmVudC5maXJzdCArIDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3VycmVudExhc3RJbmRleCBtZXRob2RcbiAgICAgKiBAcmV0dXJucyBudW1iZXJcbiAgICAgKi9cbiAgICBjdXJyZW50TGFzdEluZGV4KCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMYXN0SW5kZXg6IG51bWJlciA9IHRoaXMucERhdGF0YWJsZUNvbXBvbmVudC5maXJzdCArIHRoaXMucERhdGF0YWJsZUNvbXBvbmVudC5yb3dzO1xuICAgICAgICBpZiAoY3VycmVudExhc3RJbmRleCA+IHRoaXMudG90YWxSZWNvcmRzKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsUmVjb3JkcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50TGFzdEluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRvdGFsUmVjb3JkcyBtZXRob2RcbiAgICAgKiBAcmV0dXJucyBudW1iZXJcbiAgICAgKi9cbiAgICB0b3RhbFJlY29yZHMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucERhdGF0YWJsZUNvbXBvbmVudC50b3RhbFJlY29yZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2tSb2xlc1RvQnV0dG9uIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25cbiAgICAgKiBAcmV0dXJuIGJvb2xlYW5cbiAgICAgKi9cbiAgICBjaGVja1JvbGVzVG9CdXR0b24oYnV0dG9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXNbYnV0dG9uXSkge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbiA9PT0gJ3J1bGVzVG9IaWRlJyB8fCBidXR0b24gPT09ICdydWxlc1RvU2hvd0VkaXQnIHx8IGJ1dHRvbiA9PT0gJ3J1bGVzVG9TaG93RGVsZXRlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tVc2VCdXR0b25zKGJ1dHRvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXV0aG9yaXphdGlvblNlcnZpY2UuaGFzUm9sZSh0aGlzW2J1dHRvbl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmF1dGhvcml6YXRpb25TZXJ2aWNlLmhhc1JvbGUodGhpc1tidXR0b25dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVja1VzZUJ1dHRvbnMgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvblxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBjaGVja1VzZUJ1dHRvbnMoYnV0dG9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXNbYnV0dG9uXSAmJiB0aGlzW2J1dHRvbi5yZXBsYWNlKCdTaG93JywgJ0hpZGUnKV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTsOjbyDDqSBwb3Nzw612ZWwgZGVmaW5pciBkb2lzIHZhbG9yZXMgZGUgcm9sZXMgcGFyYSBvcyBib3TDtWVzIHBhZHLDtWVzLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZmlsdGVyIG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBmaWx0ZXIoKSB7XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gdGhpcy5maWx0ZXJQYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlclBhcmFtc1twcm9wXSA9PT0gJycgfHwgKHRoaXMuZmlsdGVyUGFyYW1zW3Byb3BdLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJQYXJhbXNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuZmlsdGVyUGFyYW1zKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCh0aGlzLmZpbHRlclBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHBhcmEgZmlsdHJhciBwb3IgY29sdW5hc1xuICAgICAqIEBwYXJhbSBjb2x1bW4gY2hhdmUgZGEgY29sdW5hIG5hIHRhYmVsYVxuICAgICAqIEBwYXJhbSBmaWx0ZXJzIHZhbG9yIGRvIGZpbHRyb1xuICAgICAqL1xuICAgIGZpbHRlckNvbHVtbihjb2x1bW46IHN0cmluZywgZmlsdGVyczogYW55KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICBpZiAoZmlsdGVycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB2YWx1ZXNbY29sdW1uXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBpbiBmaWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IChmaWx0ZXJzW2l0ZW1dIGluc3RhbmNlb2YgT2JqZWN0KT8gZmlsdGVyc1tpdGVtXS52YWx1ZSA6IGZpbHRlcnNbaXRlbV07XG4gICAgICAgICAgICAgICAgdmFsdWVzW2NvbHVtbl0ucHVzaCh2YWwpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZXNbY29sdW1uXSA9IGZpbHRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maWx0ZXJQYXJhbXMgPSB7IC4uLnRoaXMuZmlsdGVyUGFyYW1zLCAuLi52YWx1ZXMgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaWNpYSB0b2RhcyBhcyBjb2x1bmFzIGRhIHRhYmVsYSBjb21vIHZpc8OtdmVpc1xuICAgICAqL1xuICAgIHNldEFsbENvbHVtbnNWaXNpYmxlKCkge1xuICAgICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpc2libGVDb2x1bW5zW2NvbC5maWVsZF0gPSAndGFibGUtY2VsbCc7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZlcmlmaWNhIHNlIHVtYSBjb2x1bmEgZGV2ZSBlc3RhciB2aXPDrXZlbFxuICAgICAqIEBwYXJhbSBjb2x1bW4gc3RyaW5nXG4gICAgICogQHBhcmFtIHZpc2libGVDb2x1bW5zIEFycmF5XG4gICAgICovXG4gICAgdmlzaWJsZUNvbHVtbkNoZWNrKGNvbHVtbjogc3RyaW5nLCB2aXNpYmxlQ29sdW1uczogW10pIHtcbiAgICAgICAgcmV0dXJuIHZpc2libGVDb2x1bW5zLnNvbWUoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtLmZpZWxkKSA/IGl0ZW0uZmllbGQgPT0gY29sdW1uIDogdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXR1YWx6aWEgb3MgdmFsb3JlcyBkYSB2YXJpw6F2ZWwgJ3Zpc2libGVDb2x1bnMnIHBhcmEgbW9zdHJhciBvdSBuw6NvIGFzIGNvbHVuYXNcbiAgICAgKiBAcGFyYW0gY29sdW1ucyBhcnJheVxuICAgICAqL1xuICAgIHVwZGF0ZVZpc2libGVDb2x1bW5zKGNvbHVtbnM6IFtdKSB7XG4gICAgICAgIGZvciAobGV0IGNvbCBpbiB0aGlzLnZpc2libGVDb2x1bW5zKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52aXNpYmxlQ29sdW1uQ2hlY2soY29sLCBjb2x1bW5zKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZUNvbHVtbnNbY29sXSA9ICd0YWJsZS1jZWxsJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlQ29sdW1uc1tjb2xdID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Sb3dFZGl0SW5pdEV2ZW50KGV2ZW50LCByb3dEYXRhOiBhbnkpIHtcblxuICAgICAgICBjb25zdCB0ciA9IGV2ZW50LnNyY0VsZW1lbnQuY2xvc2VzdCgndHInKTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWRpdGluZ1JvdyA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHRyLm9mZnNldFRvcDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRyLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRCdXR0b25zID0gdHIucXVlcnlTZWxlY3RvcignLmVkaXRhci1jYW1wb3MnKTtcblxuICAgICAgICAgICAgZWRpdEJ1dHRvbnMuc3R5bGUudG9wID0gKHRvcCArIGhlaWdodCAtIDc1KSArICdweCc7XG4gICAgICAgICAgICBlZGl0QnV0dG9ucy5zdHlsZS5oZWlnaHQgPSc3NXB4JztcbiAgICAgICAgICAgIGVkaXRCdXR0b25zLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjZDBkMGQwJztcbiAgICAgICAgICAgIGVkaXRCdXR0b25zLnN0eWxlLm9wYWNpdHkgPSAxO1xuXG4gICAgICAgICAgICB0aGlzLmNsb25lZFJvd0RhdGFbcm93RGF0YS5pZF0gPSB7Li4ucm93RGF0YX07XG4gICAgICAgICAgICB0aGlzLm9uUm93RWRpdEV2ZW50LmVtaXQoe2V2ZW50OiBcImluaXRcIiwgZGF0YTogcm93RGF0YX0pO1xuICAgICAgICB9LCBudWxsICwgdHIpO1xuXG4gICAgfVxuXG4gICAgb25Sb3dFZGl0U2F2ZUV2ZW50KGV2ZW50LCByb3dEYXRhOiBhbnkpIHtcbiAgICAgICAgdGhpcy5vblJvd0VkaXRFdmVudC5lbWl0KHtldmVudDogXCJzYXZlXCIsIGRhdGE6IHJvd0RhdGF9KTtcbiAgICAgICAgdGhpcy5yZXNldEVkaXRpbmdNb2RlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBvblJvd0VkaXRDYW5jZWxFdmVudChldmVudCwgcm93RGF0YTogYW55LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMudmFsdWVbaW5kZXhdID0gdGhpcy5jbG9uZWRSb3dEYXRhW3Jvd0RhdGEuaWRdO1xuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNsb25lZFJvd0RhdGFbcm93RGF0YVt0aGlzLmRhdGFLZXldXTtcbiAgICAgICAgdGhpcy5vblJvd0VkaXRFdmVudC5lbWl0KHtldmVudDogXCJjYW5jZWxcIiwgZGF0YTogcm93RGF0YX0pO1xuXG4gICAgICAgIHRoaXMucmVzZXRFZGl0aW5nTW9kZShldmVudCk7XG4gICAgfVxuXG4gICAgcmVzZXRFZGl0aW5nTW9kZShldmVudCkge1xuICAgICAgICBjb25zdCBlZGl0QnV0dG9ucyA9IGV2ZW50LnNyY0VsZW1lbnQuY2xvc2VzdCgndHInKS5xdWVyeVNlbGVjdG9yKCcuZWRpdGFyLWNhbXBvcycpO1xuXG4gICAgICAgIGVkaXRCdXR0b25zLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBlZGl0QnV0dG9ucy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMDAwMDZiJztcbiAgICAgICAgZWRpdEJ1dHRvbnMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICB0aGlzLmVkaXRpbmdSb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBlZGl0YXJMaW5oYU92ZXIoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRpbmdSb3cgJiYgdGhpcy5lZGl0TW9kZSA9PSAncm93Jykge1xuICAgICAgICAgICAgY29uc3QgdG9wID0gZXZlbnQuc3JjRWxlbWVudC5jbG9zZXN0KCd0cicpLm9mZnNldFRvcDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGV2ZW50LnNyY0VsZW1lbnQuY2xvc2VzdCgndHInKS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBlZGl0QnV0dG9ucyA9IGV2ZW50LnNyY0VsZW1lbnQuY2xvc2VzdCgndHInKS5xdWVyeVNlbGVjdG9yKCcuZWRpdGFyLWNhbXBvcycpO1xuXG4gICAgICAgICAgICBlZGl0QnV0dG9ucy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgZWRpdEJ1dHRvbnMuc3R5bGUudG9wID0gdG9wICsgJ3B4JztcbiAgICAgICAgICAgIGVkaXRCdXR0b25zLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICAgICAgICBlZGl0QnV0dG9ucy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMDAwMDZiJztcbiAgICAgICAgICAgIGVkaXRCdXR0b25zLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWRpdGFyTGluaGFPdXQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRpbmdSb3cpIHtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRCdXR0b25zID0gZXZlbnQuc3JjRWxlbWVudC5jbG9zZXN0KCd0cicpLnF1ZXJ5U2VsZWN0b3IoJy5lZGl0YXItY2FtcG9zJyk7XG4gICAgICAgICAgICBlZGl0QnV0dG9ucy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgZWRpdEJ1dHRvbnMuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==