/**
 * Class ServerDataProvider
 * @class
 */
var ServerDataProvider = /** @class */ (function () {
    /**
     * constructor method
     * @constructor
     * @param {DatatableService} datatableService
     * @param {DatatableComponent} component
     */
    function ServerDataProvider(datatableService, component) {
        var _this = this;
        this.datatableService = datatableService;
        this.component = component;
        this.component.pDatatableComponent.onLazyLoad.subscribe(function (event) { return _this.onLazyLoad(event); });
        this.component.pDatatableComponent.lazy = true;
    }
    /**
     * onLazyLoad method
     * @param {LazyLoadEvent} onLazyLoad
     * @returns void
     */
    ServerDataProvider.prototype.onLazyLoad = function (event) {
        this.currentLazyLoadEvent = event;
        this.load();
    };
    /**
     * load method
     * @param {any} query
     * @returns void
     */
    ServerDataProvider.prototype.load = function (query) {
        var _this = this;
        query = this.retrieveAndSaveQuery(query);
        this.component.startedLoading.emit();
        this.datatableService.search(this.currentLazyLoadEvent, this.component.url, this.component.pDatatableComponent.rows, this.component.orderInSort, query)
            .toPromise()
            .then(function (response) {
            _this.treatLoadResponse(response);
            _this.component.finishedLoading.emit();
        }, function (error) {
            _this.component.finishedLoading.emit(error);
        });
    };
    /**
     * treatLoadResponse method
     * @param {any} response
     * @return void
     */
    ServerDataProvider.prototype.treatLoadResponse = function (response) {
        var data = response.body;
        if (this.component.paginationParameters) {
            this.treatLoadResponseWithPaginationParameters(data);
        }
        else {
            this.treatLoadResponseWithoutPaginationParameters(response, data);
        }
    };
    /**
     * treatLoadResponseWithPaginationParameters method
     * @param {any} data
     * @returns void
     */
    ServerDataProvider.prototype.treatLoadResponseWithPaginationParameters = function (data) {
        var contentIndex = this.component.paginationParameters.contentIndex;
        var totalIndex = this.component.paginationParameters.totalElementsIndex;
        this.component.value = (data[contentIndex]) ? data[contentIndex] : data;
        this.component.pDatatableComponent.totalRecords = (data[totalIndex]) ? data[totalIndex] : this.component.value.length;
    };
    /**
     * treatLoadResponseWithoutPaginationParameters method
     * @param {any} response
     * @param {any} data
     * @returns void
     */
    ServerDataProvider.prototype.treatLoadResponseWithoutPaginationParameters = function (response, data) {
        if (response.headers.has('x-total-count')) {
            this.component.pDatatableComponent.totalRecords = parseInt(response.headers.get('x-total-count'), 10);
            this.component.value = data;
        }
        else {
            this.component.pDatatableComponent.totalRecords = data.totalElements;
            this.component.value = data.content;
        }
    };
    /**
     * retrieveAndSaveQuery method
     * @param {any} query
     * @returns any
     */
    ServerDataProvider.prototype.retrieveAndSaveQuery = function (query) {
        var oldQuery = this._query;
        var currentQuery = this.doRetrieveAndSaveQuery(query);
        this.resetToFirstPageIfQueryChanged(oldQuery, currentQuery);
        return currentQuery;
    };
    /**
     * doRetrieveAndSaveQuery method
     * @param {any} query
     * @returns any
     */
    ServerDataProvider.prototype.doRetrieveAndSaveQuery = function (query) {
        if ('object' === typeof query && query.value) {
            this._query = query.value;
        }
        else if (query) {
            this._query = query;
        }
        return this._query;
    };
    /**
     * resetToFirstPageIfQueryChanged method
     * @param {any} oldQuery
     * @param {any} currentQuery
     * @returns void
     */
    ServerDataProvider.prototype.resetToFirstPageIfQueryChanged = function (oldQuery, currentQuery) {
        if (oldQuery !== currentQuery) {
            this.currentLazyLoadEvent.first = 0;
            this.component.pDatatableComponent.first = 0;
        }
    };
    /**
     * reset method
     * @returns void
     */
    ServerDataProvider.prototype.reset = function () {
        this._query = undefined;
    };
    return ServerDataProvider;
}());
export { ServerDataProvider };
//# sourceMappingURL=data:application/json;base64,