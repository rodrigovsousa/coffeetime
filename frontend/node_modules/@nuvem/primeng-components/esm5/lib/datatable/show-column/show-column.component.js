import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PageNotificationService } from './../../page-notification/page-notification.service';
var ShowColumn = /** @class */ (function () {
    function ShowColumn(pageNotificationService) {
        this.pageNotificationService = pageNotificationService;
        /**
         * lista de colunas disponívels na tabela
         * @type {Array}
         */
        this.options = [];
        /**
         * Valores do select de colunas
         * @type {Array}
         */
        this.values = [];
        /**
         * Último valor válido para o select.
         * @type {Array}
         */
        this.lastValue = [];
        /**
         * Evento para atualizar a visibilidade das colunas da tabela
         * @type {EventEmitter}
         */
        this.updateVisibleColumns = new EventEmitter();
    }
    ShowColumn.prototype.ngOnInit = function () {
        var _this = this;
        this.columns.forEach(function (column) {
            var col = { field: column.field, filterType: column.filterType, header: column.header };
            _this.options.push(col);
            _this.values.push(col);
            _this.lastValue.push(col);
        });
    };
    ShowColumn.prototype.mostrarColunas = function (event) {
        var _this = this;
        if (this.values.length) {
            this.lastValue = event.value;
            this.updateVisibleColumns.emit(this.values);
        }
        else {
            this.lastValue.map(function (item) { return _this.values.push(item); });
            this.pageNotificationService.addErrorMessage('Não é possível exibir menos de uma coluna');
        }
    };
    ShowColumn.ctorParameters = function () { return [
        { type: PageNotificationService }
    ]; };
    __decorate([
        Input()
    ], ShowColumn.prototype, "columns", void 0);
    __decorate([
        Output()
    ], ShowColumn.prototype, "updateVisibleColumns", void 0);
    ShowColumn = __decorate([
        Component({
            selector: 'basis-show-column',
            template: "<div class=\"ui-g-12 ui-g-nopad\">\n    <div class=\"ui-g-3 ui-md-offset-6\">\n        <div class=\"text-right\">Visibilidade das Colunas:</div>\n    </div>\n    <div class=\"ui-g-3\">\n        <p-multiSelect\n            class=\"column\"\n            defaultLabel=\"Selecione as colunas a serem exibidas\"\n            [optionLabel]=\"'header'\"\n            [displaySelectedLabel]=\"false\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            (onChange)=\"mostrarColunas($event)\"\n            [options]=\"options\"\n            [(ngModel)]=\"values\"\n            [style]=\"{ width: '100%' }\"\n        >\n        </p-multiSelect>\n    </div>\n</div>\n"
        })
    ], ShowColumn);
    return ShowColumn;
}());
export { ShowColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG51dmVtL3ByaW1lbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhdGFibGUvc2hvdy1jb2x1bW4vc2hvdy1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQU05RjtJQWdDSSxvQkFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUF4QnBFOzs7V0FHRztRQUNILFlBQU8sR0FBVSxFQUFFLENBQUM7UUFFcEI7OztXQUdHO1FBQ0gsV0FBTSxHQUFVLEVBQUUsQ0FBQztRQUVuQjs7O1dBR0c7UUFDSyxjQUFTLEdBQVUsRUFBRSxDQUFDO1FBRTlCOzs7V0FHRztRQUNPLHlCQUFvQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRUEsQ0FBQztJQUV4RSw2QkFBUSxHQUFSO1FBQUEsaUJBT0M7UUFORyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQU07WUFDeEIsSUFBTSxHQUFHLEdBQUcsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBQyxDQUFDO1lBQ3hGLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3JCLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELG1DQUFjLEdBQWQsVUFBZSxLQUFLO1FBQXBCLGlCQVFDO1FBUEcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDN0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckQ7YUFBTTtZQUNHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7U0FDcEY7SUFDTCxDQUFDOztnQkFuQjRDLHVCQUF1Qjs7SUExQjNEO1FBQVIsS0FBSyxFQUFFOytDQUF5QjtJQXdCdkI7UUFBVCxNQUFNLEVBQUU7NERBQThEO0lBOUI5RCxVQUFVO1FBSnRCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsMnFCQUEyQztTQUM5QyxDQUFDO09BQ1csVUFBVSxDQW9EdEI7SUFBRCxpQkFBQztDQUFBLEFBcERELElBb0RDO1NBcERZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFF1ZXJ5TGlzdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi9wYWdlLW5vdGlmaWNhdGlvbi9wYWdlLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdiYXNpcy1zaG93LWNvbHVtbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Nob3ctY29sdW1uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTaG93Q29sdW1uIGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIC8qKlxuICAgICAqIGF0cmlidXRvIHF1ZSByZXByZXNlbnRhIGFzIGNvbHVuYXMgZGEgdGFiZWxhXG4gICAgICogQHR5cGUge1F1ZXJ5TGlzdH1cbiAgICAgKi9cbiAgICBASW5wdXQoKSBjb2x1bW5zOiBRdWVyeUxpc3Q8YW55PjtcblxuICAgIC8qKlxuICAgICAqIGxpc3RhIGRlIGNvbHVuYXMgZGlzcG9uw612ZWxzIG5hIHRhYmVsYVxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICBvcHRpb25zOiBhbnlbXSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogVmFsb3JlcyBkbyBzZWxlY3QgZGUgY29sdW5hc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB2YWx1ZXM6IGFueVtdID0gW107XG5cbiAgICAvKipcbiAgICAgKiDDmmx0aW1vIHZhbG9yIHbDoWxpZG8gcGFyYSBvIHNlbGVjdC5cbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgcHJpdmF0ZSBsYXN0VmFsdWU6IGFueVtdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBFdmVudG8gcGFyYSBhdHVhbGl6YXIgYSB2aXNpYmlsaWRhZGUgZGFzIGNvbHVuYXMgZGEgdGFiZWxhXG4gICAgICogQHR5cGUge0V2ZW50RW1pdHRlcn1cbiAgICAgKi9cbiAgICBAT3V0cHV0KCkgdXBkYXRlVmlzaWJsZUNvbHVtbnM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlTm90aWZpY2F0aW9uU2VydmljZTogUGFnZU5vdGlmaWNhdGlvblNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCAoKSB7XG4gICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IHtmaWVsZDogY29sdW1uLmZpZWxkLCBmaWx0ZXJUeXBlOiBjb2x1bW4uZmlsdGVyVHlwZSwgaGVhZGVyOiBjb2x1bW4uaGVhZGVyfTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wdXNoKGNvbCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKGNvbClcbiAgICAgICAgICAgIHRoaXMubGFzdFZhbHVlLnB1c2goY29sKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbW9zdHJhckNvbHVuYXMoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0VmFsdWUgPSBldmVudC52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlzaWJsZUNvbHVtbnMuZW1pdCh0aGlzLnZhbHVlcyk7XG5cdFx0fSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFZhbHVlLm1hcCgoaXRlbSkgPT4gdGhpcy52YWx1ZXMucHVzaChpdGVtKSk7XG5cdFx0XHR0aGlzLnBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlLmFkZEVycm9yTWVzc2FnZSgnTsOjbyDDqSBwb3Nzw612ZWwgZXhpYmlyIG1lbm9zIGRlIHVtYSBjb2x1bmEnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==