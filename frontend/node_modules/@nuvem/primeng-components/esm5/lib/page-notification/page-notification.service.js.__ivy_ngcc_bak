import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { MessageService } from 'primeng';
import { NotificationProvider } from '@nuvem/angular-base';
import * as i0 from "@angular/core";
import * as i1 from "primeng/api";
/**
 * Class PageNotificationService
 * @class
 */
var PageNotificationService = /** @class */ (function (_super) {
    __extends(PageNotificationService, _super);
    /**
     * constructor method
     * @constructor
     * @param {MessageService} messageService
     */
    function PageNotificationService(messageService) {
        var _this = _super.call(this) || this;
        _this.messageService = messageService;
        /**
         * successSeverity property
         * @type {string}
         */
        _this.successSeverity = 'success';
        /**
         * infoSeverity property
         * @type {string}
         */
        _this.infoSeverity = 'info';
        /**
         * warnSeverity property
         * @type {string}
         */
        _this.warnSeverity = 'warn';
        /**
         * errorSeverity property
         * @type {string}
         */
        _this.errorSeverity = 'error';
        /**
         * createMsg property
         * @type {string}
         */
        _this.createMsg = 'Registro incluído com sucesso!';
        /**
         * updateMsg property
         * @type {string}
         */
        _this.updateMsg = 'Registro alterado com sucesso!';
        /**
         * deleteMsg property
         * @type {string}
         */
        _this.deleteMsg = 'Registro excluído com sucesso!';
        return _this;
    }
    /**
     * addCreateMsg method
     * @param {string} title
     */
    PageNotificationService.prototype.addCreateMsg = function (title) {
        this.addSuccessMessage(this.createMsg, title);
    };
    /**
     * addSuccessMessage method
     * @param {string} message
     * @param {string} title
     */
    PageNotificationService.prototype.addSuccessMessage = function (message, title) {
        this.addMsg(this.successSeverity, message, title);
    };
    /**
     * addMsg method
     * @param {string} severity
     * @param {string} msg
     * @param {string} title
     */
    PageNotificationService.prototype.addMsg = function (severity, msg, title) {
        this.messageService.add({
            severity: severity,
            summary: title,
            detail: msg
        });
    };
    /**
     * addUpdateMsg method
     * @param {string} title
     */
    PageNotificationService.prototype.addUpdateMsg = function (title) {
        this.addSuccessMessage(this.updateMsg, title);
    };
    /**
     * addDeleteMsg method
     * @param {string} title
     */
    PageNotificationService.prototype.addDeleteMsg = function (title) {
        this.addSuccessMessage(this.deleteMsg, title);
    };
    /**
     * addInfoMessage method
     * @param {string} message
     * @param {string} title
     */
    PageNotificationService.prototype.addInfoMessage = function (message, title) {
        this.addMsg(this.infoSeverity, message, title);
    };
    /**
     * addWarnMessage method
     * @param {string} message
     * @param {string} title
     */
    PageNotificationService.prototype.addWarnMessage = function (message, title) {
        this.addMsg(this.warnSeverity, message, title);
    };
    /**
     * addErrorMessage method
     * @param {string} message
     * @param {string} title
     */
    PageNotificationService.prototype.addErrorMessage = function (message, title) {
        this.addMsg(this.errorSeverity, message, title);
    };
    /**
     * addErrorProblem method
     * @param {ApplicationProblemType} problem
     */
    PageNotificationService.prototype.addErrorProblem = function (problem) {
        this.addMsg(this.errorSeverity, problem.detail, problem.title);
    };
    PageNotificationService.ctorParameters = function () { return [
        { type: MessageService }
    ]; };
    PageNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageNotificationService_Factory() { return new PageNotificationService(i0.ɵɵinject(i1.MessageService)); }, token: PageNotificationService, providedIn: "root" });
    PageNotificationService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], PageNotificationService);
    return PageNotificationService;
}(NotificationProvider));
export { PageNotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BudXZlbS9wcmltZW5nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvcGFnZS1ub3RpZmljYXRpb24vcGFnZS1ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxvQkFBb0IsRUFBMEIsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBRW5GOzs7R0FHRztBQUlIO0lBQTZDLDJDQUFvQjtJQTRDN0Q7Ozs7T0FJRztJQUNILGlDQUFvQixjQUE4QjtRQUFsRCxZQUNJLGlCQUFPLFNBQ1Y7UUFGbUIsb0JBQWMsR0FBZCxjQUFjLENBQWdCO1FBL0NsRDs7O1dBR0c7UUFDYyxxQkFBZSxHQUFHLFNBQVMsQ0FBQztRQUU3Qzs7O1dBR0c7UUFDYyxrQkFBWSxHQUFHLE1BQU0sQ0FBQztRQUV2Qzs7O1dBR0c7UUFDYyxrQkFBWSxHQUFHLE1BQU0sQ0FBQztRQUV2Qzs7O1dBR0c7UUFDYyxtQkFBYSxHQUFHLE9BQU8sQ0FBQztRQUV6Qzs7O1dBR0c7UUFDYyxlQUFTLEdBQUcsZ0NBQWdDLENBQUM7UUFFOUQ7OztXQUdHO1FBQ2MsZUFBUyxHQUFHLGdDQUFnQyxDQUFDO1FBRTlEOzs7V0FHRztRQUNjLGVBQVMsR0FBRyxnQ0FBZ0MsQ0FBQzs7SUFTOUQsQ0FBQztJQUVEOzs7T0FHRztJQUNILDhDQUFZLEdBQVosVUFBYSxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsbURBQWlCLEdBQWpCLFVBQWtCLE9BQWUsRUFBRSxLQUFjO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssd0NBQU0sR0FBZCxVQUFlLFFBQWdCLEVBQUUsR0FBVyxFQUFFLEtBQWM7UUFDeEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7WUFDdEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxNQUFNLEVBQUUsR0FBRztTQUNaLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7O09BR0c7SUFDSCw4Q0FBWSxHQUFaLFVBQWEsS0FBYztRQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsOENBQVksR0FBWixVQUFhLEtBQWM7UUFDdkIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxnREFBYyxHQUFkLFVBQWUsT0FBZSxFQUFFLEtBQWM7UUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGdEQUFjLEdBQWQsVUFBZSxPQUFlLEVBQUUsS0FBYztRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsaURBQWUsR0FBZixVQUFnQixPQUFlLEVBQUUsS0FBYztRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7O09BR0c7SUFDSCxpREFBZSxHQUFmLFVBQWdCLE9BQStCO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDOztnQkFwRm1DLGNBQWM7OztJQWpEekMsdUJBQXVCO1FBSG5DLFVBQVUsQ0FBQztZQUNSLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUM7T0FDVyx1QkFBdUIsQ0F1SW5DO2tDQWxKRDtDQWtKQyxBQXZJRCxDQUE2QyxvQkFBb0IsR0F1SWhFO1NBdklZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAncHJpbWVuZyc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25Qcm92aWRlciwgQXBwbGljYXRpb25Qcm9ibGVtVHlwZSB9IGZyb20gJ0BudXZlbS9hbmd1bGFyLWJhc2UnO1xuXG4vKipcbiAqIENsYXNzIFBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQYWdlTm90aWZpY2F0aW9uU2VydmljZSBleHRlbmRzIE5vdGlmaWNhdGlvblByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIHN1Y2Nlc3NTZXZlcml0eSBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdWNjZXNzU2V2ZXJpdHkgPSAnc3VjY2Vzcyc7XG5cbiAgICAvKipcbiAgICAgKiBpbmZvU2V2ZXJpdHkgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5mb1NldmVyaXR5ID0gJ2luZm8nO1xuXG4gICAgLyoqXG4gICAgICogd2FyblNldmVyaXR5IHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHdhcm5TZXZlcml0eSA9ICd3YXJuJztcblxuICAgIC8qKlxuICAgICAqIGVycm9yU2V2ZXJpdHkgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZXJyb3JTZXZlcml0eSA9ICdlcnJvcic7XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGVNc2cgcHJvcGVydHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY3JlYXRlTXNnID0gJ1JlZ2lzdHJvIGluY2x1w61kbyBjb20gc3VjZXNzbyEnO1xuXG4gICAgLyoqXG4gICAgICogdXBkYXRlTXNnIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHVwZGF0ZU1zZyA9ICdSZWdpc3RybyBhbHRlcmFkbyBjb20gc3VjZXNzbyEnO1xuXG4gICAgLyoqXG4gICAgICogZGVsZXRlTXNnIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlbGV0ZU1zZyA9ICdSZWdpc3RybyBleGNsdcOtZG8gY29tIHN1Y2Vzc28hJztcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7TWVzc2FnZVNlcnZpY2V9IG1lc3NhZ2VTZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRDcmVhdGVNc2cgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgYWRkQ3JlYXRlTXNnKHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkU3VjY2Vzc01lc3NhZ2UodGhpcy5jcmVhdGVNc2csIHRpdGxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRTdWNjZXNzTWVzc2FnZSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIGFkZFN1Y2Nlc3NNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRNc2codGhpcy5zdWNjZXNzU2V2ZXJpdHksIG1lc3NhZ2UsIHRpdGxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRNc2cgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNldmVyaXR5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIHByaXZhdGUgYWRkTXNnKHNldmVyaXR5OiBzdHJpbmcsIG1zZzogc3RyaW5nLCB0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmFkZCh7XG4gICAgICAgICAgc2V2ZXJpdHk6IHNldmVyaXR5LFxuICAgICAgICAgIHN1bW1hcnk6IHRpdGxlLFxuICAgICAgICAgIGRldGFpbDogbXNnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZFVwZGF0ZU1zZyBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBhZGRVcGRhdGVNc2codGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRTdWNjZXNzTWVzc2FnZSh0aGlzLnVwZGF0ZU1zZywgdGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZERlbGV0ZU1zZyBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKi9cbiAgICBhZGREZWxldGVNc2codGl0bGU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRTdWNjZXNzTWVzc2FnZSh0aGlzLmRlbGV0ZU1zZywgdGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZEluZm9NZXNzYWdlIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgYWRkSW5mb01lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZE1zZyh0aGlzLmluZm9TZXZlcml0eSwgbWVzc2FnZSwgdGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZFdhcm5NZXNzYWdlIG1ldGhvZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAgICovXG4gICAgYWRkV2Fybk1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLmFkZE1zZyh0aGlzLndhcm5TZXZlcml0eSwgbWVzc2FnZSwgdGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZEVycm9yTWVzc2FnZSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxuICAgICAqL1xuICAgIGFkZEVycm9yTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkTXNnKHRoaXMuZXJyb3JTZXZlcml0eSwgbWVzc2FnZSwgdGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZEVycm9yUHJvYmxlbSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0FwcGxpY2F0aW9uUHJvYmxlbVR5cGV9IHByb2JsZW1cbiAgICAgKi9cbiAgICBhZGRFcnJvclByb2JsZW0ocHJvYmxlbTogQXBwbGljYXRpb25Qcm9ibGVtVHlwZSk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZE1zZyh0aGlzLmVycm9yU2V2ZXJpdHksIHByb2JsZW0uZGV0YWlsLCBwcm9ibGVtLnRpdGxlKTtcbiAgICB9XG5cbn1cbiJdfQ==