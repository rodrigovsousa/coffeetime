import { __decorate, __param } from 'tslib';
import { HttpParams, HttpClient, HttpClientModule, HTTP_INTERCEPTORS, HttpResponse } from '@angular/common/http';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, Component, ContentChildren, ContentChild, TemplateRef, Directive, ChangeDetectorRef, ViewChild, ViewEncapsulation, NgModule, CUSTOM_ELEMENTS_SCHEMA, InjectionToken, Inject, ElementRef, Injector, forwardRef, Renderer2, IterableDiffers, Pipe } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PrimeTemplate, SplitButtonModule, MultiSelectModule, CheckboxModule, InputTextModule, MessageService, ButtonModule as ButtonModule$1, TooltipModule, BlockUIModule, ProgressSpinnerModule, PaginatorModule, AutoCompleteModule } from 'primeng';
import { Table, TableModule } from 'primeng/table';
import { Authorization, NotificationProvider, BlockUiService, BlockUiInterceptor, FormNotificationComponentSuperclass, FormNotificationBaseModule, ErrorStackService, ClipboardModule, ErrorProvider, ErrorStackProviderService, WrappedFormControlSuperclass, provideValueAccessor, FieldFormNotification, FormNotificationService, AccessbilityService } from '@nuvem/angular-base';
import { ButtonModule } from 'primeng/button';
import { DropdownModule } from 'primeng/dropdown';
import { FormsModule, ReactiveFormsModule, ControlContainer, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject, forkJoin } from 'rxjs';
import { debounceTime, tap, filter, distinctUntilChanged } from 'rxjs/operators';
import { MessageService as MessageService$1, ConfirmationService } from 'primeng/api';
import { ToastModule } from 'primeng/toast';
import { ActivatedRoute, Router, RouterModule, NavigationEnd } from '@angular/router';
import { InputTextModule as InputTextModule$1 } from 'primeng/inputtext';
import { CalendarModule } from 'primeng/calendar';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { InputMaskModule } from 'primeng/inputmask';
import { RadioButtonModule } from 'primeng/radiobutton';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { AutoComplete } from 'primeng/autocomplete';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { trigger, state, style, transition, animate } from '@angular/animations';

/**
 * Class DatatableService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from 'primeng';
import * as ɵngcc3 from '@nuvem/angular-base';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from 'primeng/table';
import * as ɵngcc6 from 'primeng/api';
import * as ɵngcc7 from '@angular/forms';
import * as ɵngcc8 from 'primeng/toast';
import * as ɵngcc9 from '@angular/router';
import * as ɵngcc10 from 'primeng/confirmdialog';
import * as ɵngcc11 from 'primeng/calendar';
import * as ɵngcc12 from 'primeng/inputtextarea';
import * as ɵngcc13 from 'primeng/dropdown';
import * as ɵngcc14 from 'primeng/inputmask';
import * as ɵngcc15 from 'primeng/radiobutton';
import * as ɵngcc16 from '@angular/cdk/scrolling';

function DatatableComponent_basis_show_column_6_Template(rf, ctx) { if (rf & 1) {
    const _r958 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "basis-show-column", 11);
    ɵngcc0.ɵɵlistener("updateVisibleColumns", function DatatableComponent_basis_show_column_6_Template_basis_show_column_updateVisibleColumns_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r958); const ctx_r957 = ɵngcc0.ɵɵnextContext(); return ctx_r957.updateVisibleColumns($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r948 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("columns", ctx_r948.columns);
} }
function DatatableComponent_ng_template_10_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "span", 18);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r963 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r963.horizontalButtonsHeader);
} }
function DatatableComponent_ng_template_10_div_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c0 = function (a2, a3) { return { "horizontal-buttons": true, "ui-sm-12": true, "ui-g-8": a2, "ui-g-12": a3 }; };
function DatatableComponent_ng_template_10_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_10_div_0_div_1_Template, 3, 1, "div", 15);
    ɵngcc0.ɵɵelementStart(2, "div", 2);
    ɵngcc0.ɵɵtemplate(3, DatatableComponent_ng_template_10_div_0_ng_container_3_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵprojection(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r960 = ɵngcc0.ɵɵnextContext(2);
    const _r955 = ɵngcc0.ɵɵreference(16);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r960.showHorizontalButtonsHeader);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r960.showHorizontalButtonsHeader, !ctx_r960.showHorizontalButtonsHeader));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r955);
} }
function DatatableComponent_ng_template_10_th_2_p_sortIcon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p-sortIcon", 21);
} if (rf & 2) {
    const col_r965 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("field", col_r965.field);
} }
const _c1 = function (a0) { return { "display": a0 }; };
function DatatableComponent_ng_template_10_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_10_th_2_p_sortIcon_2_Template, 1, 1, "p-sortIcon", 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r965 = ctx.$implicit;
    const ctx_r961 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("pSortableColumn", col_r965.sortable ? col_r965.field : null)("ngStyle", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r961.visibleColumns[col_r965.field]));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", col_r965.header, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", col_r965.sortable);
} }
function DatatableComponent_ng_template_10_tr_3_th_1_Template(rf, ctx) { if (rf & 1) {
    const _r971 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "th", 23);
    ɵngcc0.ɵɵelementStart(1, "basis-filter-column", 24);
    ɵngcc0.ɵɵlistener("outputEvent", function DatatableComponent_ng_template_10_tr_3_th_1_Template_basis_filter_column_outputEvent_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r971); const col_r969 = ctx.$implicit; const ctx_r970 = ɵngcc0.ɵɵnextContext(3); return ctx_r970.filterColumn(col_r969.field, $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r969 = ctx.$implicit;
    const ctx_r968 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(8, _c1, ctx_r968.visibleColumns[col_r969.field]));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("listaOriginal", ctx_r968.filterSelectOptions)("lista", ctx_r968.filterSelectOptions)("field", col_r969.field)("updateFiltro", ctx_r968.updateFilterColumn)("filterType", col_r969.filterType)("tableType", ctx_r968.type)("customFilterOptions", ctx_r968.customFilterOptions);
} }
function DatatableComponent_ng_template_10_tr_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_10_tr_3_th_1_Template, 2, 10, "th", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const columns_r959 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", columns_r959);
} }
function DatatableComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DatatableComponent_ng_template_10_div_0_Template, 5, 6, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "tr");
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_10_th_2_Template, 3, 6, "th", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, DatatableComponent_ng_template_10_tr_3_Template, 2, 1, "tr", 8);
} if (rf & 2) {
    const columns_r959 = ctx.$implicit;
    const ctx_r950 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r950.verticalButtons);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", columns_r959);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r950.filterOnColumn);
} }
function DatatableComponent_ng_template_11_td_1_ng_container_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 29);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("innerHTML", rowData_r973[col_r978.field], ɵngcc0.ɵɵsanitizeHtml);
} }
const _c2 = function (a0, a1) { return { rowData: a0, col: a1 }; };
function DatatableComponent_ng_template_11_td_1_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 30);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", col_r978.bodyTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c2, rowData_r973, col_r978));
} }
function DatatableComponent_ng_template_11_td_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_11_td_1_ng_container_1_span_1_Template, 1, 1, "span", 27);
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_11_td_1_ng_container_1_ng_container_2_Template, 1, 5, "ng-container", 28);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !col_r978.bodyTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", col_r978.bodyTemplate);
} }
function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 29);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("innerHTML", rowData_r973[col_r978.field], ɵngcc0.ɵɵsanitizeHtml);
} }
const _c3 = function () { return { "width": "100%" }; };
function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r999 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵelementStart(1, "div", 35);
    ɵngcc0.ɵɵelementStart(2, "div", 34);
    ɵngcc0.ɵɵelementStart(3, "span", 36);
    ɵngcc0.ɵɵelementStart(4, "input", 37);
    ɵngcc0.ɵɵlistener("ngModelChange", function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_div_1_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r999); const col_r978 = ɵngcc0.ɵɵnextContext(3).$implicit; const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit; return (rowData_r973[col_r978.field] = $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "label");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(4, _c3));
    ɵngcc0.ɵɵproperty("ngModel", rowData_r973[col_r978.field]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(col_r978.header);
} }
const _c4 = function (a0, a1) { return { "rowData": a0, "col": a1 }; };
function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 30);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", col_r978.inputTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c4, rowData_r973, col_r978));
} }
function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_span_0_Template, 1, 1, "span", 27);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_div_1_Template, 7, 5, "div", 33);
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_ng_container_2_Template, 1, 5, "ng-container", 28);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("ngIf", !col_r978.outputTemplate && col_r978.editable == false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !col_r978.inputTemplate && col_r978.editable != false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", col_r978.inputTemplate);
} }
function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_3_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 29);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("innerHTML", rowData_r973[col_r978.field], ɵngcc0.ɵɵsanitizeHtml);
} }
function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 30);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(3).$implicit;
    const rowData_r973 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", col_r978.outputTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c2, rowData_r973, col_r978));
} }
function DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_3_span_0_Template, 1, 1, "span", 27);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_3_ng_container_1_Template, 1, 5, "ng-container", 28);
} if (rf & 2) {
    const col_r978 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("ngIf", !col_r978.outputTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", col_r978.outputTemplate);
} }
function DatatableComponent_ng_template_11_td_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "p-cellEditor");
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_2_Template, 3, 3, "ng-template", 31);
    ɵngcc0.ɵɵtemplate(3, DatatableComponent_ng_template_11_td_1_ng_container_2_ng_template_3_Template, 2, 2, "ng-template", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DatatableComponent_ng_template_11_td_1_div_3_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r1017 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 42);
    ɵngcc0.ɵɵlistener("click", function DatatableComponent_ng_template_11_td_1_div_3_button_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1017); const rowData_r973 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r1016 = ɵngcc0.ɵɵnextContext(); return ctx_r1016.onRowEditInitEvent($event, rowData_r973); });
    ɵngcc0.ɵɵtext(1, "Editar");
    ɵngcc0.ɵɵelementEnd();
} }
function DatatableComponent_ng_template_11_td_1_div_3_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r1020 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 43);
    ɵngcc0.ɵɵlistener("click", function DatatableComponent_ng_template_11_td_1_div_3_button_2_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1020); const rowData_r973 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r1019 = ɵngcc0.ɵɵnextContext(); return ctx_r1019.onRowEditSaveEvent($event, rowData_r973); });
    ɵngcc0.ɵɵtext(1, "Salvar");
    ɵngcc0.ɵɵelementEnd();
} }
function DatatableComponent_ng_template_11_td_1_div_3_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r1023 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 44);
    ɵngcc0.ɵɵlistener("click", function DatatableComponent_ng_template_11_td_1_div_3_button_3_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1023); const ctx_r1024 = ɵngcc0.ɵɵnextContext(3); const rowData_r973 = ctx_r1024.$implicit; const ri_r976 = ctx_r1024.rowIndex; const ctx_r1022 = ɵngcc0.ɵɵnextContext(); return ctx_r1022.onRowEditCancelEvent($event, rowData_r973, ri_r976); });
    ɵngcc0.ɵɵtext(1, "Cancelar");
    ɵngcc0.ɵɵelementEnd();
} }
function DatatableComponent_ng_template_11_td_1_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 38);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_11_td_1_div_3_button_1_Template, 2, 0, "button", 39);
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_11_td_1_div_3_button_2_Template, 2, 0, "button", 40);
    ɵngcc0.ɵɵtemplate(3, DatatableComponent_ng_template_11_td_1_div_3_button_3_Template, 2, 0, "button", 41);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const editing_r975 = ɵngcc0.ɵɵnextContext(2).editing;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !editing_r975);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", editing_r975);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", editing_r975);
} }
function DatatableComponent_ng_template_11_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 23);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_11_td_1_ng_container_1_Template, 3, 2, "ng-container", 8);
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_11_td_1_ng_container_2_Template, 4, 0, "ng-container", 8);
    ɵngcc0.ɵɵtemplate(3, DatatableComponent_ng_template_11_td_1_div_3_Template, 4, 3, "div", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r978 = ctx.$implicit;
    const isLast_r979 = ctx.last;
    const ctx_r977 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r977.visibleColumns[col_r978.field]));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r977.editMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r977.editMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", isLast_r979);
} }
const _c5 = function (a0) { return { "editing": a0 }; };
function DatatableComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    const _r1027 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tr", 25);
    ɵngcc0.ɵɵlistener("mouseover", function DatatableComponent_ng_template_11_Template_tr_mouseover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1027); const ctx_r1026 = ɵngcc0.ɵɵnextContext(); return ctx_r1026.editarLinhaOver($event); })("mouseleave", function DatatableComponent_ng_template_11_Template_tr_mouseleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1027); const ctx_r1028 = ɵngcc0.ɵɵnextContext(); return ctx_r1028.editarLinhaOut($event); });
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_11_td_1_Template, 4, 6, "td", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const rowData_r973 = ctx.$implicit;
    const columns_r974 = ctx.columns;
    const editing_r975 = ctx.editing;
    ɵngcc0.ɵɵproperty("pSelectableRow", rowData_r973)("pContextMenuRow", rowData_r973)("pEditableRow", rowData_r973)("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c5, editing_r975));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", columns_r974);
} }
function DatatableComponent_12_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r1029 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1029.emptyMessage, " ");
} }
function DatatableComponent_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DatatableComponent_12_ng_template_0_Template, 1, 1, "ng-template");
} }
function DatatableComponent_p_footer_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p-footer");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r953 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r953.paginationFooterText(ctx_r953.footerMsg), " ");
} }
function DatatableComponent_div_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DatatableComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 45);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_div_14_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵprojection(2, 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r954 = ɵngcc0.ɵɵnextContext();
    const _r955 = ɵngcc0.ɵɵreference(16);
    ɵngcc0.ɵɵstyleProp("position", ctx_r954.enableButtonsScroll ? "sticky" : "")("top", ctx_r954.enableButtonsScroll ? "15%" : "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r955);
} }
function DatatableComponent_ng_template_15_basis_datatable_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r1036 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "basis-datatable-button", 50);
    ɵngcc0.ɵɵlistener("click", function DatatableComponent_ng_template_15_basis_datatable_button_0_Template_basis_datatable_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1036); const ctx_r1035 = ɵngcc0.ɵɵnextContext(2); return ctx_r1035.onClick("edit", $event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1031 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("horizontal-button", !ctx_r1031.verticalButtons);
    ɵngcc0.ɵɵproperty("bTooltip", ctx_r1031.selectedRow != null ? "Editar" : "Escolha um registro para editar.")("disabled", ctx_r1031.selectedRow == null);
} }
function DatatableComponent_ng_template_15_basis_datatable_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r1038 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "basis-datatable-button", 51);
    ɵngcc0.ɵɵlistener("click", function DatatableComponent_ng_template_15_basis_datatable_button_1_Template_basis_datatable_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1038); const ctx_r1037 = ɵngcc0.ɵɵnextContext(2); return ctx_r1037.onClick("view", $event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1032 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("horizontal-button", !ctx_r1032.verticalButtons);
    ɵngcc0.ɵɵproperty("bTooltip", ctx_r1032.selectedRow != null ? "Visualizar" : "Escolha um registro para visualizar.")("disabled", ctx_r1032.selectedRow == null);
} }
function DatatableComponent_ng_template_15_basis_datatable_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r1040 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "basis-datatable-button", 52);
    ɵngcc0.ɵɵlistener("click", function DatatableComponent_ng_template_15_basis_datatable_button_2_Template_basis_datatable_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1040); const ctx_r1039 = ɵngcc0.ɵɵnextContext(2); return ctx_r1039.onClick("delete", $event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1033 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("horizontal-button", !ctx_r1033.verticalButtons);
    ɵngcc0.ɵɵproperty("bTooltip", ctx_r1033.selectedRow != null ? "Excluir" : "Escolha um registro para excluir.")("disabled", ctx_r1033.selectedRow == null);
} }
function DatatableComponent_ng_template_15_datatable_splitbutton_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "datatable-splitbutton", 53);
} if (rf & 2) {
    const ctx_r1034 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r1034.splitButton.class);
    ɵngcc0.ɵɵproperty("icon", ctx_r1034.splitButton.icon)("items", ctx_r1034.splitButton.itens)("label", ctx_r1034.splitButton.label)("method", ctx_r1034.splitButton.method);
} }
function DatatableComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DatatableComponent_ng_template_15_basis_datatable_button_0_Template, 1, 4, "basis-datatable-button", 46);
    ɵngcc0.ɵɵtemplate(1, DatatableComponent_ng_template_15_basis_datatable_button_1_Template, 1, 4, "basis-datatable-button", 47);
    ɵngcc0.ɵɵtemplate(2, DatatableComponent_ng_template_15_basis_datatable_button_2_Template, 1, 4, "basis-datatable-button", 48);
    ɵngcc0.ɵɵtemplate(3, DatatableComponent_ng_template_15_datatable_splitbutton_3_Template, 1, 6, "datatable-splitbutton", 49);
} if (rf & 2) {
    const ctx_r956 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r956.disableEdit && ctx_r956.checkRolesToButton("rulesToShowView") && ctx_r956.checkRolesToButton("rulesToHideView"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r956.disableView && ctx_r956.checkRolesToButton("rulesToShowEdit") && ctx_r956.checkRolesToButton("rulesToHideEdit"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r956.disableDelete && ctx_r956.checkRolesToButton("rulesToShowDelete") && ctx_r956.checkRolesToButton("rulesToHideDelete"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r956.splitButton);
} }
const _c6 = [[["horizontalButtons"]], "*"];
const _c7 = function (a0, a1) { return { "ui-g-2": a0, "ui-g-5": a1 }; };
const _c8 = function (a0, a1, a2, a3) { return { "ui-g-11": a0, "ui-g-12": a1, "edicao-tabela": a2, "editing-row": a3 }; };
const _c9 = ["horizontalButtons", "*"];
function FilterColumn_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r1044 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵelementStart(3, "span", 4);
    ɵngcc0.ɵɵelementStart(4, "input", 5);
    ɵngcc0.ɵɵlistener("input", function FilterColumn_div_1_Template_input_input_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1044); const ctx_r1043 = ɵngcc0.ɵɵnextContext(); return ctx_r1043.filtrar($event); })("ngModelChange", function FilterColumn_div_1_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1044); const ctx_r1045 = ɵngcc0.ɵɵnextContext(); return ctx_r1045.filtro = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "label");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1041 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1041.filtro);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1041.header ? ctx_r1041.header : "Filtro");
} }
const _c10 = function () { return { standalone: true }; };
function FilterColumn_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r1047 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "p-multiSelect", 6);
    ɵngcc0.ɵɵlistener("onChange", function FilterColumn_div_2_Template_p_multiSelect_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1047); const ctx_r1046 = ɵngcc0.ɵɵnextContext(); return ctx_r1046.filtrar($event); })("ngModelChange", function FilterColumn_div_2_Template_p_multiSelect_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1047); const ctx_r1048 = ɵngcc0.ɵɵnextContext(); return ctx_r1048.filtro = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1042 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(7, _c3));
    ɵngcc0.ɵɵproperty("options", ctx_r1042.getCustomFilterOptions())("defaultLabel", ctx_r1042.header ? ctx_r1042.header : "\u00A0")("optionLabel", "label")("ngModelOptions", ɵngcc0.ɵɵpureFunction0(8, _c10))("ngModel", ctx_r1042.filtro);
} }
const _c11 = function () { return { width: "100%" }; };
const _c12 = ["form-notification", ""];
const _c13 = ["*"];
function ErrorStackComponent_ng_template_0_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "th", 9);
    ɵngcc0.ɵɵtext(2, "Data");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "th", 9);
    ɵngcc0.ɵɵtext(4, "C\u00F3digo de identifica\u00E7\u00E3o");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "th");
    ɵngcc0.ɵɵtext(6, "Mensagem");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "th", 10);
    ɵngcc0.ɵɵtext(8, "A\u00E7\u00E3o");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ErrorStackComponent_ng_template_0_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "date");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 9);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "td", 10);
    ɵngcc0.ɵɵelement(9, "button", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r1055 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(3, 4, error_r1055.createdAt, "dd/MM/y H:mm:ss"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(error_r1055.correlationId || "Indispon\u00EDvel");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(error_r1055.message);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("clipboard", error_r1055.fullMessage);
} }
function ErrorStackComponent_ng_template_0_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td", 12);
    ɵngcc0.ɵɵtext(2, " Nenhum erro foi registrado at\u00E9 o momento. ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ErrorStackComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "div", 4);
    ɵngcc0.ɵɵelementStart(3, "h1");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "p-table", 5);
    ɵngcc0.ɵɵtemplate(6, ErrorStackComponent_ng_template_0_ng_template_6_Template, 9, 0, "ng-template", 6);
    ɵngcc0.ɵɵtemplate(7, ErrorStackComponent_ng_template_0_ng_template_7_Template, 10, 7, "ng-template", 7);
    ɵngcc0.ɵɵtemplate(8, ErrorStackComponent_ng_template_0_ng_template_8_Template, 3, 0, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1050 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1050.title);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r1050.errors)("paginator", false)("rows", 5);
} }
function ErrorStackComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c14 = function (a0) { return [a0]; };
const _c15 = ["datatable"];
const _c16 = function () { return ["../save"]; };
function CrudListComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "button", 6);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(1, _c16));
} }
const _c17 = [[["", "nForm", ""]], [["p-column"]]];
const _c18 = ["[nForm]", "p-column"];
const _c19 = ["input"];
const _c20 = ["nInputText", ""];
function InputTextComponent_nValidationMessage_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "nValidationMessage", 6);
} if (rf & 2) {
    const ctx_r1061 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("control", ctx_r1061.formControl);
} }
const _c21 = function (a0) { return { "ng-invalid ng-dirty": a0 }; };
const _c22 = ["nCalendar", ""];
function CalendarComponent_nValidationMessage_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "nValidationMessage", 6);
} if (rf & 2) {
    const ctx_r1064 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("control", ctx_r1064.formControl);
} }
const _c23 = ["nTextArea", ""];
function TextAreaComponent_nValidationMessage_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "nValidationMessage", 6);
} if (rf & 2) {
    const ctx_r1067 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("control", ctx_r1067.formControl);
} }
const _c24 = ["nDropdown", ""];
function DropdownComponent_nValidationMessage_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "nValidationMessage", 6);
} if (rf & 2) {
    const ctx_r1070 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("control", ctx_r1070.formControl);
} }
const _c25 = ["nInputMask", ""];
function InputMaskComponent_nValidationMessage_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "nValidationMessage", 6);
} if (rf & 2) {
    const ctx_r1073 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("control", ctx_r1073.formControl);
} }
const _c26 = ["nCheck", ""];
function FormComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelement(1, "button", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1074 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("label", ctx_r1074.saveLabel)("disabled", ctx_r1074.form.disabled || ctx_r1074.form.invalid);
} }
const _c27 = ["*", [["", "nButton", ""]]];
const _c28 = ["*", "[nButton]"];
function ValidationMessageComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, " campo obrigat\u00F3rio ");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ValidationMessageComponent_ng_container_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1077 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" tamanho m\u00EDnimo ", ctx_r1077.control.errors.minlength.requiredLength, " ");
} }
function ValidationMessageComponent_ng_container_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1078 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" tamanho m\u00E1ximo ", ctx_r1078.control.errors.maxlength.requiredLength, " ");
} }
function ValidationMessageComponent_ng_container_0_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1079 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" valor m\u00EDnimo ", ctx_r1079.control.errors.min.min, " ");
} }
function ValidationMessageComponent_ng_container_0_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1080 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" valor m\u00E1ximo ", ctx_r1080.control.errors.max.max, " ");
} }
function ValidationMessageComponent_ng_container_0_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, " campo inv\u00E1lido ");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ValidationMessageComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtemplate(2, ValidationMessageComponent_ng_container_0_ng_container_2_Template, 2, 0, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(3, ValidationMessageComponent_ng_container_0_ng_container_3_Template, 2, 1, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(4, ValidationMessageComponent_ng_container_0_ng_container_4_Template, 2, 1, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(5, ValidationMessageComponent_ng_container_0_ng_container_5_Template, 2, 1, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(6, ValidationMessageComponent_ng_container_0_ng_container_6_Template, 2, 1, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(7, ValidationMessageComponent_ng_container_0_ng_container_7_Template, 2, 0, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1075 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1075.control.errors.required);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1075.control.errors.minlength);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1075.control.errors.maxlength);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1075.control.errors.min);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1075.control.errors.max);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1075.control.errors.email || ctx_r1075.control.errors.pattern);
} }
const _c29 = ["nAutoComplete", ""];
function AutoCompleteComponent_nValidationMessage_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "nValidationMessage", 6);
} if (rf & 2) {
    const ctx_r1084 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("control", ctx_r1084.formControl);
} }
function AutoCompleteCustomComponent_input_1_Template(rf, ctx) { if (rf & 1) {
    const _r1092 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 6, 7);
    ɵngcc0.ɵɵlistener("click", function AutoCompleteCustomComponent_input_1_Template_input_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1091 = ɵngcc0.ɵɵnextContext(); return ctx_r1091.onInputClick($event); })("input", function AutoCompleteCustomComponent_input_1_Template_input_input_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1093 = ɵngcc0.ɵɵnextContext(); return ctx_r1093.onInput($event); })("keydown", function AutoCompleteCustomComponent_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1094 = ɵngcc0.ɵɵnextContext(); return ctx_r1094.onKeydown($event); })("keyup", function AutoCompleteCustomComponent_input_1_Template_input_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1095 = ɵngcc0.ɵɵnextContext(); return ctx_r1095.onKeyup($event); })("focus", function AutoCompleteCustomComponent_input_1_Template_input_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1096 = ɵngcc0.ɵɵnextContext(); return ctx_r1096.onInputFocus($event); })("blur", function AutoCompleteCustomComponent_input_1_Template_input_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1097 = ɵngcc0.ɵɵnextContext(); return ctx_r1097.onInputBlur($event); })("change", function AutoCompleteCustomComponent_input_1_Template_input_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1098 = ɵngcc0.ɵɵnextContext(); return ctx_r1098.onInputChange($event); })("paste", function AutoCompleteCustomComponent_input_1_Template_input_paste_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1092); const ctx_r1099 = ɵngcc0.ɵɵnextContext(); return ctx_r1099.onInputPaste($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1085 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r1085.inputStyleClass);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r1085.inputStyle)("autocomplete", ctx_r1085.autocomplete)("ngClass", "ui-inputtext ui-widget ui-state-default ui-corner-all ui-autocomplete-input")("value", ctx_r1085.inputFieldValue)("readonly", ctx_r1085.readonly)("disabled", ctx_r1085.disabled);
    ɵngcc0.ɵɵattribute("type", ctx_r1085.type)("id", ctx_r1085.inputId)("required", ctx_r1085.required)("name", ctx_r1085.name)("aria-expanded", ctx_r1085.overlayVisible)("aria-activedescendant", "p-highlighted-option")("autofocus", ctx_r1085.autofocus)("placeholder", ctx_r1085.placeholder)("size", ctx_r1085.size)("maxlength", ctx_r1085.maxlength)("tabindex", ctx_r1085.tabindex)("aria-label", ctx_r1085.ariaLabel)("aria-labelledby", ctx_r1085.ariaLabelledBy)("aria-required", ctx_r1085.required);
} }
function AutoCompleteCustomComponent_ul_2_li_2_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r1109 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵlistener("click", function AutoCompleteCustomComponent_ul_2_li_2_span_2_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r1109); ɵngcc0.ɵɵnextContext(); const _r1104 = ɵngcc0.ɵɵreference(1); const ctx_r1108 = ɵngcc0.ɵɵnextContext(2); return ctx_r1108.removeItem(_r1104); });
    ɵngcc0.ɵɵelementEnd();
} }
function AutoCompleteCustomComponent_ul_2_li_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const val_r1103 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r1106 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1106.resolveFieldData(val_r1103));
} }
function AutoCompleteCustomComponent_ul_2_li_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c30 = function (a0) { return { $implicit: a0 }; };
function AutoCompleteCustomComponent_ul_2_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 14, 15);
    ɵngcc0.ɵɵtemplate(2, AutoCompleteCustomComponent_ul_2_li_2_span_2_Template, 1, 0, "span", 16);
    ɵngcc0.ɵɵtemplate(3, AutoCompleteCustomComponent_ul_2_li_2_span_3_Template, 2, 1, "span", 17);
    ɵngcc0.ɵɵtemplate(4, AutoCompleteCustomComponent_ul_2_li_2_ng_container_4_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const val_r1103 = ctx.$implicit;
    const ctx_r1101 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1101.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1101.selectedItemTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1101.selectedItemTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(4, _c30, val_r1103));
} }
const _c31 = function (a0, a1) { return { "ui-state-disabled": a0, "ui-state-focus": a1 }; };
function AutoCompleteCustomComponent_ul_2_Template(rf, ctx) { if (rf & 1) {
    const _r1112 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ul", 8, 9);
    ɵngcc0.ɵɵlistener("click", function AutoCompleteCustomComponent_ul_2_Template_ul_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r1112); const _r1102 = ɵngcc0.ɵɵreference(5); return _r1102.focus(); });
    ɵngcc0.ɵɵtemplate(2, AutoCompleteCustomComponent_ul_2_li_2_Template, 5, 6, "li", 10);
    ɵngcc0.ɵɵelementStart(3, "li", 11);
    ɵngcc0.ɵɵelementStart(4, "input", 12, 13);
    ɵngcc0.ɵɵlistener("input", function AutoCompleteCustomComponent_ul_2_Template_input_input_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1113 = ɵngcc0.ɵɵnextContext(); return ctx_r1113.onInput($event); })("click", function AutoCompleteCustomComponent_ul_2_Template_input_click_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1114 = ɵngcc0.ɵɵnextContext(); return ctx_r1114.onInputClick($event); })("keydown", function AutoCompleteCustomComponent_ul_2_Template_input_keydown_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1115 = ɵngcc0.ɵɵnextContext(); return ctx_r1115.onKeydown($event); })("keyup", function AutoCompleteCustomComponent_ul_2_Template_input_keyup_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1116 = ɵngcc0.ɵɵnextContext(); return ctx_r1116.onKeyup($event); })("focus", function AutoCompleteCustomComponent_ul_2_Template_input_focus_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1117 = ɵngcc0.ɵɵnextContext(); return ctx_r1117.onInputFocus($event); })("blur", function AutoCompleteCustomComponent_ul_2_Template_input_blur_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1118 = ɵngcc0.ɵɵnextContext(); return ctx_r1118.onInputBlur($event); })("change", function AutoCompleteCustomComponent_ul_2_Template_input_change_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1119 = ɵngcc0.ɵɵnextContext(); return ctx_r1119.onInputChange($event); })("paste", function AutoCompleteCustomComponent_ul_2_Template_input_paste_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r1112); const ctx_r1120 = ɵngcc0.ɵɵnextContext(); return ctx_r1120.onInputPaste($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1086 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(18, _c31, ctx_r1086.disabled, ctx_r1086.focus));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1086.value);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassMap(ctx_r1086.inputStyleClass);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1086.disabled)("readonly", ctx_r1086.readonly)("autocomplete", ctx_r1086.autocomplete)("ngStyle", ctx_r1086.inputStyle);
    ɵngcc0.ɵɵattribute("type", ctx_r1086.type)("id", ctx_r1086.inputId)("placeholder", ctx_r1086.value && ctx_r1086.value.length ? null : ctx_r1086.placeholder)("tabindex", ctx_r1086.tabindex)("autofocus", ctx_r1086.autofocus)("aria-label", ctx_r1086.ariaLabel)("aria-labelledby", ctx_r1086.ariaLabelledBy)("aria-required", ctx_r1086.required)("aria-expanded", ctx_r1086.overlayVisible)("aria-activedescendant", "p-highlighted-option");
} }
function AutoCompleteCustomComponent_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 21);
} }
function AutoCompleteCustomComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r1123 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22, 23);
    ɵngcc0.ɵɵlistener("click", function AutoCompleteCustomComponent_button_4_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1123); const ctx_r1122 = ɵngcc0.ɵɵnextContext(); return ctx_r1122.handleDropdownClick($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1088 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("icon", ctx_r1088.dropdownIcon)("disabled", ctx_r1088.disabled);
    ɵngcc0.ɵɵattribute("tabindex", ctx_r1088.tabindex);
} }
function AutoCompleteCustomComponent_div_5_ng_container_3_p_autoCompleteItem_1_Template(rf, ctx) { if (rf & 1) {
    const _r1133 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p-autoCompleteItem", 30);
    ɵngcc0.ɵɵlistener("highlightOptionChange", function AutoCompleteCustomComponent_div_5_ng_container_3_p_autoCompleteItem_1_Template_p_autoCompleteItem_highlightOptionChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1133); const ctx_r1132 = ɵngcc0.ɵɵnextContext(3); return ctx_r1132.highlightOption = $event; })("onClick", function AutoCompleteCustomComponent_div_5_ng_container_3_p_autoCompleteItem_1_Template_p_autoCompleteItem_onClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1133); const ctx_r1134 = ɵngcc0.ɵɵnextContext(3); return ctx_r1134.selectItem($event.option); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1130 = ctx.$implicit;
    const idx_r1131 = ctx.index;
    const ctx_r1129 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("option", option_r1130)("highlightOption", ctx_r1129.highlightOption)("index", idx_r1131)("itemSize", ctx_r1129.itemSize)("template", ctx_r1129.itemTemplate)("resolvedFieldData", ctx_r1129.resolveFieldData(option_r1130));
} }
function AutoCompleteCustomComponent_div_5_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, AutoCompleteCustomComponent_div_5_ng_container_3_p_autoCompleteItem_1_Template, 1, 6, "p-autoCompleteItem", 29);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1125 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1125.suggestions);
} }
function AutoCompleteCustomComponent_div_5_ng_template_4_cdk_virtual_scroll_viewport_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r1140 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "p-autoCompleteItem", 30);
    ɵngcc0.ɵɵlistener("highlightOptionChange", function AutoCompleteCustomComponent_div_5_ng_template_4_cdk_virtual_scroll_viewport_0_ng_container_1_Template_p_autoCompleteItem_highlightOptionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1140); const ctx_r1139 = ɵngcc0.ɵɵnextContext(4); return ctx_r1139.highlightOption = $event; })("onClick", function AutoCompleteCustomComponent_div_5_ng_template_4_cdk_virtual_scroll_viewport_0_ng_container_1_Template_p_autoCompleteItem_onClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1140); const ctx_r1141 = ɵngcc0.ɵɵnextContext(4); return ctx_r1141.selectItem($event.option); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r1137 = ctx.$implicit;
    const idx_r1138 = ctx.index;
    const ctx_r1136 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("option", option_r1137)("highlightOption", ctx_r1136.highlightOption)("index", idx_r1138)("itemSize", ctx_r1136.itemSize)("template", ctx_r1136.itemTemplate)("resolvedFieldData", ctx_r1136.resolveFieldData(option_r1137));
} }
const _c32 = function (a0) { return { height: a0 }; };
function AutoCompleteCustomComponent_div_5_ng_template_4_cdk_virtual_scroll_viewport_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "cdk-virtual-scroll-viewport", 32);
    ɵngcc0.ɵɵtemplate(1, AutoCompleteCustomComponent_div_5_ng_template_4_cdk_virtual_scroll_viewport_0_ng_container_1_Template, 2, 6, "ng-container", 33);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1135 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(3, _c32, ctx_r1135.scrollHeight))("itemSize", ctx_r1135.itemSize);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("cdkVirtualForOf", ctx_r1135.suggestions);
} }
function AutoCompleteCustomComponent_div_5_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AutoCompleteCustomComponent_div_5_ng_template_4_cdk_virtual_scroll_viewport_0_Template, 2, 5, "cdk-virtual-scroll-viewport", 31);
} if (rf & 2) {
    const ctx_r1127 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1127.virtualScroll && ctx_r1127.suggestions && ctx_r1127.suggestions.length);
} }
function AutoCompleteCustomComponent_div_5_li_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 34);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1128 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1128.emptyMessage);
} }
const _c33 = function () { return ["ui-autocomplete-panel ui-widget ui-widget-content ui-corner-all ui-shadow"]; };
const _c34 = function (a0, a1) { return { showTransitionParams: a0, hideTransitionParams: a1 }; };
const _c35 = function (a1) { return { value: "visible", params: a1 }; };
function AutoCompleteCustomComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r1143 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 0, 24);
    ɵngcc0.ɵɵlistener("@overlayAnimation.start", function AutoCompleteCustomComponent_div_5_Template_div_animation_overlayAnimation_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1143); const ctx_r1142 = ɵngcc0.ɵɵnextContext(); return ctx_r1142.onOverlayAnimationStart($event); })("@overlayAnimation.done", function AutoCompleteCustomComponent_div_5_Template_div_animation_overlayAnimation_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1143); const ctx_r1144 = ɵngcc0.ɵɵnextContext(); return ctx_r1144.onOverlayAnimationDone($event); });
    ɵngcc0.ɵɵelementStart(2, "ul", 25);
    ɵngcc0.ɵɵtemplate(3, AutoCompleteCustomComponent_div_5_ng_container_3_Template, 2, 1, "ng-container", 26);
    ɵngcc0.ɵɵtemplate(4, AutoCompleteCustomComponent_div_5_ng_template_4_Template, 1, 1, "ng-template", null, 27, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(6, AutoCompleteCustomComponent_div_5_li_6_Template, 2, 1, "li", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r1126 = ɵngcc0.ɵɵreference(5);
    const ctx_r1089 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r1089.panelStyleClass);
    ɵngcc0.ɵɵstyleProp("max-height", ctx_r1089.virtualScroll ? "auto" : ctx_r1089.scrollHeight || "auto");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction0(10, _c33))("ngStyle", ctx_r1089.panelStyle)("@overlayAnimation", ɵngcc0.ɵɵpureFunction1(14, _c35, ɵngcc0.ɵɵpureFunction2(11, _c34, ctx_r1089.showTransitionOptions, ctx_r1089.hideTransitionOptions)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1089.virtualScroll)("ngIfElse", _r1126);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1089.noResults && ctx_r1089.emptyMessage);
} }
const _c36 = function (a1, a2) { return { "ui-autocomplete ui-widget": true, "ui-autocomplete-dd": a1, "ui-autocomplete-multiple": a2 }; };
function AutoCompleteItem_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1145 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1145.resolvedFieldData);
} }
function AutoCompleteItem_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c37 = function (a1) { return { "ui-autocomplete-list-item ui-corner-all": true, "ui-state-highlight": a1 }; };
const _c38 = function (a0) { return { "height": a0, "display": "table", "width": "100%" }; };
const _c39 = function (a0, a1) { return { $implicit: a0, index: a1 }; };
const _c40 = ["nAutoCompleteMultiple", ""];
function AutoCompleteMultipleComponent_nValidationMessage_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "nValidationMessage", 6);
} if (rf & 2) {
    const ctx_r1149 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("control", ctx_r1149.formControl);
} }
function BreadcrumbComponent_ng_template_8_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1151 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("routerLink", item_r1151.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r1151.label);
} }
function BreadcrumbComponent_ng_template_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r1151 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r1151.label);
} }
function BreadcrumbComponent_ng_template_8_li_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵtext(1, "/");
    ɵngcc0.ɵɵelementEnd();
} }
function BreadcrumbComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵtemplate(1, BreadcrumbComponent_ng_template_8_a_1_Template, 2, 2, "a", 8);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_ng_template_8_ng_container_2_Template, 2, 1, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, BreadcrumbComponent_ng_template_8_li_3_Template, 2, 0, "li", 9);
} if (rf & 2) {
    const item_r1151 = ctx.$implicit;
    const last_r1152 = ctx.last;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r1151.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !item_r1151.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !last_r1152);
} }
const _c41 = function () { return { "cursor": "pointer" }; };
const _c42 = ["submenu", ""];
function SubMenuComponent_ng_template_0_li_0_a_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const child_r1159 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(child_r1159.icon);
} }
function SubMenuComponent_ng_template_0_li_0_a_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const child_r1159 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(child_r1159.badge);
} }
function SubMenuComponent_ng_template_0_li_0_a_1_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 15);
    ɵngcc0.ɵɵtext(1, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
} }
function SubMenuComponent_ng_template_0_li_0_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r1171 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 9);
    ɵngcc0.ɵɵlistener("click", function SubMenuComponent_ng_template_0_li_0_a_1_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1171); const ctx_r1172 = ɵngcc0.ɵɵnextContext(2); const child_r1159 = ctx_r1172.$implicit; const i_r1160 = ctx_r1172.index; const ctx_r1170 = ɵngcc0.ɵɵnextContext(); return ctx_r1170.itemClick($event, child_r1159, i_r1160); })("mouseenter", function SubMenuComponent_ng_template_0_li_0_a_1_Template_a_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r1171); const i_r1160 = ɵngcc0.ɵɵnextContext(2).index; const ctx_r1173 = ɵngcc0.ɵɵnextContext(); return ctx_r1173.onMouseEnter(i_r1160); });
    ɵngcc0.ɵɵtemplate(1, SubMenuComponent_ng_template_0_li_0_a_1_i_1_Template, 2, 1, "i", 10);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, SubMenuComponent_ng_template_0_li_0_a_1_span_4_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵtemplate(5, SubMenuComponent_ng_template_0_li_0_a_1_i_5_Template, 2, 0, "i", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const child_r1159 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r1162 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("href", child_r1159.url || "#", ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵattribute("tabindex", !ctx_r1162.visible ? "-1" : null)("target", child_r1159.target);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(child_r1159.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.badge);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.items);
} }
function SubMenuComponent_ng_template_0_li_0_a_2_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const child_r1159 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(child_r1159.icon);
} }
function SubMenuComponent_ng_template_0_li_0_a_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const child_r1159 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(child_r1159.badge);
} }
function SubMenuComponent_ng_template_0_li_0_a_2_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 15);
    ɵngcc0.ɵɵtext(1, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
} }
const _c43 = function () { return { exact: true }; };
function SubMenuComponent_ng_template_0_li_0_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r1182 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 16);
    ɵngcc0.ɵɵlistener("click", function SubMenuComponent_ng_template_0_li_0_a_2_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r1182); const ctx_r1183 = ɵngcc0.ɵɵnextContext(2); const child_r1159 = ctx_r1183.$implicit; const i_r1160 = ctx_r1183.index; const ctx_r1181 = ɵngcc0.ɵɵnextContext(); return ctx_r1181.itemClick($event, child_r1159, i_r1160); })("mouseenter", function SubMenuComponent_ng_template_0_li_0_a_2_Template_a_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r1182); const i_r1160 = ɵngcc0.ɵɵnextContext(2).index; const ctx_r1184 = ɵngcc0.ɵɵnextContext(); return ctx_r1184.onMouseEnter(i_r1160); });
    ɵngcc0.ɵɵtemplate(1, SubMenuComponent_ng_template_0_li_0_a_2_i_1_Template, 2, 1, "i", 10);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, SubMenuComponent_ng_template_0_li_0_a_2_span_4_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵtemplate(5, SubMenuComponent_ng_template_0_li_0_a_2_i_5_Template, 2, 0, "i", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const child_r1159 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r1163 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("routerLink", child_r1159.routerLink)("routerLinkActiveOptions", ɵngcc0.ɵɵpureFunction0(8, _c43));
    ɵngcc0.ɵɵattribute("tabindex", !ctx_r1163.visible ? "-1" : null)("target", child_r1159.target);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(child_r1159.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.badge);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.items);
} }
function SubMenuComponent_ng_template_0_li_0_ul_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ul", 17);
} if (rf & 2) {
    const ctx_r1187 = ɵngcc0.ɵɵnextContext(2);
    const child_r1159 = ctx_r1187.$implicit;
    const i_r1160 = ctx_r1187.index;
    const ctx_r1164 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("item", child_r1159)("visible", ctx_r1164.isActive(i_r1160))("reset", ctx_r1164.reset)("parentActive", ctx_r1164.isActive(i_r1160))("@children", (ctx_r1164.menuService.isSlim() || ctx_r1164.menuService.isHorizontal()) && ctx_r1164.root ? ctx_r1164.isActive(i_r1160) ? "visible" : "hidden" : ctx_r1164.isActive(i_r1160) ? "visibleAnimated" : "hiddenAnimated");
} }
const _c44 = function (a0) { return { "active-menuitem": a0 }; };
function SubMenuComponent_ng_template_0_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 2);
    ɵngcc0.ɵɵtemplate(1, SubMenuComponent_ng_template_0_li_0_a_1_Template, 6, 7, "a", 3);
    ɵngcc0.ɵɵtemplate(2, SubMenuComponent_ng_template_0_li_0_a_2_Template, 6, 9, "a", 4);
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵelement(4, "div", 6);
    ɵngcc0.ɵɵelementStart(5, "div", 7);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, SubMenuComponent_ng_template_0_li_0_ul_7_Template, 1, 5, "ul", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1188 = ɵngcc0.ɵɵnextContext();
    const child_r1159 = ctx_r1188.$implicit;
    const i_r1160 = ctx_r1188.index;
    const ctx_r1161 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(child_r1159.badgeStyleClass);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c44, ctx_r1161.isActive(i_r1160)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !child_r1159.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.routerLink);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(child_r1159.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.items);
} }
function SubMenuComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, SubMenuComponent_ng_template_0_li_0_Template, 8, 9, "li", 1);
} if (rf & 2) {
    const child_r1159 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", child_r1159.visible === false ? false : true);
} }
let DatatableService = class DatatableService {
    /**
     * constructor method
     * @constructor
     * @param {HttpClient} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * search method
     * @param {LazyLoadEvent} event
     * @param {String} url
     * @param {number} rows
     * @param {boolean} orderInSort
     * @param {any} query
     * @return Observable
     */
    search(event, url, rows, orderInSort, query) {
        let page = 0;
        if (event !== undefined && event.first > 0) {
            page = Math.floor(event.first / rows);
        }
        let order = event.sortOrder === 1 ? 'asc' : 'desc';
        let params = new HttpParams()
            .set('page', page.toString())
            .set('size', rows.toString());
        if (orderInSort) {
            if (event.sortField !== undefined) {
                params = params.set('sort', event.sortField + ',' + order);
            }
        }
        else {
            if (event.sortField !== undefined) {
                params = params
                    .set('sort', event.sortField)
                    .set('order', order);
            }
        }
        if ('string' === typeof query) {
            params = params.set('query', query);
        }
        if ('object' === typeof query) {
            Object.keys(query).forEach(key => params = params.set(key, query[key]));
        }
        return this.http.get(`${url}?${params.toString()}`, { observe: 'response' });
    }
};
DatatableService.ɵfac = function DatatableService_Factory(t) { return new (t || DatatableService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
DatatableService.ctorParameters = () => [
    { type: HttpClient }
];
DatatableService.ɵprov = ɵɵdefineInjectable({ factory: function DatatableService_Factory() { return new DatatableService(ɵɵinject(HttpClient)); }, token: DatatableService, providedIn: "root" });

/**
 * Class ServerDataProvider
 * @class
 */
class ServerDataProvider {
    /**
     * constructor method
     * @constructor
     * @param {DatatableService} datatableService
     * @param {DatatableComponent} component
     */
    constructor(datatableService, component) {
        this.datatableService = datatableService;
        this.component = component;
        this.component.pDatatableComponent.onLazyLoad.subscribe((event) => this.onLazyLoad(event));
        this.component.pDatatableComponent.lazy = true;
    }
    /**
     * onLazyLoad method
     * @param {LazyLoadEvent} onLazyLoad
     * @returns void
     */
    onLazyLoad(event) {
        this.currentLazyLoadEvent = event;
        this.load();
    }
    /**
     * load method
     * @param {any} query
     * @returns void
     */
    load(query) {
        query = this.retrieveAndSaveQuery(query);
        this.component.startedLoading.emit();
        this.datatableService.search(this.currentLazyLoadEvent, this.component.url, this.component.pDatatableComponent.rows, this.component.orderInSort, query)
            .toPromise()
            .then((response) => {
            this.treatLoadResponse(response);
            this.component.finishedLoading.emit();
        }, (error) => {
            this.component.finishedLoading.emit(error);
        });
    }
    /**
     * treatLoadResponse method
     * @param {any} response
     * @return void
     */
    treatLoadResponse(response) {
        const data = response.body;
        if (this.component.paginationParameters) {
            this.treatLoadResponseWithPaginationParameters(data);
        }
        else {
            this.treatLoadResponseWithoutPaginationParameters(response, data);
        }
    }
    /**
     * treatLoadResponseWithPaginationParameters method
     * @param {any} data
     * @returns void
     */
    treatLoadResponseWithPaginationParameters(data) {
        let contentIndex = this.component.paginationParameters.contentIndex;
        let totalIndex = this.component.paginationParameters.totalElementsIndex;
        this.component.value = (data[contentIndex]) ? data[contentIndex] : data;
        this.component.pDatatableComponent.totalRecords = (data[totalIndex]) ? data[totalIndex] : this.component.value.length;
    }
    /**
     * treatLoadResponseWithoutPaginationParameters method
     * @param {any} response
     * @param {any} data
     * @returns void
     */
    treatLoadResponseWithoutPaginationParameters(response, data) {
        if (response.headers.has('x-total-count')) {
            this.component.pDatatableComponent.totalRecords = parseInt(response.headers.get('x-total-count'), 10);
            this.component.value = data;
        }
        else {
            this.component.pDatatableComponent.totalRecords = data.totalElements;
            this.component.value = data.content;
        }
    }
    /**
     * retrieveAndSaveQuery method
     * @param {any} query
     * @returns any
     */
    retrieveAndSaveQuery(query) {
        const oldQuery = this._query;
        const currentQuery = this.doRetrieveAndSaveQuery(query);
        this.resetToFirstPageIfQueryChanged(oldQuery, currentQuery);
        return currentQuery;
    }
    /**
     * doRetrieveAndSaveQuery method
     * @param {any} query
     * @returns any
     */
    doRetrieveAndSaveQuery(query) {
        if ('object' === typeof query && query.value) {
            this._query = query.value;
        }
        else if (query) {
            this._query = query;
        }
        return this._query;
    }
    /**
     * resetToFirstPageIfQueryChanged method
     * @param {any} oldQuery
     * @param {any} currentQuery
     * @returns void
     */
    resetToFirstPageIfQueryChanged(oldQuery, currentQuery) {
        if (oldQuery !== currentQuery) {
            this.currentLazyLoadEvent.first = 0;
            this.component.pDatatableComponent.first = 0;
        }
    }
    /**
     * reset method
     * @returns void
     */
    reset() {
        this._query = undefined;
    }
}

/**
 * Class MemoryDataProvider
 * @class
 */
class MemoryDataProvider {
    /**
     * constructor method
     * @param {DatatableComponent} component
     * @constructor
     */
    constructor(component) {
        this.component = component;
    }
    /**
     * load method
     * @param {any} query
     * @returns void
     */
    load(query) {
        this.component.pDatatableComponent.reset();
        for (let prop in query) {
            let matchMode = 'contains';
            if (query[prop] instanceof Array) {
                matchMode = 'in';
            }
            this.component.pDatatableComponent.filter(query[prop], prop, matchMode);
        }
        this.component.pDatatableComponent.globalFilterFields = query;
        this.component.pDatatableComponent._filter();
    }
    /**
     * reset method
     * @returns void
     */
    reset() {
        this.component.pDatatableComponent.globalFilterFields = undefined;
    }
}

/**
 * Enum DataProviderType
 * @enum
 */
var DataProviderType;
(function (DataProviderType) {
    DataProviderType["Memory"] = "memory";
    DataProviderType["Server"] = "server";
})(DataProviderType || (DataProviderType = {}));
/**
 * Class DataProviderFactory
 * @class
 */
let DataProviderFactory = class DataProviderFactory {
    /**
     * constructor method
     * @constructor
     * @param {DatatableService} datatableService
     */
    constructor(datatableService) {
        this.datatableService = datatableService;
    }
    /**
     * create method
     * @param {DataProviderType} type
     * @param {DatatableComponent} component
     * @public
     * @returns DataProvider
     */
    create(type, component) {
        if (DataProviderType.Server === type) {
            return new ServerDataProvider(this.datatableService, component);
        }
        if (DataProviderType.Memory === type) {
            return new MemoryDataProvider(component);
        }
    }
};
DataProviderFactory.ɵfac = function DataProviderFactory_Factory(t) { return new (t || DataProviderFactory)(ɵngcc0.ɵɵinject(DatatableService)); };
DataProviderFactory.ctorParameters = () => [
    { type: DatatableService }
];
DataProviderFactory.ɵprov = ɵɵdefineInjectable({ factory: function DataProviderFactory_Factory() { return new DataProviderFactory(ɵɵinject(DatatableService)); }, token: DataProviderFactory, providedIn: "root" });

/**
 * Class DatatableButtonComponent
 * @class
 */
let DatatableButtonComponent = class DatatableButtonComponent {
    constructor() {
        /**
         * allowMultipleSelection property
         * @type {boolean}
         */
        this.allowMultipleSelection = true;
        /**
         * disabled property
         * @type boolean
         */
        this.disabled = false;
        /**
         * click property
         * @type {EventEmitter<any>}
         */
        this.click = new EventEmitter();
    }
    /**
     * onClick method
     * @param {any} event
     * @return void
     */
    onClick(event) {
        this.click.emit(event);
        event.stopPropagation();
    }
};
DatatableButtonComponent.ɵfac = function DatatableButtonComponent_Factory(t) { return new (t || DatatableButtonComponent)(); };
DatatableButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatatableButtonComponent, selectors: [["basis-datatable-button"]], inputs: { allowMultipleSelection: "allowMultipleSelection", disabled: "disabled", icon: "icon", class: "class", bTooltip: "bTooltip", name: "name" }, outputs: { click: "click" }, decls: 2, vars: 6, consts: [[3, "pTooltip"], ["type", "button", "tooltipPosition", "bottom", "pButton", "", 3, "icon", "disabled", "click"]], template: function DatatableButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function DatatableButtonComponent_Template_button_click_1_listener($event) { return ctx.onClick($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("pTooltip", ctx.bTooltip);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMap(ctx.class);
        ɵngcc0.ɵɵpropertyInterpolate1("icon", "ui-icon-", ctx.icon, "");
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled);
    } }, directives: [ɵngcc2.Tooltip, ɵngcc2.ButtonDirective], encapsulation: 2 });
__decorate([
    Input()
], DatatableButtonComponent.prototype, "icon", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "class", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "bTooltip", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "name", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "allowMultipleSelection", void 0);
__decorate([
    Input()
], DatatableButtonComponent.prototype, "disabled", void 0);
__decorate([
    Output()
], DatatableButtonComponent.prototype, "click", void 0);

/**
 * Class DatatableClickEvent
 * @class
 */
class DatatableClickEvent {
    /**
     * constructor method
     * @constructor
     * @param {string} button
     * @param {any} selection
     */
    constructor(button, selection) {
        this.button = button;
        this.selection = selection;
    }
}

let Column = class Column {
    constructor() {
        this.filterType = 'text';
        this.exportable = true;
        this.resizable = true;
        this.sortFunction = new EventEmitter();
    }
    ngAfterContentInit() {
        this.templates.forEach((item) => {
            switch (item.getType()) {
                case 'header':
                    this.headerTemplate = item.template;
                    break;
                case 'body':
                    this.bodyTemplate = item.template;
                    break;
                case 'footer':
                    this.footerTemplate = item.template;
                    break;
                case 'filter':
                    this.filterTemplate = item.template;
                    break;
                case 'editor':
                    this.editorTemplate = item.template;
                    break;
                case 'input':
                    this.inputTemplate = item.template;
                    break;
                case 'output':
                    this.outputTemplate = item.template;
                    break;
                default:
                    this.bodyTemplate = item.template;
                    break;
            }
        });
    }
};
Column.ɵfac = function Column_Factory(t) { return new (t || Column)(); };
Column.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Column, selectors: [["p-column"]], contentQueries: function Column_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);
    } }, inputs: { filterType: "filterType", exportable: "exportable", resizable: "resizable", field: "field", colId: "colId", sortField: "sortField", filterField: "filterField", header: "header", footer: "footer", sortable: "sortable", editable: "editable", filter: "filter", filterMatchMode: "filterMatchMode", excludeGlobalFilter: "excludeGlobalFilter", rowspan: "rowspan", colspan: "colspan", scope: "scope", style: "style", styleClass: "styleClass", headerStyle: "headerStyle", headerStyleClass: "headerStyleClass", bodyStyle: "bodyStyle", bodyStyleClass: "bodyStyleClass", footerStyle: "footerStyle", footerStyleClass: "footerStyleClass", hidden: "hidden", expander: "expander", selectionMode: "selectionMode", filterPlaceholder: "filterPlaceholder", filterMaxlength: "filterMaxlength", frozen: "frozen" }, outputs: { sortFunction: "sortFunction" } });
__decorate([
    Input()
], Column.prototype, "field", void 0);
__decorate([
    Input()
], Column.prototype, "colId", void 0);
__decorate([
    Input()
], Column.prototype, "sortField", void 0);
__decorate([
    Input()
], Column.prototype, "filterField", void 0);
__decorate([
    Input()
], Column.prototype, "header", void 0);
__decorate([
    Input()
], Column.prototype, "footer", void 0);
__decorate([
    Input()
], Column.prototype, "sortable", void 0);
__decorate([
    Input()
], Column.prototype, "editable", void 0);
__decorate([
    Input()
], Column.prototype, "filter", void 0);
__decorate([
    Input()
], Column.prototype, "filterMatchMode", void 0);
__decorate([
    Input()
], Column.prototype, "filterType", void 0);
__decorate([
    Input()
], Column.prototype, "excludeGlobalFilter", void 0);
__decorate([
    Input()
], Column.prototype, "rowspan", void 0);
__decorate([
    Input()
], Column.prototype, "colspan", void 0);
__decorate([
    Input()
], Column.prototype, "scope", void 0);
__decorate([
    Input()
], Column.prototype, "style", void 0);
__decorate([
    Input()
], Column.prototype, "styleClass", void 0);
__decorate([
    Input()
], Column.prototype, "exportable", void 0);
__decorate([
    Input()
], Column.prototype, "headerStyle", void 0);
__decorate([
    Input()
], Column.prototype, "headerStyleClass", void 0);
__decorate([
    Input()
], Column.prototype, "bodyStyle", void 0);
__decorate([
    Input()
], Column.prototype, "bodyStyleClass", void 0);
__decorate([
    Input()
], Column.prototype, "footerStyle", void 0);
__decorate([
    Input()
], Column.prototype, "footerStyleClass", void 0);
__decorate([
    Input()
], Column.prototype, "hidden", void 0);
__decorate([
    Input()
], Column.prototype, "expander", void 0);
__decorate([
    Input()
], Column.prototype, "selectionMode", void 0);
__decorate([
    Input()
], Column.prototype, "filterPlaceholder", void 0);
__decorate([
    Input()
], Column.prototype, "filterMaxlength", void 0);
__decorate([
    Input()
], Column.prototype, "frozen", void 0);
__decorate([
    Input()
], Column.prototype, "resizable", void 0);
__decorate([
    Output()
], Column.prototype, "sortFunction", void 0);
__decorate([
    ContentChildren(PrimeTemplate)
], Column.prototype, "templates", void 0);
__decorate([
    ContentChild(TemplateRef)
], Column.prototype, "template", void 0);

/**
 * Class DatatableComponent
 * @class
 */
let DatatableComponent = class DatatableComponent {
    /**
     * constructor method
     * @constructor
     * @param {ChangeDetectorRef} changeDetectorRef
     * @param {DataProviderFactory} dataProviderFactory
     * @param {Authorization} authorizationService
     */
    constructor(changeDetectorRef, dataProviderFactory, authorizationService) {
        this.changeDetectorRef = changeDetectorRef;
        this.dataProviderFactory = dataProviderFactory;
        this.authorizationService = authorizationService;
        /**
         * filterParams property
         * @type {any}
         */
        this.filterParams = {};
        /**
         * footerMsg property
         * @type {string}
         */
        this.footerMsg = '';
        /**
         * orderInSort property
         * @type {boolean}
         */
        this.orderInSort = false;
        /**
         * value property
         * @type {any}
         */
        this.value = [];
        /**
         * type property
         * @type DataProviderType
         */
        this.type = DataProviderType.Server;
        /**
         * rows property
         * @type {number}
         */
        this.rows = 5;
        /**
         * showPaginationFooter property
         * @type {boolean}
         */
        this.showPaginationFooter = false;
        /**
         * disableEdit property
         * @type {boolean}
         */
        this.disableEdit = false;
        /**
         * disableView property
         * @type {boolean}
         */
        this.disableView = false;
        /**
         * disableDelete property
         * @type {boolean}
         */
        this.disableDelete = false;
        /**
         * selectionMode property
         * @type {string}
         */
        this.selectionMode = 'single';
        /**
         * enableButtonsScroll property
         * @type {boolean}
         */
        this.enableButtonsScroll = false;
        /**
         * emptyMessage property
         * @type {string}
         */
        this.emptyMessage = 'Nenhum registro encontrado.';
        /**
         * verticalButtons property
         * @type {boolean}
         */
        this.verticalButtons = true;
        /**
         * enableScroll property
         * @type {boolean}
         */
        this.enableScroll = false;
        /**
         * disableLoadingBlockUI property
         * @type {boolean}
         */
        this.disableLoadingBlockUI = false;
        /**
         * filterOnColumn property
         */
        this.filterOnColumn = false;
        /**
         * filterSelectOptions property
         */
        this.filterSelectOptions = [];
        /**
         * updateFiltroHistorico property
         */
        this.updateFilterColumn = false;
        /**
         * customFilterOptions property
         */
        this.customFilterOptions = {};
        /**
         * buttonClick property
         * @type {EventEmitter<any>}
         */
        this.buttonClick = new EventEmitter();
        /**
         * startedLoading property
         * @type {EventEmitter<void>}
         */
        this.startedLoading = new EventEmitter();
        /**
         * finishedLoading property
         * @type {EventEmitter<HttpErrorResponse>}
         */
        this.finishedLoading = new EventEmitter();
        /**
         * onRowSelected property
         * @type {EventEmitter<any>}
         */
        this.onRowSelected = new EventEmitter();
        /**
         * showHorizontalButtonsHeader property
         * @type {boolean}
         */
        this.showHorizontalButtonsHeader = false;
        /**
         * blockContent
         * @type {boolean}
         */
        this.blockContent = false;
        /**
         * visibleColumns property
         * @type {Object}
         */
        this.visibleColumns = {};
        /**
         * showVisibleColumnsControl property
         * @type {boolean}
         */
        this.showVisibleColumnsControl = false;
        /**
         * dataKey property
         * Identificador único para cada registro da tabela
         * @type {string}
         */
        this.dataKey = 'id';
        /**
         * onRowEditEvent property
         * Evento disparado quando o usuário realiza ações de edição em uma linha da tabela
         * @type {EventEmitter<void>}
         */
        this.onRowEditEvent = new EventEmitter();
        this.clonedRowData = {};
        /**
         * errorMessage property
         * @type {string}
         */
        this.errorMessage = 'Ocorreu um erro ao carregar os dados da tabela. Tente novamente.';
        this.editingRow = false;
    }
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit() {
        this.dataProvider = this.dataProviderFactory.create(this.type, this);
        this.pDatatableComponent.rows = this.rows;
        this.subscribeToLoadingEvents();
        this.initRowsPerPageOptionsIfPresent();
        this.defineIfShouldShowHorizontalButtonsHeader();
        this.updateOnValueChange();
        this.finishedLoading.subscribe(() => {
            this.updateOnValueChange();
        });
    }
    /**
     * subscribeFromValueChange method
     * @returns void
     */
    updateOnValueChange() {
        this.filterSelectOptions = [];
        if (this.value) {
            this.value.map((item) => {
                this.filterSelectOptions.push(item);
            });
        }
    }
    /**
     * subscribeToLoadingEvents method
     * @returns void
     */
    subscribeToLoadingEvents() {
        if (!this.disableLoadingBlockUI) {
            this.originalEmptyMessage = this.emptyMessage;
            this.startedLoading.subscribe(() => this.onStartedLoading());
            this.finishedLoading.subscribe(error => this.onFinishedLoading(error));
        }
    }
    /**
     * onStartedLoading method
     * @returns void
     */
    onStartedLoading() {
        this.blockContent = true;
        this.emptyMessage = this.originalEmptyMessage;
    }
    /**
     * onFinishedLoading method
     * @param {HttpErrorResponse} error
     * @returns void
     */
    onFinishedLoading(error) {
        this.blockContent = false;
        if (error) {
            this.emptyMessage = this.errorMessage;
        }
    }
    /**
     * initRowsPerPageOptionsIfPresent method
     * @returns void
     */
    initRowsPerPageOptionsIfPresent() {
        if (this.rowsPerPageOptions) {
            this.pDatatableComponent.rowsPerPageOptions = this.rowsPerPageOptions;
        }
    }
    /**
     * defineIfShouldShowHorizontalButtonsHeader method
     * @returns void
     */
    defineIfShouldShowHorizontalButtonsHeader() {
        if (this.horizontalButtonsHeader) {
            this.showHorizontalButtonsHeader = true;
        }
    }
    /**
     * ngAfterViewInit method
     * @returns void
     */
    ngAfterViewInit() {
        this.setExtraParams();
        this.pDatatableComponent.columns = this.columns;
        this.pDatatableComponent.ngAfterContentInit();
        this.setAllColumnsVisible();
        this.changeDetectorRef.detectChanges();
    }
    /**
     * setExtraParams method
     * @returns void
     */
    setExtraParams() {
        for (let i in this.extraParams) {
            this.pDatatableComponent[i] = this.extraParams[i];
        }
    }
    /**
     * ngAfterContentInit method
     * @returns void
     */
    ngAfterContentInit() {
        this.extraButtons.forEach((button) => {
            button.click.subscribe(event => {
                this.onClick(button.name, event);
            });
        });
    }
    /**
     * onClick method
     * @param {string} button
     * @param {any} event
     * @return void
     */
    onClick(button, event) {
        this.buttonClick.emit(new DatatableClickEvent(button, this.selectedRow));
        event.stopPropagation();
        this.resetSelectedRow(button);
    }
    /**
     * onSelectChange method
     * @param {any} event
     * @returns void
     */
    onSelectChange(event) {
        this.onRowSelected.emit(this.selectedRow);
        if (Array.isArray(this.selectedRow) && this.selectedRow.length > 1) {
            this.updateMultipleButtonsStatus(true);
        }
        else {
            this.updateMultipleButtonsStatus(false);
        }
    }
    /**
     * updateMultipleButtonsStatus method
     * @param {boolean} hasMultipleSelection
     * @return void
     */
    updateMultipleButtonsStatus(hasMultipleSelection) {
        this.extraButtons.forEach((button) => {
            if (hasMultipleSelection && !button.allowMultipleSelection) {
                button.disabled = true;
            }
            else {
                button.disabled = false;
            }
        });
    }
    /**
     * refresh method
     * @param query
     * @returns void
     */
    refresh(query) {
        this.dataProvider.load(query);
    }
    /**
     * resetSelectedRow method
     * @param button
     * @returns void
     */
    resetSelectedRow(button) {
        if (button === 'delete') {
            this.selectedRow = null;
        }
    }
    /**
     * reset method
     * @returns void
     */
    reset() {
        this.pDatatableComponent.first = 0;
        this.dataProvider.reset();
        this.refresh();
    }
    /**
     * paginationFooterText method
     * @param {string} msg
     * @returns string
     */
    paginationFooterText(msg) {
        const registros = this.totalRecords() === 1 ? 'registro' : 'registros';
        if (msg === '') {
            return `Exibindo: ${this.currentFirstIndex()} a ${this.currentLastIndex()} de ${this.totalRecords()} ${registros}`;
        }
        msg = msg.replace('{totalRecords}', this.totalRecords().toString());
        msg = msg.replace('{currentFirstIndex}', this.currentFirstIndex().toString());
        msg = msg.replace('{currentLastIndex}', this.currentLastIndex().toString());
        return msg;
    }
    /**
     * currentFirstIndex method
     * @returns number
     */
    currentFirstIndex() {
        return this.pDatatableComponent.first + 1;
    }
    /**
     * currentLastIndex method
     * @returns number
     */
    currentLastIndex() {
        const currentLastIndex = this.pDatatableComponent.first + this.pDatatableComponent.rows;
        if (currentLastIndex > this.totalRecords()) {
            return this.totalRecords();
        }
        return currentLastIndex;
    }
    /**
     * totalRecords method
     * @returns number
     */
    totalRecords() {
        return this.pDatatableComponent.totalRecords;
    }
    /**
     * checkRolesToButton method
     * @param {string} button
     * @return boolean
     */
    checkRolesToButton(button) {
        if (this[button]) {
            if (button === 'rulesToHide' || button === 'rulesToShowEdit' || button === 'rulesToShowDelete') {
                this.checkUseButtons(button);
                return this.authorizationService.hasRole(this[button]);
            }
            return !this.authorizationService.hasRole(this[button]);
        }
        return true;
    }
    /**
     * checkUseButtons method
     * @param {string} button
     * @returns void
     */
    checkUseButtons(button) {
        if (this[button] && this[button.replace('Show', 'Hide')]) {
            throw new Error('Não é possível definir dois valores de roles para os botões padrões.');
        }
    }
    /**
     * filter method
     * @returns void
     */
    filter() {
        for (let prop in this.filterParams) {
            if (this.filterParams[prop] === '' || (this.filterParams[prop].length === 0)) {
                delete this.filterParams[prop];
            }
        }
        if (Object.getOwnPropertyNames(this.filterParams).length === 0) {
            this.reset();
        }
        else {
            this.refresh(this.filterParams);
        }
    }
    /**
     * Método para filtrar por colunas
     * @param column chave da coluna na tabela
     * @param filters valor do filtro
     */
    filterColumn(column, filters) {
        const values = [];
        if (filters instanceof Array) {
            values[column] = [];
            for (let item in filters) {
                let val = (filters[item] instanceof Object) ? filters[item].value : filters[item];
                values[column].push(val);
            }
        }
        else {
            values[column] = filters;
        }
        this.filterParams = Object.assign(Object.assign({}, this.filterParams), values);
        return this.filter();
    }
    /**
     * Inicia todas as colunas da tabela como visíveis
     */
    setAllColumnsVisible() {
        this.columns.forEach((col) => {
            this.visibleColumns[col.field] = 'table-cell';
        });
    }
    /**
     * Verifica se uma coluna deve estar visível
     * @param column string
     * @param visibleColumns Array
     */
    visibleColumnCheck(column, visibleColumns) {
        return visibleColumns.some((item) => {
            return (item.field) ? item.field == column : true;
        });
    }
    /**
     * Atualzia os valores da variável 'visibleColuns' para mostrar ou não as colunas
     * @param columns array
     */
    updateVisibleColumns(columns) {
        for (let col in this.visibleColumns) {
            if (this.visibleColumnCheck(col, columns)) {
                this.visibleColumns[col] = 'table-cell';
            }
            else {
                this.visibleColumns[col] = 'none';
            }
        }
    }
    onRowEditInitEvent(event, rowData) {
        const tr = event.srcElement.closest('tr');
        setTimeout(() => {
            this.editingRow = true;
            const top = tr.offsetTop;
            const height = tr.offsetHeight;
            const editButtons = tr.querySelector('.editar-campos');
            editButtons.style.top = (top + height - 75) + 'px';
            editButtons.style.height = '75px';
            editButtons.style.backgroundColor = '#d0d0d0';
            editButtons.style.opacity = 1;
            this.clonedRowData[rowData.id] = Object.assign({}, rowData);
            this.onRowEditEvent.emit({ event: "init", data: rowData });
        }, null, tr);
    }
    onRowEditSaveEvent(event, rowData) {
        this.onRowEditEvent.emit({ event: "save", data: rowData });
        this.resetEditingMode(event);
    }
    onRowEditCancelEvent(event, rowData, index) {
        this.value[index] = this.clonedRowData[rowData.id];
        delete this.clonedRowData[rowData[this.dataKey]];
        this.onRowEditEvent.emit({ event: "cancel", data: rowData });
        this.resetEditingMode(event);
    }
    resetEditingMode(event) {
        const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
        editButtons.style.opacity = 0;
        editButtons.style.backgroundColor = '#0000006b';
        editButtons.style.display = 'none';
        this.editingRow = false;
    }
    editarLinhaOver(event) {
        if (!this.editingRow && this.editMode == 'row') {
            const top = event.srcElement.closest('tr').offsetTop;
            const height = event.srcElement.closest('tr').offsetHeight;
            const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
            editButtons.style.display = 'flex';
            editButtons.style.top = top + 'px';
            editButtons.style.height = height + 'px';
            editButtons.style.backgroundColor = '#0000006b';
            editButtons.style.opacity = 1;
        }
    }
    editarLinhaOut(event) {
        if (!this.editingRow) {
            const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');
            editButtons.style.display = 'none';
            editButtons.style.opacity = 0;
        }
    }
};
DatatableComponent.ɵfac = function DatatableComponent_Factory(t) { return new (t || DatatableComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DataProviderFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Authorization)); };
DatatableComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatatableComponent, selectors: [["basis-datatable"]], contentQueries: function DatatableComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableButtonComponent, false);
        ɵngcc0.ɵɵcontentQuery(dirIndex, Column, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.extraButtons = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);
    } }, viewQuery: function DatatableComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(Table, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pDatatableComponent = _t.first);
    } }, inputs: { value: "value", type: "type", rows: "rows", showPaginationFooter: "showPaginationFooter", disableEdit: "disableEdit", disableView: "disableView", disableDelete: "disableDelete", selectionMode: "selectionMode", enableButtonsScroll: "enableButtonsScroll", emptyMessage: "emptyMessage", verticalButtons: "verticalButtons", enableScroll: "enableScroll", disableLoadingBlockUI: "disableLoadingBlockUI", filterOnColumn: "filterOnColumn", customFilterOptions: "customFilterOptions", showVisibleColumnsControl: "showVisibleColumnsControl", dataKey: "dataKey", splitButton: "splitButton", rowsPerPageOptions: "rowsPerPageOptions", url: "url", extraParams: "extraParams", paginationParameters: "paginationParameters", scrollHeight: "scrollHeight", scrollWidth: "scrollWidth", rulesToHide: "rulesToHide", rulesToShowEdit: "rulesToShowEdit", rulesToShowDelete: "rulesToShowDelete", rulesToHideView: "rulesToHideView", rulesToHideEdit: "rulesToHideEdit", rulesToHideDelete: "rulesToHideDelete", rowStyleClass: "rowStyleClass", editMode: "editMode" }, outputs: { buttonClick: "buttonClick", startedLoading: "startedLoading", finishedLoading: "finishedLoading", onRowSelected: "onRowSelected", onRowEditEvent: "onRowEditEvent" }, ngContentSelectors: _c9, decls: 17, vars: 26, consts: [[3, "blocked"], [1, "center-spinner"], [3, "ngClass"], [3, "columns", "updateVisibleColumns", 4, "ngIf"], [3, "value", "rows", "paginator", "selectionMode", "responsive", "scrollable", "scrollHeight", "selection", "editMode", "dataKey", "selectionChange", "onRowSelect", "onRowUnselect"], ["datatable", ""], ["pTemplate", "header"], ["pTemplate", "body"], [4, "ngIf"], ["class", "ui-g-1 ui-g-nopad", 3, "position", "top", 4, "ngIf"], ["defaultButtons", ""], [3, "columns", "updateVisibleColumns"], ["class", "ui-g", 4, "ngIf"], [3, "pSortableColumn", "ngStyle", 4, "ngFor", "ngForOf"], [1, "ui-g"], ["class", "ui-g-4 ui-sm-12", 4, "ngIf"], [4, "ngTemplateOutlet"], [1, "ui-g-4", "ui-sm-12"], [1, "horizontal-buttons-header"], [3, "pSortableColumn", "ngStyle"], [3, "field", 4, "ngIf"], [3, "field"], [3, "ngStyle", 4, "ngFor", "ngForOf"], [3, "ngStyle"], [3, "listaOriginal", "lista", "field", "updateFiltro", "filterType", "tableType", "customFilterOptions", "outputEvent"], [3, "pSelectableRow", "pContextMenuRow", "pEditableRow", "ngClass", "mouseover", "mouseleave"], ["class", "editar-campos", 4, "ngIf"], [3, "innerHTML", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "innerHTML"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["pTemplate", "input"], ["pTemplate", "output"], ["class", "ui-md-12", 4, "ngIf"], [1, "ui-md-12"], [1, "ui-g", "form-group"], [1, "md-inputfield"], ["pInputText", "", "type", "text", 3, "ngModel", "ngModelChange"], [1, "editar-campos"], ["pButton", "", "type", "button", "pInitEditableRow", "", 3, "click", 4, "ngIf"], ["pButton", "", "type", "button", "pSaveEditableRow", "", "class", "ui-button-success", "style", "margin-right: .5em", 3, "click", 4, "ngIf"], ["pButton", "", "type", "button", "pCancelEditableRow", "", "class", "ui-button-danger", 3, "click", 4, "ngIf"], ["pButton", "", "type", "button", "pInitEditableRow", "", 3, "click"], ["pButton", "", "type", "button", "pSaveEditableRow", "", 1, "ui-button-success", 2, "margin-right", ".5em", 3, "click"], ["pButton", "", "type", "button", "pCancelEditableRow", "", 1, "ui-button-danger", 3, "click"], [1, "ui-g-1", "ui-g-nopad"], ["class", "ui-button-success", "icon", "edit", 3, "bTooltip", "horizontal-button", "disabled", "click", 4, "ngIf"], ["icon", "remove-red-eye", 3, "bTooltip", "horizontal-button", "disabled", "click", 4, "ngIf"], ["class", "ui-button-danger", "icon", "delete", 3, "bTooltip", "horizontal-button", "disabled", "click", 4, "ngIf"], [3, "icon", "class", "items", "label", "method", 4, "ngIf"], ["icon", "edit", 1, "ui-button-success", 3, "bTooltip", "disabled", "click"], ["icon", "remove-red-eye", 3, "bTooltip", "disabled", "click"], ["icon", "delete", 1, "ui-button-danger", 3, "bTooltip", "disabled", "click"], [3, "icon", "items", "label", "method"]], template: function DatatableComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c6);
        ɵngcc0.ɵɵelementStart(0, "p-blockUI", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "p-progressSpinner");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵtext(4, "\u00A0");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵtemplate(6, DatatableComponent_basis_show_column_6_Template, 1, 1, "basis-show-column", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 2);
        ɵngcc0.ɵɵelementStart(8, "p-table", 4, 5);
        ɵngcc0.ɵɵlistener("selectionChange", function DatatableComponent_Template_p_table_selectionChange_8_listener($event) { return ctx.selectedRow = $event; })("onRowSelect", function DatatableComponent_Template_p_table_onRowSelect_8_listener($event) { return ctx.onSelectChange($event); })("onRowUnselect", function DatatableComponent_Template_p_table_onRowUnselect_8_listener($event) { return ctx.onSelectChange($event); });
        ɵngcc0.ɵɵtemplate(10, DatatableComponent_ng_template_10_Template, 4, 3, "ng-template", 6);
        ɵngcc0.ɵɵtemplate(11, DatatableComponent_ng_template_11_Template, 2, 7, "ng-template", 7);
        ɵngcc0.ɵɵtemplate(12, DatatableComponent_12_Template, 1, 0, undefined, 8);
        ɵngcc0.ɵɵtemplate(13, DatatableComponent_p_footer_13_Template, 2, 1, "p-footer", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(14, DatatableComponent_div_14_Template, 3, 5, "div", 9);
        ɵngcc0.ɵɵtemplate(15, DatatableComponent_ng_template_15_Template, 4, 4, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("blocked", ctx.blockContent);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(18, _c7, ctx.verticalButtons, !ctx.verticalButtons));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ctx.verticalButtons ? "ui-g-11" : "ui-g-12");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showVisibleColumnsControl);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(21, _c8, ctx.verticalButtons, !ctx.verticalButtons, ctx.editMode == "row", ctx.editingRow));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.value)("rows", ctx.rows)("paginator", true)("selectionMode", ctx.selectionMode)("responsive", true)("scrollable", ctx.enableScroll)("scrollHeight", ctx.scrollHeight)("selection", ctx.selectedRow)("editMode", ctx.editMode)("dataKey", ctx.dataKey);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.emptyMessage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showPaginationFooter && ctx.totalRecords() > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.verticalButtons);
    } }, directives: function () { return [ɵngcc2.BlockUI, ɵngcc2.ProgressSpinner, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc5.Table, ɵngcc6.PrimeTemplate, ShowColumn, ɵngcc4.NgForOf, ɵngcc4.NgTemplateOutlet, ɵngcc5.SortableColumn, ɵngcc4.NgStyle, ɵngcc5.SortIcon, FilterColumn, ɵngcc5.SelectableRow, ɵngcc5.ContextMenuRow, ɵngcc5.EditableRow, ɵngcc5.CellEditor, ɵngcc7.DefaultValueAccessor, ɵngcc2.InputText, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc2.ButtonDirective, ɵngcc5.InitEditableRow, ɵngcc5.SaveEditableRow, ɵngcc5.CancelEditableRow, ɵngcc6.Footer, DatatableButtonComponent,
        DatatableSplitbuttonComponent]; }, styles: ["body .ui-datatable .ui-datatable-data tr td{word-wrap:break-word}.horizontal-buttons{display:flex;flex-flow:row wrap;justify-content:flex-end}.horizontal-button{padding:0 3px}.horizontal-buttons-header{font-size:1.3em;word-wrap:break-word}.center-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}.text-right{text-align:right}basis-show-column .ui-multiselect-panel.ui-widget{width:100%;max-width:100%}.edicao-tabela,.edita-linha{position:relative}tr.editing td{padding-bottom:75px!important}.editar-campos{opacity:0;position:absolute;width:100%;background-color:#0000006b;left:0;margin-top:0;display:flex;align-items:center;justify-content:center;min-height:35px;transition:.3s ease-in-out;z-index:1}.editar-campos button{color:#fff;font-size:14px;padding:6px 30px 10px;border-radius:5px;height:28px;width:120px!important}.bt-cancelar,.bt-salvar{margin:0 10px}"], encapsulation: 2 });
DatatableComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DataProviderFactory },
    { type: Authorization }
];
__decorate([
    Input()
], DatatableComponent.prototype, "splitButton", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "value", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "type", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rows", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rowsPerPageOptions", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "url", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "extraParams", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "paginationParameters", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "showPaginationFooter", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableEdit", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableView", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableDelete", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "selectionMode", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "enableButtonsScroll", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "emptyMessage", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "verticalButtons", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "enableScroll", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "scrollHeight", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "scrollWidth", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHide", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToShowEdit", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToShowDelete", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHideView", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHideEdit", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rulesToHideDelete", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "disableLoadingBlockUI", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "rowStyleClass", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "filterOnColumn", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "customFilterOptions", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "buttonClick", void 0);
__decorate([
    ViewChild(Table, { static: true })
], DatatableComponent.prototype, "pDatatableComponent", void 0);
__decorate([
    ContentChildren(DatatableButtonComponent)
], DatatableComponent.prototype, "extraButtons", void 0);
__decorate([
    ContentChildren(Column)
], DatatableComponent.prototype, "columns", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "startedLoading", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "finishedLoading", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "onRowSelected", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "showVisibleColumnsControl", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "editMode", void 0);
__decorate([
    Input()
], DatatableComponent.prototype, "dataKey", void 0);
__decorate([
    Output()
], DatatableComponent.prototype, "onRowEditEvent", void 0);

/**
 * Class DatatableSplitbuttonComponent
 * @class
 */
let DatatableSplitbuttonComponent = class DatatableSplitbuttonComponent {
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit() {
    }
};
DatatableSplitbuttonComponent.ɵfac = function DatatableSplitbuttonComponent_Factory(t) { return new (t || DatatableSplitbuttonComponent)(); };
DatatableSplitbuttonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatatableSplitbuttonComponent, selectors: [["datatable-splitbutton"]], inputs: { items: "items", label: "label", class: "class", icon: "icon", method: "method" }, decls: 1, vars: 4, consts: [[3, "label", "icon", "model", "styleClass", "onClick"]], template: function DatatableSplitbuttonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p-splitButton", 0);
        ɵngcc0.ɵɵlistener("onClick", function DatatableSplitbuttonComponent_Template_p_splitButton_onClick_0_listener() { return ctx.method; });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("label", ctx.label);
        ɵngcc0.ɵɵpropertyInterpolate("icon", ctx.icon);
        ɵngcc0.ɵɵpropertyInterpolate("styleClass", ctx.class);
        ɵngcc0.ɵɵproperty("model", ctx.items);
    } }, directives: [ɵngcc2.SplitButton], encapsulation: 2 });
__decorate([
    Input()
], DatatableSplitbuttonComponent.prototype, "items", void 0);
__decorate([
    Input()
], DatatableSplitbuttonComponent.prototype, "label", void 0);
__decorate([
    Input()
], DatatableSplitbuttonComponent.prototype, "class", void 0);
__decorate([
    Input()
], DatatableSplitbuttonComponent.prototype, "icon", void 0);
__decorate([
    Input()
], DatatableSplitbuttonComponent.prototype, "method", void 0);

/**
 * Class DatatableSplitbuttonModule
 * @class
 */
let DatatableSplitbuttonModule = class DatatableSplitbuttonModule {
};
DatatableSplitbuttonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DatatableSplitbuttonModule });
DatatableSplitbuttonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DatatableSplitbuttonModule_Factory(t) { return new (t || DatatableSplitbuttonModule)(); }, providers: [], imports: [[
            SplitButtonModule
        ],
        SplitButtonModule] });

let FilterColumn = class FilterColumn {
    constructor() {
        this.listaOriginal = [];
        this.lista = [];
        this.labelDefaultImplementation = false;
        this.updateFiltro = false;
        this.customFilterOptions = {};
        this.template = 'filter_text';
        this.outputEvent = new EventEmitter();
        this.debouncer = new Subject();
        this.resultado = [];
        this.listaFields = [];
    }
    ngOnInit() {
        this.debouncer
            .pipe(debounceTime((this.tableType === 'memory') ? 300 : 1000))
            .subscribe((value) => this.outputEvent.emit(value));
        this.template = `filter_${this.filterType}`;
    }
    ngOnChanges(changes) {
        if (this.checkChanges(changes, 'listaOriginal')) {
            this.preencherFields();
        }
    }
    checkChanges(changes, property) {
        return changes[property] && changes[property].previousValue != changes[property].currentValue;
    }
    /**
     * Método para propagar o evento de filtragem
     * @param event filtro
     */
    filtrar(event) {
        this.debouncer.next(this.filtro);
    }
    /**
     * Preenche os itens que serão exibidos no multiselect, removendo duplicidades
     */
    preencherFields() {
        this.listaFields = [];
        this.listaOriginal.filter(pi => pi[this.field] !== null).forEach(row => {
            let item = { label: row[this.field], value: row[this.field] };
            if (!this.verificarSeExisteField(item)) {
                this.listaFields.push(item);
            }
        });
    }
    /**
     *
     * @param field Verifica duplicidade de fields nas opções de seleção
     */
    verificarSeExisteField(field) {
        return this.listaFields.some(item => {
            return item.value == field.value;
        });
    }
    /**
     * Caso o usuaŕio não forneça uma lista para o options, será criada uma lista com
     * os valores presentes na tabela
     */
    getCustomFilterOptions() {
        if (this.customFilterOptions.hasOwnProperty(this.field)) {
            return this.customFilterOptions[this.field];
        }
        return this.listaFields;
    }
};
FilterColumn.ɵfac = function FilterColumn_Factory(t) { return new (t || FilterColumn)(); };
FilterColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FilterColumn, selectors: [["basis-filter-column"]], inputs: { listaOriginal: "listaOriginal", lista: "lista", labelDefaultImplementation: "labelDefaultImplementation", updateFiltro: "updateFiltro", customFilterOptions: "customFilterOptions", template: "template", field: "field", header: "header", labelDefaultName: "labelDefaultName", filterType: "filterType", tableType: "tableType" }, outputs: { outputEvent: "outputEvent" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 3, consts: [[3, "ngSwitch"], [4, "ngSwitchCase"], [1, "ui-g", "form-group"], [1, "ui-md-12"], [1, "md-inputfield"], ["type", "text", "pInputText", "", 3, "ngModel", "input", "ngModelChange"], ["appendTo", "body", 3, "options", "defaultLabel", "optionLabel", "ngModelOptions", "ngModel", "onChange", "ngModelChange"]], template: function FilterColumn_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FilterColumn_div_1_Template, 7, 2, "div", 1);
        ɵngcc0.ɵɵtemplate(2, FilterColumn_div_2_Template, 2, 9, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.filterType);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "text");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "select");
    } }, directives: [ɵngcc4.NgSwitch, ɵngcc4.NgSwitchCase, ɵngcc7.DefaultValueAccessor, ɵngcc2.InputText, ɵngcc7.NgControlStatus, ɵngcc7.NgModel, ɵngcc2.MultiSelect], encapsulation: 2 });
__decorate([
    Input()
], FilterColumn.prototype, "listaOriginal", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "lista", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "field", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "header", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "labelDefaultImplementation", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "labelDefaultName", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "updateFiltro", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "filterType", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "tableType", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "customFilterOptions", void 0);
__decorate([
    Input()
], FilterColumn.prototype, "template", void 0);
__decorate([
    Output()
], FilterColumn.prototype, "outputEvent", void 0);

let FilterColumnModule = class FilterColumnModule {
};
FilterColumnModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FilterColumnModule });
FilterColumnModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FilterColumnModule_Factory(t) { return new (t || FilterColumnModule)(); }, imports: [[
            CommonModule,
            MultiSelectModule,
            ButtonModule,
            CheckboxModule,
            DropdownModule,
            FormsModule,
            ReactiveFormsModule,
            InputTextModule
        ]] });

/**
 * Class PageNotificationService
 * @class
 */
let PageNotificationService = class PageNotificationService extends NotificationProvider {
    /**
     * constructor method
     * @constructor
     * @param {MessageService} messageService
     */
    constructor(messageService) {
        super();
        this.messageService = messageService;
        /**
         * successSeverity property
         * @type {string}
         */
        this.successSeverity = 'success';
        /**
         * infoSeverity property
         * @type {string}
         */
        this.infoSeverity = 'info';
        /**
         * warnSeverity property
         * @type {string}
         */
        this.warnSeverity = 'warn';
        /**
         * errorSeverity property
         * @type {string}
         */
        this.errorSeverity = 'error';
        /**
         * createMsg property
         * @type {string}
         */
        this.createMsg = 'Registro incluído com sucesso!';
        /**
         * updateMsg property
         * @type {string}
         */
        this.updateMsg = 'Registro alterado com sucesso!';
        /**
         * deleteMsg property
         * @type {string}
         */
        this.deleteMsg = 'Registro excluído com sucesso!';
    }
    /**
     * addCreateMsg method
     * @param {string} title
     */
    addCreateMsg(title) {
        this.addSuccessMessage(this.createMsg, title);
    }
    /**
     * addSuccessMessage method
     * @param {string} message
     * @param {string} title
     */
    addSuccessMessage(message, title) {
        this.addMsg(this.successSeverity, message, title);
    }
    /**
     * addMsg method
     * @param {string} severity
     * @param {string} msg
     * @param {string} title
     */
    addMsg(severity, msg, title) {
        this.messageService.add({
            severity: severity,
            summary: title,
            detail: msg
        });
    }
    /**
     * addUpdateMsg method
     * @param {string} title
     */
    addUpdateMsg(title) {
        this.addSuccessMessage(this.updateMsg, title);
    }
    /**
     * addDeleteMsg method
     * @param {string} title
     */
    addDeleteMsg(title) {
        this.addSuccessMessage(this.deleteMsg, title);
    }
    /**
     * addInfoMessage method
     * @param {string} message
     * @param {string} title
     */
    addInfoMessage(message, title) {
        this.addMsg(this.infoSeverity, message, title);
    }
    /**
     * addWarnMessage method
     * @param {string} message
     * @param {string} title
     */
    addWarnMessage(message, title) {
        this.addMsg(this.warnSeverity, message, title);
    }
    /**
     * addErrorMessage method
     * @param {string} message
     * @param {string} title
     */
    addErrorMessage(message, title) {
        this.addMsg(this.errorSeverity, message, title);
    }
    /**
     * addErrorProblem method
     * @param {ApplicationProblemType} problem
     */
    addErrorProblem(problem) {
        this.addMsg(this.errorSeverity, problem.detail, problem.title);
    }
};
PageNotificationService.ɵfac = function PageNotificationService_Factory(t) { return new (t || PageNotificationService)(ɵngcc0.ɵɵinject(ɵngcc2.MessageService)); };
PageNotificationService.ctorParameters = () => [
    { type: MessageService }
];
PageNotificationService.ɵprov = ɵɵdefineInjectable({ factory: function PageNotificationService_Factory() { return new PageNotificationService(ɵɵinject(MessageService$1)); }, token: PageNotificationService, providedIn: "root" });

let ShowColumn = class ShowColumn {
    constructor(pageNotificationService) {
        this.pageNotificationService = pageNotificationService;
        /**
         * lista de colunas disponívels na tabela
         * @type {Array}
         */
        this.options = [];
        /**
         * Valores do select de colunas
         * @type {Array}
         */
        this.values = [];
        /**
         * Último valor válido para o select.
         * @type {Array}
         */
        this.lastValue = [];
        /**
         * Evento para atualizar a visibilidade das colunas da tabela
         * @type {EventEmitter}
         */
        this.updateVisibleColumns = new EventEmitter();
    }
    ngOnInit() {
        this.columns.forEach((column) => {
            const col = { field: column.field, filterType: column.filterType, header: column.header };
            this.options.push(col);
            this.values.push(col);
            this.lastValue.push(col);
        });
    }
    mostrarColunas(event) {
        if (this.values.length) {
            this.lastValue = event.value;
            this.updateVisibleColumns.emit(this.values);
        }
        else {
            this.lastValue.map((item) => this.values.push(item));
            this.pageNotificationService.addErrorMessage('Não é possível exibir menos de uma coluna');
        }
    }
};
ShowColumn.ɵfac = function ShowColumn_Factory(t) { return new (t || ShowColumn)(ɵngcc0.ɵɵdirectiveInject(PageNotificationService)); };
ShowColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShowColumn, selectors: [["basis-show-column"]], inputs: { columns: "columns" }, outputs: { updateVisibleColumns: "updateVisibleColumns" }, decls: 6, vars: 9, consts: [[1, "ui-g-12", "ui-g-nopad"], [1, "ui-g-3", "ui-md-offset-6"], [1, "text-right"], [1, "ui-g-3"], ["defaultLabel", "Selecione as colunas a serem exibidas", 1, "column", 3, "optionLabel", "displaySelectedLabel", "ngModelOptions", "options", "ngModel", "onChange", "ngModelChange"]], template: function ShowColumn_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, "Visibilidade das Colunas:");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "p-multiSelect", 4);
        ɵngcc0.ɵɵlistener("onChange", function ShowColumn_Template_p_multiSelect_onChange_5_listener($event) { return ctx.mostrarColunas($event); })("ngModelChange", function ShowColumn_Template_p_multiSelect_ngModelChange_5_listener($event) { return ctx.values = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(7, _c11));
        ɵngcc0.ɵɵproperty("optionLabel", "header")("displaySelectedLabel", false)("ngModelOptions", ɵngcc0.ɵɵpureFunction0(8, _c10))("options", ctx.options)("ngModel", ctx.values);
    } }, directives: [ɵngcc2.MultiSelect, ɵngcc7.NgControlStatus, ɵngcc7.NgModel], encapsulation: 2 });
ShowColumn.ctorParameters = () => [
    { type: PageNotificationService }
];
__decorate([
    Input()
], ShowColumn.prototype, "columns", void 0);
__decorate([
    Output()
], ShowColumn.prototype, "updateVisibleColumns", void 0);

let ShowColumnModule = class ShowColumnModule {
};
ShowColumnModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShowColumnModule });
ShowColumnModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ShowColumnModule_Factory(t) { return new (t || ShowColumnModule)(); }, imports: [[
            CommonModule,
            MultiSelectModule,
            ButtonModule,
            CheckboxModule,
            DropdownModule,
            FormsModule,
            ReactiveFormsModule,
            InputTextModule
        ]] });

/**
 * Class DatatableModule
 * @class
 */
let DatatableModule = class DatatableModule {
};
DatatableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DatatableModule });
DatatableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DatatableModule_Factory(t) { return new (t || DatatableModule)(); }, providers: [
        { provide: DatatableService, useClass: DatatableService, deps: [HttpClient] },
        DataProviderFactory
    ], imports: [[
            CommonModule,
            ButtonModule$1,
            SplitButtonModule,
            TooltipModule,
            TableModule,
            BlockUIModule,
            ProgressSpinnerModule,
            DatatableSplitbuttonModule,
            HttpClientModule,
            PaginatorModule,
            FilterColumnModule,
            ShowColumnModule,
            InputTextModule
        ],
        FilterColumnModule,
        ShowColumnModule] });

/**
 * Class BlockUiComponent
 * @class
 */
let BlockUiComponent = class BlockUiComponent {
    /**
     * constructor method
     * @constructor
     * @param {BlockUiService} service
     */
    constructor(service) {
        this.service = service;
        /**
         * status property
         * @type {boolean}
         * @public
         */
        this.status = false;
    }
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit() {
        this.subscription = this.service.loaderStatus.subscribe((blockui) => {
            this.status = blockui.status;
        });
    }
    /**
     * ngOnDestroy methods
     * @returns void
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * isBlocked method
     * @returns boolean
     */
    isBlocked() {
        return this.status;
    }
    /**
     * show method
     * @returns false
     */
    show() {
        this.status = true;
    }
    /**
     * hide methods
     * @returns void
     */
    hide() {
        this.status = false;
    }
};
BlockUiComponent.ɵfac = function BlockUiComponent_Factory(t) { return new (t || BlockUiComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.BlockUiService)); };
BlockUiComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BlockUiComponent, selectors: [["basis-block-ui"]], decls: 3, vars: 1, consts: [[3, "blocked"], [1, "center-screen"]], template: function BlockUiComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p-blockUI", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "p-progressSpinner");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("blocked", ctx.isBlocked());
    } }, directives: [ɵngcc2.BlockUI, ɵngcc2.ProgressSpinner], styles: [".center-screen[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}"] });
BlockUiComponent.ctorParameters = () => [
    { type: BlockUiService }
];

/**
 * Class BlockUiModule
 * @class
 */
let BlockUiModule = class BlockUiModule {
};
BlockUiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BlockUiModule });
BlockUiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BlockUiModule_Factory(t) { return new (t || BlockUiModule)(); }, providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: BlockUiInterceptor,
            multi: true
        },
        BlockUiService
    ], imports: [[
            CommonModule,
            BlockUIModule,
            ProgressSpinnerModule,
        ],
        BlockUIModule,
        ProgressSpinnerModule] });

/**
 * Class PageNotificationComponent
 * @class
 */
let PageNotificationComponent = class PageNotificationComponent {
    constructor() {
        /**
         * duration property
         * @type {number}
         */
        this.duration = 3000;
    }
};
PageNotificationComponent.ɵfac = function PageNotificationComponent_Factory(t) { return new (t || PageNotificationComponent)(); };
PageNotificationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PageNotificationComponent, selectors: [["basis-page-notification"]], inputs: { duration: "duration" }, decls: 1, vars: 0, template: function PageNotificationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "p-toast");
    } }, directives: [ɵngcc8.Toast], encapsulation: 2 });
__decorate([
    Input()
], PageNotificationComponent.prototype, "duration", void 0);

/**
 * Class PageNotificationModule
 * @class
 */
let PageNotificationModule = class PageNotificationModule {
};
PageNotificationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PageNotificationModule });
PageNotificationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PageNotificationModule_Factory(t) { return new (t || PageNotificationModule)(); }, providers: [
        MessageService$1,
        PageNotificationService,
        {
            provide: NotificationProvider,
            useExisting: PageNotificationService
        }
    ], imports: [[
            CommonModule,
            ToastModule
        ]] });

let FormNotificationComponent = class FormNotificationComponent extends FormNotificationComponentSuperclass {
};
FormNotificationComponent.ɵfac = function FormNotificationComponent_Factory(t) { return ɵFormNotificationComponent_BaseFactory(t || FormNotificationComponent); };
FormNotificationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormNotificationComponent, selectors: [["", "form-notification", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c12, ngContentSelectors: _c13, decls: 3, vars: 1, consts: [[1, "form-notification-msg", "ui-message", "ui-messages-error", "ui-corner-all"]], template: function FormNotificationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.message);
    } }, encapsulation: 2 });

/**
 * Módulo para adicionar funcionalidade de notificação de erros de formulários.
 * @module
 */
let FormNotificationModule = class FormNotificationModule {
};
FormNotificationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormNotificationModule });
FormNotificationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormNotificationModule_Factory(t) { return new (t || FormNotificationModule)(); }, imports: [[
            CommonModule,
            FormNotificationBaseModule
        ]] });

/**
 * Class ErrorStackComponent
 * @class
 */
let ErrorStackComponent = class ErrorStackComponent {
    /**
     * constructor method
     * @constructor
     * @param {ErrorStackService} errorStack
     */
    constructor(errorStack) {
        this.errorStack = errorStack;
        /**
         * title property
         * @type {string}
         */
        this.title = 'Error Stack';
        /**
         * errors property
         * @type {NamedErrorType}
         */
        this.errors = [];
    }
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit() {
        this.errorSubscription = this.errorStack.errors.subscribe((error) => {
            this.errors = [error, ...this.errors];
        });
    }
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy() {
        this.errorSubscription.unsubscribe();
    }
};
ErrorStackComponent.ɵfac = function ErrorStackComponent_Factory(t) { return new (t || ErrorStackComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStackService)); };
ErrorStackComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ErrorStackComponent, selectors: [["basis-error-stack"]], inputs: { title: "title", template: "template" }, decls: 3, vars: 1, consts: [["defaultTemplate", ""], [4, "ngTemplateOutlet"], [1, "ui-g"], [1, "ui-g-12"], [1, "card", "no-margin"], ["first", "0", 3, "value", "paginator", "rows"], ["pTemplate", "header"], ["pTemplate", "body"], ["pTemplate", "emptymessage"], [2, "width", "20%", "text-align", "center"], [2, "width", "10%", "text-align", "center"], ["pButton", "", "type", "button", "pTooltip", "Copiar erro para \u00E1rea de transfer\u00EAncia", "tooltipPosition", "left", "icon", "ui-icon-content-copy", 1, "ui-button-primary", 3, "clipboard"], ["colspan", "4"]], template: function ErrorStackComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ErrorStackComponent_ng_template_0_Template, 9, 4, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, ErrorStackComponent_ng_container_2_Template, 1, 0, "ng-container", 1);
    } if (rf & 2) {
        const _r1049 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template ? ctx.template : _r1049);
    } }, directives: [ɵngcc4.NgTemplateOutlet, ɵngcc5.Table, ɵngcc6.PrimeTemplate, ɵngcc2.ButtonDirective, ɵngcc2.Tooltip, ɵngcc3.ClipboardDirective], pipes: [ɵngcc4.DatePipe], encapsulation: 2 });
ErrorStackComponent.ctorParameters = () => [
    { type: ErrorStackService }
];
__decorate([
    Input()
], ErrorStackComponent.prototype, "title", void 0);
__decorate([
    Input()
], ErrorStackComponent.prototype, "template", void 0);

/**
 * Class ErrorStackModule
 * @class
 */
let ErrorStackModule = class ErrorStackModule {
};
ErrorStackModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ErrorStackModule });
ErrorStackModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ErrorStackModule_Factory(t) { return new (t || ErrorStackModule)(); }, providers: [
        ErrorStackService,
        {
            provide: ErrorProvider,
            useClass: ErrorStackProviderService,
            multi: true
        }
    ], imports: [[
            CommonModule,
            TableModule,
            ButtonModule$1,
            TooltipModule,
            ClipboardModule
        ]] });

let CrudFormComponent = class CrudFormComponent {
    constructor(route) {
        this.route = route;
        this.disableSave = false;
        this.listRoute = "../../list";
    }
    ngOnInit() {
        this.route.paramMap.subscribe((params) => {
            this.action = params.get('action');
            if (params.get('id')) {
                this.route.data.subscribe((data) => {
                    if (data.value) {
                        this.form.patchValue(data.value);
                    }
                });
            }
            else {
                this.listRoute = "../list";
            }
            if (this.action === "view") {
                this.form.disable();
            }
            else if (this.form.disabled) {
                this.form.enable();
            }
        });
    }
};
CrudFormComponent.ɵfac = function CrudFormComponent_Factory(t) { return new (t || CrudFormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.ActivatedRoute)); };
CrudFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CrudFormComponent, selectors: [["nCrudForm"]], inputs: { disableSave: "disableSave", form: "form", service: "service" }, ngContentSelectors: _c13, decls: 4, vars: 9, consts: [[3, "form", "action", "route", "disableSave"], ["nButton", "", 1, "ui-g-12", "ui-lg-2", "ui-md-4", "ui-sm-12"], ["pButton", "", "type", "button", "label", "Voltar", 3, "routerLink"]], template: function CrudFormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "nForm", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelement(3, "button", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("form", ctx.form)("action", ctx.action)("route", ɵngcc0.ɵɵpureFunction1(5, _c14, ctx.listRoute))("disableSave", ctx.disableSave);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(7, _c14, ctx.listRoute));
    } }, directives: function () { return [FormComponent, ɵngcc2.ButtonDirective, ɵngcc9.RouterLink]; }, encapsulation: 2 });
CrudFormComponent.ctorParameters = () => [
    { type: ActivatedRoute }
];
__decorate([
    Input()
], CrudFormComponent.prototype, "form", void 0);
__decorate([
    Input()
], CrudFormComponent.prototype, "service", void 0);
__decorate([
    Input()
], CrudFormComponent.prototype, "disableSave", void 0);

const CRUD_SERVICE = new InjectionToken("CRUD_SERVICE");

let CrudListComponent = class CrudListComponent {
    constructor(crudService, confirmationService, route, router) {
        this.crudService = crudService;
        this.confirmationService = confirmationService;
        this.route = route;
        this.router = router;
        this.action = "findAll";
        this.findLabel = "Pesquisar";
        this.disableSave = false;
        this.disableEdit = false;
        this.disableView = false;
        this.disableDelete = false;
        this.find = new EventEmitter();
    }
    ngOnInit() {
        if (this.service) {
            this.crudService = this.service;
        }
        if (!this.url) {
            this.url = this.crudService.uri;
        }
    }
    datatableClick(event) {
        if (event.selection) {
            switch (event.button) {
                case "edit":
                case "view":
                    this.router.navigate([`../${event.button}`, event.selection.id], { relativeTo: this.route });
                    break;
                case "delete":
                    this.confirmationService.confirm({
                        message: 'Você tem certeza que deseja excluir o registro?',
                        accept: () => this.crudService.delete(event.selection.id)
                            .subscribe(() => this.datatable.filter())
                    });
                    break;
            }
        }
    }
    findAll(event) {
        if (this.find.observers.length) {
            this.find.emit(this.form.value);
        }
        else {
            this.datatable.filterParams = {};
            Object.keys(this.form.value).forEach(element => {
                let value = this.form.value[element];
                if (value) {
                    this.datatable.filterParams[element] =
                        value instanceof Date ? JSON.stringify(value).replace(/"/g, "") : value;
                }
            });
            this.datatable.filter();
        }
    }
    ngAfterContentInit() {
        const datatableNgAfterContentInit = this.datatable.pDatatableComponent.ngAfterContentInit;
        this.datatable.pDatatableComponent.ngAfterContentInit = () => {
            this.datatable.pDatatableComponent.columns = this.columns.toArray();
            datatableNgAfterContentInit.call(this.datatable.pDatatableComponent);
        };
    }
    ngAfterViewInit() {
        for (let i in this.datatableExtraParams) {
            this.datatable[i] = this.datatableExtraParams[i];
        }
    }
};
CrudListComponent.ɵfac = function CrudListComponent_Factory(t) { return new (t || CrudListComponent)(ɵngcc0.ɵɵdirectiveInject(CRUD_SERVICE), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ConfirmationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.Router)); };
CrudListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CrudListComponent, selectors: [["nCrudList"]], contentQueries: function CrudListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, Column, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);
    } }, viewQuery: function CrudListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c15, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datatable = _t.first);
    } }, inputs: { action: "action", findLabel: "findLabel", disableSave: "disableSave", disableEdit: "disableEdit", disableView: "disableView", disableDelete: "disableDelete", url: "url", form: "form", service: "service", datatableExtraParams: "datatableExtraParams" }, outputs: { find: "find" }, ngContentSelectors: _c18, decls: 8, vars: 8, consts: [[3, "form", "saveLabel", "save"], ["nButton", "", 1, "ui-g-12", "ui-lg-2", "ui-md-4", "ui-sm-12"], ["pButton", "", "type", "button", "label", "Novo", 3, "routerLink", 4, "ngIf"], [3, "value", "url", "disableEdit", "disableView", "disableDelete", "buttonClick"], ["datatable", ""], ["header", "Confirmar Exclus\u00E3o", "acceptLabel", "Sim", "rejectLabel", "N\u00E3o", "icon", "pi pi-exclamation-triangle"], ["pButton", "", "type", "button", "label", "Novo", 3, "routerLink"]], template: function CrudListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c17);
        ɵngcc0.ɵɵelementStart(0, "nForm", 0);
        ɵngcc0.ɵɵlistener("save", function CrudListComponent_Template_nForm_save_0_listener($event) { return ctx.findAll($event); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, CrudListComponent_button_3_Template, 1, 2, "button", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "basis-datatable", 3, 4);
        ɵngcc0.ɵɵlistener("buttonClick", function CrudListComponent_Template_basis_datatable_buttonClick_4_listener($event) { return ctx.datatableClick($event); });
        ɵngcc0.ɵɵprojection(6, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(7, "p-confirmDialog", 5);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("form", ctx.form)("saveLabel", ctx.findLabel);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disableSave);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.result)("url", ctx.url)("disableEdit", ctx.disableEdit)("disableView", ctx.disableView)("disableDelete", ctx.disableDelete);
    } }, directives: function () { return [FormComponent, ɵngcc4.NgIf, DatatableComponent, ɵngcc10.ConfirmDialog, ɵngcc2.ButtonDirective, ɵngcc9.RouterLink]; }, encapsulation: 2 });
CrudListComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CRUD_SERVICE,] }] },
    { type: ConfirmationService },
    { type: ActivatedRoute },
    { type: Router }
];
__decorate([
    Input()
], CrudListComponent.prototype, "form", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "action", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "findLabel", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "service", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "url", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "disableSave", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "disableEdit", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "disableView", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "disableDelete", void 0);
__decorate([
    Input()
], CrudListComponent.prototype, "datatableExtraParams", void 0);
__decorate([
    Output()
], CrudListComponent.prototype, "find", void 0);
__decorate([
    ViewChild('datatable', { static: true })
], CrudListComponent.prototype, "datatable", void 0);
__decorate([
    ContentChildren(Column)
], CrudListComponent.prototype, "columns", void 0);
CrudListComponent = __decorate([ __param(0, Inject(CRUD_SERVICE))
], CrudListComponent);

let CrudResolveGuard = class CrudResolveGuard {
    constructor(crudService) {
        this.crudService = crudService;
    }
    resolve(route) {
        return this.crudService.find(route.paramMap.get('id'));
    }
};
CrudResolveGuard.ɵfac = function CrudResolveGuard_Factory(t) { return new (t || CrudResolveGuard)(ɵngcc0.ɵɵinject(CRUD_SERVICE)); };
CrudResolveGuard.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CrudResolveGuard, factory: CrudResolveGuard.ɵfac });
CrudResolveGuard.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CRUD_SERVICE,] }] }
];
CrudResolveGuard = __decorate([ __param(0, Inject(CRUD_SERVICE))
], CrudResolveGuard);

function crudRouteBuilder(route, parent, list, form) {
    return {
        path: route,
        component: parent,
        data: { breadcrumb: route },
        children: [
            {
                path: 'list',
                component: list,
                data: { breadcrumb: 'list' },
            },
            {
                path: ':action',
                component: form,
                data: { breadcrumb: ':action' },
            },
            {
                path: ':action/:id',
                component: form,
                resolve: {
                    value: CrudResolveGuard
                },
                data: { breadcrumb: ':action' },
            }
        ]
    };
}

class CrudServiceNuvem {
    constructor(uri, http) {
        this.uri = uri;
        this.http = http;
    }
    save(entity) {
        return this.http.post(this.uri, entity);
    }
    edit(entity) {
        return this.http.put(this.uri, entity);
    }
    find(id) {
        return this.http.get(`${this.uri}/${id}`);
    }
    delete(id) {
        return this.http.delete(`${this.uri}/${id}`);
    }
    findAll(entity) {
        let params = new HttpParams();
        for (let field in entity) {
            params = params.append(field, entity[field]);
        }
        return this.http.get(`${this.uri}`, { params: params });
    }
}

var STATUS;
(function (STATUS) {
    STATUS[STATUS["OK"] = 200] = "OK";
    STATUS[STATUS["CREATED"] = 201] = "CREATED";
})(STATUS || (STATUS = {}));
let SuccessMessageHandlerInterceptor = class SuccessMessageHandlerInterceptor {
    constructor(notification) {
        this.notification = notification;
    }
    intercept(req, next) {
        return next.handle(req).pipe(tap((event) => {
            if (event instanceof HttpResponse) {
                if (event.headers.has("X-nuvem-alert")) {
                    this.notification.addSuccessMessage(event.headers.get("X-nuvem-alert"));
                }
                else if ((event.status === STATUS.OK || event.status === STATUS.CREATED) && req.method != "GET") {
                    this.notification.addSuccessMessage("Operação realizada com sucesso!");
                }
            }
        }));
    }
};
SuccessMessageHandlerInterceptor.ɵfac = function SuccessMessageHandlerInterceptor_Factory(t) { return new (t || SuccessMessageHandlerInterceptor)(ɵngcc0.ɵɵinject(PageNotificationService)); };
SuccessMessageHandlerInterceptor.ctorParameters = () => [
    { type: PageNotificationService }
];
SuccessMessageHandlerInterceptor.ɵprov = ɵɵdefineInjectable({ factory: function SuccessMessageHandlerInterceptor_Factory() { return new SuccessMessageHandlerInterceptor(ɵɵinject(PageNotificationService)); }, token: SuccessMessageHandlerInterceptor, providedIn: "root" });
const httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: SuccessMessageHandlerInterceptor, multi: true },
];

let FieldComponent = class FieldComponent extends WrappedFormControlSuperclass {
    constructor(controlContainer, injector) {
        super(injector);
        this.controlContainer = controlContainer;
        this.injector = injector;
        this.onBlur = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onFocus = new EventEmitter();
    }
    get name() {
        return this._name ? this._name : this.formControlName;
    }
    set name(value) {
        this._name = value;
    }
    get label() {
        return this.required ? `${this._label}*` : this._label;
    }
    set label(value) {
        this._label = value;
    }
    ngOnInit() {
        this.setValidators();
        this.setRequired();
    }
    setRequired() {
        if (this.required) {
            if (this.input instanceof ElementRef) {
                this.input.nativeElement.required = true;
            }
            else {
                this.input.required = true;
            }
        }
    }
    setElementRefAttr(attr, value) {
        if (value && this.input instanceof ElementRef) {
            this.input.nativeElement[attr] = value;
        }
    }
    setFormControlValidators() {
        if (this.controlContainer && this.formControlName) {
            let validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    }
    setValidators() {
        if (this.controlContainer && this.formControlName) {
            let validator = this.controlContainer.control.get(this.formControlName).validator;
            if (validator) {
                this.formControl.setValidators(validator);
            }
        }
    }
    ngAfterViewInit() {
        for (let i in this.extraParams) {
            this.input[i] = this.extraParams[i];
        }
    }
    onBlurEvent(event) {
        this.onBlur.emit(event);
    }
    onSelectEvent(event) {
        this.onSelect.emit(event);
    }
    onFocusEvent(event) {
        this.onFocus.emit(event);
    }
};
FieldComponent.ɵfac = function FieldComponent_Factory(t) { return new (t || FieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ControlContainer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
FieldComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FieldComponent, selectors: [["", "nField", ""]], viewQuery: function FieldComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c19, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, inputs: { name: "name", label: "label", form: "form", formControlName: "formControlName", extraParams: "extraParams", required: "required" }, outputs: { onBlur: "onBlur", onSelect: "onSelect", onFocus: "onFocus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
FieldComponent.ctorParameters = () => [
    { type: ControlContainer },
    { type: Injector }
];
__decorate([
    Input()
], FieldComponent.prototype, "form", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "formControlName", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "extraParams", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "required", void 0);
__decorate([
    Output()
], FieldComponent.prototype, "onBlur", void 0);
__decorate([
    Output()
], FieldComponent.prototype, "onSelect", void 0);
__decorate([
    Output()
], FieldComponent.prototype, "onFocus", void 0);
__decorate([
    ViewChild("input", { static: false })
], FieldComponent.prototype, "input", void 0);
__decorate([
    Input()
], FieldComponent.prototype, "name", null);
__decorate([
    Input()
], FieldComponent.prototype, "label", null);

var InputTextComponent_1;
let InputTextComponent = InputTextComponent_1 = class InputTextComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.type = "text";
    }
    ngOnInit() {
        super.ngOnInit();
        this.setElementRefAttr("min", this.min);
        this.setElementRefAttr("max", this.max);
        this.setElementRefAttr("minLength", this.minLength);
        this.setElementRefAttr("maxLength", this.maxLength);
        this.setElementRefAttr("pattern", this.pattern);
    }
};
InputTextComponent.ɵfac = function InputTextComponent_Factory(t) { return ɵInputTextComponent_BaseFactory(t || InputTextComponent); };
InputTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: InputTextComponent, selectors: [["", "nInputText", ""]], inputs: { type: "type", minLength: "minLength", maxLength: "maxLength", min: "min", max: "max", pattern: "pattern" }, features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(InputTextComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c20, ngContentSelectors: _c13, decls: 7, vars: 11, consts: [["form-notification", "", 1, "md-inputfield", 3, "name", "form"], ["notification", ""], ["pInputText", "", 3, "ngClass", "type", "name", "formControl", "blur", "focus"], ["input", ""], [3, "for", "innerHTML"], [3, "control", 4, "ngIf"], [3, "control"]], template: function InputTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2, 3);
        ɵngcc0.ɵɵlistener("blur", function InputTextComponent_Template_input_blur_2_listener($event) { return ctx.onBlurEvent($event); })("focus", function InputTextComponent_Template_input_focus_2_listener($event) { return ctx.onFocusEvent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "label", 4);
        ɵngcc0.ɵɵtemplate(5, InputTextComponent_nValidationMessage_5_Template, 1, 1, "nValidationMessage", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1059 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("form", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(9, _c21, _r1059.message))("type", ctx.type)("name", ctx.name)("formControl", ctx.formControl);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.name)("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !_r1059.message);
    } }, directives: function () { return [FormNotificationComponent, ɵngcc7.DefaultValueAccessor, ɵngcc2.InputText, ɵngcc4.NgClass, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective, ɵngcc4.NgIf, ValidationMessageComponent]; }, encapsulation: 2 });
__decorate([
    Input()
], InputTextComponent.prototype, "minLength", void 0);
__decorate([
    Input()
], InputTextComponent.prototype, "maxLength", void 0);
__decorate([
    Input()
], InputTextComponent.prototype, "min", void 0);
__decorate([
    Input()
], InputTextComponent.prototype, "max", void 0);
__decorate([
    Input()
], InputTextComponent.prototype, "pattern", void 0);
__decorate([
    Input()
], InputTextComponent.prototype, "type", void 0);

const CALENDAR_LOCALE = {
    firstDayOfWeek: 0,
    dayNames: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
    dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
    dayNamesMin: ["D", "S", "T", "Q", "Q", "S", "S"],
    monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
    monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
    today: 'Hoje',
    clear: 'Limpar',
    dateFormat: 'dd/mm/yy',
    weekHeader: 'Semana'
};

var CalendarComponent_1;
let CalendarComponent = CalendarComponent_1 = class CalendarComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.maxDate = null;
        this.yearRange = null;
        this.monthNavigator = false;
        this.yearNavigator = false;
        this.locale = CALENDAR_LOCALE;
    }
    outerToInner(value) {
        return value ? new Date(value) : null;
    }
};
CalendarComponent.ɵfac = function CalendarComponent_Factory(t) { return ɵCalendarComponent_BaseFactory(t || CalendarComponent); };
CalendarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CalendarComponent, selectors: [["", "nCalendar", ""]], inputs: { maxDate: "maxDate", yearRange: "yearRange", monthNavigator: "monthNavigator", yearNavigator: "yearNavigator", locale: "locale" }, features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(CalendarComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c22, ngContentSelectors: _c13, decls: 7, vars: 16, consts: [["form-notification", "", 1, "md-inputfield", 3, "name", "form"], ["notification", ""], [3, "ngClass", "name", "formControl", "locale", "dateFormat", "yearRange", "maxDate", "monthNavigator", "yearNavigator", "onBlur", "onFocus", "onSelect"], ["input", ""], [3, "for", "innerHTML"], [3, "control", 4, "ngIf"], [3, "control"]], template: function CalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "p-calendar", 2, 3);
        ɵngcc0.ɵɵlistener("onBlur", function CalendarComponent_Template_p_calendar_onBlur_2_listener($event) { return ctx.onBlurEvent($event); })("onFocus", function CalendarComponent_Template_p_calendar_onFocus_2_listener($event) { return ctx.onFocusEvent($event); })("onSelect", function CalendarComponent_Template_p_calendar_onSelect_2_listener($event) { return ctx.onSelectEvent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "label", 4);
        ɵngcc0.ɵɵtemplate(5, CalendarComponent_nValidationMessage_5_Template, 1, 1, "nValidationMessage", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1062 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("form", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(14, _c21, _r1062.message))("name", ctx.name)("formControl", ctx.formControl)("locale", ctx.locale)("dateFormat", ctx.locale.dateFormat)("yearRange", ctx.yearRange)("maxDate", ctx.maxDate)("monthNavigator", ctx.monthNavigator)("yearNavigator", ctx.yearNavigator);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.name)("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !_r1062.message);
    } }, directives: function () { return [FormNotificationComponent, ɵngcc11.Calendar, ɵngcc4.NgClass, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective, ɵngcc4.NgIf, ValidationMessageComponent]; }, encapsulation: 2 });
__decorate([
    Input()
], CalendarComponent.prototype, "maxDate", void 0);
__decorate([
    Input()
], CalendarComponent.prototype, "yearRange", void 0);
__decorate([
    Input()
], CalendarComponent.prototype, "monthNavigator", void 0);
__decorate([
    Input()
], CalendarComponent.prototype, "yearNavigator", void 0);
__decorate([
    Input()
], CalendarComponent.prototype, "locale", void 0);

var TextAreaComponent_1;
let TextAreaComponent = TextAreaComponent_1 = class TextAreaComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.autoResize = false;
    }
};
TextAreaComponent.ɵfac = function TextAreaComponent_Factory(t) { return ɵTextAreaComponent_BaseFactory(t || TextAreaComponent); };
TextAreaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TextAreaComponent, selectors: [["", "nTextArea", ""]], inputs: { autoResize: "autoResize", rows: "rows", cols: "cols", minLength: "minLength", maxLength: "maxLength" }, features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(TextAreaComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c23, ngContentSelectors: _c13, decls: 8, vars: 15, consts: [["form-notification", "", 1, "md-inputfield", 3, "name", "form"], ["notification", ""], ["pInputTextarea", "", "type", "text", 3, "ngClass", "name", "autoResize", "rows", "cols", "minLength", "maxLength", "formControl", "blur", "focus"], ["input", ""], [3, "for", "innerHTML"], [3, "control", 4, "ngIf"], [3, "control"]], template: function TextAreaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "textarea", 2, 3);
        ɵngcc0.ɵɵlistener("blur", function TextAreaComponent_Template_textarea_blur_2_listener($event) { return ctx.onBlurEvent($event); })("focus", function TextAreaComponent_Template_textarea_focus_2_listener($event) { return ctx.onFocusEvent($event); });
        ɵngcc0.ɵɵtext(4, "    ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "label", 4);
        ɵngcc0.ɵɵtemplate(6, TextAreaComponent_nValidationMessage_6_Template, 1, 1, "nValidationMessage", 5);
        ɵngcc0.ɵɵprojection(7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1065 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("form", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(13, _c21, _r1065.message))("name", ctx.name)("autoResize", ctx.autoResize)("rows", ctx.rows)("cols", ctx.cols)("minLength", ctx.minLength)("maxLength", ctx.maxLength)("formControl", ctx.formControl);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("for", ctx.name)("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !_r1065.message);
    } }, directives: function () { return [FormNotificationComponent, ɵngcc7.DefaultValueAccessor, ɵngcc12.InputTextarea, ɵngcc4.NgClass, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective, ɵngcc4.NgIf, ValidationMessageComponent]; }, encapsulation: 2 });
__decorate([
    Input()
], TextAreaComponent.prototype, "autoResize", void 0);
__decorate([
    Input()
], TextAreaComponent.prototype, "rows", void 0);
__decorate([
    Input()
], TextAreaComponent.prototype, "cols", void 0);
__decorate([
    Input()
], TextAreaComponent.prototype, "minLength", void 0);
__decorate([
    Input()
], TextAreaComponent.prototype, "maxLength", void 0);

var DropdownComponent_1;
let DropdownComponent = DropdownComponent_1 = class DropdownComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.virtualScroll = false;
        this.filter = false;
        this.itemSize = 30;
        this.options = [];
        this.onChange = new EventEmitter();
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.service) {
            this.service.findAll(null).subscribe(data => {
                this.options = data;
            });
        }
    }
    onChangeEvent(event) {
        this.onChange.emit(event);
    }
    outerToInner(value) {
        if (value && value.id) {
            this.service.find(value.id).subscribe((data) => {
                this.formControl.setValue(data);
            });
        }
        return value;
    }
};
DropdownComponent.ɵfac = function DropdownComponent_Factory(t) { return ɵDropdownComponent_BaseFactory(t || DropdownComponent); };
DropdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownComponent, selectors: [["", "nDropdown", ""]], inputs: { virtualScroll: "virtualScroll", filter: "filter", itemSize: "itemSize", options: "options", optionLabel: "optionLabel", service: "service" }, outputs: { onChange: "onChange" }, features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(DropdownComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c24, ngContentSelectors: _c13, decls: 7, vars: 11, consts: [["form-notification", "", 1, "md-inputfield", "custom-select", 3, "name", "form"], ["notification", ""], [3, "formControl", "optionLabel", "options", "filter", "virtualScroll", "itemSize", "onChange"], ["input", ""], [3, "for", "innerHTML"], [3, "control", 4, "ngIf"], [3, "control"]], template: function DropdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "p-dropdown", 2, 3);
        ɵngcc0.ɵɵlistener("onChange", function DropdownComponent_Template_p_dropdown_onChange_2_listener($event) { return ctx.onChangeEvent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "label", 4);
        ɵngcc0.ɵɵtemplate(5, DropdownComponent_nValidationMessage_5_Template, 1, 1, "nValidationMessage", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1068 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("form", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("optionLabel", ctx.optionLabel)("options", ctx.options)("filter", ctx.filter)("virtualScroll", ctx.virtualScroll)("itemSize", ctx.itemSize);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.name)("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !_r1068.message);
    } }, directives: function () { return [FormNotificationComponent, ɵngcc13.Dropdown, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective, ɵngcc4.NgIf, ValidationMessageComponent]; }, encapsulation: 2 });
__decorate([
    Input()
], DropdownComponent.prototype, "optionLabel", void 0);
__decorate([
    Input()
], DropdownComponent.prototype, "virtualScroll", void 0);
__decorate([
    Input()
], DropdownComponent.prototype, "filter", void 0);
__decorate([
    Input()
], DropdownComponent.prototype, "itemSize", void 0);
__decorate([
    Input()
], DropdownComponent.prototype, "service", void 0);
__decorate([
    Input()
], DropdownComponent.prototype, "options", void 0);
__decorate([
    Output()
], DropdownComponent.prototype, "onChange", void 0);

var InputMaskComponent_1;
let InputMaskComponent = InputMaskComponent_1 = class InputMaskComponent extends FieldComponent {
};
InputMaskComponent.ɵfac = function InputMaskComponent_Factory(t) { return ɵInputMaskComponent_BaseFactory(t || InputMaskComponent); };
InputMaskComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: InputMaskComponent, selectors: [["", "nInputMask", ""]], inputs: { mask: "mask", placeholder: "placeholder" }, features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(InputMaskComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c25, ngContentSelectors: _c13, decls: 7, vars: 12, consts: [["form-notification", "", 1, "md-inputfield", 3, "name", "form"], ["notification", ""], ["pInputText", "", 3, "ngClass", "name", "formControl", "mask", "placeholder", "onBlur", "onFocus"], ["input", ""], [3, "for", "innerHTML"], [3, "control", 4, "ngIf"], [3, "control"]], template: function InputMaskComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "p-inputMask", 2, 3);
        ɵngcc0.ɵɵlistener("onBlur", function InputMaskComponent_Template_p_inputMask_onBlur_2_listener($event) { return ctx.onBlurEvent($event); })("onFocus", function InputMaskComponent_Template_p_inputMask_onFocus_2_listener($event) { return ctx.onFocusEvent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "label", 4);
        ɵngcc0.ɵɵtemplate(5, InputMaskComponent_nValidationMessage_5_Template, 1, 1, "nValidationMessage", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1071 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("form", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c21, _r1071.message))("name", ctx.name)("formControl", ctx.formControl)("mask", ctx.mask)("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.name)("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !_r1071.message);
    } }, directives: function () { return [FormNotificationComponent, ɵngcc14.InputMask, ɵngcc2.InputText, ɵngcc4.NgClass, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective, ɵngcc4.NgIf, ValidationMessageComponent]; }, encapsulation: 2 });
__decorate([
    Input()
], InputMaskComponent.prototype, "mask", void 0);
__decorate([
    Input()
], InputMaskComponent.prototype, "placeholder", void 0);

var CheckComponent_1;
let CheckComponent = CheckComponent_1 = class CheckComponent extends FieldComponent {
    /**
     * Método construtor responsável por carregar o serviço de validação
     * @param formNotificationService
     */
    constructor(controlContainer, injector, formNotificationService) {
        super(controlContainer, injector);
        this.formNotificationService = formNotificationService;
    }
    /**
     * Método Inicial para subscrição no endpoint responsável por validar o formulário
     */
    ngOnInit() {
        super.ngOnInit();
        this.subscription = this.formNotificationService
            .notifications(this.form, this.name)
            .subscribe((notification) => {
            if (notification instanceof FieldFormNotification) {
                this.message = notification.message;
            }
            else {
                this.message = null;
            }
        });
    }
    /**
     * Método responsável por realizar a saida das subscrições do endpont de validação
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.subscription.unsubscribe();
    }
};
CheckComponent.ɵfac = function CheckComponent_Factory(t) { return new (t || CheckComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ControlContainer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormNotificationService)); };
CheckComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CheckComponent, selectors: [["", "nCheck", ""]], features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(CheckComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c26, ngContentSelectors: _c13, decls: 11, vars: 12, consts: [[1, "ui-g-12", "semborda"], [1, "ui-g-4", 3, "innerHTML"], [1, "ui-g-4"], ["id", "sim", "type", "radio", "pRadioButton", "", 3, "ngClass", "value", "name", "formControl"], ["id", "n\u00E3o", "type", "radio", "name", "correspondencia", "pRadioButton", "", 3, "ngClass", "value", "formControl"]], template: function CheckComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "p-radioButton", 3);
        ɵngcc0.ɵɵelementStart(4, "label");
        ɵngcc0.ɵɵtext(5, "Sim");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 2);
        ɵngcc0.ɵɵelement(7, "p-radioButton", 4);
        ɵngcc0.ɵɵelementStart(8, "label");
        ɵngcc0.ɵɵtext(9, "N\u00E3o");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c21, ctx.message))("value", true)("name", ctx.name)("formControl", ctx.formControl);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c21, ctx.message))("value", false)("formControl", ctx.formControl);
    } }, directives: [ɵngcc15.RadioButton, ɵngcc4.NgClass, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective], encapsulation: 2 });
CheckComponent.ctorParameters = () => [
    { type: ControlContainer },
    { type: Injector },
    { type: FormNotificationService }
];

let FormComponent = class FormComponent {
    constructor(crudService, activatedRoute, router) {
        this.crudService = crudService;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.action = "save";
        this.saveLabel = "Salvar";
        this.disableSave = false;
        this.save = new EventEmitter();
        this.reset = new EventEmitter();
    }
    ngOnInit() {
        if (this.service) {
            this.crudService = this.service;
        }
    }
    submit() {
        if (this.save.observers.length) {
            this.save.emit(this.form.value);
        }
        else {
            this.crudService[this.action](this.form.value)
                .subscribe(() => {
                if (this.route) {
                    this.router.navigate(this.route, { relativeTo: this.activatedRoute });
                }
                else if (this.reset.observers.length) {
                    this.reset.emit(this.form);
                }
                else {
                    this.form.reset();
                }
            });
        }
    }
};
FormComponent.ɵfac = function FormComponent_Factory(t) { return new (t || FormComponent)(ɵngcc0.ɵɵdirectiveInject(CRUD_SERVICE), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.Router)); };
FormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormComponent, selectors: [["nForm"]], inputs: { action: "action", saveLabel: "saveLabel", disableSave: "disableSave", form: "form", route: "route", service: "service" }, outputs: { save: "save", reset: "reset" }, ngContentSelectors: _c28, decls: 5, vars: 1, consts: [[1, "ui-g", "form-group", 3, "submit"], ["class", "ui-g-12 ui-lg-2 ui-md-4 ui-sm-12", 4, "ngIf"], [1, "ui-g-12", "ui-lg-2", "ui-md-4", "ui-sm-12"], ["pButton", "", "type", "submit", 3, "label", "disabled"]], template: function FormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c27);
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "form", 0);
        ɵngcc0.ɵɵlistener("submit", function FormComponent_Template_form_submit_1_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵtemplate(3, FormComponent_div_3_Template, 2, 2, "div", 1);
        ɵngcc0.ɵɵprojection(4, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disableSave);
    } }, directives: [ɵngcc7.ɵangular_packages_forms_forms_y, ɵngcc7.NgControlStatusGroup, ɵngcc7.NgForm, ɵngcc4.NgIf, ɵngcc2.ButtonDirective], encapsulation: 2 });
FormComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CRUD_SERVICE,] }] },
    { type: ActivatedRoute },
    { type: Router }
];
__decorate([
    Input()
], FormComponent.prototype, "form", void 0);
__decorate([
    Input()
], FormComponent.prototype, "route", void 0);
__decorate([
    Input()
], FormComponent.prototype, "action", void 0);
__decorate([
    Input()
], FormComponent.prototype, "saveLabel", void 0);
__decorate([
    Input()
], FormComponent.prototype, "service", void 0);
__decorate([
    Input()
], FormComponent.prototype, "disableSave", void 0);
__decorate([
    Output()
], FormComponent.prototype, "save", void 0);
__decorate([
    Output()
], FormComponent.prototype, "reset", void 0);
FormComponent = __decorate([ __param(0, Inject(CRUD_SERVICE))
], FormComponent);

let ValidationMessageComponent = class ValidationMessageComponent {
};
ValidationMessageComponent.ɵfac = function ValidationMessageComponent_Factory(t) { return new (t || ValidationMessageComponent)(); };
ValidationMessageComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ValidationMessageComponent, selectors: [["nValidationMessage"]], inputs: { control: "control" }, decls: 1, vars: 1, consts: [[4, "ngIf"], [1, "form-notification-msg", "ui-message", "ui-messages-error", "ui-corner-all"]], template: function ValidationMessageComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ValidationMessageComponent_ng_container_0_Template, 8, 6, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.control.invalid && (ctx.control.dirty || ctx.control.touched) && ctx.control.errors);
    } }, directives: [ɵngcc4.NgIf], encapsulation: 2 });
__decorate([
    Input()
], ValidationMessageComponent.prototype, "control", void 0);

var AutoCompleteComponent_1;
let AutoCompleteComponent = AutoCompleteComponent_1 = class AutoCompleteComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.virtualScroll = false;
        this.itemSize = 30;
    }
    selectItem(option) {
        this.formControl.setValue(option);
    }
    findAll(event) {
        let query = {};
        query[this.field] = event.query;
        this.service.findAll(query).subscribe(data => {
            this.results = data;
        });
    }
    outerToInner(value) {
        if (value && value.id && !value[this.field]) {
            this.service.find(value.id).subscribe((data) => {
                this.formControl.setValue(data);
            });
        }
        return value;
    }
};
AutoCompleteComponent.ɵfac = function AutoCompleteComponent_Factory(t) { return ɵAutoCompleteComponent_BaseFactory(t || AutoCompleteComponent); };
AutoCompleteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AutoCompleteComponent, selectors: [["", "nAutoComplete", ""]], inputs: { virtualScroll: "virtualScroll", itemSize: "itemSize", field: "field", service: "service" }, features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(AutoCompleteComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c29, ngContentSelectors: _c13, decls: 7, vars: 10, consts: [["form-notification", "", 1, "md-inputfield", 3, "name", "form"], ["notification", ""], [3, "formControl", "suggestions", "virtualScroll", "itemSize", "field", "onBlur", "onSelect", "onFocus", "completeMethod"], ["input", ""], [3, "for", "innerHTML"], [3, "control", 4, "ngIf"], [3, "control"]], template: function AutoCompleteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "p-autoCompleteCustom", 2, 3);
        ɵngcc0.ɵɵlistener("onBlur", function AutoCompleteComponent_Template_p_autoCompleteCustom_onBlur_2_listener($event) { return ctx.onBlurEvent($event); })("onSelect", function AutoCompleteComponent_Template_p_autoCompleteCustom_onSelect_2_listener($event) { return ctx.onSelectEvent($event); })("onFocus", function AutoCompleteComponent_Template_p_autoCompleteCustom_onFocus_2_listener($event) { return ctx.onFocusEvent($event); })("completeMethod", function AutoCompleteComponent_Template_p_autoCompleteCustom_completeMethod_2_listener($event) { return ctx.findAll($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "label", 4);
        ɵngcc0.ɵɵtemplate(5, AutoCompleteComponent_nValidationMessage_5_Template, 1, 1, "nValidationMessage", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1082 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("form", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("suggestions", ctx.results)("virtualScroll", ctx.virtualScroll)("itemSize", ctx.itemSize)("field", ctx.field);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.name)("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !_r1082.message);
    } }, directives: function () { return [FormNotificationComponent,
        AutoCompleteCustomComponent, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective, ɵngcc4.NgIf, ValidationMessageComponent]; }, encapsulation: 2 });
__decorate([
    Input()
], AutoCompleteComponent.prototype, "field", void 0);
__decorate([
    Input()
], AutoCompleteComponent.prototype, "virtualScroll", void 0);
__decorate([
    Input()
], AutoCompleteComponent.prototype, "itemSize", void 0);
__decorate([
    Input()
], AutoCompleteComponent.prototype, "service", void 0);

const AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => AutoCompleteCustomComponent),
    multi: true
};
let AutoCompleteCustomComponent = class AutoCompleteCustomComponent extends AutoComplete {
    constructor(el, renderer, cd, differs) {
        super(el, renderer, cd, differs);
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.differs = differs;
    }
};
AutoCompleteCustomComponent.ɵfac = function AutoCompleteCustomComponent_Factory(t) { return new (t || AutoCompleteCustomComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };
AutoCompleteCustomComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AutoCompleteCustomComponent, selectors: [["p-autoCompleteCustom"]], inputs: { virtualScroll: "virtualScroll", itemSize: "itemSize" }, features: [ɵngcc0.ɵɵProvidersFeature([AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 12, consts: [[3, "ngClass", "ngStyle"], ["aria-autocomplete", "list", "role", "combobox", "aria-haspopup", "true", 3, "ngStyle", "class", "autocomplete", "ngClass", "value", "readonly", "disabled", "click", "input", "keydown", "keyup", "focus", "blur", "change", "paste", 4, "ngIf"], ["class", "ui-autocomplete-multiple-container ui-widget ui-inputtext ui-state-default ui-corner-all", 3, "ngClass", "click", 4, "ngIf"], ["class", "ui-autocomplete-loader pi pi-spinner pi-spin", 4, "ngIf"], ["type", "button", "pButton", "", "class", "ui-autocomplete-dropdown", 3, "icon", "disabled", "click", 4, "ngIf"], [3, "ngClass", "max-height", "ngStyle", "class", 4, "ngIf"], ["aria-autocomplete", "list", "role", "combobox", "aria-haspopup", "true", 3, "ngStyle", "autocomplete", "ngClass", "value", "readonly", "disabled", "click", "input", "keydown", "keyup", "focus", "blur", "change", "paste"], ["in", ""], [1, "ui-autocomplete-multiple-container", "ui-widget", "ui-inputtext", "ui-state-default", "ui-corner-all", 3, "ngClass", "click"], ["multiContainer", ""], ["class", "ui-autocomplete-token ui-state-highlight ui-corner-all", 4, "ngFor", "ngForOf"], [1, "ui-autocomplete-input-token"], ["aria-autocomplete", "list", "role", "combobox", "aria-haspopup", "true", 3, "disabled", "readonly", "autocomplete", "ngStyle", "input", "click", "keydown", "keyup", "focus", "blur", "change", "paste"], ["multiIn", ""], [1, "ui-autocomplete-token", "ui-state-highlight", "ui-corner-all"], ["token", ""], ["class", "ui-autocomplete-token-icon pi pi-fw pi-times", 3, "click", 4, "ngIf"], ["class", "ui-autocomplete-token-label", 4, "ngIf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ui-autocomplete-token-icon", "pi", "pi-fw", "pi-times", 3, "click"], [1, "ui-autocomplete-token-label"], [1, "ui-autocomplete-loader", "pi", "pi-spinner", "pi-spin"], ["type", "button", "pButton", "", 1, "ui-autocomplete-dropdown", 3, "icon", "disabled", "click"], ["ddBtn", ""], ["panel", ""], ["role", "listbox", 1, "ui-autocomplete-items", "ui-autocomplete-list", "ui-widget-content", "ui-widget", "ui-corner-all", "ui-helper-reset"], [4, "ngIf", "ngIfElse"], ["virtualScrollList", ""], ["class", "ui-autocomplete-emptymessage ui-autocomplete-list-item ui-corner-all", 4, "ngIf"], [3, "option", "highlightOption", "index", "itemSize", "template", "resolvedFieldData", "highlightOptionChange", "onClick", 4, "ngFor", "ngForOf"], [3, "option", "highlightOption", "index", "itemSize", "template", "resolvedFieldData", "highlightOptionChange", "onClick"], [3, "ngStyle", "itemSize", 4, "ngIf"], [3, "ngStyle", "itemSize"], [4, "cdkVirtualFor", "cdkVirtualForOf"], [1, "ui-autocomplete-emptymessage", "ui-autocomplete-list-item", "ui-corner-all"]], template: function AutoCompleteCustomComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtemplate(1, AutoCompleteCustomComponent_input_1_Template, 2, 22, "input", 1);
        ɵngcc0.ɵɵtemplate(2, AutoCompleteCustomComponent_ul_2_Template, 6, 21, "ul", 2);
        ɵngcc0.ɵɵtemplate(3, AutoCompleteCustomComponent_i_3_Template, 1, 0, "i", 3);
        ɵngcc0.ɵɵtemplate(4, AutoCompleteCustomComponent_button_4_Template, 2, 3, "button", 4);
        ɵngcc0.ɵɵtemplate(5, AutoCompleteCustomComponent_div_5_Template, 7, 16, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.styleClass);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(9, _c36, ctx.dropdown, ctx.multiple))("ngStyle", ctx.style);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.multiple);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.multiple);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dropdown);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.overlayVisible);
    } }, directives: function () { return [ɵngcc4.NgClass, ɵngcc4.NgStyle, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc4.NgTemplateOutlet, ɵngcc2.ButtonDirective, AutoCompleteItem, ɵngcc16.CdkVirtualScrollViewport, ɵngcc16.CdkFixedSizeVirtualScroll, ɵngcc16.CdkVirtualForOf]; }, encapsulation: 2 });
AutoCompleteCustomComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: IterableDiffers }
];
__decorate([
    Input()
], AutoCompleteCustomComponent.prototype, "virtualScroll", void 0);
__decorate([
    Input()
], AutoCompleteCustomComponent.prototype, "itemSize", void 0);

let AutoCompleteItem = class AutoCompleteItem {
    constructor() {
        this.highlightOptionChange = new EventEmitter();
        this.onClick = new EventEmitter();
    }
    selectItem(event) {
        this.onClick.emit({
            originalEvent: event,
            option: this.option
        });
    }
};
AutoCompleteItem.ɵfac = function AutoCompleteItem_Factory(t) { return new (t || AutoCompleteItem)(); };
AutoCompleteItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AutoCompleteItem, selectors: [["p-autoCompleteItem"]], inputs: { option: "option", resolvedFieldData: "resolvedFieldData", highlightOption: "highlightOption", index: "index", itemSize: "itemSize", template: "template" }, outputs: { highlightOptionChange: "highlightOptionChange", onClick: "onClick" }, decls: 3, vars: 13, consts: [["role", "option", 3, "ngClass", "id", "ngStyle", "mouseenter", "mouseleave", "click"], [4, "ngIf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function AutoCompleteItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "li", 0);
        ɵngcc0.ɵɵlistener("mouseenter", function AutoCompleteItem_Template_li_mouseenter_0_listener() { return ctx.highlightOptionChange.emit(ctx.option); })("mouseleave", function AutoCompleteItem_Template_li_mouseleave_0_listener() { return ctx.highlightOptionChange.emit(null); })("click", function AutoCompleteItem_Template_li_click_0_listener($event) { return ctx.selectItem($event); });
        ɵngcc0.ɵɵtemplate(1, AutoCompleteItem_span_1_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵtemplate(2, AutoCompleteItem_ng_container_2_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c37, ctx.highlightOption == ctx.option))("id", ctx.highlightOption == ctx.option ? "p-highlighted-option" : "")("ngStyle", ɵngcc0.ɵɵpureFunction1(8, _c38, ctx.itemSize + "px"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.template);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(10, _c39, ctx.option, ctx.index));
    } }, directives: [ɵngcc4.NgClass, ɵngcc4.NgStyle, ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet], encapsulation: 2 });
__decorate([
    Input()
], AutoCompleteItem.prototype, "option", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "resolvedFieldData", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "highlightOption", void 0);
__decorate([
    Output()
], AutoCompleteItem.prototype, "highlightOptionChange", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "index", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "itemSize", void 0);
__decorate([
    Input()
], AutoCompleteItem.prototype, "template", void 0);
__decorate([
    Output()
], AutoCompleteItem.prototype, "onClick", void 0);

var AutoCompleteMultipleComponent_1;
let AutoCompleteMultipleComponent = AutoCompleteMultipleComponent_1 = class AutoCompleteMultipleComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.virtualScroll = false;
        this.itemSize = 30;
    }
    findAll(event) {
        let query = {};
        query[this.field] = event.query;
        this.service.findAll(query).subscribe(data => {
            this.results = data;
        });
    }
    outerToInner(value) {
        if (value && value.length > 0 && !value[0][this.field]) {
            let obs = [];
            value.forEach(element => {
                if (element && element.id) {
                    obs.push(this.service.find(element.id));
                }
            });
            forkJoin(obs).subscribe((data) => {
                this.formControl.setValue(data);
            });
        }
        return value;
    }
};
AutoCompleteMultipleComponent.ɵfac = function AutoCompleteMultipleComponent_Factory(t) { return ɵAutoCompleteMultipleComponent_BaseFactory(t || AutoCompleteMultipleComponent); };
AutoCompleteMultipleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AutoCompleteMultipleComponent, selectors: [["", "nAutoCompleteMultiple", ""]], inputs: { virtualScroll: "virtualScroll", itemSize: "itemSize", field: "field", service: "service" }, features: [ɵngcc0.ɵɵProvidersFeature([provideValueAccessor(AutoCompleteMultipleComponent_1)]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c40, ngContentSelectors: _c13, decls: 7, vars: 11, consts: [["form-notification", "", 1, "md-inputfield", 3, "name", "form"], ["notification", ""], [3, "formControl", "suggestions", "field", "virtualScroll", "itemSize", "multiple", "completeMethod", "onBlur", "onSelect", "onFocus"], ["input", ""], [3, "for", "innerHTML"], [3, "control", 4, "ngIf"], [3, "control"]], template: function AutoCompleteMultipleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "p-autoCompleteCustom", 2, 3);
        ɵngcc0.ɵɵlistener("completeMethod", function AutoCompleteMultipleComponent_Template_p_autoCompleteCustom_completeMethod_2_listener($event) { return ctx.findAll($event); })("onBlur", function AutoCompleteMultipleComponent_Template_p_autoCompleteCustom_onBlur_2_listener($event) { return ctx.onBlurEvent($event); })("onSelect", function AutoCompleteMultipleComponent_Template_p_autoCompleteCustom_onSelect_2_listener($event) { return ctx.onSelectEvent($event); })("onFocus", function AutoCompleteMultipleComponent_Template_p_autoCompleteCustom_onFocus_2_listener($event) { return ctx.onFocusEvent($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "label", 4);
        ɵngcc0.ɵɵtemplate(5, AutoCompleteMultipleComponent_nValidationMessage_5_Template, 1, 1, "nValidationMessage", 5);
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1147 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("form", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("suggestions", ctx.results)("field", ctx.field)("virtualScroll", ctx.virtualScroll)("itemSize", ctx.itemSize)("multiple", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.name)("innerHTML", ctx.label, ɵngcc0.ɵɵsanitizeHtml);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !_r1147.message);
    } }, directives: [FormNotificationComponent,
        AutoCompleteCustomComponent, ɵngcc7.NgControlStatus, ɵngcc7.FormControlDirective, ɵngcc4.NgIf, ValidationMessageComponent], encapsulation: 2 });
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "field", void 0);
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "service", void 0);
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "virtualScroll", void 0);
__decorate([
    Input()
], AutoCompleteMultipleComponent.prototype, "itemSize", void 0);

let CheckPipe = class CheckPipe {
    transform(value, ...args) {
        return value ? "Sim" : "Não";
    }
};
CheckPipe.ɵfac = function CheckPipe_Factory(t) { return new (t || CheckPipe)(); };
CheckPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "check", type: CheckPipe, pure: true });

let CrudModule = class CrudModule {
};
CrudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CrudModule });
CrudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CrudModule_Factory(t) { return new (t || CrudModule)(); }, providers: [
        httpInterceptorProviders,
        ConfirmationService,
    ], imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            FormNotificationModule,
            InputTextModule$1,
            InputTextareaModule,
            CalendarModule,
            AutoCompleteModule,
            ButtonModule,
            DatatableModule,
            HttpClientModule,
            RouterModule,
            ConfirmDialogModule,
            DropdownModule,
            ScrollingModule,
            InputMaskModule,
            RadioButtonModule,
        ]] });

let BreadcrumbService = class BreadcrumbService {
    constructor() {
        this.itemsSource = new Subject();
        this.itemsHandler = this.itemsSource.asObservable();
    }
    setItems(items) {
        this.itemsSource.next(items);
    }
    reset() {
        this.itemsSource.next([]);
    }
};
BreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) { return new (t || BreadcrumbService)(); };
BreadcrumbService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BreadcrumbService, factory: BreadcrumbService.ɵfac });

let BreadcrumbComponent = class BreadcrumbComponent {
    constructor(router, activatedRoute, breadcrumbService, messages, accessibilityService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.breadcrumbService = breadcrumbService;
        this.messages = messages;
        this.accessibilityService = accessibilityService;
        this.highContrastEnabled = false;
        this.subscription = breadcrumbService.itemsHandler.subscribe(response => {
            this.items = response;
        });
    }
    ngOnInit() {
        this.router.events.pipe(filter((event) => event instanceof NavigationEnd), distinctUntilChanged()).subscribe((event) => {
            this.items = this.buildBreadCrumb(this.activatedRoute.root);
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    enableHighContrast() {
        this.highContrastEnabled = true;
        this.accessibilityService.enableHighContrast();
    }
    disableHighContrast() {
        this.highContrastEnabled = false;
        this.accessibilityService.disableHighContrast();
    }
    increaseFontSize() {
        this.accessibilityService.increaseFontSize();
    }
    decreaseFontSize() {
        this.accessibilityService.decreaseFontSize();
    }
    ngAfterViewInit() {
        this.messages.messageObserver.subscribe((msg) => {
            this.accessibilityService.addAccessibilityMessages({ severity: msg.severity });
        });
        this.accessibilityService.addAccessibilityIcons();
    }
    buildBreadCrumb(route, url = '', breadcrumbs = []) {
        let label = route.routeConfig && route.routeConfig.data ? route.routeConfig.data.breadcrumb : '';
        let path = route.routeConfig && route.routeConfig.data ? route.routeConfig.path : '';
        const lastRoutePart = path.split('/').pop();
        const isDynamicRoute = lastRoutePart.startsWith(':');
        if (isDynamicRoute && !!route.snapshot) {
            for (let key in route.snapshot.params) {
                path = path.replace(`:${key}`, route.snapshot.params[key]);
            }
            label = Object.values(route.snapshot.params).join(' ');
        }
        const nextUrl = path ? `${url}/${path}` : url;
        const menuItem = {
            "label": label,
            "routerLink": nextUrl
        };
        const newBreadcrumbs = menuItem.label ? [...breadcrumbs, menuItem] : [...breadcrumbs];
        if (route.firstChild) {
            return this.buildBreadCrumb(route.firstChild, nextUrl, newBreadcrumbs);
        }
        return newBreadcrumbs;
    }
};
BreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) { return new (t || BreadcrumbComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(BreadcrumbService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MessageService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AccessbilityService)); };
BreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbComponent, selectors: [["breadcrumb"]], ngContentSelectors: _c13, decls: 20, vars: 9, consts: [[1, "layout-breadcrumb"], ["routerLink", ""], [1, "material-icons"], ["ngFor", "", 3, "ngForOf"], [1, "layout-breadcrumb-options"], [3, "ngStyle", "title", "click"], ["title", "Aumentar fonte", 3, "ngStyle", "click"], ["title", "Diminuir fonte", 3, "ngStyle", "click"], [3, "routerLink", 4, "ngIf"], [4, "ngIf"], [3, "routerLink"]], template: function BreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "ul");
        ɵngcc0.ɵɵelementStart(2, "li");
        ɵngcc0.ɵɵelementStart(3, "a", 1);
        ɵngcc0.ɵɵelementStart(4, "i", 2);
        ɵngcc0.ɵɵtext(5, "home");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "li");
        ɵngcc0.ɵɵtext(7, "/");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, BreadcrumbComponent_ng_template_8_Template, 4, 3, "ng-template", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵelementStart(10, "a", 5);
        ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_Template_a_click_10_listener() { return ctx.highContrastEnabled ? ctx.disableHighContrast() : ctx.enableHighContrast(); });
        ɵngcc0.ɵɵelementStart(11, "i", 2);
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "a", 6);
        ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_Template_a_click_13_listener() { return ctx.increaseFontSize(); });
        ɵngcc0.ɵɵelementStart(14, "i", 2);
        ɵngcc0.ɵɵtext(15, "exposure_plus_1");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "a", 7);
        ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_Template_a_click_16_listener() { return ctx.decreaseFontSize(); });
        ɵngcc0.ɵɵelementStart(17, "i", 2);
        ɵngcc0.ɵɵtext(18, "exposure_neg_1");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(19);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.highContrastEnabled ? "Desabilitar alto contraste" : "Habilitar alto contraste");
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(6, _c41));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.highContrastEnabled ? "visibility_off" : "visibility");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(7, _c41));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(8, _c41));
    } }, directives: [ɵngcc9.RouterLinkWithHref, ɵngcc4.NgForOf, ɵngcc4.NgStyle, ɵngcc4.NgIf], styles: [""] });
BreadcrumbComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: BreadcrumbService },
    { type: MessageService },
    { type: AccessbilityService }
];

let BreadcrumbModule = class BreadcrumbModule {
};
BreadcrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BreadcrumbModule });
BreadcrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BreadcrumbModule_Factory(t) { return new (t || BreadcrumbModule)(); }, providers: [
        BreadcrumbService
    ], imports: [[
            CommonModule,
            RouterModule
        ]] });

var MenuOrientation;
(function (MenuOrientation) {
    MenuOrientation[MenuOrientation["STATIC"] = 0] = "STATIC";
    MenuOrientation[MenuOrientation["OVERLAY"] = 1] = "OVERLAY";
    MenuOrientation[MenuOrientation["SLIM"] = 2] = "SLIM";
    MenuOrientation[MenuOrientation["HORIZONTAL"] = 3] = "HORIZONTAL";
})(MenuOrientation || (MenuOrientation = {}));
/**
 * Class MenuService
 * @class
 */
let MenusService = class MenusService {
    constructor() {
        this.layoutMode = MenuOrientation.STATIC;
        this.itens = [];
    }
    isOverlay() {
        return this.layoutMode === MenuOrientation.OVERLAY;
    }
    isHorizontal() {
        return this.layoutMode === MenuOrientation.HORIZONTAL;
    }
    isSlim() {
        return this.layoutMode === MenuOrientation.SLIM;
    }
    changeToStaticMenu() {
        this.layoutMode = MenuOrientation.STATIC;
    }
    changeToOverlayMenu() {
        this.layoutMode = MenuOrientation.OVERLAY;
    }
    changeToHorizontalMenu() {
        this.layoutMode = MenuOrientation.HORIZONTAL;
    }
    changeToSlimMenu() {
        this.layoutMode = MenuOrientation.SLIM;
    }
};
MenusService.ɵfac = function MenusService_Factory(t) { return new (t || MenusService)(); };
MenusService.ɵprov = ɵɵdefineInjectable({ factory: function MenusService_Factory() { return new MenusService(); }, token: MenusService, providedIn: "root" });

let MenuComponent = class MenuComponent {
    constructor(menuService) {
        this.menuService = menuService;
    }
};
MenuComponent.ɵfac = function MenuComponent_Factory(t) { return new (t || MenuComponent)(ɵngcc0.ɵɵdirectiveInject(MenusService)); };
MenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MenuComponent, selectors: [["app-menu"]], decls: 1, vars: 2, consts: [["submenu", "", "root", "true", "visible", "true", "parentActive", "true", 1, "ultima-menu", "ultima-main-menu", "clearfix", 3, "item", "reset"]], template: function MenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "ul", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("item", ctx.menuService.itens)("reset", ctx.menuService.resetMenu);
    } }, directives: function () { return [SubMenuComponent]; }, encapsulation: 2 });
MenuComponent.ctorParameters = () => [
    { type: MenusService }
];

let SubMenuComponent = class SubMenuComponent {
    constructor(menuService) {
        this.menuService = menuService;
    }
    /**
     * Alterar o menu root entre aberto e fechado
     */
    rootMenuToggle() {
        if (this.root) {
            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;
        }
    }
    /**
     * Activa o menu por index e desativa o item ativo
     * @param index
     */
    activeMenuByIndex(index) {
        this.activeIndex = (this.activeIndex === index) ? null : index;
        return this.activeIndex;
    }
    /**
     * Verifica se foi informado um comando para o item de menu e executa caso necessário
     * @param item menu
     */
    execCommand(event, item) {
        if (item.command) {
            item.command({ 'originalEvent': event, 'item': item });
            return true;
        }
        return false;
    }
    /**
     * Esconte o menu caso este não possua itens
     * @param item menu
     */
    hideMenu(item) {
        if (!item.items) {
            if (this.menuService.isHorizontal() || this.menuService.isSlim()) {
                this.menuService.resetMenu = true;
            }
            else {
                this.menuService.resetMenu = false;
            }
            this.menuService.overlayMenuActive = false;
            this.menuService.staticMenuMobileActive = false;
            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;
            return true;
        }
        return false;
    }
    itemClick(event, item, index) {
        this.rootMenuToggle();
        if (item.disabled) {
            event.preventDefault();
            return false;
        }
        this.activeMenuByIndex(index);
        this.execCommand(event, item);
        if (item.items || (!item.url && !item.routerLink)) {
            event.preventDefault();
        }
        this.hideMenu(item);
        return true;
    }
    onMouseEnter(index) {
        if (this.root && this.menuService.menuHoverActive && (this.menuService.isHorizontal() || this.menuService.isSlim())) {
            this.activeIndex = index;
        }
    }
    isActive(index) {
        return this.activeIndex === index;
    }
    get reset() {
        return this._reset;
    }
    set reset(val) {
        this._reset = val;
        if (this._reset && (this.menuService.isHorizontal() || this.menuService.isSlim())) {
            this.activeIndex = null;
        }
    }
    get parentActive() {
        return this._parentActive;
    }
    set parentActive(val) {
        this._parentActive = val;
        if (!this._parentActive) {
            this.activeIndex = null;
        }
    }
};
SubMenuComponent.ɵfac = function SubMenuComponent_Factory(t) { return new (t || SubMenuComponent)(ɵngcc0.ɵɵdirectiveInject(MenusService)); };
SubMenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SubMenuComponent, selectors: [["", "submenu", ""]], inputs: { reset: "reset", parentActive: "parentActive", item: "item", root: "root", visible: "visible" }, attrs: _c42, decls: 1, vars: 1, consts: [["ngFor", "", 3, "ngForOf"], [3, "ngClass", "class", 4, "ngIf"], [3, "ngClass"], ["class", "ripplelink", 3, "href", "click", "mouseenter", 4, "ngIf"], ["class", "ripplelink", "routerLinkActive", "active-menuitem-routerlink", 3, "routerLink", "routerLinkActiveOptions", "click", "mouseenter", 4, "ngIf"], [1, "layout-menu-tooltip"], [1, "layout-menu-tooltip-arrow"], [1, "layout-menu-tooltip-text"], ["submenu", "", 3, "item", "visible", "reset", "parentActive", 4, "ngIf"], [1, "ripplelink", 3, "href", "click", "mouseenter"], ["class", "material-icons", 4, "ngIf"], ["class", "menuitem-badge", 4, "ngIf"], ["class", "material-icons submenu-icon", 4, "ngIf"], [1, "material-icons"], [1, "menuitem-badge"], [1, "material-icons", "submenu-icon"], ["routerLinkActive", "active-menuitem-routerlink", 1, "ripplelink", 3, "routerLink", "routerLinkActiveOptions", "click", "mouseenter"], ["submenu", "", 3, "item", "visible", "reset", "parentActive"]], template: function SubMenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SubMenuComponent_ng_template_0_Template, 1, 1, "ng-template", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.root ? ctx.item : ctx.item.items);
    } }, directives: [ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc4.NgClass, ɵngcc9.RouterLinkWithHref, ɵngcc9.RouterLinkActive, SubMenuComponent], encapsulation: 2, data: { animation: [
            trigger('children', [
                state('hiddenAnimated', style({
                    height: '0px'
                })),
                state('visibleAnimated', style({
                    height: '*'
                })),
                state('visible', style({
                    height: '*',
                    'z-index': 100
                })),
                state('hidden', style({
                    height: '0px',
                    'z-index': '*'
                })),
                transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ] } });
SubMenuComponent.ctorParameters = () => [
    { type: MenusService }
];
__decorate([
    Input()
], SubMenuComponent.prototype, "item", void 0);
__decorate([
    Input()
], SubMenuComponent.prototype, "root", void 0);
__decorate([
    Input()
], SubMenuComponent.prototype, "visible", void 0);
__decorate([
    Input()
], SubMenuComponent.prototype, "reset", null);
__decorate([
    Input()
], SubMenuComponent.prototype, "parentActive", null);

let MenuModule = class MenuModule {
};
MenuModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MenuModule });
MenuModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MenuModule_Factory(t) { return new (t || MenuModule)(); }, providers: [
        MenusService
    ], imports: [[
            CommonModule,
            RouterModule
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataProviderFactory, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: DatatableService }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableButtonComponent, [{
        type: Component,
        args: [{
                selector: 'basis-datatable-button',
                template: "<p pTooltip=\"{{ bTooltip }}\">\n    <button\n        type=\"button\" tooltipPosition=\"bottom\" class=\"{{ class }}\"\n        icon=\"ui-icon-{{ icon }}\" (click)=\"onClick($event)\" [disabled]=\"disabled\" pButton>\n    </button>\n</p>\n"
            }]
    }], function () { return []; }, { allowMultipleSelection: [{
            type: Input
        }], disabled: [{
            type: Input
        }], click: [{
            type: Output
        }], icon: [{
            type: Input
        }], class: [{
            type: Input
        }], bTooltip: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Column, [{
        type: Directive,
        args: [{
                selector: 'p-column'
            }]
    }], function () { return []; }, { filterType: [{
            type: Input
        }], exportable: [{
            type: Input
        }], resizable: [{
            type: Input
        }], sortFunction: [{
            type: Output
        }], field: [{
            type: Input
        }], colId: [{
            type: Input
        }], sortField: [{
            type: Input
        }], filterField: [{
            type: Input
        }], header: [{
            type: Input
        }], footer: [{
            type: Input
        }], sortable: [{
            type: Input
        }], editable: [{
            type: Input
        }], filter: [{
            type: Input
        }], filterMatchMode: [{
            type: Input
        }], excludeGlobalFilter: [{
            type: Input
        }], rowspan: [{
            type: Input
        }], colspan: [{
            type: Input
        }], scope: [{
            type: Input
        }], style: [{
            type: Input
        }], styleClass: [{
            type: Input
        }], headerStyle: [{
            type: Input
        }], headerStyleClass: [{
            type: Input
        }], bodyStyle: [{
            type: Input
        }], bodyStyleClass: [{
            type: Input
        }], footerStyle: [{
            type: Input
        }], footerStyleClass: [{
            type: Input
        }], hidden: [{
            type: Input
        }], expander: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], filterPlaceholder: [{
            type: Input
        }], filterMaxlength: [{
            type: Input
        }], frozen: [{
            type: Input
        }], templates: [{
            type: ContentChildren,
            args: [PrimeTemplate]
        }], template: [{
            type: ContentChild,
            args: [TemplateRef]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableComponent, [{
        type: Component,
        args: [{
                selector: 'basis-datatable',
                template: "<p-blockUI [blocked]=\"blockContent\">\n    <div class=\"center-spinner\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n<div [ngClass]=\"{'ui-g-2':verticalButtons, 'ui-g-5':!verticalButtons}\">&nbsp;</div>\n<div [ngClass]=\"verticalButtons ? 'ui-g-11' : 'ui-g-12'\">\n    <basis-show-column *ngIf=\"showVisibleColumnsControl\" [columns]=\"columns\" (updateVisibleColumns)=\"updateVisibleColumns($event)\"></basis-show-column>\n</div>\n<div [ngClass]=\"{\n        'ui-g-11' : verticalButtons,\n        'ui-g-12' : !verticalButtons,\n        'edicao-tabela' : editMode == 'row',\n        'editing-row': editingRow\n    }\">\n    <p-table\n        [value]=\"value\"\n        [rows]=\"rows\"\n        [paginator]=\"true\"\n        [selectionMode]=\"selectionMode\"\n        [responsive]=\"true\"\n        [scrollable]=\"enableScroll\"\n        [scrollHeight]=\"scrollHeight\"\n        [(selection)]=\"selectedRow\"\n        [editMode]=\"editMode\"\n        (onRowSelect)=\"onSelectChange($event)\"\n        (onRowUnselect)=\"onSelectChange($event)\"\n        #datatable\n        [dataKey]=\"dataKey\">\n        <ng-template pTemplate=\"header\" let-columns>\n            <div class=\"ui-g\" *ngIf=\"!verticalButtons\">\n                <div *ngIf=\"showHorizontalButtonsHeader\" class=\"ui-g-4 ui-sm-12\">\n                    <span class=\"horizontal-buttons-header\">{{ horizontalButtonsHeader }}</span>\n                </div>\n                <div [ngClass]=\"{\n                    'horizontal-buttons': true,\n                    'ui-sm-12': true,\n                    'ui-g-8': showHorizontalButtonsHeader,\n                    'ui-g-12': !showHorizontalButtonsHeader}\">\n                    <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n                    <ng-content select=\"horizontalButtons\"></ng-content>\n                </div>\n            </div>\n            <tr>\n                <th *ngFor=\"let col of columns\"\n                    [pSortableColumn]=\"col.sortable ? col.field : null\"\n                    [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    {{col.header}}\n                    <p-sortIcon *ngIf=\"col.sortable\" [field]=\"col.field\"></p-sortIcon>\n                </th>\n            </tr>\n            <tr *ngIf=\"filterOnColumn\">\n                <th *ngFor=\"let col of columns\" [ngStyle]=\"{'display': visibleColumns[col.field]}\">\n                    <basis-filter-column\n                        [listaOriginal]=\"filterSelectOptions\"\n                        [lista]=\"filterSelectOptions\"\n                        [field]=\"col.field\"\n                        [updateFiltro]=\"updateFilterColumn\"\n                        (outputEvent)=\"filterColumn(col.field, $event)\"\n                        [filterType]=\"col.filterType\"\n                        [tableType]=\"type\"\n                        [customFilterOptions]=\"customFilterOptions\">\n                    </basis-filter-column>\n                </th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-editing=\"editing\" let-ri=\"rowIndex\">\n            <tr [pSelectableRow]=\"rowData\"\n                [pContextMenuRow]=\"rowData\"\n                [pEditableRow]=\"rowData\"\n                [ngClass]=\"{'editing': editing}\"\n                (mouseover)=\"editarLinhaOver($event)\"\n                (mouseleave)=\"editarLinhaOut($event)\">\n                <td *ngFor=\"let col of columns; last as isLast\" [ngStyle]=\"{'display': visibleColumns[col.field]}\" >\n                    <ng-container *ngIf=\"!editMode\">\n                        <span *ngIf=\"!col.bodyTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                        <ng-container\n                            *ngIf=\"col.bodyTemplate\"\n                            [ngTemplateOutlet]=\"col.bodyTemplate\"\n                            [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                        </ng-container>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"editMode\">\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <span *ngIf=\"!col.outputTemplate && col.editable == false\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <div class=\"ui-md-12\" *ngIf=\"!col.inputTemplate && col.editable != false\">\n                                    <div class=\"ui-g form-group\">\n                                        <div class=\"ui-md-12\">\n                                            <span class=\"md-inputfield\">\n                                                <input pInputText type=\"text\" [(ngModel)]=\"rowData[col.field]\" [style]=\"{'width':'100%'}\">\n                                                <label>{{ col.header }}</label>\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <ng-container\n                                    *ngIf=\"col.inputTemplate\"\n                                    [ngTemplateOutlet]=\"col.inputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ 'rowData': rowData, 'col': col }\">\n                                </ng-container>\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                <span *ngIf=\"!col.outputTemplate\" [innerHTML]=\"rowData[col.field]\"></span>\n                                <ng-container\n                                    *ngIf=\"col.outputTemplate\"\n                                    [ngTemplateOutlet]=\"col.outputTemplate\"\n                                    [ngTemplateOutletContext]=\"{ rowData: rowData, col: col }\">\n                                </ng-container>\n                            </ng-template>\n                        </p-cellEditor>\n                    </ng-container>\n                    <div *ngIf=\"isLast\" class=\"editar-campos\">\n                        <button *ngIf=\"!editing\" pButton type=\"button\" pInitEditableRow (click)=\"onRowEditInitEvent($event, rowData)\">Editar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pSaveEditableRow class=\"ui-button-success\" style=\"margin-right: .5em\" (click)=\"onRowEditSaveEvent($event, rowData)\">Salvar</button>\n                        <button *ngIf=\"editing\" pButton type=\"button\" pCancelEditableRow class=\"ui-button-danger\" (click)=\"onRowEditCancelEvent($event, rowData, ri)\">Cancelar</button>\n                    </div>\n                </td>\n            </tr>\n        </ng-template>\n        <ng-template *ngIf=\"emptyMessage\">\n            {{ emptyMessage }}\n        </ng-template>\n        <p-footer *ngIf=\"showPaginationFooter && totalRecords() > 0\">\n            {{ paginationFooterText(footerMsg) }}\n        </p-footer>\n\n    </p-table>\n</div>\n<div *ngIf=\"verticalButtons\"\n    class=\"ui-g-1 ui-g-nopad\"\n    [style.position]=\"enableButtonsScroll ? 'sticky' : ''\"\n    [style.top]=\"enableButtonsScroll ? '15%' : ''\">\n        <ng-container *ngTemplateOutlet=\"defaultButtons\"></ng-container>\n        <ng-content></ng-content>\n</div>\n\n<ng-template #defaultButtons>\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Editar' : 'Escolha um registro para editar.' \"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-success\" icon=\"edit\" (click)=\"onClick('edit', $event)\"\n        *ngIf=\"!disableEdit && checkRolesToButton('rulesToShowView') && checkRolesToButton('rulesToHideView')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Visualizar' : 'Escolha um registro para visualizar.'\"\n        [class.horizontal-button]=\"!verticalButtons\" icon=\"remove-red-eye\" (click)=\"onClick('view', $event)\"\n        *ngIf=\"!disableView && checkRolesToButton('rulesToShowEdit') && checkRolesToButton('rulesToHideEdit')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <basis-datatable-button [bTooltip]=\"selectedRow != null ? 'Excluir' : 'Escolha um registro para excluir.'\"\n        [class.horizontal-button]=\"!verticalButtons\" class=\"ui-button-danger\" icon=\"delete\" (click)=\"onClick('delete', $event)\"\n       *ngIf=\"!disableDelete && checkRolesToButton('rulesToShowDelete') && checkRolesToButton('rulesToHideDelete')\" [disabled]=\"selectedRow == null\">\n    </basis-datatable-button>\n\n    <datatable-splitbutton\n        [icon]=\"splitButton.icon\"\n        [class]=\"splitButton.class\"\n        [items]=\"splitButton.itens\"\n        [label]=\"splitButton.label\"\n        [method]=\"splitButton.method\"\n        *ngIf=\"splitButton\">\n    </datatable-splitbutton>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: ["body .ui-datatable .ui-datatable-data tr td{word-wrap:break-word}.horizontal-buttons{display:flex;flex-flow:row wrap;justify-content:flex-end}.horizontal-button{padding:0 3px}.horizontal-buttons-header{font-size:1.3em;word-wrap:break-word}.center-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}.text-right{text-align:right}basis-show-column .ui-multiselect-panel.ui-widget{width:100%;max-width:100%}.edicao-tabela,.edita-linha{position:relative}tr.editing td{padding-bottom:75px!important}.editar-campos{opacity:0;position:absolute;width:100%;background-color:#0000006b;left:0;margin-top:0;display:flex;align-items:center;justify-content:center;min-height:35px;transition:.3s ease-in-out;z-index:1}.editar-campos button{color:#fff;font-size:14px;padding:6px 30px 10px;border-radius:5px;height:28px;width:120px!important}.bt-cancelar,.bt-salvar{margin:0 10px}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: DataProviderFactory }, { type: ɵngcc3.Authorization }]; }, { value: [{
            type: Input
        }], type: [{
            type: Input
        }], rows: [{
            type: Input
        }], showPaginationFooter: [{
            type: Input
        }], disableEdit: [{
            type: Input
        }], disableView: [{
            type: Input
        }], disableDelete: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], enableButtonsScroll: [{
            type: Input
        }], emptyMessage: [{
            type: Input
        }], verticalButtons: [{
            type: Input
        }], enableScroll: [{
            type: Input
        }], disableLoadingBlockUI: [{
            type: Input
        }], filterOnColumn: [{
            type: Input
        }], customFilterOptions: [{
            type: Input
        }], buttonClick: [{
            type: Output
        }], startedLoading: [{
            type: Output
        }], finishedLoading: [{
            type: Output
        }], onRowSelected: [{
            type: Output
        }], showVisibleColumnsControl: [{
            type: Input
        }], dataKey: [{
            type: Input
        }], onRowEditEvent: [{
            type: Output
        }], splitButton: [{
            type: Input
        }], rowsPerPageOptions: [{
            type: Input
        }], url: [{
            type: Input
        }], extraParams: [{
            type: Input
        }], paginationParameters: [{
            type: Input
        }], scrollHeight: [{
            type: Input
        }], scrollWidth: [{
            type: Input
        }], rulesToHide: [{
            type: Input
        }], rulesToShowEdit: [{
            type: Input
        }], rulesToShowDelete: [{
            type: Input
        }], rulesToHideView: [{
            type: Input
        }], rulesToHideEdit: [{
            type: Input
        }], rulesToHideDelete: [{
            type: Input
        }], rowStyleClass: [{
            type: Input
        }], pDatatableComponent: [{
            type: ViewChild,
            args: [Table, { static: true }]
        }], extraButtons: [{
            type: ContentChildren,
            args: [DatatableButtonComponent]
        }], columns: [{
            type: ContentChildren,
            args: [Column]
        }], editMode: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableSplitbuttonComponent, [{
        type: Component,
        args: [{
                selector: 'datatable-splitbutton',
                template: "<p-splitButton label=\"{{label}}\" icon=\"{{icon}}\" (onClick)=\"method\" [model]=\"items\" styleClass=\"{{class}}\">\n</p-splitButton>"
            }]
    }], null, { items: [{
            type: Input
        }], label: [{
            type: Input
        }], class: [{
            type: Input
        }], icon: [{
            type: Input
        }], method: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DatatableSplitbuttonModule, { declarations: function () { return [DatatableSplitbuttonComponent]; }, imports: function () { return [SplitButtonModule]; }, exports: function () { return [DatatableSplitbuttonComponent,
        SplitButtonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableSplitbuttonModule, [{
        type: NgModule,
        args: [{
                imports: [
                    SplitButtonModule
                ],
                declarations: [
                    DatatableSplitbuttonComponent
                ],
                providers: [],
                exports: [
                    DatatableSplitbuttonComponent,
                    SplitButtonModule
                ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterColumn, [{
        type: Component,
        args: [{
                selector: 'basis-filter-column',
                template: "<div [ngSwitch]=\"filterType\">\n    <div *ngSwitchCase=\"'text'\">\n        <div class=\"ui-g form-group\">\n            <div class=\"ui-md-12\">\n                <span class=\"md-inputfield\">\n                    <input type=\"text\" pInputText (input)=\"filtrar($event)\" [(ngModel)]=\"filtro\">\n                    <label>{{ (header) ? header : 'Filtro' }}</label>\n                </span>\n            </div>\n        </div>\n    </div>\n    <div *ngSwitchCase=\"'select'\">\n        <p-multiSelect\n            [options]=\"getCustomFilterOptions()\"\n            [defaultLabel]=\"(header)? header: '&nbsp;'\"\n            [optionLabel]=\"'label'\"\n            appendTo=\"body\"\n            [ngModelOptions]=\"{standalone: true}\"\n            (onChange)=\"filtrar($event)\"\n            [(ngModel)]=\"filtro\"\n            [style]=\"{'width':'100%'}\">\n        </p-multiSelect>\n    </div>\n</div>\n"
            }]
    }], function () { return []; }, { listaOriginal: [{
            type: Input
        }], lista: [{
            type: Input
        }], labelDefaultImplementation: [{
            type: Input
        }], updateFiltro: [{
            type: Input
        }], customFilterOptions: [{
            type: Input
        }], template: [{
            type: Input
        }], outputEvent: [{
            type: Output
        }], field: [{
            type: Input
        }], header: [{
            type: Input
        }], labelDefaultName: [{
            type: Input
        }], filterType: [{
            type: Input
        }], tableType: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FilterColumnModule, { declarations: function () { return [FilterColumn]; }, imports: function () { return [CommonModule,
        MultiSelectModule,
        ButtonModule,
        CheckboxModule,
        DropdownModule,
        FormsModule,
        ReactiveFormsModule,
        InputTextModule]; }, exports: function () { return [FilterColumn]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterColumnModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MultiSelectModule,
                    ButtonModule,
                    CheckboxModule,
                    DropdownModule,
                    FormsModule,
                    ReactiveFormsModule,
                    InputTextModule
                ],
                declarations: [
                    FilterColumn
                ],
                exports: [
                    FilterColumn
                ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PageNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.MessageService }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowColumn, [{
        type: Component,
        args: [{
                selector: 'basis-show-column',
                template: "<div class=\"ui-g-12 ui-g-nopad\">\n    <div class=\"ui-g-3 ui-md-offset-6\">\n        <div class=\"text-right\">Visibilidade das Colunas:</div>\n    </div>\n    <div class=\"ui-g-3\">\n        <p-multiSelect\n            class=\"column\"\n            defaultLabel=\"Selecione as colunas a serem exibidas\"\n            [optionLabel]=\"'header'\"\n            [displaySelectedLabel]=\"false\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            (onChange)=\"mostrarColunas($event)\"\n            [options]=\"options\"\n            [(ngModel)]=\"values\"\n            [style]=\"{ width: '100%' }\"\n        >\n        </p-multiSelect>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: PageNotificationService }]; }, { updateVisibleColumns: [{
            type: Output
        }], columns: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShowColumnModule, { declarations: function () { return [ShowColumn]; }, imports: function () { return [CommonModule,
        MultiSelectModule,
        ButtonModule,
        CheckboxModule,
        DropdownModule,
        FormsModule,
        ReactiveFormsModule,
        InputTextModule]; }, exports: function () { return [ShowColumn]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowColumnModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MultiSelectModule,
                    ButtonModule,
                    CheckboxModule,
                    DropdownModule,
                    FormsModule,
                    ReactiveFormsModule,
                    InputTextModule
                ],
                declarations: [
                    ShowColumn
                ],
                exports: [
                    ShowColumn
                ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DatatableModule, { declarations: function () { return [DatatableComponent,
        DatatableButtonComponent,
        Column]; }, imports: function () { return [CommonModule,
        ButtonModule$1,
        SplitButtonModule,
        TooltipModule,
        TableModule,
        BlockUIModule,
        ProgressSpinnerModule,
        DatatableSplitbuttonModule,
        HttpClientModule,
        PaginatorModule,
        FilterColumnModule,
        ShowColumnModule,
        InputTextModule]; }, exports: function () { return [DatatableComponent,
        DatatableButtonComponent,
        FilterColumnModule,
        ShowColumnModule,
        Column]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    ButtonModule$1,
                    SplitButtonModule,
                    TooltipModule,
                    TableModule,
                    BlockUIModule,
                    ProgressSpinnerModule,
                    DatatableSplitbuttonModule,
                    HttpClientModule,
                    PaginatorModule,
                    FilterColumnModule,
                    ShowColumnModule,
                    InputTextModule
                ],
                declarations: [
                    DatatableComponent,
                    DatatableButtonComponent,
                    Column
                ],
                providers: [
                    { provide: DatatableService, useClass: DatatableService, deps: [HttpClient] },
                    DataProviderFactory
                ],
                exports: [
                    DatatableComponent,
                    DatatableButtonComponent,
                    FilterColumnModule,
                    ShowColumnModule,
                    Column
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUiComponent, [{
        type: Component,
        args: [{
                selector: 'basis-block-ui',
                template: "<p-blockUI [blocked]=\"isBlocked()\">\n    <div class=\"center-screen\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n",
                styles: [".center-screen{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}"]
            }]
    }], function () { return [{ type: ɵngcc3.BlockUiService }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUiModule, { declarations: function () { return [BlockUiComponent]; }, imports: function () { return [CommonModule,
        BlockUIModule,
        ProgressSpinnerModule]; }, exports: function () { return [BlockUIModule,
        BlockUiComponent,
        ProgressSpinnerModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUiModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    BlockUIModule,
                    ProgressSpinnerModule,
                ],
                declarations: [
                    BlockUiComponent
                ],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: BlockUiInterceptor,
                        multi: true
                    },
                    BlockUiService
                ],
                exports: [
                    BlockUIModule,
                    BlockUiComponent,
                    ProgressSpinnerModule
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PageNotificationComponent, [{
        type: Component,
        args: [{
                selector: 'basis-page-notification',
                template: "<p-toast></p-toast>\n"
            }]
    }], function () { return []; }, { duration: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PageNotificationModule, { declarations: function () { return [PageNotificationComponent]; }, imports: function () { return [CommonModule,
        ToastModule]; }, exports: function () { return [PageNotificationComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PageNotificationModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    ToastModule
                ],
                declarations: [
                    PageNotificationComponent
                ],
                exports: [
                    PageNotificationComponent
                ],
                providers: [
                    MessageService$1,
                    PageNotificationService,
                    {
                        provide: NotificationProvider,
                        useExisting: PageNotificationService
                    }
                ]
            }]
    }], null, null); })();
const ɵFormNotificationComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormNotificationComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormNotificationComponent, [{
        type: Component,
        args: [{
                selector: '[form-notification]',
                template: "<ng-content></ng-content>\n<div class=\"form-notification-msg ui-message ui-messages-error ui-corner-all\" >{{message}}</div>\n"
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormNotificationModule, { declarations: function () { return [FormNotificationComponent]; }, imports: function () { return [CommonModule,
        FormNotificationBaseModule]; }, exports: function () { return [FormNotificationComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormNotificationModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormNotificationBaseModule
                ],
                declarations: [
                    FormNotificationComponent
                ],
                exports: [
                    FormNotificationComponent
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorStackComponent, [{
        type: Component,
        args: [{
                selector: 'basis-error-stack',
                template: "<ng-template #defaultTemplate>\n    <div class=\"ui-g\">\n        <div class=\"ui-g-12\">\n            <div class=\"card no-margin\">\n                <h1>{{ title }}</h1>\n                <p-table [value]=\"errors\" [paginator]=\"false\" [rows]=\"5\" first=\"0\">\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <th style=\"width: 20%; text-align: center\">Data</th>\n                            <th style=\"width: 20%; text-align: center\">C\u00F3digo de identifica\u00E7\u00E3o</th>\n                            <th>Mensagem</th>\n                            <th style=\"width: 10%; text-align: center\">A\u00E7\u00E3o</th>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-error>\n                        <tr>\n                            <td style=\"width: 20%; text-align: center\">{{error.createdAt|date: 'dd/MM/y H:mm:ss'}}</td>\n                            <td style=\"width: 20%; text-align: center\">{{error.correlationId || 'Indispon\u00EDvel'}}</td>\n                            <td>{{error.message}}</td>\n                            <td style=\"width: 10%; text-align: center\">\n                                <button pButton type=\"button\" pTooltip=\"Copiar erro para \u00E1rea de transfer\u00EAncia\" tooltipPosition=\"left\" class=\"ui-button-primary\" icon=\"ui-icon-content-copy\" [clipboard]=\"error.fullMessage\"></button>\n                            </td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\" let-columns>\n                        <tr>\n                            <td colspan=\"4\">\n                                Nenhum erro foi registrado at\u00E9 o momento.\n                            </td>\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template? template: defaultTemplate\"></ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc3.ErrorStackService }]; }, { title: [{
            type: Input
        }], template: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ErrorStackModule, { declarations: function () { return [ErrorStackComponent]; }, imports: function () { return [CommonModule,
        TableModule,
        ButtonModule$1,
        TooltipModule,
        ClipboardModule]; }, exports: function () { return [ErrorStackComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorStackModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    TableModule,
                    ButtonModule$1,
                    TooltipModule,
                    ClipboardModule
                ],
                declarations: [
                    ErrorStackComponent
                ],
                providers: [
                    ErrorStackService,
                    {
                        provide: ErrorProvider,
                        useClass: ErrorStackProviderService,
                        multi: true
                    }
                ],
                exports: [
                    ErrorStackComponent
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CrudFormComponent, [{
        type: Component,
        args: [{
                selector: 'nCrudForm',
                template: "<nForm [form]=\"form\" [action]=\"action\" [route]=\"[listRoute]\" [disableSave]=\"disableSave\">\n    <ng-content></ng-content>\n    <div nButton class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\">\n        <button pButton type=\"button\" [routerLink]=\"[listRoute]\" label=\"Voltar\"></button>\n    </div>\n</nForm>\n"
            }]
    }], function () { return [{ type: ɵngcc9.ActivatedRoute }]; }, { disableSave: [{
            type: Input
        }], form: [{
            type: Input
        }], service: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CrudListComponent, [{
        type: Component,
        args: [{
                selector: 'nCrudList',
                template: "<nForm [form]=\"form\" (save)=\"findAll($event)\" [saveLabel]=\"findLabel\">\n    <ng-content select=\"[nForm]\"></ng-content>\n    <div nButton class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\">\n        <button pButton type=\"button\" [routerLink]=\"['../save']\" label=\"Novo\" *ngIf=\"!disableSave\"></button>\n    </div>\n</nForm>\n\n<basis-datatable #datatable [value]=\"result\" (buttonClick)=\"datatableClick($event)\" [url]=\"url\"\n    [disableEdit]=\"disableEdit\" [disableView]=\"disableView\" [disableDelete]=\"disableDelete\">\n    <ng-content select=\"p-column\"></ng-content>\n</basis-datatable>\n\n<p-confirmDialog header=\"Confirmar Exclus\u00E3o\" acceptLabel=\"Sim\" rejectLabel=\"N\u00E3o\" icon=\"pi pi-exclamation-triangle\"></p-confirmDialog>\n"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [CRUD_SERVICE]
            }] }, { type: ɵngcc6.ConfirmationService }, { type: ɵngcc9.ActivatedRoute }, { type: ɵngcc9.Router }]; }, { action: [{
            type: Input
        }], findLabel: [{
            type: Input
        }], disableSave: [{
            type: Input
        }], disableEdit: [{
            type: Input
        }], disableView: [{
            type: Input
        }], disableDelete: [{
            type: Input
        }], find: [{
            type: Output
        }], url: [{
            type: Input
        }], form: [{
            type: Input
        }], service: [{
            type: Input
        }], datatableExtraParams: [{
            type: Input
        }], datatable: [{
            type: ViewChild,
            args: ['datatable', { static: true }]
        }], columns: [{
            type: ContentChildren,
            args: [Column]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CrudResolveGuard, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [CRUD_SERVICE]
            }] }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SuccessMessageHandlerInterceptor, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: PageNotificationService }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FieldComponent, [{
        type: Directive,
        args: [{
                selector: "[nField]"
            }]
    }], function () { return [{ type: ɵngcc7.ControlContainer }, { type: ɵngcc0.Injector }]; }, { onBlur: [{
            type: Output
        }], onSelect: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], name: [{
            type: Input
        }], label: [{
            type: Input
        }], form: [{
            type: Input
        }], formControlName: [{
            type: Input
        }], extraParams: [{
            type: Input
        }], required: [{
            type: Input
        }], input: [{
            type: ViewChild,
            args: ["input", { static: false }]
        }] }); })();
const ɵInputTextComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(InputTextComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InputTextComponent, [{
        type: Component,
        args: [{
                selector: "[nInputText]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <input #input\n        pInputText\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        [type]=\"type\"\n        [name]=\"name\"\n        (blur)=\"onBlurEvent($event)\"\n        (focus)=\"onFocusEvent($event)\"\n        [formControl]=\"formControl\" />\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(InputTextComponent_1)]
            }]
    }], null, { type: [{
            type: Input
        }], minLength: [{
            type: Input
        }], maxLength: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], pattern: [{
            type: Input
        }] }); })();
const ɵCalendarComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CalendarComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarComponent, [{
        type: Component,
        args: [{
                selector: "[nCalendar]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-calendar #input\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        [name]=\"name\"\n        [formControl]=\"formControl\"\n        [locale]=\"locale\"\n        [dateFormat]=\"locale.dateFormat\"\n        [yearRange]=\"yearRange\"\n        [maxDate]=\"maxDate\"\n        [monthNavigator]=\"monthNavigator\"\n        [yearNavigator]=\"yearNavigator\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        (onSelect)=\"onSelectEvent($event)\">\n    </p-calendar>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(CalendarComponent_1)]
            }]
    }], null, { maxDate: [{
            type: Input
        }], yearRange: [{
            type: Input
        }], monthNavigator: [{
            type: Input
        }], yearNavigator: [{
            type: Input
        }], locale: [{
            type: Input
        }] }); })();
const ɵTextAreaComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TextAreaComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextAreaComponent, [{
        type: Component,
        args: [{
                selector: "[nTextArea]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <textarea #input\n        pInputTextarea\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        type=\"text\"\n        [name]=\"name\"\n        [autoResize]=\"autoResize\"\n        [rows]=\"rows\"\n        [cols]=\"cols\"\n        [minLength]=\"minLength\"\n        [maxLength]=\"maxLength\"\n        [formControl]=\"formControl\"\n        (blur)=\"onBlurEvent($event)\"\n        (focus)=\"onFocusEvent($event)\">\n    </textarea>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(TextAreaComponent_1)]
            }]
    }], null, { autoResize: [{
            type: Input
        }], rows: [{
            type: Input
        }], cols: [{
            type: Input
        }], minLength: [{
            type: Input
        }], maxLength: [{
            type: Input
        }] }); })();
const ɵDropdownComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DropdownComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownComponent, [{
        type: Component,
        args: [{
                selector: "[nDropdown]",
                template: "<span #notification form-notification class=\"md-inputfield custom-select\" [name]=\"name\" [form]=\"form\">\n    <p-dropdown #input\n        [formControl]=\"formControl\"\n        [optionLabel]=\"optionLabel\"\n        [options]=\"options\"\n        [filter]=\"filter\"\n        [virtualScroll]=\"virtualScroll\"\n        [itemSize]=\"itemSize\"\n        (onChange)=\"onChangeEvent($event)\">\n    </p-dropdown>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(DropdownComponent_1)]
            }]
    }], null, { virtualScroll: [{
            type: Input
        }], filter: [{
            type: Input
        }], itemSize: [{
            type: Input
        }], options: [{
            type: Input
        }], onChange: [{
            type: Output
        }], optionLabel: [{
            type: Input
        }], service: [{
            type: Input
        }] }); })();
const ɵInputMaskComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(InputMaskComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InputMaskComponent, [{
        type: Component,
        args: [{
                selector: "[nInputMask]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-inputMask #input\n        pInputText\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        [name]=\"name\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        [formControl]=\"formControl\"\n        [mask]=\"mask\"\n        [placeholder]=\"placeholder\"></p-inputMask>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(InputMaskComponent_1)]
            }]
    }], null, { mask: [{
            type: Input
        }], placeholder: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CheckComponent, [{
        type: Component,
        args: [{
                selector: "[nCheck]",
                template: "<div class=\"ui-g-12 semborda\">\n    <div class=\"ui-g-4\" [innerHTML]=\"label\"></div>\n    <div class=\"ui-g-4\">\n        <p-radioButton\n            [ngClass]=\"{ 'ng-invalid ng-dirty': message }\"\n            id=\"sim\"\n            type=\"radio\"\n            [value]=\"true\"\n            [name]=\"name\"\n            [formControl]=\"formControl\"\n            pRadioButton></p-radioButton>\n        <label>Sim</label>\n    </div>\n    <div class=\"ui-g-4\">\n        <p-radioButton\n            [ngClass]=\"{ 'ng-invalid ng-dirty': message }\"\n            id=\"n\u00E3o\"\n            type=\"radio\"\n            [value]=\"false\"\n            name=\"correspondencia\"\n            [formControl]=\"formControl\"\n            pRadioButton></p-radioButton>\n        <label>N\u00E3o</label>\n    </div>\n    <ng-content></ng-content>\n</div>\n",
                providers: [provideValueAccessor(CheckComponent_1)]
            }]
    }], function () { return [{ type: ɵngcc7.ControlContainer }, { type: ɵngcc0.Injector }, { type: ɵngcc3.FormNotificationService }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormComponent, [{
        type: Component,
        args: [{
                selector: 'nForm',
                template: "<div>\n    <form (submit)=\"submit()\" class=\"ui-g form-group\">\n        <ng-content></ng-content>\n        <div class=\"ui-g-12 ui-lg-2 ui-md-4 ui-sm-12\" *ngIf=\"!disableSave\">\n            <button pButton type=\"submit\" [label]=\"saveLabel\" [disabled]=\"form.disabled || form.invalid\"></button>\n        </div>\n        <ng-content select=\"[nButton]\"></ng-content>\n    </form>\n</div>"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [CRUD_SERVICE]
            }] }, { type: ɵngcc9.ActivatedRoute }, { type: ɵngcc9.Router }]; }, { action: [{
            type: Input
        }], saveLabel: [{
            type: Input
        }], disableSave: [{
            type: Input
        }], save: [{
            type: Output
        }], reset: [{
            type: Output
        }], form: [{
            type: Input
        }], route: [{
            type: Input
        }], service: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidationMessageComponent, [{
        type: Component,
        args: [{
                selector: 'nValidationMessage',
                template: "<ng-container *ngIf=\"control.invalid && (control.dirty || control.touched) && control.errors\">\n    <div class=\"form-notification-msg ui-message ui-messages-error ui-corner-all\" >\n        <ng-container *ngIf=\"control.errors.required\">\n            campo obrigat\u00F3rio\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.minlength\">\n            tamanho m\u00EDnimo {{ control.errors.minlength.requiredLength }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.maxlength\">\n            tamanho m\u00E1ximo {{ control.errors.maxlength.requiredLength }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.min\">\n            valor m\u00EDnimo {{ control.errors.min.min }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.max\">\n            valor m\u00E1ximo {{ control.errors.max.max }}\n        </ng-container>\n        <ng-container *ngIf=\"control.errors.email || control.errors.pattern\">\n            campo inv\u00E1lido\n        </ng-container>\n    </div>\n</ng-container>\n"
            }]
    }], null, { control: [{
            type: Input
        }] }); })();
const ɵAutoCompleteComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AutoCompleteComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutoCompleteComponent, [{
        type: Component,
        args: [{
                selector: "[nAutoComplete]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-autoCompleteCustom #input\n        [formControl]=\"formControl\"\n        [suggestions]=\"results\"\n        [virtualScroll]=\"virtualScroll\"\n        [itemSize]=\"itemSize\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onSelect)=\"onSelectEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        (completeMethod)=\"findAll($event)\"\n        [field]=\"field\">\n    </p-autoCompleteCustom>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(AutoCompleteComponent_1)]
            }]
    }], null, { virtualScroll: [{
            type: Input
        }], itemSize: [{
            type: Input
        }], field: [{
            type: Input
        }], service: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutoCompleteCustomComponent, [{
        type: Component,
        args: [{
                selector: 'p-autoCompleteCustom',
                template: "<span [ngClass]=\"{'ui-autocomplete ui-widget':true,'ui-autocomplete-dd':dropdown,'ui-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n    <input *ngIf=\"!multiple\" #in [attr.type]=\"type\" [attr.id]=\"inputId\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [autocomplete]=\"autocomplete\" [attr.required]=\"required\" [attr.name]=\"name\"\n        [ngClass]=\"'ui-inputtext ui-widget ui-state-default ui-corner-all ui-autocomplete-input'\" [value]=\"inputFieldValue\" aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\"\n        (click)=\"onInputClick($event)\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\"\n        [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\">\n\n    <ul *ngIf=\"multiple\" #multiContainer class=\"ui-autocomplete-multiple-container ui-widget ui-inputtext ui-state-default ui-corner-all\" [ngClass]=\"{'ui-state-disabled':disabled,'ui-state-focus':focus}\" (click)=\"multiIn.focus()\">\n        <li #token *ngFor=\"let val of value\" class=\"ui-autocomplete-token ui-state-highlight ui-corner-all\">\n            <span class=\"ui-autocomplete-token-icon pi pi-fw pi-times\" (click)=\"removeItem(token)\" *ngIf=\"!disabled\"></span>\n            <span *ngIf=\"!selectedItemTemplate\" class=\"ui-autocomplete-token-label\">{{resolveFieldData(val)}}</span>\n            <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: val}\"></ng-container>\n        </li>\n        <li class=\"ui-autocomplete-input-token\">\n            <input #multiIn [attr.type]=\"type\" [attr.id]=\"inputId\" [disabled]=\"disabled\" [attr.placeholder]=\"(value&&value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (input)=\"onInput($event)\"  (click)=\"onInputClick($event)\"\n                (keydown)=\"onKeydown($event)\" [readonly]=\"readonly\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\" [autocomplete]=\"autocomplete\"\n                [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n                aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\">\n        </li>\n    </ul>\n\n    <i *ngIf=\"loading\" class=\"ui-autocomplete-loader pi pi-spinner pi-spin\"></i>\n    <button #ddBtn type=\"button\" pButton [icon]=\"dropdownIcon\" class=\"ui-autocomplete-dropdown\" [disabled]=\"disabled\"\n        (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\" [attr.tabindex]=\"tabindex\">\n    </button>\n\n    <div #panel *ngIf=\"overlayVisible\" [ngClass]=\"['ui-autocomplete-panel ui-widget ui-widget-content ui-corner-all ui-shadow']\"\n        [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\"\n        [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationDone($event)\">\n        <ul role=\"listbox\" class=\"ui-autocomplete-items ui-autocomplete-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\">\n            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                <p-autoCompleteItem *ngFor=\"let option of suggestions; let idx = index\"\n                    [option]=\"option\" [(highlightOption)]=\"highlightOption\" [index]=\"idx\"\n                    (onClick)=\"selectItem($event.option)\" [itemSize]=\"itemSize\"\n                    [template]=\"itemTemplate\" [resolvedFieldData]=\"resolveFieldData(option)\">\n                </p-autoCompleteItem>\n            </ng-container>\n            <ng-template #virtualScrollList>\n                <cdk-virtual-scroll-viewport *ngIf=\"virtualScroll && suggestions && suggestions.length\"\n                    [ngStyle]=\"{height: scrollHeight}\" [itemSize]=\"itemSize\">\n                    <ng-container *cdkVirtualFor=\"let option of suggestions; let idx = index\">\n                        <p-autoCompleteItem\n                            [option]=\"option\" [(highlightOption)]=\"highlightOption\" [index]=\"idx\"\n                            (onClick)=\"selectItem($event.option)\" [itemSize]=\"itemSize\"\n                            [template]=\"itemTemplate\" [resolvedFieldData]=\"resolveFieldData(option)\"\n                        ></p-autoCompleteItem>\n                    </ng-container>\n                </cdk-virtual-scroll-viewport>\n            </ng-template>\n\n            <li *ngIf=\"noResults && emptyMessage\" class=\"ui-autocomplete-emptymessage ui-autocomplete-list-item ui-corner-all\">{{emptyMessage}}</li>\n        </ul>\n    </div>\n</span>\n",
                providers: [AUTOCOMPLETE_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.IterableDiffers }]; }, { virtualScroll: [{
            type: Input
        }], itemSize: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutoCompleteItem, [{
        type: Component,
        args: [{
                selector: 'p-autoCompleteItem',
                template: `
        <li role="option" [ngClass]="{'ui-autocomplete-list-item ui-corner-all':true,'ui-state-highlight':(highlightOption==option)}"
            (mouseenter)="highlightOptionChange.emit(option)" (mouseleave)="highlightOptionChange.emit(null)"
            [id]="highlightOption == option ? 'p-highlighted-option':''" (click)="selectItem($event)"
            [ngStyle]="{'height': itemSize + 'px', 'display': 'table', 'width': '100%'}">
            <span *ngIf="!template">{{resolvedFieldData}}</span>
            <ng-container *ngTemplateOutlet="template; context: {$implicit: option, index: index}"></ng-container>
        </li>
    `
            }]
    }], function () { return []; }, { highlightOptionChange: [{
            type: Output
        }], onClick: [{
            type: Output
        }], option: [{
            type: Input
        }], resolvedFieldData: [{
            type: Input
        }], highlightOption: [{
            type: Input
        }], index: [{
            type: Input
        }], itemSize: [{
            type: Input
        }], template: [{
            type: Input
        }] }); })();
const ɵAutoCompleteMultipleComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AutoCompleteMultipleComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutoCompleteMultipleComponent, [{
        type: Component,
        args: [{
                selector: "[nAutoCompleteMultiple]",
                template: "<span #notification form-notification class=\"md-inputfield\" [name]=\"name\" [form]=\"form\">\n    <p-autoCompleteCustom #input\n        [formControl]=\"formControl\"\n        [suggestions]=\"results\"\n        (completeMethod)=\"findAll($event)\"\n        [field]=\"field\"\n        [virtualScroll]=\"virtualScroll\"\n        [itemSize]=\"itemSize\"\n        (onBlur)=\"onBlurEvent($event)\"\n        (onSelect)=\"onSelectEvent($event)\"\n        (onFocus)=\"onFocusEvent($event)\"\n        [multiple]=\"true\">\n    </p-autoCompleteCustom>\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(AutoCompleteMultipleComponent_1)]
            }]
    }], null, { virtualScroll: [{
            type: Input
        }], itemSize: [{
            type: Input
        }], field: [{
            type: Input
        }], service: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CheckPipe, [{
        type: Pipe,
        args: [{
                name: "check"
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CrudModule, { declarations: function () { return [CalendarComponent,
        InputTextComponent,
        TextAreaComponent,
        FormComponent,
        AutoCompleteComponent,
        AutoCompleteMultipleComponent,
        CrudListComponent,
        CrudFormComponent,
        FieldComponent,
        ValidationMessageComponent,
        DropdownComponent,
        AutoCompleteItem,
        AutoCompleteCustomComponent,
        CheckComponent,
        InputMaskComponent,
        CheckPipe]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        FormNotificationModule,
        InputTextModule$1,
        InputTextareaModule,
        CalendarModule,
        AutoCompleteModule,
        ButtonModule,
        DatatableModule,
        HttpClientModule,
        RouterModule,
        ConfirmDialogModule,
        DropdownModule,
        ScrollingModule,
        InputMaskModule,
        RadioButtonModule]; }, exports: function () { return [CalendarComponent,
        InputTextComponent,
        TextAreaComponent,
        FormComponent,
        AutoCompleteComponent,
        AutoCompleteMultipleComponent,
        CrudListComponent,
        CrudFormComponent,
        FieldComponent,
        ValidationMessageComponent,
        DropdownComponent,
        CheckComponent,
        InputMaskComponent,
        CheckPipe]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CrudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    FormNotificationModule,
                    InputTextModule$1,
                    InputTextareaModule,
                    CalendarModule,
                    AutoCompleteModule,
                    ButtonModule,
                    DatatableModule,
                    HttpClientModule,
                    RouterModule,
                    ConfirmDialogModule,
                    DropdownModule,
                    ScrollingModule,
                    InputMaskModule,
                    RadioButtonModule,
                ],
                declarations: [
                    CalendarComponent,
                    InputTextComponent,
                    TextAreaComponent,
                    FormComponent,
                    AutoCompleteComponent,
                    AutoCompleteMultipleComponent,
                    CrudListComponent,
                    CrudFormComponent,
                    FieldComponent,
                    ValidationMessageComponent,
                    DropdownComponent,
                    AutoCompleteItem,
                    AutoCompleteCustomComponent,
                    CheckComponent,
                    InputMaskComponent,
                    CheckPipe,
                ],
                exports: [
                    CalendarComponent,
                    InputTextComponent,
                    TextAreaComponent,
                    FormComponent,
                    AutoCompleteComponent,
                    AutoCompleteMultipleComponent,
                    CrudListComponent,
                    CrudFormComponent,
                    FieldComponent,
                    ValidationMessageComponent,
                    DropdownComponent,
                    CheckComponent,
                    InputMaskComponent,
                    CheckPipe,
                ],
                providers: [
                    httpInterceptorProviders,
                    ConfirmationService,
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbService, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbComponent, [{
        type: Component,
        args: [{
                selector: 'breadcrumb',
                template: "<div class=\"layout-breadcrumb\">\n    <ul>\n        <li>\n            <a routerLink=\"\">\n                <i class=\"material-icons\">home</i>\n            </a>\n        </li>\n        <li>/</li>\n        <ng-template ngFor let-item let-last=\"last\" [ngForOf]=\"items\">\n            <li>\n                <a [routerLink]=\"item.routerLink\" *ngIf=\"item.routerLink\">{{item.label}}</a>\n\n                <ng-container *ngIf=\"!item.routerLink\">{{item.label}}</ng-container>\n            </li>\n            <li *ngIf=\"!last\">/</li>\n        </ng-template>\n    </ul>\n    <div class=\"layout-breadcrumb-options\">\n        <a (click)=\"highContrastEnabled ? disableHighContrast() : enableHighContrast()\" [ngStyle]=\"{'cursor': 'pointer'}\"\n            title=\"{{ highContrastEnabled ? 'Desabilitar alto contraste' : 'Habilitar alto contraste' }}\">\n            <i class=\"material-icons\">{{ highContrastEnabled ? 'visibility_off' : 'visibility' }}</i>\n        </a>\n        <a (click)=\"increaseFontSize()\" title=\"Aumentar fonte\" [ngStyle]=\"{'cursor': 'pointer'}\">\n            <i class=\"material-icons\">exposure_plus_1</i>\n        </a>\n        <a (click)=\"decreaseFontSize()\" title=\"Diminuir fonte\" [ngStyle]=\"{'cursor': 'pointer'}\">\n            <i class=\"material-icons\">exposure_neg_1</i>\n        </a>\n    </div>\n    <ng-content></ng-content>\n</div>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc9.Router }, { type: ɵngcc9.ActivatedRoute }, { type: BreadcrumbService }, { type: ɵngcc2.MessageService }, { type: ɵngcc3.AccessbilityService }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BreadcrumbModule, { declarations: function () { return [BreadcrumbComponent]; }, imports: function () { return [CommonModule,
        RouterModule]; }, exports: function () { return [BreadcrumbComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbModule, [{
        type: NgModule,
        args: [{
                declarations: [BreadcrumbComponent],
                imports: [
                    CommonModule,
                    RouterModule
                ],
                exports: [
                    BreadcrumbComponent
                ],
                providers: [
                    BreadcrumbService
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MenusService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MenuComponent, [{
        type: Component,
        args: [{
                selector: 'app-menu',
                template: "<ul submenu\n    [item]=\"menuService.itens\"\n    root=\"true\"\n    class=\"ultima-menu ultima-main-menu clearfix\"\n    [reset]=\"menuService.resetMenu\"\n    visible=\"true\"\n    parentActive=\"true\">\n</ul>\n"
            }]
    }], function () { return [{ type: MenusService }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SubMenuComponent, [{
        type: Component,
        args: [{
                selector: '[submenu]',
                template: "<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n    <li [ngClass]=\"{'active-menuitem': isActive(i)}\"\n        [class]=\"child.badgeStyleClass\"\n        *ngIf=\"child.visible === false ? false : true\">\n        <a [href]=\"child.url||'#'\" (click)=\"itemClick($event,child,i)\" (mouseenter)=\"onMouseEnter(i)\"\n           class=\"ripplelink\" *ngIf=\"!child.routerLink\"\n            [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n            <i *ngIf=\"child.icon\" class=\"material-icons\">{{child.icon}}</i>\n            <span>{{child.label}}</span>\n            <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n            <i class=\"material-icons submenu-icon\" *ngIf=\"child.items\">keyboard_arrow_down</i>\n        </a>\n\n        <a (click)=\"itemClick($event,child,i)\"\n            (mouseenter)=\"onMouseEnter(i)\"\n            class=\"ripplelink\"\n            *ngIf=\"child.routerLink\"\n            [routerLink]=\"child.routerLink\"\n            routerLinkActive=\"active-menuitem-routerlink\"\n            [routerLinkActiveOptions]=\"{exact: true}\" [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n            <i *ngIf=\"child.icon\" class=\"material-icons\">{{child.icon}}</i>\n            <span>{{child.label}}</span>\n            <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n            <i class=\"material-icons submenu-icon\" *ngIf=\"child.items\">keyboard_arrow_down</i>\n        </a>\n        <div class=\"layout-menu-tooltip\">\n            <div class=\"layout-menu-tooltip-arrow\"></div>\n            <div class=\"layout-menu-tooltip-text\">{{child.label}}</div>\n        </div>\n        <ul submenu\n            [item]=\"child\"\n            *ngIf=\"child.items\"\n            [visible]=\"isActive(i)\"\n            [reset]=\"reset\"\n            [parentActive]=\"isActive(i)\"\n            [@children]=\"(menuService.isSlim() || menuService.isHorizontal()) && root ? (isActive(i) ?\n            'visible' : 'hidden') : (isActive(i) ? 'visibleAnimated' : 'hiddenAnimated')\">\n        </ul>\n    </li>\n</ng-template>\n",
                animations: [
                    trigger('children', [
                        state('hiddenAnimated', style({
                            height: '0px'
                        })),
                        state('visibleAnimated', style({
                            height: '*'
                        })),
                        state('visible', style({
                            height: '*',
                            'z-index': 100
                        })),
                        state('hidden', style({
                            height: '0px',
                            'z-index': '*'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ]
            }]
    }], function () { return [{ type: MenusService }]; }, { reset: [{
            type: Input
        }], parentActive: [{
            type: Input
        }], item: [{
            type: Input
        }], root: [{
            type: Input
        }], visible: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MenuModule, { declarations: function () { return [MenuComponent,
        SubMenuComponent]; }, imports: function () { return [CommonModule,
        RouterModule]; }, exports: function () { return [MenuComponent,
        SubMenuComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MenuModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MenuComponent,
                    SubMenuComponent
                ],
                imports: [
                    CommonModule,
                    RouterModule
                ],
                exports: [
                    MenuComponent,
                    SubMenuComponent
                ],
                providers: [
                    MenusService
                ]
            }]
    }], null, null); })();

/*
 * Public API Surface of primeng-components
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AutoCompleteComponent, AutoCompleteMultipleComponent, BlockUiComponent, BlockUiModule, BreadcrumbComponent, BreadcrumbModule, BreadcrumbService, CALENDAR_LOCALE, CRUD_SERVICE, CalendarComponent, CheckComponent, CheckPipe, Column, CrudFormComponent, CrudListComponent, CrudModule, CrudResolveGuard, CrudServiceNuvem, DataProviderFactory, DataProviderType, DatatableButtonComponent, DatatableClickEvent, DatatableComponent, DatatableModule, DatatableService, DatatableSplitbuttonComponent, DatatableSplitbuttonModule, DropdownComponent, ErrorStackComponent, ErrorStackModule, FieldComponent, FilterColumn, FilterColumnModule, FormComponent, FormNotificationComponent, FormNotificationModule, InputMaskComponent, InputTextComponent, MemoryDataProvider, MenuComponent, MenuModule, MenuOrientation, MenusService, PageNotificationComponent, PageNotificationModule, PageNotificationService, ServerDataProvider, ShowColumn, ShowColumnModule, SubMenuComponent, SuccessMessageHandlerInterceptor, TextAreaComponent, ValidationMessageComponent, crudRouteBuilder, httpInterceptorProviders, AutoCompleteItem as ɵa, AUTOCOMPLETE_VALUE_ACCESSOR as ɵb, AutoCompleteCustomComponent as ɵc };

//# sourceMappingURL=nuvem-primeng-components.js.map