import { QueryList, ChangeDetectorRef, AfterViewInit, AfterContentInit, OnInit, EventEmitter } from '@angular/core';
import { Table as DataTable } from 'primeng/table';
import { DataProvider } from './dataprovider';
import { DataProviderFactory, DataProviderType } from './dataprovider-factory';
import { DatatableButtonComponent } from './datatable-button.component';
import { DatatablePaginationParameters } from './datatable-pagination-parameters';
import { HttpErrorResponse } from '@angular/common/http';
import { Authorization } from '@nuvem/angular-base';
import { Column } from './p-column.directive';
/**
 * Class DatatableComponent
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export declare class DatatableComponent implements AfterViewInit, AfterContentInit, OnInit {
    private changeDetectorRef;
    private dataProviderFactory;
    private authorizationService;
    /**
     * selectedRow property
     * @type {any}
     */
    selectedRow: any;
    /**
     * dataProvider property
     * @type {DataProvider}
     */
    dataProvider: DataProvider;
    /**
     * filterParams property
     * @type {any}
     */
    filterParams: any;
    /**
     * footerMsg property
     * @type {string}
     */
    footerMsg: string;
    /**
     * orderInSort property
     * @type {boolean}
     */
    orderInSort: boolean;
    /**
     * splitButton property
     * @type {any}
     */
    splitButton: any;
    /**
     * value property
     * @type {any}
     */
    value: any[];
    /**
     * type property
     * @type DataProviderType
     */
    type: DataProviderType;
    /**
     * rows property
     * @type {number}
     */
    rows: number;
    /**
     * rowsPerPageOptions property
     * @type {number[]}
     */
    rowsPerPageOptions: number[];
    /**
     * url property
     * @type {string}
     */
    url: string;
    /**
     * extraParams property
     * @type {any}
     */
    extraParams: any;
    /**
     * paginationParameters property
     * @type {DatatablePaginationParameters}
     */
    paginationParameters: DatatablePaginationParameters;
    /**
     * showPaginationFooter property
     * @type {boolean}
     */
    showPaginationFooter: boolean;
    /**
     * disableEdit property
     * @type {boolean}
     */
    disableEdit: boolean;
    /**
     * disableView property
     * @type {boolean}
     */
    disableView: boolean;
    /**
     * disableDelete property
     * @type {boolean}
     */
    disableDelete: boolean;
    /**
     * selectionMode property
     * @type {string}
     */
    selectionMode: string;
    /**
     * enableButtonsScroll property
     * @type {boolean}
     */
    enableButtonsScroll: boolean;
    /**
     * emptyMessage property
     * @type {string}
     */
    emptyMessage: string;
    /**
     * verticalButtons property
     * @type {boolean}
     */
    verticalButtons: boolean;
    /**
     * enableScroll property
     * @type {boolean}
     */
    enableScroll: boolean;
    /**
     * scrollHeight property
     * @type {string}
     */
    scrollHeight: string;
    /**
     * scrollWidth property
     * @type {string}
     */
    scrollWidth: string;
    /**
     * rulesToHide property
     * @type {any}
     */
    rulesToHide: any;
    /**
     * rulesToShowEdit property
     * @type {any}
     */
    rulesToShowEdit: any;
    /**
     * rulesToShowDelete property
     * @type {any}
     */
    rulesToShowDelete: any;
    /**
     * rulesToHideView property
     * @type {any}
     */
    rulesToHideView: any;
    /**
     * rulesToHideEdit property
     * @type {any}
     */
    rulesToHideEdit: any;
    /**
     * rulesToHideDelete property
     * @type {any}
     */
    rulesToHideDelete: any;
    /**
     * horizontalButtonsHeader property
     * @type {string}
     */
    horizontalButtonsHeader: string;
    /**
     * disableLoadingBlockUI property
     * @type {boolean}
     */
    disableLoadingBlockUI: boolean;
    /**
     * rowStyleClass property
     * @type {any}
     */
    rowStyleClass: any;
    /**
     * filterOnColumn property
     */
    filterOnColumn: boolean;
    /**
     * filterSelectOptions property
     */
    filterSelectOptions: any[];
    /**
     * updateFiltroHistorico property
     */
    updateFilterColumn: boolean;
    /**
     * customFilterOptions property
     */
    customFilterOptions: Object;
    /**
     * buttonClick property
     * @type {EventEmitter<any>}
     */
    buttonClick: EventEmitter<any>;
    /**
     * pDatatableComponent property
     * @type {Table}
     */
    pDatatableComponent: DataTable;
    /**
     * extraButtons property
     * @type {QueryList<DatatableButtonComponent>}
     */
    extraButtons: QueryList<DatatableButtonComponent>;
    /**
     * columns property
     * @type {any[]}
     */
    columns: Column[];
    /**
     * startedLoading property
     * @type {EventEmitter<void>}
     */
    startedLoading: EventEmitter<void>;
    /**
     * finishedLoading property
     * @type {EventEmitter<HttpErrorResponse>}
     */
    finishedLoading: EventEmitter<HttpErrorResponse>;
    /**
     * onRowSelected property
     * @type {EventEmitter<any>}
     */
    onRowSelected: EventEmitter<any>;
    /**
     * showHorizontalButtonsHeader property
     * @type {boolean}
     */
    showHorizontalButtonsHeader: boolean;
    /**
     * blockContent
     * @type {boolean}
     */
    blockContent: boolean;
    /**
     * visibleColumns property
     * @type {Object}
     */
    visibleColumns: Object;
    /**
     * showVisibleColumnsControl property
     * @type {boolean}
     */
    showVisibleColumnsControl: boolean;
    /**
     * editMode property
     * @type {string}
     */
    editMode: string;
    /**
     * dataKey property
     * Identificador único para cada registro da tabela
     * @type {string}
     */
    dataKey: string;
    /**
     * onRowEditEvent property
     * Evento disparado quando o usuário realiza ações de edição em uma linha da tabela
     * @type {EventEmitter<void>}
     */
    onRowEditEvent: EventEmitter<any>;
    clonedRowData: {
        [s: string]: any;
    };
    /**
     * errorMessage property
     * @type {string}
     */
    private errorMessage;
    /**
     * originalEmptyMessage property
     * @type {string}
     */
    private originalEmptyMessage;
    editingRow: boolean;
    /**
     * constructor method
     * @constructor
     * @param {ChangeDetectorRef} changeDetectorRef
     * @param {DataProviderFactory} dataProviderFactory
     * @param {Authorization} authorizationService
     */
    constructor(changeDetectorRef: ChangeDetectorRef, dataProviderFactory: DataProviderFactory, authorizationService: Authorization);
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit(): void;
    /**
     * subscribeFromValueChange method
     * @returns void
     */
    private updateOnValueChange;
    /**
     * subscribeToLoadingEvents method
     * @returns void
     */
    private subscribeToLoadingEvents;
    /**
     * onStartedLoading method
     * @returns void
     */
    private onStartedLoading;
    /**
     * onFinishedLoading method
     * @param {HttpErrorResponse} error
     * @returns void
     */
    private onFinishedLoading;
    /**
     * initRowsPerPageOptionsIfPresent method
     * @returns void
     */
    private initRowsPerPageOptionsIfPresent;
    /**
     * defineIfShouldShowHorizontalButtonsHeader method
     * @returns void
     */
    private defineIfShouldShowHorizontalButtonsHeader;
    /**
     * ngAfterViewInit method
     * @returns void
     */
    ngAfterViewInit(): void;
    /**
     * setExtraParams method
     * @returns void
     */
    private setExtraParams;
    /**
     * ngAfterContentInit method
     * @returns void
     */
    ngAfterContentInit(): void;
    /**
     * onClick method
     * @param {string} button
     * @param {any} event
     * @return void
     */
    onClick(button: string, event: any): void;
    /**
     * onSelectChange method
     * @param {any} event
     * @returns void
     */
    onSelectChange(event: any): void;
    /**
     * updateMultipleButtonsStatus method
     * @param {boolean} hasMultipleSelection
     * @return void
     */
    private updateMultipleButtonsStatus;
    /**
     * refresh method
     * @param query
     * @returns void
     */
    refresh(query?: any): void;
    /**
     * resetSelectedRow method
     * @param button
     * @returns void
     */
    resetSelectedRow(button: string): void;
    /**
     * reset method
     * @returns void
     */
    reset(): void;
    /**
     * paginationFooterText method
     * @param {string} msg
     * @returns string
     */
    paginationFooterText(msg: string): string;
    /**
     * currentFirstIndex method
     * @returns number
     */
    currentFirstIndex(): number;
    /**
     * currentLastIndex method
     * @returns number
     */
    currentLastIndex(): number;
    /**
     * totalRecords method
     * @returns number
     */
    totalRecords(): number;
    /**
     * checkRolesToButton method
     * @param {string} button
     * @return boolean
     */
    checkRolesToButton(button: string): boolean;
    /**
     * checkUseButtons method
     * @param {string} button
     * @returns void
     */
    checkUseButtons(button: string): void;
    /**
     * filter method
     * @returns void
     */
    filter(): void;
    /**
     * Método para filtrar por colunas
     * @param column chave da coluna na tabela
     * @param filters valor do filtro
     */
    filterColumn(column: string, filters: any): void;
    /**
     * Inicia todas as colunas da tabela como visíveis
     */
    setAllColumnsVisible(): void;
    /**
     * Verifica se uma coluna deve estar visível
     * @param column string
     * @param visibleColumns Array
     */
    visibleColumnCheck(column: string, visibleColumns: []): boolean;
    /**
     * Atualzia os valores da variável 'visibleColuns' para mostrar ou não as colunas
     * @param columns array
     */
    updateVisibleColumns(columns: []): void;
    onRowEditInitEvent(event: any, rowData: any): void;
    onRowEditSaveEvent(event: any, rowData: any): void;
    onRowEditCancelEvent(event: any, rowData: any, index: number): void;
    resetEditingMode(event: any): void;
    editarLinhaOver(event: any): void;
    editarLinhaOut(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatatableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatatableComponent, "basis-datatable", never, { "value": "value"; "type": "type"; "rows": "rows"; "showPaginationFooter": "showPaginationFooter"; "disableEdit": "disableEdit"; "disableView": "disableView"; "disableDelete": "disableDelete"; "selectionMode": "selectionMode"; "enableButtonsScroll": "enableButtonsScroll"; "emptyMessage": "emptyMessage"; "verticalButtons": "verticalButtons"; "enableScroll": "enableScroll"; "disableLoadingBlockUI": "disableLoadingBlockUI"; "filterOnColumn": "filterOnColumn"; "customFilterOptions": "customFilterOptions"; "showVisibleColumnsControl": "showVisibleColumnsControl"; "dataKey": "dataKey"; "splitButton": "splitButton"; "rowsPerPageOptions": "rowsPerPageOptions"; "url": "url"; "extraParams": "extraParams"; "paginationParameters": "paginationParameters"; "scrollHeight": "scrollHeight"; "scrollWidth": "scrollWidth"; "rulesToHide": "rulesToHide"; "rulesToShowEdit": "rulesToShowEdit"; "rulesToShowDelete": "rulesToShowDelete"; "rulesToHideView": "rulesToHideView"; "rulesToHideEdit": "rulesToHideEdit"; "rulesToHideDelete": "rulesToHideDelete"; "rowStyleClass": "rowStyleClass"; "editMode": "editMode"; }, { "buttonClick": "buttonClick"; "startedLoading": "startedLoading"; "finishedLoading": "finishedLoading"; "onRowSelected": "onRowSelected"; "onRowEditEvent": "onRowEditEvent"; }, ["extraButtons", "columns"], ["horizontalButtons", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,