import { EventEmitter, OnChanges, SimpleChange, OnInit } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class FilterColumn implements OnChanges, OnInit {
    listaOriginal: any[];
    lista: any[];
    field: string;
    header: string;
    labelDefaultImplementation: boolean;
    labelDefaultName: string;
    updateFiltro: boolean;
    filterType: string;
    tableType: string;
    customFilterOptions: Object;
    template: string;
    outputEvent: EventEmitter<any>;
    private debouncer;
    filtro: any;
    resultado: any[];
    private listaFields;
    constructor();
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    checkChanges(changes: {
        [propName: string]: SimpleChange;
    }, property: any): boolean;
    /**
     * Método para propagar o evento de filtragem
     * @param event filtro
     */
    filtrar(event: any): void;
    /**
     * Preenche os itens que serão exibidos no multiselect, removendo duplicidades
     */
    preencherFields(): void;
    /**
     *
     * @param field Verifica duplicidade de fields nas opções de seleção
     */
    verificarSeExisteField(field: any): boolean;
    /**
     * Caso o usuaŕio não forneça uma lista para o options, será criada uma lista com
     * os valores presentes na tabela
     */
    getCustomFilterOptions(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FilterColumn, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FilterColumn, "basis-filter-column", never, { "listaOriginal": "listaOriginal"; "lista": "lista"; "labelDefaultImplementation": "labelDefaultImplementation"; "updateFiltro": "updateFiltro"; "customFilterOptions": "customFilterOptions"; "template": "template"; "field": "field"; "header": "header"; "labelDefaultName": "labelDefaultName"; "filterType": "filterType"; "tableType": "tableType"; }, { "outputEvent": "outputEvent"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbHVtbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZmlsdGVyLWNvbHVtbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2UsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlsdGVyQ29sdW1uIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIGxpc3RhT3JpZ2luYWw6IGFueVtdO1xuICAgIGxpc3RhOiBhbnlbXTtcbiAgICBmaWVsZDogc3RyaW5nO1xuICAgIGhlYWRlcjogc3RyaW5nO1xuICAgIGxhYmVsRGVmYXVsdEltcGxlbWVudGF0aW9uOiBib29sZWFuO1xuICAgIGxhYmVsRGVmYXVsdE5hbWU6IHN0cmluZztcbiAgICB1cGRhdGVGaWx0cm86IGJvb2xlYW47XG4gICAgZmlsdGVyVHlwZTogc3RyaW5nO1xuICAgIHRhYmxlVHlwZTogc3RyaW5nO1xuICAgIGN1c3RvbUZpbHRlck9wdGlvbnM6IE9iamVjdDtcbiAgICB0ZW1wbGF0ZTogc3RyaW5nO1xuICAgIG91dHB1dEV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcml2YXRlIGRlYm91bmNlcjtcbiAgICBmaWx0cm86IGFueTtcbiAgICByZXN1bHRhZG86IGFueVtdO1xuICAgIHByaXZhdGUgbGlzdGFGaWVsZHM7XG4gICAgY29uc3RydWN0b3IoKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW3Byb3BOYW1lOiBzdHJpbmddOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSk6IHZvaWQ7XG4gICAgY2hlY2tDaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW3Byb3BOYW1lOiBzdHJpbmddOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSwgcHJvcGVydHk6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBwYXJhIHByb3BhZ2FyIG8gZXZlbnRvIGRlIGZpbHRyYWdlbVxuICAgICAqIEBwYXJhbSBldmVudCBmaWx0cm9cbiAgICAgKi9cbiAgICBmaWx0cmFyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFByZWVuY2hlIG9zIGl0ZW5zIHF1ZSBzZXLDo28gZXhpYmlkb3Mgbm8gbXVsdGlzZWxlY3QsIHJlbW92ZW5kbyBkdXBsaWNpZGFkZXNcbiAgICAgKi9cbiAgICBwcmVlbmNoZXJGaWVsZHMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWVsZCBWZXJpZmljYSBkdXBsaWNpZGFkZSBkZSBmaWVsZHMgbmFzIG9ww6fDtWVzIGRlIHNlbGXDp8Ojb1xuICAgICAqL1xuICAgIHZlcmlmaWNhclNlRXhpc3RlRmllbGQoZmllbGQ6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2FzbyBvIHVzdWHFlWlvIG7Do28gZm9ybmXDp2EgdW1hIGxpc3RhIHBhcmEgbyBvcHRpb25zLCBzZXLDoSBjcmlhZGEgdW1hIGxpc3RhIGNvbVxuICAgICAqIG9zIHZhbG9yZXMgcHJlc2VudGVzIG5hIHRhYmVsYVxuICAgICAqL1xuICAgIGdldEN1c3RvbUZpbHRlck9wdGlvbnMoKTogYW55O1xufVxuIl19