{"version":3,"file":"ng-block-ui-http.js","sources":["ng:/ng-block-ui/http/block-ui-http-settings.service.ts","ng:/ng-block-ui/http/block-ui-http.interceptor.ts","ng:/ng-block-ui/http/block-ui-http.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private activeHttpRequests: number;\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private blockUIHttpSettings: BlockUIHttpSettings\n  ) {\n    this.activeHttpRequests = 0;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active: boolean = false;\n\n    if (this.shouldBlock(request)) {\n      active = true;\n      this.activeHttpRequests++;\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          if (this.shouldBlock(request)) {\n            this.activeHttpRequests--;\n            const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;\n            let stopBlockUI: boolean = false;\n\n            if (!!blockAllRequestsInProgress && this.activeHttpRequests <= 0) {\n              this.activeHttpRequests = 0;\n              stopBlockUI = true;\n            } else if (active) {\n              stopBlockUI = true;\n            }\n\n            if (stopBlockUI) {\n              const method: string = blockAllRequestsInProgress ? 'stop' : 'reset';\n              this.blockUIService[method](BLOCKUI_DEFAULT);\n            }\n          }\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const { settings } = this.blockUIHttpSettings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return { settings };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  public static forRoot(settings: HttpSettings = {}): ModuleWithProviders {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"]}