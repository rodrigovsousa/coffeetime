{"version":3,"file":"ng-block-ui-http.umd.js.map","sources":["ng://ng-block-ui/http/block-ui-http-settings.service.ts","ng://ng-block-ui/http/block-ui-http.interceptor.ts","ng://ng-block-ui/http/block-ui-http.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private activeHttpRequests: number;\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private blockUIHttpSettings: BlockUIHttpSettings\n  ) {\n    this.activeHttpRequests = 0;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active: boolean = false;\n\n    if (this.shouldBlock(request)) {\n      active = true;\n      this.activeHttpRequests++;\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          if (this.shouldBlock(request)) {\n            this.activeHttpRequests--;\n            const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;\n            let stopBlockUI: boolean = false;\n\n            if (!!blockAllRequestsInProgress && this.activeHttpRequests <= 0) {\n              this.activeHttpRequests = 0;\n              stopBlockUI = true;\n            } else if (active) {\n              stopBlockUI = true;\n            }\n\n            if (stopBlockUI) {\n              const method: string = blockAllRequestsInProgress ? 'stop' : 'reset';\n              this.blockUIService[method](BLOCKUI_DEFAULT);\n            }\n          }\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const { settings } = this.blockUIHttpSettings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return { settings };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  public static forRoot(settings: HttpSettings = {}): ModuleWithProviders {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"],"names":["Injectable","BLOCKUI_DEFAULT","finalize","BlockUIService","InjectionToken","HTTP_INTERCEPTORS","NgModule","BlockUIModule"],"mappings":"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"}
