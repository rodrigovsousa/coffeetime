{"version":3,"file":"ng-block-ui-http.umd.js","sources":["ng:/ng-block-ui/http/block-ui-http-settings.service.ts","ng:/ng-block-ui/http/block-ui-http.interceptor.ts","ng:/ng-block-ui/http/block-ui-http.module.ts"],"names":["Injectable","BLOCKUI_DEFAULT","finalize","BlockUIService","InjectionToken","HTTP_INTERCEPTORS","NgModule","BlockUIModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private activeHttpRequests: number;\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private blockUIHttpSettings: BlockUIHttpSettings\n  ) {\n    this.activeHttpRequests = 0;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active: boolean = false;\n\n    if (this.shouldBlock(request)) {\n      active = true;\n      this.activeHttpRequests++;\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          if (this.shouldBlock(request)) {\n            this.activeHttpRequests--;\n            const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;\n            let stopBlockUI: boolean = false;\n\n            if (!!blockAllRequestsInProgress && this.activeHttpRequests <= 0) {\n              this.activeHttpRequests = 0;\n              stopBlockUI = true;\n            } else if (active) {\n              stopBlockUI = true;\n            }\n\n            if (stopBlockUI) {\n              const method: string = blockAllRequestsInProgress ? 'stop' : 'reset';\n              this.blockUIService[method](BLOCKUI_DEFAULT);\n            }\n          }\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const { settings } = this.blockUIHttpSettings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return { settings };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  public static forRoot(settings: HttpSettings = {}): ModuleWithProviders {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"]}