{"version":3,"sources":["ng://ng-block-ui/http/block-ui-http-settings.service.ts","ng://ng-block-ui/http/block-ui-http.interceptor.ts","ng://ng-block-ui/http/block-ui-http.module.ts"],"names":["BlockUIHttpSettings","Injectable","BlockUIInterceptor","blockUIService","blockUIHttpSettings","this","activeHttpRequests","prototype","intercept","request","next","_this","active","shouldBlock","start","BLOCKUI_DEFAULT","handle","pipe","finalize","blockAllRequestsInProgress","settings","stopBlockUI","method","urlWithParams","requestFilters","some","f","url","toUpperCase","test","BlockUIService","BlockUIHttpModuleSettings","InjectionToken","provideSettingsInstance","BlockUIHttpModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","HTTP_INTERCEPTORS","useClass","multi","NgModule","args","imports","BlockUIModule"],"mappings":"sfAAA,IAAAA,EAAA,oEAGCC,EAAAA,eAHD,GCAAC,EAAA,WAgBE,SAAAA,EACUC,EACAC,GADAC,KAAAF,eAAAA,EACAE,KAAAD,oBAAAA,EAERC,KAAKC,mBAAqB,SAG5BJ,EAAAK,UAAAC,UAAA,SAAUC,EAA2BC,GAArC,IAAAC,EAAAN,KACMO,GAAkB,EAQtB,OANIP,KAAKQ,YAAYJ,KACnBG,GAAS,EACTP,KAAKC,qBACLD,KAAKF,eAAeW,MAAMC,EAAAA,kBAGrBL,EAAKM,OAAOP,GAChBQ,KACCC,EAAAA,SAAS,WACP,GAAIP,EAAKE,YAAYJ,GAAU,CAC7BE,EAAKL,qBACG,IAAAa,EAAAR,EAAAP,oBAAAgB,SAAAD,2BACJE,GAAuB,EAS3B,GAPMF,GAA8BR,EAAKL,oBAAsB,EAE7De,IADAV,EAAKL,mBAAqB,GAEjBM,IACTS,GAAc,GAGZA,EAAa,CACf,IAAMC,EAAiBH,EAA6B,OAAS,QAC7DR,EAAKR,eAAemB,GAAQP,EAAAA,uBAOxCb,EAAAK,UAAAM,YAAA,SAAYJ,GACF,IAAAa,EAAAb,EAAAa,OAAQC,EAAAd,EAAAc,cAIhB,QAHQlB,KAAAD,oBAAAgB,SACwBI,oBAETC,KAAK,SAACC,GAC3B,OAAIA,GAAKA,EAAEJ,QAAUI,EAAEC,IACdD,EAAEJ,OAAOM,gBAAkBN,GAAUI,EAAEC,IAAIE,KAAKN,GACjC,mBAANG,EACTA,EAAEjB,GAGJiB,EAAEG,KAAKN,0BAxDnBtB,EAAAA,sDAHQ6B,EAAAA,sBACA9B,OAVT,GCQa+B,EAA4B,IAAIC,EAAAA,eAAuB,6BAEpE,SAAAC,EAAwCb,GACtC,OAASA,SAAQA,yCAOHc,EAAAC,iBAAQf,GACpB,YADoB,IAAAA,IAAAA,OAElBgB,SAAUF,EACVG,YAEIC,QAASP,EACTQ,SAAUnB,IAGVkB,QAAStC,EACTwC,WAAYP,EACZQ,MAAOV,KAGPO,QAASI,EAAAA,kBACTC,SAAUzC,EACV0C,OAAO,0BApBhBC,EAAAA,SAAQC,OACPC,SAAUC,EAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private activeHttpRequests: number;\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private blockUIHttpSettings: BlockUIHttpSettings\n  ) {\n    this.activeHttpRequests = 0;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active: boolean = false;\n\n    if (this.shouldBlock(request)) {\n      active = true;\n      this.activeHttpRequests++;\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          if (this.shouldBlock(request)) {\n            this.activeHttpRequests--;\n            const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;\n            let stopBlockUI: boolean = false;\n\n            if (!!blockAllRequestsInProgress && this.activeHttpRequests <= 0) {\n              this.activeHttpRequests = 0;\n              stopBlockUI = true;\n            } else if (active) {\n              stopBlockUI = true;\n            }\n\n            if (stopBlockUI) {\n              const method: string = blockAllRequestsInProgress ? 'stop' : 'reset';\n              this.blockUIService[method](BLOCKUI_DEFAULT);\n            }\n          }\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const { settings } = this.blockUIHttpSettings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return { settings };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  public static forRoot(settings: HttpSettings = {}): ModuleWithProviders {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"]}