import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockUIInstanceService } from '../../services/block-ui-instance.service';
import * as ɵngcc0 from '@angular/core';
export declare class BlockUIContentComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {
    private blockUI;
    private resolver;
    private changeDetectionRef;
    name: string;
    delayStart: number;
    delayStop: number;
    defaultMessage: string;
    templateCmp: any;
    templateOutlet: ViewContainerRef;
    state: any;
    className: string;
    active: boolean;
    templateCompRef: ComponentRef<{
        message?: any;
    }> | TemplateRef<{}>;
    message: any;
    private blockUISubscription;
    private settings;
    constructor(blockUI: BlockUIInstanceService, resolver: ComponentFactoryResolver, changeDetectionRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): boolean;
    ngAfterViewChecked(): void;
    private subscribeToBlockUI(blockUI$);
    private onDispatchedEvent(event);
    private onStart({name, message});
    private onStop({name});
    private onReset();
    private onUpdate({name, message});
    updateMessage(message: string): void;
    private showBlock(message);
    private hideBlock();
    private clearState();
    private updateBlockTemplate(msg);
    private onUnsubscribe(name);
    private updateInstanceBlockCount();
    private detectChanges();
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BlockUIContentComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BlockUIContentComponent, "block-ui-content", never, { "name": "name"; "delayStart": "delayStart"; "delayStop": "delayStop"; "defaultMessage": "message"; "templateCmp": "template"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktY29udGVudC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmxvY2stdWktY29udGVudC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3ksIENvbXBvbmVudFJlZiwgVGVtcGxhdGVSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgVmlld0NvbnRhaW5lclJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJsb2NrVUlJbnN0YW5jZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9ibG9jay11aS1pbnN0YW5jZS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJsb2NrVUlDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgYmxvY2tVSTtcbiAgICBwcml2YXRlIHJlc29sdmVyO1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0aW9uUmVmO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZWxheVN0YXJ0OiBudW1iZXI7XG4gICAgZGVsYXlTdG9wOiBudW1iZXI7XG4gICAgZGVmYXVsdE1lc3NhZ2U6IHN0cmluZztcbiAgICB0ZW1wbGF0ZUNtcDogYW55O1xuICAgIHRlbXBsYXRlT3V0bGV0OiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIHN0YXRlOiBhbnk7XG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgYWN0aXZlOiBib29sZWFuO1xuICAgIHRlbXBsYXRlQ29tcFJlZjogQ29tcG9uZW50UmVmPHtcbiAgICAgICAgbWVzc2FnZT86IGFueTtcbiAgICB9PiB8IFRlbXBsYXRlUmVmPHt9PjtcbiAgICBtZXNzYWdlOiBhbnk7XG4gICAgcHJpdmF0ZSBibG9ja1VJU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc2V0dGluZ3M7XG4gICAgY29uc3RydWN0b3IoYmxvY2tVSTogQmxvY2tVSUluc3RhbmNlU2VydmljZSwgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgY2hhbmdlRGV0ZWN0aW9uUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogYm9vbGVhbjtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBwcml2YXRlIHN1YnNjcmliZVRvQmxvY2tVSShibG9ja1VJJCk7XG4gICAgcHJpdmF0ZSBvbkRpc3BhdGNoZWRFdmVudChldmVudCk7XG4gICAgcHJpdmF0ZSBvblN0YXJ0KHtuYW1lLCBtZXNzYWdlfSk7XG4gICAgcHJpdmF0ZSBvblN0b3Aoe25hbWV9KTtcbiAgICBwcml2YXRlIG9uUmVzZXQoKTtcbiAgICBwcml2YXRlIG9uVXBkYXRlKHtuYW1lLCBtZXNzYWdlfSk7XG4gICAgdXBkYXRlTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByaXZhdGUgc2hvd0Jsb2NrKG1lc3NhZ2UpO1xuICAgIHByaXZhdGUgaGlkZUJsb2NrKCk7XG4gICAgcHJpdmF0ZSBjbGVhclN0YXRlKCk7XG4gICAgcHJpdmF0ZSB1cGRhdGVCbG9ja1RlbXBsYXRlKG1zZyk7XG4gICAgcHJpdmF0ZSBvblVuc3Vic2NyaWJlKG5hbWUpO1xuICAgIHByaXZhdGUgdXBkYXRlSW5zdGFuY2VCbG9ja0NvdW50KCk7XG4gICAgcHJpdmF0ZSBkZXRlY3RDaGFuZ2VzKCk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==