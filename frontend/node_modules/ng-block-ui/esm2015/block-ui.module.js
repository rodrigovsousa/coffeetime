/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BlockUIComponent } from './components/block-ui/block-ui.component';
import { BlockUIContentComponent } from './components/block-ui-content/block-ui-content.component';
import { BlockUIInstanceService } from './services/block-ui-instance.service';
import { BlockUIService } from './services/block-ui.service';
import { BlockUIDirective } from './directives/block-ui.directive';
import * as ɵngcc0 from '@angular/core';
export const /** @type {?} */ BlockUIServiceInstance = new BlockUIInstanceService();
// Needed for AOT compiling
export const /** @type {?} */ BlockUIModuleSettings = new InjectionToken('BlockUIModuleSettings');
/**
 * @param {?} settings
 * @return {?}
 */
export function provideInstance(settings) {
    BlockUIServiceInstance.updateSettings(settings);
    return BlockUIServiceInstance;
}
export class BlockUIModule {
    /**
     * @param {?=} settings
     * @return {?}
     */
    static forRoot(settings = {}) {
        return {
            ngModule: BlockUIModule,
            providers: [
                {
                    provide: BlockUIModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIInstanceService,
                    useFactory: provideInstance,
                    deps: [BlockUIModuleSettings]
                },
                BlockUIService
            ]
        };
    }
}
BlockUIModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BlockUIModule });
BlockUIModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BlockUIModule_Factory(t) { return new (t || BlockUIModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIModule, { declarations: function () { return [BlockUIComponent,
        BlockUIDirective,
        BlockUIContentComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [BlockUIComponent,
        BlockUIDirective,
        BlockUIContentComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUIModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                entryComponents: [
                    BlockUIComponent,
                    BlockUIContentComponent
                ],
                declarations: [
                    BlockUIComponent,
                    BlockUIDirective,
                    BlockUIContentComponent
                ],
                exports: [
                    BlockUIComponent,
                    BlockUIDirective,
                    BlockUIContentComponent
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovbmctYmxvY2stdWkvYmxvY2stdWkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ25HLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7QUFHbkUsTUFBTSxDQUFDLHVCQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztBQUNuRTtBQUVBLE1BQU0sQ0FBQyx1QkFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBUyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3pGO0FBQ0c7QUFBdUI7QUFBZTtBQUF6QyxNQUFNLDBCQUEwQixRQUF5QjtBQUFJLElBQzNELHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxJQUFFLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztBQUNoQyxDQUFDO0FBcUJELE1BQU07QUFDTjtBQUFRO0FBQTRCO0FBQW1CO0FBQVEsSUFBdEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUE0QixFQUFFO0FBQUksUUFDdEQsTUFBTSxDQUFDO0FBQ1gsWUFBTSxRQUFRLEVBQUUsYUFBYTtBQUM3QixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxxQkFBcUI7QUFDeEMsb0JBQVUsUUFBUSxFQUFFLFFBQVE7QUFDNUIsaUJBQVM7QUFDVCxnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxzQkFBc0I7QUFDekMsb0JBQVUsVUFBVSxFQUFFLGVBQWU7QUFDckMsb0JBQVUsSUFBSSxFQUFFLENBQUMscUJBQXFCLENBQUM7QUFDdkMsaUJBQVM7QUFDVCxnQkFBUSxjQUFjO0FBQ3RCLGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTjtBQUVBO3lDQXRDQyxRQUFRLFNBQUM7S0FDUixPQUFPLEVBQUUsc0JBQ1AsWUFBWSxrQkFDYixrQkFDRCxlQUFlLEVBQUUsc0JBQ2YsZ0JBQWdCO21CQUNoQjs7RUFBdUIsa0JBQ3hCLGtCQUNELFlBQVksRUFBRSxzQkFDWixnQkFBZ0Isc0JBQ2hCLGdCQUFnQixzQkFDaEI7VUFBdUI7RUFDeEIsa0JBQ0QsT0FBTyxFQUFFLHNCQUNQLGdCQUFnQixzQkFDaEIsZ0JBQWdCLHNCQUNoQjtlQUF1QjtPQUN4QixjQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJOztBQXZDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBcUJBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFuQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQmxvY2tVSUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9ibG9jay11aS9ibG9jay11aS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmxvY2tVSUNvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYmxvY2stdWktY29udGVudC9ibG9jay11aS1jb250ZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9ibG9jay11aS1pbnN0YW5jZS5zZXJ2aWNlJztcbmltcG9ydCB7IEJsb2NrVUlTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9ibG9jay11aS5zZXJ2aWNlJztcbmltcG9ydCB7IEJsb2NrVUlEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYmxvY2stdWkuZGlyZWN0aXZlJztcbmltcG9ydCB7IEJsb2NrVUlTZXR0aW5ncyB9IGZyb20gJy4vbW9kZWxzL2Jsb2NrLXVpLXNldHRpbmdzLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IEJsb2NrVUlTZXJ2aWNlSW5zdGFuY2UgPSBuZXcgQmxvY2tVSUluc3RhbmNlU2VydmljZSgpO1xuXG4vLyBOZWVkZWQgZm9yIEFPVCBjb21waWxpbmdcbmV4cG9ydCBjb25zdCBCbG9ja1VJTW9kdWxlU2V0dGluZ3MgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignQmxvY2tVSU1vZHVsZVNldHRpbmdzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlSW5zdGFuY2Uoc2V0dGluZ3M6IEJsb2NrVUlTZXR0aW5ncyk6IGFueSB7XG4gIEJsb2NrVUlTZXJ2aWNlSW5zdGFuY2UudXBkYXRlU2V0dGluZ3Moc2V0dGluZ3MpO1xuICByZXR1cm4gQmxvY2tVSVNlcnZpY2VJbnN0YW5jZTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICBCbG9ja1VJQ29tcG9uZW50LFxuICAgIEJsb2NrVUlDb250ZW50Q29tcG9uZW50XG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEJsb2NrVUlDb21wb25lbnQsXG4gICAgQmxvY2tVSURpcmVjdGl2ZSxcbiAgICBCbG9ja1VJQ29udGVudENvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgQmxvY2tVSUNvbXBvbmVudCxcbiAgICBCbG9ja1VJRGlyZWN0aXZlLFxuICAgIEJsb2NrVUlDb250ZW50Q29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tVSU1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChzZXR0aW5nczogQmxvY2tVSVNldHRpbmdzID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEJsb2NrVUlNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEJsb2NrVUlNb2R1bGVTZXR0aW5ncyxcbiAgICAgICAgICB1c2VWYWx1ZTogc2V0dGluZ3NcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEJsb2NrVUlJbnN0YW5jZVNlcnZpY2UsXG4gICAgICAgICAgdXNlRmFjdG9yeTogcHJvdmlkZUluc3RhbmNlLFxuICAgICAgICAgIGRlcHM6IFtCbG9ja1VJTW9kdWxlU2V0dGluZ3NdXG4gICAgICAgIH0sXG4gICAgICAgIEJsb2NrVUlTZXJ2aWNlXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19