/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BlockUIActions } from '../constants/block-ui-actions.constant';
import { BlockUIInstanceService } from './block-ui-instance.service';
import * as ɵngcc0 from '@angular/core';
export class BlockUIService {
    /**
     * @param {?} blockUIInstance
     */
    constructor(blockUIInstance) {
        this.blockUIInstance = blockUIInstance;
    }
    /**
     * Starts blocking for given BlockUI instance or instances
     * @param {?} target
     * @param {?=} message
     * @return {?}
     */
    start(target, message) {
        this.dispatch(target, BlockUIActions.START, message);
    }
    /**
     * Stops blocking for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    stop(target) {
        this.dispatch(target, BlockUIActions.STOP);
    }
    /**
     * Reset blocking for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    reset(target) {
        this.dispatch(target, BlockUIActions.RESET);
    }
    /**
     * Unsubscribes for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    unsubscribe(target) {
        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);
    }
    /**
     * Checks if BlockUI is actively blocking
     * @param {?=} target
     * @return {?}
     */
    isActive(target = null) {
        const /** @type {?} */ targets = target ? this.toArray(target) : null;
        const /** @type {?} */ instances = this.blockUIInstance.blockUIInstances;
        return Object.keys(instances).some((key) => {
            if (!targets) {
                return instances[key].isActive;
            }
            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;
        });
    }
    /**
     * @param {?=} target
     * @param {?=} type
     * @param {?=} message
     * @return {?}
     */
    dispatch(target = [], type, message) {
        const /** @type {?} */ instances = this.toArray(target);
        instances.forEach(i => this.blockUIInstance.decorate(i)[type](message));
    }
    /**
     * @param {?=} target
     * @return {?}
     */
    toArray(target = []) {
        return typeof target === 'string' ? [target] : target;
    }
}
BlockUIService.ɵfac = function BlockUIService_Factory(t) { return new (t || BlockUIService)(ɵngcc0.ɵɵinject(BlockUIInstanceService)); };
BlockUIService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIService, factory: BlockUIService.ɵfac });
/** @nocollapse */
BlockUIService.ctorParameters = () => [
    { type: BlockUIInstanceService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUIService, [{
        type: Injectable
    }], function () { return [{ type: BlockUIInstanceService }]; }, null); })();
function BlockUIService_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIService.prototype.blockUIInstance;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L25nLWJsb2NrLXVpL3NlcnZpY2VzL2Jsb2NrLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUlyRSxNQUFNO0FBQ047QUFDTztBQUNtQjtBQUFRLElBRGhDLFlBQ1U7QUFBbUIsUUFBbkIsb0JBQWUsR0FBZixlQUFlO0FBQUUsS0FDdkI7QUFDTjtBQUVDO0FBQ0c7QUFDb0I7QUFBMkI7QUFDdkM7QUFBUSxJQURsQixLQUFLLENBQUMsTUFBeUIsRUFBRSxPQUFhO0FBQUksUUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN6RCxLQUFHO0FBQ0g7QUFFQztBQUNHO0FBQ29CO0FBQ3ZCO0FBQVEsSUFEUCxJQUFJLENBQUMsTUFBeUI7QUFBSSxRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsS0FBRztBQUNIO0FBRUM7QUFDRztBQUNvQjtBQUN4QjtBQUFRLElBRE4sS0FBSyxDQUFDLE1BQXlCO0FBQUksUUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELEtBQUc7QUFDSDtBQUVDO0FBQ0c7QUFDb0I7QUFBbUI7QUFDekMsSUFEQSxXQUFXLENBQUMsTUFBeUI7QUFBSSxRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdEQsS0FBRztBQUNIO0FBRUM7QUFDRztBQUNxQjtBQUFtQjtBQUFRLElBQWxELFFBQVEsQ0FBQyxTQUE0QixJQUFJO0FBQUksUUFDM0MsdUJBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3pELFFBQUksdUJBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7QUFDNUQsUUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTtBQUN2RCxZQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNyQixnQkFBUSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN2QyxhQUFPO0FBQ1AsWUFDTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDbEYsU0FBSyxDQUFDLENBQUM7QUFDUCxLQUFHO0FBQ0g7QUFDTztBQUEwQjtBQUF3QjtBQUN2RDtBQUFtQjtBQUFRLElBRG5CLFFBQVEsQ0FBQyxTQUE0QixFQUFFLEVBQUUsSUFBWSxFQUFFLE9BQWE7QUFDOUUsUUFBSSx1QkFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQyxRQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzVFO0FBRUM7QUFBUTtBQUEwQjtBQUNqQztBQUFRLElBREEsT0FBTyxDQUFDLFNBQTRCLEVBQUU7QUFDaEQsUUFBSSxNQUFNLENBQUMsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDMUQ7QUFFQTswQ0E1REMsVUFBVTswR0FDVDtBQUFDO0FBQW1CO0FBR04sWUFQUCxzQkFBc0I7QUFBRzs7O2dGQUFFO0FBQUM7QUFJN0I7QUFBcUI7QUFHQTs7QUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQXpEQSxBQUFBLEFBSEEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJsb2NrVUlBY3Rpb25zIH0gZnJvbSAnLi4vY29uc3RhbnRzL2Jsb2NrLXVpLWFjdGlvbnMuY29uc3RhbnQnO1xuaW1wb3J0IHsgQmxvY2tVSURlZmF1bHROYW1lIH0gZnJvbSAnLi4vY29uc3RhbnRzL2Jsb2NrLXVpLWRlZmF1bHQtbmFtZS5jb25zdGFudCc7XG5pbXBvcnQgeyBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlIH0gZnJvbSAnLi9ibG9jay11aS1pbnN0YW5jZS5zZXJ2aWNlJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmxvY2tVSVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYmxvY2tVSUluc3RhbmNlOiBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlXG4gICkge31cblxuICAvKipcbiAgKiBTdGFydHMgYmxvY2tpbmcgZm9yIGdpdmVuIEJsb2NrVUkgaW5zdGFuY2Ugb3IgaW5zdGFuY2VzXG4gICovXG4gIHN0YXJ0KHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10sIG1lc3NhZ2U/OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoKHRhcmdldCwgQmxvY2tVSUFjdGlvbnMuU1RBUlQsIG1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICogU3RvcHMgYmxvY2tpbmcgZm9yIGdpdmVuIEJsb2NrVUkgaW5zdGFuY2Ugb3IgaW5zdGFuY2VzXG4gICovXG4gIHN0b3AodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5TVE9QKTtcbiAgfVxuXG4gIC8qKlxuICAqIFJlc2V0IGJsb2NraW5nIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICByZXNldCh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlJFU0VUKTtcbiAgfVxuXG4gIC8qKlxuICAqIFVuc3Vic2NyaWJlcyBmb3IgZ2l2ZW4gQmxvY2tVSSBpbnN0YW5jZSBvciBpbnN0YW5jZXNcbiAgKi9cbiAgdW5zdWJzY3JpYmUodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5VTlNVQlNDUklCRSk7XG4gIH1cblxuICAvKipcbiAgKiBDaGVja3MgaWYgQmxvY2tVSSBpcyBhY3RpdmVseSBibG9ja2luZ1xuICAqL1xuICBpc0FjdGl2ZSh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdID0gbnVsbCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHRhcmdldHMgPSB0YXJnZXQgPyB0aGlzLnRvQXJyYXkodGFyZ2V0KSA6IG51bGw7XG4gICAgY29uc3QgaW5zdGFuY2VzID0gdGhpcy5ibG9ja1VJSW5zdGFuY2UuYmxvY2tVSUluc3RhbmNlcztcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhpbnN0YW5jZXMpLnNvbWUoKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoIXRhcmdldHMpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlc1trZXldLmlzQWN0aXZlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0cy5pbmRleE9mKGluc3RhbmNlc1trZXldLm5hbWUpID49IDAgJiYgaW5zdGFuY2VzW2tleV0uaXNBY3RpdmU7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGRpc3BhdGNoKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10gPSBbXSwgdHlwZTogc3RyaW5nLCBtZXNzYWdlPzogYW55KSB7XG4gICAgY29uc3QgaW5zdGFuY2VzID0gdGhpcy50b0FycmF5KHRhcmdldCk7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goaSA9PiB0aGlzLmJsb2NrVUlJbnN0YW5jZS5kZWNvcmF0ZShpKVt0eXBlXShtZXNzYWdlKSk7XG4gIH1cblxuICBwcml2YXRlIHRvQXJyYXkodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gW3RhcmdldF0gOiB0YXJnZXQ7XG4gIH1cbn1cbiJdfQ==