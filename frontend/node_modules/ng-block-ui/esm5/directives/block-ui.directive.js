/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, ComponentFactoryResolver, ViewContainerRef, TemplateRef, Renderer2 } from '@angular/core';
import { BlockUIContentComponent } from '../components/block-ui-content/block-ui-content.component';
import { BlockUIInstanceService } from '../services/block-ui-instance.service';
import { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';
import * as ɵngcc0 from '@angular/core';
var BlockUIDirective = /** @class */ (function () {
    function BlockUIDirective(blockUIService, viewRef, templateRef, renderer, componentFactoryResolver) {
        this.blockUIService = blockUIService;
        this.viewRef = viewRef;
        this.templateRef = templateRef;
        this.renderer = renderer;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    Object.defineProperty(BlockUIDirective.prototype, "blockUI", {
        set: /**
         * @param {?} name
         * @return {?}
         */
        function (name) { this.blockTarget = name; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIMessage", {
        set: /**
         * @param {?} message
         * @return {?}
         */
        function (message) { this.message = message; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUITemplate", {
        set: /**
         * @param {?} template
         * @return {?}
         */
        function (template) { this.template = template; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIDelayStart", {
        set: /**
         * @param {?} delayStart
         * @return {?}
         */
        function (delayStart) {
            this.delayStart = delayStart ? Number(delayStart) : null;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIDelayStop", {
        set: /**
         * @param {?} delayStop
         * @return {?}
         */
        function (delayStop) {
            this.delayStop = delayStop ? Number(delayStop) : null;
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    BlockUIDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        try {
            this.viewRef.createEmbeddedView(this.templateRef);
            var /** @type {?} */ parentElement = this.viewRef.element.nativeElement.nextSibling;
            if (parentElement && !this.isComponentInTemplate(parentElement)) {
                this.renderer.addClass(parentElement, 'block-ui__element');
                this.blockUIComponentRef = this.createComponent();
                var /** @type {?} */ blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);
                if (blockUIContent) {
                    var /** @type {?} */ settings = this.blockUIService.getSettings();
                    parentElement.appendChild(blockUIContent);
                    this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';
                    this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;
                    if (this.message)
                        this.blockUIComponentRef.instance.defaultMessage = this.message;
                    if (this.delayStart)
                        this.blockUIComponentRef.instance.delayStart = this.delayStart;
                    if (this.delayStop)
                        this.blockUIComponentRef.instance.delayStop = this.delayStop;
                    if (this.template || settings.template)
                        this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;
                }
            }
        }
        catch (/** @type {?} */ error) {
            console.error('ng-block-ui:', error);
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BlockUIDirective.prototype.isComponentInTemplate = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var children = (element || []).children;
        children = Array.from(children).reverse();
        return children.some(function (el) { return el.localName === 'block-ui'; });
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BlockUIDirective.prototype.findContentNode = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        var nextSibling = element.nextSibling;
        return [nextSibling, nextSibling.nextSibling].find(function (e) { return e.localName === 'block-ui-content'; });
    };
    /**
     * @return {?}
     */
    BlockUIDirective.prototype.createComponent = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);
        return this.viewRef.createComponent(resolvedBlockUIComponent);
    };
    /** @nocollapse */
    BlockUIDirective.ctorParameters = function () { return [
        { type: BlockUIInstanceService },
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: Renderer2 },
        { type: ComponentFactoryResolver }
    ]; };
    BlockUIDirective.propDecorators = {
        blockUI: [{ type: Input }],
        blockUIMessage: [{ type: Input }],
        blockUITemplate: [{ type: Input }],
        blockUIDelayStart: [{ type: Input }],
        blockUIDelayStop: [{ type: Input }]
    };
BlockUIDirective.ɵfac = function BlockUIDirective_Factory(t) { return new (t || BlockUIDirective)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
BlockUIDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BlockUIDirective, selectors: [["", "blockUI", ""]], inputs: { blockUI: "blockUI", blockUIMessage: "blockUIMessage", blockUITemplate: "blockUITemplate", blockUIDelayStart: "blockUIDelayStart", blockUIDelayStop: "blockUIDelayStop" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUIDirective, [{
        type: Directive,
        args: [{ selector: '[blockUI]' }]
    }], function () { return [{ type: BlockUIInstanceService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { blockUI: [{
            type: Input
        }], blockUIMessage: [{
            type: Input
        }], blockUITemplate: [{
            type: Input
        }], blockUIDelayStart: [{
            type: Input
        }], blockUIDelayStop: [{
            type: Input
        }] }); })();
    return BlockUIDirective;
}());
export { BlockUIDirective };
function BlockUIDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIDirective.prototype.blockUIComponentRef;
    /** @type {?} */
    BlockUIDirective.prototype.blockTarget;
    /** @type {?} */
    BlockUIDirective.prototype.message;
    /** @type {?} */
    BlockUIDirective.prototype.template;
    /** @type {?} */
    BlockUIDirective.prototype.delayStart;
    /** @type {?} */
    BlockUIDirective.prototype.delayStop;
    /** @type {?} */
    BlockUIDirective.prototype.blockUIService;
    /** @type {?} */
    BlockUIDirective.prototype.viewRef;
    /** @type {?} */
    BlockUIDirective.prototype.templateRef;
    /** @type {?} */
    BlockUIDirective.prototype.renderer;
    /** @type {?} */
    BlockUIDirective.prototype.componentFactoryResolver;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,