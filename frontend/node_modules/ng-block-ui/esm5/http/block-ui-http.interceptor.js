/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';
import { BlockUIHttpSettings } from './block-ui-http-settings.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-block-ui';
var BlockUIInterceptor = /** @class */ (function () {
    function BlockUIInterceptor(blockUIService, blockUIHttpSettings) {
        this.blockUIService = blockUIService;
        this.blockUIHttpSettings = blockUIHttpSettings;
        this.activeHttpRequests = 0;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    BlockUIInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        var /** @type {?} */ active = false;
        if (this.shouldBlock(request)) {
            active = true;
            this.activeHttpRequests++;
            this.blockUIService.start(BLOCKUI_DEFAULT);
        }
        return next.handle(request)
            .pipe(finalize(function () {
            if (_this.shouldBlock(request)) {
                _this.activeHttpRequests--;
                var blockAllRequestsInProgress = _this.blockUIHttpSettings.settings.blockAllRequestsInProgress;
                var /** @type {?} */ stopBlockUI = false;
                if (!!blockAllRequestsInProgress && _this.activeHttpRequests <= 0) {
                    _this.activeHttpRequests = 0;
                    stopBlockUI = true;
                }
                else if (active) {
                    stopBlockUI = true;
                }
                if (stopBlockUI) {
                    var /** @type {?} */ method = blockAllRequestsInProgress ? 'stop' : 'reset';
                    _this.blockUIService[method](BLOCKUI_DEFAULT);
                }
            }
        }));
    };
    /**
     * @param {?} request
     * @return {?}
     */
    BlockUIInterceptor.prototype.shouldBlock = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        var method = request.method, urlWithParams = request.urlWithParams;
        var settings = this.blockUIHttpSettings.settings;
        var /** @type {?} */ requestFilters = settings.requestFilters || [];
        return !requestFilters.some(function (f) {
            if (f && f.method && f.url) {
                return f.method.toUpperCase() === method && f.url.test(urlWithParams);
            }
            else if (typeof f === 'function') {
                return f(request);
            }
            return f.test(urlWithParams);
        });
    };
    /** @nocollapse */
    BlockUIInterceptor.ctorParameters = function () { return [
        { type: BlockUIService },
        { type: BlockUIHttpSettings }
    ]; };
BlockUIInterceptor.ɵfac = function BlockUIInterceptor_Factory(t) { return new (t || BlockUIInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.BlockUIService), ɵngcc0.ɵɵinject(BlockUIHttpSettings)); };
BlockUIInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIInterceptor, factory: function (t) { return BlockUIInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUIInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BlockUIService }, { type: BlockUIHttpSettings }]; }, null); })();
    return BlockUIInterceptor;
}());
export { BlockUIInterceptor };
function BlockUIInterceptor_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIInterceptor.prototype.activeHttpRequests;
    /** @type {?} */
    BlockUIInterceptor.prototype.blockUIService;
    /** @type {?} */
    BlockUIInterceptor.prototype.blockUIHttpSettings;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,