/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-block-ui';
var BlockUIPreventNavigation = /** @class */ (function () {
    function BlockUIPreventNavigation(blockUIService) {
        this.blockUIService = blockUIService;
    }
    /**
     * @return {?}
     */
    BlockUIPreventNavigation.prototype.canActivate = /**
     * @return {?}
     */
    function () {
        return !this.blockUIService.isActive(BLOCKUI_DEFAULT);
    };
    /**
     * @return {?}
     */
    BlockUIPreventNavigation.prototype.canActivateChild = /**
     * @return {?}
     */
    function () {
        return !this.blockUIService.isActive(BLOCKUI_DEFAULT);
    };
    /** @nocollapse */
    BlockUIPreventNavigation.ctorParameters = function () { return [
        { type: BlockUIService }
    ]; };
BlockUIPreventNavigation.ɵfac = function BlockUIPreventNavigation_Factory(t) { return new (t || BlockUIPreventNavigation)(ɵngcc0.ɵɵinject(ɵngcc1.BlockUIService)); };
BlockUIPreventNavigation.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIPreventNavigation, factory: function (t) { return BlockUIPreventNavigation.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUIPreventNavigation, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BlockUIService }]; }, null); })();
    return BlockUIPreventNavigation;
}());
export { BlockUIPreventNavigation };
function BlockUIPreventNavigation_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIPreventNavigation.prototype.blockUIService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktcHJldmVudC1uYXZpZ2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy1ibG9jay11aS9yb3V0ZXIvYmxvY2stdWktcHJldmVudC1uYXZpZ2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7OztBQUM5RDtBQUU2QyxJQUUzQyxrQ0FDVTtBQUFrQixRQUFsQixtQkFBYyxHQUFkLGNBQWM7QUFBRSxLQUN0QjtBQUNOO0FBQ087QUFDQztBQUFRLElBRGQsOENBQVc7QUFDWDtBQUFtQjtBQUFRLElBRDNCO0FBQWMsUUFDWixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMxRCxLQUFHO0FBRUg7QUFBUTtBQUNKO0FBQVEsSUFEVixtREFBZ0I7QUFDaEI7QUFBbUI7QUFBUSxJQUQzQjtBQUFjLFFBQ1osTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUQsS0FBRyxDQVpHO0FBQUM7cUNBRE4sVUFBVSwvQ0FDbUI7QUFHNUIsZ0JBTk8sY0FBYztBQUFHOzs7OzsrRUFBUztBQUFDLG1DQUhwQztBQUFFO0FBQU0sU0FNSyx3QkFBd0I7QUFBSTtBQUc5QjtBQUFxQjtBQUlkOztBQWJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFiQSxBQUFBLEFBRkEsQUFBQSxBQUhBLEFBTUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgQmxvY2tVSVNlcnZpY2UsIEJMT0NLVUlfREVGQVVMVCB9IGZyb20gJ25nLWJsb2NrLXVpJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlQcmV2ZW50TmF2aWdhdGlvbiBpbXBsZW1lbnRzIENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJsb2NrVUlTZXJ2aWNlOiBCbG9ja1VJU2VydmljZVxuICApIHt9XG5cbiAgY2FuQWN0aXZhdGUoKSB7XG4gICAgcmV0dXJuICF0aGlzLmJsb2NrVUlTZXJ2aWNlLmlzQWN0aXZlKEJMT0NLVUlfREVGQVVMVCk7XG4gIH1cblxuICBjYW5BY3RpdmF0ZUNoaWxkKCkge1xuICAgIHJldHVybiAhdGhpcy5ibG9ja1VJU2VydmljZS5pc0FjdGl2ZShCTE9DS1VJX0RFRkFVTFQpO1xuICB9XG59XG4iXX0=