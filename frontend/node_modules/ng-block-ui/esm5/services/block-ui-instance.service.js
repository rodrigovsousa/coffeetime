/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { BlockUIActions } from '../constants/block-ui-actions.constant';
import { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';
import * as ɵngcc0 from '@angular/core';
var BlockUIInstanceService = /** @class */ (function () {
    function BlockUIInstanceService() {
        this.blockUISettings = {};
        this.blockUIInstances = {};
        this.blockUISubject = new ReplaySubject();
        this.blockUIObservable = this.blockUISubject.asObservable();
        this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));
    }
    /**
     * @return {?}
     */
    BlockUIInstanceService.prototype.getSettings = /**
     * @return {?}
     */
    function () {
        return this.blockUISettings;
    };
    /**
     * @param {?=} settings
     * @return {?}
     */
    BlockUIInstanceService.prototype.updateSettings = /**
     * @param {?=} settings
     * @return {?}
     */
    function (settings) {
        if (settings === void 0) { settings = {}; }
        this.blockUISettings = tslib_1.__assign({}, this.blockUISettings, settings);
    };
    /**
     * @param {?=} name
     * @return {?}
     */
    BlockUIInstanceService.prototype.decorate = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (name === void 0) { name = BlockUIDefaultName; }
        var /** @type {?} */ blockUI = /** @type {?} */ ({
            name: name,
            isActive: false,
            blockCount: 0,
            start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),
            update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),
            stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),
            reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),
            unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)
        });
        this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;
        return blockUI;
    };
    /**
     * @return {?}
     */
    BlockUIInstanceService.prototype.observe = /**
     * @return {?}
     */
    function () {
        return this.blockUIObservable;
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    BlockUIInstanceService.prototype.blockUIMiddleware = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var action = _a.action, name = _a.name;
        var /** @type {?} */ isActive = null;
        switch (action) {
            case (BlockUIActions.START):
                isActive = true;
                break;
            case (BlockUIActions.STOP):
            case (BlockUIActions.RESET):
                isActive = false;
                break;
        }
        if (isActive !== null) {
            this.blockUIInstances[name].isActive = isActive;
        }
    };
    /**
     * @param {?} subject
     * @param {?} action
     * @param {?=} name
     * @return {?}
     */
    BlockUIInstanceService.prototype.dispatch = /**
     * @param {?} subject
     * @param {?} action
     * @param {?=} name
     * @return {?}
     */
    function (subject, action, name) {
        if (name === void 0) { name = BlockUIDefaultName; }
        return function (message) {
            subject.next({
                name: name,
                action: action,
                message: message
            });
        };
    };
    /** @nocollapse */
    BlockUIInstanceService.ctorParameters = function () { return []; };
BlockUIInstanceService.ɵfac = function BlockUIInstanceService_Factory(t) { return new (t || BlockUIInstanceService)(); };
BlockUIInstanceService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIInstanceService, factory: function (t) { return BlockUIInstanceService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUIInstanceService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return BlockUIInstanceService;
}());
export { BlockUIInstanceService };
function BlockUIInstanceService_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIInstanceService.prototype.blockUISettings;
    /** @type {?} */
    BlockUIInstanceService.prototype.blockUIInstances;
    /** @type {?} */
    BlockUIInstanceService.prototype.blockUISubject;
    /** @type {?} */
    BlockUIInstanceService.prototype.blockUIObservable;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,