/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BlockUIActions } from '../constants/block-ui-actions.constant';
import { BlockUIInstanceService } from './block-ui-instance.service';
import * as ɵngcc0 from '@angular/core';
var BlockUIService = /** @class */ (function () {
    function BlockUIService(blockUIInstance) {
        this.blockUIInstance = blockUIInstance;
    }
    /**
    * Starts blocking for given BlockUI instance or instances
    */
    /**
     * Starts blocking for given BlockUI instance or instances
     * @param {?} target
     * @param {?=} message
     * @return {?}
     */
    BlockUIService.prototype.start = /**
     * Starts blocking for given BlockUI instance or instances
     * @param {?} target
     * @param {?=} message
     * @return {?}
     */
    function (target, message) {
        this.dispatch(target, BlockUIActions.START, message);
    };
    /**
    * Stops blocking for given BlockUI instance or instances
    */
    /**
     * Stops blocking for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    BlockUIService.prototype.stop = /**
     * Stops blocking for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    function (target) {
        this.dispatch(target, BlockUIActions.STOP);
    };
    /**
    * Reset blocking for given BlockUI instance or instances
    */
    /**
     * Reset blocking for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    BlockUIService.prototype.reset = /**
     * Reset blocking for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    function (target) {
        this.dispatch(target, BlockUIActions.RESET);
    };
    /**
    * Unsubscribes for given BlockUI instance or instances
    */
    /**
     * Unsubscribes for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    BlockUIService.prototype.unsubscribe = /**
     * Unsubscribes for given BlockUI instance or instances
     * @param {?} target
     * @return {?}
     */
    function (target) {
        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);
    };
    /**
    * Checks if BlockUI is actively blocking
    */
    /**
     * Checks if BlockUI is actively blocking
     * @param {?=} target
     * @return {?}
     */
    BlockUIService.prototype.isActive = /**
     * Checks if BlockUI is actively blocking
     * @param {?=} target
     * @return {?}
     */
    function (target) {
        if (target === void 0) { target = null; }
        var /** @type {?} */ targets = target ? this.toArray(target) : null;
        var /** @type {?} */ instances = this.blockUIInstance.blockUIInstances;
        return Object.keys(instances).some(function (key) {
            if (!targets) {
                return instances[key].isActive;
            }
            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;
        });
    };
    /**
     * @param {?=} target
     * @param {?=} type
     * @param {?=} message
     * @return {?}
     */
    BlockUIService.prototype.dispatch = /**
     * @param {?=} target
     * @param {?=} type
     * @param {?=} message
     * @return {?}
     */
    function (target, type, message) {
        var _this = this;
        if (target === void 0) { target = []; }
        var /** @type {?} */ instances = this.toArray(target);
        instances.forEach(function (i) { return _this.blockUIInstance.decorate(i)[type](message); });
    };
    /**
     * @param {?=} target
     * @return {?}
     */
    BlockUIService.prototype.toArray = /**
     * @param {?=} target
     * @return {?}
     */
    function (target) {
        if (target === void 0) { target = []; }
        return typeof target === 'string' ? [target] : target;
    };
    /** @nocollapse */
    BlockUIService.ctorParameters = function () { return [
        { type: BlockUIInstanceService }
    ]; };
BlockUIService.ɵfac = function BlockUIService_Factory(t) { return new (t || BlockUIService)(ɵngcc0.ɵɵinject(BlockUIInstanceService)); };
BlockUIService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIService, factory: function (t) { return BlockUIService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BlockUIService, [{
        type: Injectable
    }], function () { return [{ type: BlockUIInstanceService }]; }, null); })();
    return BlockUIService;
}());
export { BlockUIService };
function BlockUIService_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIService.prototype.blockUIInstance;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L25nLWJsb2NrLXVpL3NlcnZpY2VzL2Jsb2NrLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUNyRTtBQUtHLElBQUQsd0JBQ1U7QUFBbUIsUUFBbkIsb0JBQWUsR0FBZixlQUFlO0FBQUUsS0FDdkI7QUFDTixJQUNFO0FBQ0Y7QUFDRSxNQUFFO0FBQ0o7QUFBUTtBQUNLO0FBQXlCO0FBR3BDO0FBQ2E7QUFBUSxJQUxyQiw4QkFBSztBQUFPO0FBQ0s7QUFBeUI7QUFJMUM7QUFBbUI7QUFBUSxJQUwzQixVQUFNLE1BQXlCLEVBQUUsT0FBYTtBQUFJLFFBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekQsS0FBRztBQUVILElBQUU7QUFDRjtBQUNFLE1BQUU7QUFDSjtBQUFRO0FBQ29CO0FBRzVCO0FBQ2E7QUFBUSxJQUxuQiw2QkFBSTtBQUFPO0FBQ29CO0FBRzVCO0FBQ2E7QUFBUSxJQUx4QixVQUFLLE1BQXlCO0FBQUksUUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9DLEtBQUc7QUFFSCxJQUFFO0FBQ0Y7QUFDRSxNQUFFO0FBQ0o7QUFBUTtBQUNtQjtBQUN4QjtBQUdRO0FBQVEsSUFMakIsOEJBQUs7QUFBTztBQUNtQjtBQUc3QjtBQUNhO0FBQVEsSUFMdkIsVUFBTSxNQUF5QjtBQUFJLFFBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxLQUFLLENB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QUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFFQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBekRBLEFBQUEsQUFIQSxBQUFBLEFBSEEsQUFPQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmxvY2tVSUFjdGlvbnMgfSBmcm9tICcuLi9jb25zdGFudHMvYmxvY2stdWktYWN0aW9ucy5jb25zdGFudCc7XG5pbXBvcnQgeyBCbG9ja1VJRGVmYXVsdE5hbWUgfSBmcm9tICcuLi9jb25zdGFudHMvYmxvY2stdWktZGVmYXVsdC1uYW1lLmNvbnN0YW50JztcbmltcG9ydCB7IEJsb2NrVUlJbnN0YW5jZVNlcnZpY2UgfSBmcm9tICcuL2Jsb2NrLXVpLWluc3RhbmNlLnNlcnZpY2UnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCbG9ja1VJU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBibG9ja1VJSW5zdGFuY2U6IEJsb2NrVUlJbnN0YW5jZVNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAqIFN0YXJ0cyBibG9ja2luZyBmb3IgZ2l2ZW4gQmxvY2tVSSBpbnN0YW5jZSBvciBpbnN0YW5jZXNcbiAgKi9cbiAgc3RhcnQodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSwgbWVzc2FnZT86IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5TVEFSVCwgbWVzc2FnZSk7XG4gIH1cblxuICAvKipcbiAgKiBTdG9wcyBibG9ja2luZyBmb3IgZ2l2ZW4gQmxvY2tVSSBpbnN0YW5jZSBvciBpbnN0YW5jZXNcbiAgKi9cbiAgc3RvcCh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlNUT1ApO1xuICB9XG5cbiAgLyoqXG4gICogUmVzZXQgYmxvY2tpbmcgZm9yIGdpdmVuIEJsb2NrVUkgaW5zdGFuY2Ugb3IgaW5zdGFuY2VzXG4gICovXG4gIHJlc2V0KHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10pOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoKHRhcmdldCwgQmxvY2tVSUFjdGlvbnMuUkVTRVQpO1xuICB9XG5cbiAgLyoqXG4gICogVW5zdWJzY3JpYmVzIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICB1bnN1YnNjcmliZSh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlVOU1VCU0NSSUJFKTtcbiAgfVxuXG4gIC8qKlxuICAqIENoZWNrcyBpZiBCbG9ja1VJIGlzIGFjdGl2ZWx5IGJsb2NraW5nXG4gICovXG4gIGlzQWN0aXZlKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10gPSBudWxsKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdGFyZ2V0cyA9IHRhcmdldCA/IHRoaXMudG9BcnJheSh0YXJnZXQpIDogbnVsbDtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSB0aGlzLmJsb2NrVUlJbnN0YW5jZS5ibG9ja1VJSW5zdGFuY2VzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGluc3RhbmNlcykuc29tZSgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2VzW2tleV0uaXNBY3RpdmU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRzLmluZGV4T2YoaW5zdGFuY2VzW2tleV0ubmFtZSkgPj0gMCAmJiBpbnN0YW5jZXNba2V5XS5pc0FjdGl2ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2godGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSA9IFtdLCB0eXBlOiBzdHJpbmcsIG1lc3NhZ2U/OiBhbnkpIHtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSB0aGlzLnRvQXJyYXkodGFyZ2V0KTtcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChpID0+IHRoaXMuYmxvY2tVSUluc3RhbmNlLmRlY29yYXRlKGkpW3R5cGVdKG1lc3NhZ2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9BcnJheSh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdID0gW10pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBbdGFyZ2V0XSA6IHRhcmdldDtcbiAgfVxufVxuIl19