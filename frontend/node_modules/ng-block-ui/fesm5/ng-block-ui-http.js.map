{"version":3,"file":"ng-block-ui-http.js.map","sources":["ng://ng-block-ui/http/block-ui-http-settings.service.ts","ng://ng-block-ui/http/block-ui-http.interceptor.ts","ng://ng-block-ui/http/block-ui-http.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private activeHttpRequests: number;\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private blockUIHttpSettings: BlockUIHttpSettings\n  ) {\n    this.activeHttpRequests = 0;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active: boolean = false;\n\n    if (this.shouldBlock(request)) {\n      active = true;\n      this.activeHttpRequests++;\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          if (this.shouldBlock(request)) {\n            this.activeHttpRequests--;\n            const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;\n            let stopBlockUI: boolean = false;\n\n            if (!!blockAllRequestsInProgress && this.activeHttpRequests <= 0) {\n              this.activeHttpRequests = 0;\n              stopBlockUI = true;\n            } else if (active) {\n              stopBlockUI = true;\n            }\n\n            if (stopBlockUI) {\n              const method: string = blockAllRequestsInProgress ? 'stop' : 'reset';\n              this.blockUIService[method](BLOCKUI_DEFAULT);\n            }\n          }\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const { settings } = this.blockUIHttpSettings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return { settings };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  public static forRoot(settings: HttpSettings = {}): ModuleWithProviders {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
