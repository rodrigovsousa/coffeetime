{"version":3,"file":"primeng-editor.js","sources":["ng:/primeng/editor/editor.ts","ng:/primeng/editor/primeng-editor.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewInit,Input,Output,EventEmitter,ContentChild,forwardRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule,Header} from 'primeng/api'\nimport {DomHandler} from 'primeng/dom';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport * as Quill from \"quill\";\n\nexport const EDITOR_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Editor),\n  multi: true\n};\n\n@Component({\n    selector: 'p-editor',\n    template: `\n        <div [ngClass]=\"'ui-widget ui-editor-container ui-corner-all'\" [class]=\"styleClass\">\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"toolbar\">\n                <ng-content select=\"p-header\"></ng-content>\n            </div>\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"!toolbar\">\n                <span class=\"ql-formats\">\n                    <select class=\"ql-header\">\n                      <option value=\"1\">Heading</option>\n                      <option value=\"2\">Subheading</option>\n                      <option selected>Normal</option>\n                    </select>\n                    <select class=\"ql-font\">\n                      <option selected>Sans Serif</option>\n                      <option value=\"serif\">Serif</option>\n                      <option value=\"monospace\">Monospace</option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-bold\" aria-label=\"Bold\"></button>\n                    <button class=\"ql-italic\" aria-label=\"Italic\"></button>\n                    <button class=\"ql-underline\" aria-label=\"Underline\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <select class=\"ql-color\"></select>\n                    <select class=\"ql-background\"></select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-list\" value=\"ordered\" aria-label=\"Ordered List\"></button>\n                    <button class=\"ql-list\" value=\"bullet\" aria-label=\"Unordered List\"></button>\n                    <select class=\"ql-align\">\n                        <option selected></option>\n                        <option value=\"center\"></option>\n                        <option value=\"right\"></option>\n                        <option value=\"justify\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-link\" aria-label=\"Insert Link\"></button>\n                    <button class=\"ql-image\" aria-label=\"Insert Image\"></button>\n                    <button class=\"ql-code-block\" aria-label=\"Insert Code Block\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-clean\" aria-label=\"Remove Styles\"></button>\n                </span>\n            </div>\n            <div class=\"ui-editor-content\" [ngStyle]=\"style\"></div>\n        </div>\n    `,\n    providers: [EDITOR_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Editor implements AfterViewInit,ControlValueAccessor {\n        \n    @Output() onTextChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onSelectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChild(Header) toolbar;\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n    \n    @Input() placeholder: string;\n    \n    @Input() formats: string[];\n\n    @Input() modules: any;\n\n    @Input() bounds: any;\n\n    @Input() scrollingContainer: any;\n\n    @Input() debug: string;\n    \n    @Output() onInit: EventEmitter<any> = new EventEmitter();\n    \n    value: string;\n    \n    _readonly: boolean;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    quill: any;\n    \n    constructor(public el: ElementRef) {}\n\n    ngAfterViewInit() {\n        let editorElement = DomHandler.findSingle(this.el.nativeElement ,'div.ui-editor-content'); \n        let toolbarElement = DomHandler.findSingle(this.el.nativeElement ,'div.ui-editor-toolbar'); \n        let defaultModule  = {toolbar: toolbarElement};\n        let modules = this.modules ? {...defaultModule, ...this.modules} : defaultModule;\n\n        this.quill = new Quill(editorElement, {\n          modules: modules,\n          placeholder: this.placeholder,\n          readOnly: this.readonly,\n          theme: 'snow',\n          formats: this.formats,\n          bounds: this.bounds,\n          debug: this.debug,\n          scrollingContainer: this.scrollingContainer\n        });\n                \n        if (this.value) {\n            this.quill.pasteHTML(this.value);\n        }\n        \n        this.quill.on('text-change', (delta, oldContents, source) => {\n            if (source === 'user') {\n                let html = editorElement.children[0].innerHTML;\n                let text = this.quill.getText().trim();\n                if (html === '<p><br></p>') {\n                    html = null;\n                }\n\n                this.onTextChange.emit({\n                    htmlValue: html,\n                    textValue: text,\n                    delta: delta,\n                    source: source\n                });\n                \n                this.onModelChange(html);\n                this.onModelTouched();\n            }\n        });\n        \n        this.quill.on('selection-change', (range, oldRange, source) => {\n            this.onSelectionChange.emit({\n                range: range,\n                oldRange: oldRange,\n                source: source\n            });\n        });\n        \n        this.onInit.emit({\n            editor: this.quill\n        });\n    }\n        \n    writeValue(value: any) : void {\n        this.value = value;\n                \n        if (this.quill) {\n            if (value)\n                this.quill.pasteHTML(value);\n            else\n                this.quill.setText('');\n        }\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    getQuill() {\n        return this.quill;\n    }\n    \n    @Input() get readonly(): boolean {\n        return this._readonly;\n    }\n\n    set readonly(val:boolean) {\n        this._readonly = val;\n        \n        if (this.quill) {\n            if (this._readonly)\n                this.quill.disable();\n            else\n                this.quill.enable();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Editor,SharedModule],\n    declarations: [Editor]\n})\nexport class EditorModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}