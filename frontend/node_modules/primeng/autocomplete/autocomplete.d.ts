import { ElementRef, AfterViewChecked, AfterContentInit, OnDestroy, EventEmitter, QueryList, TemplateRef, Renderer2, ChangeDetectorRef, IterableDiffers } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/inputtext';
import * as ɵngcc3 from 'primeng/button';
import * as ɵngcc4 from 'primeng/api';
export declare const AUTOCOMPLETE_VALUE_ACCESSOR: any;
export declare class AutoComplete implements AfterViewChecked, AfterContentInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    differs: IterableDiffers;
    minLength: number;
    delay: number;
    style: any;
    panelStyle: any;
    styleClass: string;
    panelStyleClass: string;
    inputStyle: any;
    inputId: string;
    inputStyleClass: string;
    placeholder: string;
    readonly: boolean;
    disabled: boolean;
    maxlength: number;
    name: string;
    required: boolean;
    size: number;
    appendTo: any;
    autoHighlight: boolean;
    forceSelection: boolean;
    type: string;
    autoZIndex: boolean;
    baseZIndex: number;
    ariaLabel: string;
    ariaLabelledBy: string;
    dropdownIcon: string;
    unique: boolean;
    completeOnFocus: boolean;
    completeMethod: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onUnselect: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onDropdownClick: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onKeyUp: EventEmitter<any>;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    field: string;
    scrollHeight: string;
    dropdown: boolean;
    dropdownMode: string;
    multiple: boolean;
    tabindex: number;
    dataKey: string;
    emptyMessage: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    autofocus: boolean;
    autocomplete: string;
    inputEL: ElementRef;
    multiInputEL: ElementRef;
    multiContainerEL: ElementRef;
    dropdownButton: ElementRef;
    templates: QueryList<any>;
    overlay: HTMLDivElement;
    itemTemplate: TemplateRef<any>;
    selectedItemTemplate: TemplateRef<any>;
    value: any;
    _suggestions: any[];
    onModelChange: Function;
    onModelTouched: Function;
    timeout: any;
    overlayVisible: boolean;
    documentClickListener: any;
    suggestionsUpdated: boolean;
    highlightOption: any;
    highlightOptionChanged: boolean;
    focus: boolean;
    filled: boolean;
    inputClick: boolean;
    inputKeyDown: boolean;
    noResults: boolean;
    differ: any;
    inputFieldValue: string;
    loading: boolean;
    documentResizeListener: any;
    forceSelectionUpdateModelTimeout: any;
    listId: string;
    itemClicked: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, differs: IterableDiffers);
    suggestions: any[];
    ngAfterViewChecked(): void;
    handleSuggestionsChange(): void;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onInput(event: Event): void;
    onInputClick(event: MouseEvent): void;
    search(event: any, query: string): void;
    selectItem(option: any, focus?: boolean): void;
    show(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    onOverlayAnimationDone(event: AnimationEvent): void;
    appendOverlay(): void;
    resolveFieldData(value: any): any;
    restoreOverlayAppend(): void;
    alignOverlay(): void;
    hide(): void;
    handleDropdownClick(event: any): void;
    focusInput(): void;
    removeItem(item: any): void;
    onKeydown(event: any): void;
    onKeyup(event: any): void;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onInputChange(event: any): void;
    onInputPaste(event: ClipboardEvent): void;
    isSelected(val: any): boolean;
    findOptionIndex(option: any): number;
    updateFilledState(): void;
    updateInputField(): void;
    bindDocumentClickListener(): void;
    isDropdownClick(event: any): boolean;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    onWindowResize(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AutoComplete, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AutoComplete, "p-autoComplete", never, { "minLength": "minLength"; "delay": "delay"; "type": "type"; "autoZIndex": "autoZIndex"; "baseZIndex": "baseZIndex"; "dropdownIcon": "dropdownIcon"; "unique": "unique"; "completeOnFocus": "completeOnFocus"; "scrollHeight": "scrollHeight"; "dropdownMode": "dropdownMode"; "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; "autocomplete": "autocomplete"; "suggestions": "suggestions"; "disabled": "disabled"; "style": "style"; "panelStyle": "panelStyle"; "styleClass": "styleClass"; "panelStyleClass": "panelStyleClass"; "inputStyle": "inputStyle"; "inputId": "inputId"; "inputStyleClass": "inputStyleClass"; "placeholder": "placeholder"; "readonly": "readonly"; "maxlength": "maxlength"; "name": "name"; "required": "required"; "size": "size"; "appendTo": "appendTo"; "autoHighlight": "autoHighlight"; "forceSelection": "forceSelection"; "ariaLabel": "ariaLabel"; "ariaLabelledBy": "ariaLabelledBy"; "field": "field"; "dropdown": "dropdown"; "multiple": "multiple"; "tabindex": "tabindex"; "dataKey": "dataKey"; "emptyMessage": "emptyMessage"; "autofocus": "autofocus"; }, { "completeMethod": "completeMethod"; "onSelect": "onSelect"; "onUnselect": "onUnselect"; "onFocus": "onFocus"; "onBlur": "onBlur"; "onDropdownClick": "onDropdownClick"; "onClear": "onClear"; "onKeyUp": "onKeyUp"; "onShow": "onShow"; "onHide": "onHide"; }, ["templates"], never>;
}
export declare class AutoCompleteModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AutoCompleteModule, [typeof AutoComplete], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.InputTextModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.SharedModule], [typeof AutoComplete, typeof ɵngcc4.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AutoCompleteModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmQudHMiLCJzb3VyY2VzIjpbImF1dG9jb21wbGV0ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEl0ZXJhYmxlRGlmZmVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQVVUT0NPTVBMRVRFX1ZBTFVFX0FDQ0VTU09SOiBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRvQ29tcGxldGUgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnM7XG4gICAgbWluTGVuZ3RoOiBudW1iZXI7XG4gICAgZGVsYXk6IG51bWJlcjtcbiAgICBzdHlsZTogYW55O1xuICAgIHBhbmVsU3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgcGFuZWxTdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgaW5wdXRTdHlsZTogYW55O1xuICAgIGlucHV0SWQ6IHN0cmluZztcbiAgICBpbnB1dFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIG1heGxlbmd0aDogbnVtYmVyO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICBzaXplOiBudW1iZXI7XG4gICAgYXBwZW5kVG86IGFueTtcbiAgICBhdXRvSGlnaGxpZ2h0OiBib29sZWFuO1xuICAgIGZvcmNlU2VsZWN0aW9uOiBib29sZWFuO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBhdXRvWkluZGV4OiBib29sZWFuO1xuICAgIGJhc2VaSW5kZXg6IG51bWJlcjtcbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICBhcmlhTGFiZWxsZWRCeTogc3RyaW5nO1xuICAgIGRyb3Bkb3duSWNvbjogc3RyaW5nO1xuICAgIHVuaXF1ZTogYm9vbGVhbjtcbiAgICBjb21wbGV0ZU9uRm9jdXM6IGJvb2xlYW47XG4gICAgY29tcGxldGVNZXRob2Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblVuc2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRHJvcGRvd25DbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbGVhcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25LZXlVcDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TaG93OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkhpZGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGZpZWxkOiBzdHJpbmc7XG4gICAgc2Nyb2xsSGVpZ2h0OiBzdHJpbmc7XG4gICAgZHJvcGRvd246IGJvb2xlYW47XG4gICAgZHJvcGRvd25Nb2RlOiBzdHJpbmc7XG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICBkYXRhS2V5OiBzdHJpbmc7XG4gICAgZW1wdHlNZXNzYWdlOiBzdHJpbmc7XG4gICAgc2hvd1RyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgaGlkZVRyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgYXV0b2ZvY3VzOiBib29sZWFuO1xuICAgIGF1dG9jb21wbGV0ZTogc3RyaW5nO1xuICAgIGlucHV0RUw6IEVsZW1lbnRSZWY7XG4gICAgbXVsdGlJbnB1dEVMOiBFbGVtZW50UmVmO1xuICAgIG11bHRpQ29udGFpbmVyRUw6IEVsZW1lbnRSZWY7XG4gICAgZHJvcGRvd25CdXR0b246IEVsZW1lbnRSZWY7XG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBvdmVybGF5OiBIVE1MRGl2RWxlbWVudDtcbiAgICBpdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgc2VsZWN0ZWRJdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdmFsdWU6IGFueTtcbiAgICBfc3VnZ2VzdGlvbnM6IGFueVtdO1xuICAgIG9uTW9kZWxDaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIG9uTW9kZWxUb3VjaGVkOiBGdW5jdGlvbjtcbiAgICB0aW1lb3V0OiBhbnk7XG4gICAgb3ZlcmxheVZpc2libGU6IGJvb2xlYW47XG4gICAgZG9jdW1lbnRDbGlja0xpc3RlbmVyOiBhbnk7XG4gICAgc3VnZ2VzdGlvbnNVcGRhdGVkOiBib29sZWFuO1xuICAgIGhpZ2hsaWdodE9wdGlvbjogYW55O1xuICAgIGhpZ2hsaWdodE9wdGlvbkNoYW5nZWQ6IGJvb2xlYW47XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgZmlsbGVkOiBib29sZWFuO1xuICAgIGlucHV0Q2xpY2s6IGJvb2xlYW47XG4gICAgaW5wdXRLZXlEb3duOiBib29sZWFuO1xuICAgIG5vUmVzdWx0czogYm9vbGVhbjtcbiAgICBkaWZmZXI6IGFueTtcbiAgICBpbnB1dEZpZWxkVmFsdWU6IHN0cmluZztcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGRvY3VtZW50UmVzaXplTGlzdGVuZXI6IGFueTtcbiAgICBmb3JjZVNlbGVjdGlvblVwZGF0ZU1vZGVsVGltZW91dDogYW55O1xuICAgIGxpc3RJZDogc3RyaW5nO1xuICAgIGl0ZW1DbGlja2VkOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycyk7XG4gICAgc3VnZ2VzdGlvbnM6IGFueVtdO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIGhhbmRsZVN1Z2dlc3Rpb25zQ2hhbmdlKCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKHZhbDogYm9vbGVhbik6IHZvaWQ7XG4gICAgb25JbnB1dChldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uSW5wdXRDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgc2VhcmNoKGV2ZW50OiBhbnksIHF1ZXJ5OiBzdHJpbmcpOiB2b2lkO1xuICAgIHNlbGVjdEl0ZW0ob3B0aW9uOiBhbnksIGZvY3VzPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2hvdygpOiB2b2lkO1xuICAgIG9uT3ZlcmxheUFuaW1hdGlvblN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgb25PdmVybGF5QW5pbWF0aW9uRG9uZShldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xuICAgIGFwcGVuZE92ZXJsYXkoKTogdm9pZDtcbiAgICByZXNvbHZlRmllbGREYXRhKHZhbHVlOiBhbnkpOiBhbnk7XG4gICAgcmVzdG9yZU92ZXJsYXlBcHBlbmQoKTogdm9pZDtcbiAgICBhbGlnbk92ZXJsYXkoKTogdm9pZDtcbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgaGFuZGxlRHJvcGRvd25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBmb2N1c0lucHV0KCk6IHZvaWQ7XG4gICAgcmVtb3ZlSXRlbShpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG9uS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBvbktleXVwKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Qmx1cihldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRQYXN0ZShldmVudDogQ2xpcGJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGlzU2VsZWN0ZWQodmFsOiBhbnkpOiBib29sZWFuO1xuICAgIGZpbmRPcHRpb25JbmRleChvcHRpb246IGFueSk6IG51bWJlcjtcbiAgICB1cGRhdGVGaWxsZWRTdGF0ZSgpOiB2b2lkO1xuICAgIHVwZGF0ZUlucHV0RmllbGQoKTogdm9pZDtcbiAgICBiaW5kRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk6IHZvaWQ7XG4gICAgaXNEcm9wZG93bkNsaWNrKGV2ZW50OiBhbnkpOiBib29sZWFuO1xuICAgIHVuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIGJpbmREb2N1bWVudFJlc2l6ZUxpc3RlbmVyKCk6IHZvaWQ7XG4gICAgdW5iaW5kRG9jdW1lbnRSZXNpemVMaXN0ZW5lcigpOiB2b2lkO1xuICAgIG9uV2luZG93UmVzaXplKCk6IHZvaWQ7XG4gICAgb25PdmVybGF5SGlkZSgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRvQ29tcGxldGVNb2R1bGUge1xufVxuIl19