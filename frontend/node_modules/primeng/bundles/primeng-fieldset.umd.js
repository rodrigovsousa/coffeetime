(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('primeng/api'),exports, require('@angular/core'), require('@angular/animations'), require('@angular/common'), require('primeng/api')) :
    typeof define === 'function' && define.amd ? define('primeng/fieldset', ['@angular/core','@angular/common','primeng/api','exports', '@angular/core', '@angular/animations', '@angular/common', 'primeng/api'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,global.primeng.api,(global.primeng = global.primeng || {}, global.primeng.fieldset = {}), global.ng.core, global.ng.animations, global.ng.common, global.primeng.api));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports, core, animations, common, api) { 
function Fieldset_ng_container_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function Fieldset_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    var _r233 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "a", 6);
    ɵngcc0.ɵɵlistener("click", function Fieldset_ng_container_2_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r233); var ctx_r232 = ɵngcc0.ɵɵnextContext(); return ctx_r232.toggle($event); })("keydown.enter", function Fieldset_ng_container_2_Template_a_keydown_enter_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r233); var ctx_r234 = ɵngcc0.ɵɵnextContext(); return ctx_r234.toggle($event); });
    ɵngcc0.ɵɵtemplate(2, Fieldset_ng_container_2_ng_container_2_Template, 1, 0, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r228 = ɵngcc0.ɵɵnextContext();
    var _r229 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("aria-controls", ctx_r228.id + "-content")("aria-expanded", !ctx_r228.collapsed);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r229);
} }
var _c0 = function (a0, a1) { return { "pi-minus": a0, "pi-plus": a1 }; };
function Fieldset_ng_template_3_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 10);
} if (rf & 2) {
    var ctx_r235 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(1, _c0, !ctx_r235.collapsed, ctx_r235.collapsed));
} }
function Fieldset_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, Fieldset_ng_template_3_span_0_Template, 1, 4, "span", 8);
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵprojection(3, 1);
} if (rf & 2) {
    var ctx_r230 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r230.toggleable);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r230.legend);
} }
var _c1 = ["*", [["p-header"]]];
var _c2 = function (a1) { return { "ui-fieldset ui-widget ui-widget-content ui-corner-all": true, "ui-fieldset-toggleable": a1 }; };
var _c3 = function (a0) { return { transitionParams: a0, height: "0" }; };
var _c4 = function (a1) { return { value: "hidden", params: a1 }; };
var _c5 = function (a0) { return { transitionParams: a0, height: "*" }; };
var _c6 = function (a1) { return { value: "visible", params: a1 }; };
var _c7 = function (a0) { return { "ui-fieldset-content-wrapper-overflown": a0 }; };
var _c8 = ["*", "p-header"];
'use strict';

    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var idx = 0;
    var Fieldset = /** @class */ (function () {
        function Fieldset(el) {
            this.el = el;
            this.collapsed = false;
            this.collapsedChange = new core.EventEmitter();
            this.onBeforeToggle = new core.EventEmitter();
            this.onAfterToggle = new core.EventEmitter();
            this.transitionOptions = '400ms cubic-bezier(0.86, 0, 0.07, 1)';
            this.id = "ui-fieldset-" + idx++;
        }
        Fieldset.prototype.toggle = function (event) {
            if (this.animating) {
                return false;
            }
            this.animating = true;
            this.onBeforeToggle.emit({ originalEvent: event, collapsed: this.collapsed });
            if (this.collapsed)
                this.expand(event);
            else
                this.collapse(event);
            this.onAfterToggle.emit({ originalEvent: event, collapsed: this.collapsed });
            event.preventDefault();
        };
        Fieldset.prototype.expand = function (event) {
            this.collapsed = false;
            this.collapsedChange.emit(this.collapsed);
        };
        Fieldset.prototype.collapse = function (event) {
            this.collapsed = true;
            this.collapsedChange.emit(this.collapsed);
        };
        Fieldset.prototype.getBlockableElement = function () {
            return this.el.nativeElement.children[0];
        };
        Fieldset.prototype.onToggleDone = function (event) {
            this.animating = false;
        };
        Fieldset.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input()
        ], Fieldset.prototype, "legend", void 0);
        __decorate([
            core.Input()
        ], Fieldset.prototype, "toggleable", void 0);
        __decorate([
            core.Input()
        ], Fieldset.prototype, "collapsed", void 0);
        __decorate([
            core.Output()
        ], Fieldset.prototype, "collapsedChange", void 0);
        __decorate([
            core.Output()
        ], Fieldset.prototype, "onBeforeToggle", void 0);
        __decorate([
            core.Output()
        ], Fieldset.prototype, "onAfterToggle", void 0);
        __decorate([
            core.Input()
        ], Fieldset.prototype, "style", void 0);
        __decorate([
            core.Input()
        ], Fieldset.prototype, "styleClass", void 0);
        __decorate([
            core.Input()
        ], Fieldset.prototype, "transitionOptions", void 0);
Fieldset.ɵfac = function Fieldset_Factory(t) { return new (t || Fieldset)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
Fieldset.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Fieldset, selectors: [["p-fieldset"]], inputs: { collapsed: "collapsed", transitionOptions: "transitionOptions", legend: "legend", toggleable: "toggleable", style: "style", styleClass: "styleClass" }, outputs: { collapsedChange: "collapsedChange", onBeforeToggle: "onBeforeToggle", onAfterToggle: "onAfterToggle" }, ngContentSelectors: _c8, decls: 8, vars: 24, consts: [[3, "ngClass", "ngStyle"], [1, "ui-fieldset-legend", "ui-corner-all", "ui-state-default", "ui-unselectable-text"], [4, "ngIf", "ngIfElse"], ["legendContent", ""], ["role", "region", 1, "ui-fieldset-content-wrapper", 3, "ngClass"], [1, "ui-fieldset-content"], ["tabindex", "0", 3, "click", "keydown.enter"], [4, "ngTemplateOutlet"], ["class", "ui-fieldset-toggler pi", 3, "ngClass", 4, "ngIf"], [1, "ui-fieldset-legend-text"], [1, "ui-fieldset-toggler", "pi", 3, "ngClass"]], template: function Fieldset_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "fieldset", 0);
        ɵngcc0.ɵɵelementStart(1, "legend", 1);
        ɵngcc0.ɵɵtemplate(2, Fieldset_ng_container_2_Template, 3, 3, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, Fieldset_ng_template_3_Template, 4, 2, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵlistener("@fieldsetContent.done", function Fieldset_Template_div_animation_fieldsetContent_done_5_listener($event) { return ctx.onToggleDone($event); });
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵprojection(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r229 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵclassMap(ctx.styleClass);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(12, _c2, ctx.toggleable))("ngStyle", ctx.style);
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.toggleable)("ngIfElse", _r229);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("@fieldsetContent", ctx.collapsed ? ɵngcc0.ɵɵpureFunction1(16, _c4, ɵngcc0.ɵɵpureFunction1(14, _c3, ctx.transitionOptions)) : ɵngcc0.ɵɵpureFunction1(20, _c6, ɵngcc0.ɵɵpureFunction1(18, _c5, ctx.animating ? ctx.transitionOptions : "0ms")))("ngClass", ɵngcc0.ɵɵpureFunction1(22, _c7, ctx.collapsed || ctx.animating));
        ɵngcc0.ɵɵattribute("id", ctx.id + "-content")("aria-labelledby", ctx.id)("aria-hidden", ctx.collapsed);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, data: { animation: [
            animations.trigger('fieldsetContent', [
                animations.state('hidden', animations.style({
                    height: '0'
                })),
                animations.state('void', animations.style({
                    height: '{{height}}'
                }), { params: { height: '0' } }),
                animations.state('visible', animations.style({
                    height: '*'
                })),
                animations.transition('visible => hidden', animations.animate('{{transitionParams}}')),
                animations.transition('hidden => visible', animations.animate('{{transitionParams}}')),
                animations.transition('void => visible', animations.animate('{{transitionParams}}'))
            ])
        ] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Fieldset, [{
        type: core.Component,
        args: [{
                selector: 'p-fieldset',
                template: "\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\">\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"ui-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{'pi-minus': !collapsed,'pi-plus':collapsed}\"></span>\n                    <span class=\"ui-fieldset-legend-text\">{{legend}}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                </ng-template>\n            </legend>\n            <div [attr.id]=\"id + '-content'\" class=\"ui-fieldset-content-wrapper\" [@fieldsetContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\" \n                        [attr.aria-labelledby]=\"id\" [ngClass]=\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\" [attr.aria-hidden]=\"collapsed\"\n                         (@fieldsetContent.done)=\"onToggleDone($event)\" role=\"region\">\n                <div class=\"ui-fieldset-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    ",
                animations: [
                    animations.trigger('fieldsetContent', [
                        animations.state('hidden', animations.style({
                            height: '0'
                        })),
                        animations.state('void', animations.style({
                            height: '{{height}}'
                        }), { params: { height: '0' } }),
                        animations.state('visible', animations.style({
                            height: '*'
                        })),
                        animations.transition('visible => hidden', animations.animate('{{transitionParams}}')),
                        animations.transition('hidden => visible', animations.animate('{{transitionParams}}')),
                        animations.transition('void => visible', animations.animate('{{transitionParams}}'))
                    ])
                ],
                changeDetection: core.ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { collapsed: [{
            type: core.Input
        }], collapsedChange: [{
            type: core.Output
        }], onBeforeToggle: [{
            type: core.Output
        }], onAfterToggle: [{
            type: core.Output
        }], transitionOptions: [{
            type: core.Input
        }], legend: [{
            type: core.Input
        }], toggleable: [{
            type: core.Input
        }], style: [{
            type: core.Input
        }], styleClass: [{
            type: core.Input
        }] }); })();
        return Fieldset;
    }());
    var FieldsetModule = /** @class */ (function () {
        function FieldsetModule() {
        }
FieldsetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FieldsetModule });
FieldsetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FieldsetModule_Factory(t) { return new (t || FieldsetModule)(); }, imports: [[common.CommonModule], ɵngcc2.SharedModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FieldsetModule, { declarations: [Fieldset], imports: [ɵngcc1.CommonModule], exports: [Fieldset, ɵngcc2.SharedModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FieldsetModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                exports: [Fieldset, api.SharedModule],
                declarations: [Fieldset]
            }]
    }], function () { return []; }, null); })();
        return FieldsetModule;
    }());

    exports.Fieldset = Fieldset;
    exports.FieldsetModule = FieldsetModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=primeng-fieldset.umd.js.map