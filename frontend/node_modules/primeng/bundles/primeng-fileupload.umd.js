(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/platform-browser'),require('@angular/common/http'),require('@angular/common'),require('primeng/button'),require('primeng/messages'),require('primeng/progressbar'),require('primeng/api'),exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser'), require('primeng/button'), require('primeng/messages'), require('primeng/progressbar'), require('primeng/dom'), require('primeng/api'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('primeng/fileupload', ['@angular/core','@angular/platform-browser','@angular/common/http','@angular/common','primeng/button','primeng/messages','primeng/progressbar','primeng/api','exports', '@angular/core', '@angular/common', '@angular/platform-browser', 'primeng/button', 'primeng/messages', 'primeng/progressbar', 'primeng/dom', 'primeng/api', '@angular/common/http'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.platformBrowser,global.ng.common.http,global.ng.common,global.primeng.button,global.primeng.messages,global.primeng.progressbar,global.primeng.api,(global.primeng = global.primeng || {}, global.primeng.fileupload = {}), global.ng.core, global.ng.common, global.ng.platformBrowser, global.primeng.button, global.primeng.messages, global.primeng.progressbar, global.primeng.dom, global.primeng.api, global.ng.common.http));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,exports, core, common, platformBrowser, button, messages, progressbar, dom, api, http) { 
var _c0 = ["advancedfileinput"];
var _c1 = ["basicfileinput"];
var _c2 = ["content"];
function FileUpload_div_0_p_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r300 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p-button", 14);
    ɵngcc0.ɵɵlistener("onClick", function FileUpload_div_0_p_button_5_Template_p_button_onClick_0_listener() { ɵngcc0.ɵɵrestoreView(_r300); var ctx_r299 = ɵngcc0.ɵɵnextContext(2); return ctx_r299.upload(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r292 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("label", ctx_r292.uploadLabel)("icon", ctx_r292.uploadIcon)("disabled", !ctx_r292.hasFiles() || ctx_r292.isFileLimitExceeded());
} }
function FileUpload_div_0_p_button_6_Template(rf, ctx) { if (rf & 1) {
    var _r302 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "p-button", 14);
    ɵngcc0.ɵɵlistener("onClick", function FileUpload_div_0_p_button_6_Template_p_button_onClick_0_listener() { ɵngcc0.ɵɵrestoreView(_r302); var ctx_r301 = ɵngcc0.ɵɵnextContext(2); return ctx_r301.clear(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r293 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("label", ctx_r293.cancelLabel)("icon", ctx_r293.cancelIcon)("disabled", !ctx_r293.hasFiles() || ctx_r293.uploading);
} }
function FileUpload_div_0_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function FileUpload_div_0_p_progressBar_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p-progressBar", 15);
} if (rf & 2) {
    var ctx_r296 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("value", ctx_r296.progress)("showValue", false);
} }
function FileUpload_div_0_div_12_div_1_div_1_img_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 22);
} if (rf & 2) {
    var file_r306 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r308 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("src", file_r306.objectURL, ɵngcc0.ɵɵsanitizeUrl)("width", ctx_r308.previewWidth);
} }
function FileUpload_div_0_div_12_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r311 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵtemplate(2, FileUpload_div_0_div_12_div_1_div_1_img_2_Template, 1, 2, "img", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div");
    ɵngcc0.ɵɵelementStart(8, "button", 21);
    ɵngcc0.ɵɵlistener("click", function FileUpload_div_0_div_12_div_1_div_1_Template_button_click_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r311); var i_r307 = ctx.index; var ctx_r310 = ɵngcc0.ɵɵnextContext(4); return ctx_r310.remove($event, i_r307); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var file_r306 = ctx.$implicit;
    var ctx_r305 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r305.isImage(file_r306));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(file_r306.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r305.formatSize(file_r306.size));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r305.uploading);
} }
function FileUpload_div_0_div_12_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, FileUpload_div_0_div_12_div_1_div_1_Template, 9, 4, "div", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r303 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r303.files);
} }
function FileUpload_div_0_div_12_div_2_ng_template_1_Template(rf, ctx) { }
function FileUpload_div_0_div_12_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, FileUpload_div_0_div_12_div_2_ng_template_1_Template, 0, 0, "ng-template", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r304 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r304.files)("ngForTemplate", ctx_r304.fileTemplate);
} }
function FileUpload_div_0_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtemplate(1, FileUpload_div_0_div_12_div_1_Template, 2, 1, "div", 17);
    ɵngcc0.ɵɵtemplate(2, FileUpload_div_0_div_12_div_2_Template, 2, 2, "div", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r297 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r297.fileTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r297.fileTemplate);
} }
function FileUpload_div_0_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c3 = function (a0, a1) { return { "ui-state-focus": a0, "ui-state-disabled": a1 }; };
var _c4 = function () { return { "ui-fileupload-content ui-widget-content ui-corner-bottom": true }; };
function FileUpload_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r314 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "span", 4);
    ɵngcc0.ɵɵelementStart(3, "input", 5, 6);
    ɵngcc0.ɵɵlistener("change", function FileUpload_div_0_Template_input_change_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r314); var ctx_r313 = ɵngcc0.ɵɵnextContext(); return ctx_r313.onFileSelect($event); })("focus", function FileUpload_div_0_Template_input_focus_3_listener() { ɵngcc0.ɵɵrestoreView(_r314); var ctx_r315 = ɵngcc0.ɵɵnextContext(); return ctx_r315.onFocus(); })("blur", function FileUpload_div_0_Template_input_blur_3_listener() { ɵngcc0.ɵɵrestoreView(_r314); var ctx_r316 = ɵngcc0.ɵɵnextContext(); return ctx_r316.onBlur(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, FileUpload_div_0_p_button_5_Template, 1, 3, "p-button", 7);
    ɵngcc0.ɵɵtemplate(6, FileUpload_div_0_p_button_6_Template, 1, 3, "p-button", 7);
    ɵngcc0.ɵɵtemplate(7, FileUpload_div_0_ng_container_7_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 9, 10);
    ɵngcc0.ɵɵlistener("dragenter", function FileUpload_div_0_Template_div_dragenter_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r314); var ctx_r317 = ɵngcc0.ɵɵnextContext(); return ctx_r317.onDragEnter($event); })("dragleave", function FileUpload_div_0_Template_div_dragleave_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r314); var ctx_r318 = ɵngcc0.ɵɵnextContext(); return ctx_r318.onDragLeave($event); })("drop", function FileUpload_div_0_Template_div_drop_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r314); var ctx_r319 = ɵngcc0.ɵɵnextContext(); return ctx_r319.onDrop($event); });
    ɵngcc0.ɵɵtemplate(10, FileUpload_div_0_p_progressBar_10_Template, 1, 2, "p-progressBar", 11);
    ɵngcc0.ɵɵelement(11, "p-messages", 12);
    ɵngcc0.ɵɵtemplate(12, FileUpload_div_0_div_12_Template, 3, 2, "div", 13);
    ɵngcc0.ɵɵtemplate(13, FileUpload_div_0_ng_container_13_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r289 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r289.styleClass);
    ɵngcc0.ɵɵproperty("ngClass", "ui-fileupload ui-widget")("ngStyle", ctx_r289.style);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ctx_r289.chooseLabel)("icon", ctx_r289.chooseIcon)("ngClass", ɵngcc0.ɵɵpureFunction2(20, _c3, ctx_r289.focus, ctx_r289.disabled || ctx_r289.isChooseDisabled()));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("multiple", ctx_r289.multiple)("accept", ctx_r289.accept)("disabled", ctx_r289.disabled || ctx_r289.isChooseDisabled());
    ɵngcc0.ɵɵattribute("title", "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r289.auto && ctx_r289.showUploadButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r289.auto && ctx_r289.showCancelButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r289.toolbarTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction0(23, _c4));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r289.hasFiles());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r289.msgs)("enableService", false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r289.hasFiles());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r289.contentTemplate);
} }
function FileUpload_span_1_input_4_Template(rf, ctx) { if (rf & 1) {
    var _r323 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 28, 29);
    ɵngcc0.ɵɵlistener("change", function FileUpload_span_1_input_4_Template_input_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r323); var ctx_r322 = ɵngcc0.ɵɵnextContext(2); return ctx_r322.onFileSelect($event); })("focus", function FileUpload_span_1_input_4_Template_input_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r323); var ctx_r324 = ɵngcc0.ɵɵnextContext(2); return ctx_r324.onFocus(); })("blur", function FileUpload_span_1_input_4_Template_input_blur_0_listener() { ɵngcc0.ɵɵrestoreView(_r323); var ctx_r325 = ɵngcc0.ɵɵnextContext(2); return ctx_r325.onBlur(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r320 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("accept", ctx_r320.accept)("multiple", ctx_r320.multiple)("disabled", ctx_r320.disabled);
} }
var _c5 = function (a1, a2, a3) { return { "ui-button ui-fileupload-choose ui-widget ui-state-default ui-corner-all ui-button-text-icon-left": true, "ui-fileupload-choose-selected": a1, "ui-state-focus": a2, "ui-state-disabled": a3 }; };
var _c6 = function (a0, a1) { return { "pi-plus": a0, "pi-upload": a1 }; };
function FileUpload_span_1_Template(rf, ctx) { if (rf & 1) {
    var _r327 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 24);
    ɵngcc0.ɵɵlistener("mouseup", function FileUpload_span_1_Template_span_mouseup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r327); var ctx_r326 = ɵngcc0.ɵɵnextContext(); return ctx_r326.onSimpleUploaderClick($event); });
    ɵngcc0.ɵɵelement(1, "span", 25);
    ɵngcc0.ɵɵelementStart(2, "span", 26);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, FileUpload_span_1_input_4_Template, 2, 3, "input", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r290 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r290.styleClass);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(7, _c5, ctx_r290.hasFiles(), ctx_r290.focus, ctx_r290.disabled))("ngStyle", ctx_r290.style);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(11, _c6, !ctx_r290.hasFiles() || ctx_r290.auto, ctx_r290.hasFiles() && !ctx_r290.auto));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r290.auto ? ctx_r290.chooseLabel : ctx_r290.hasFiles() ? ctx_r290.files[0].name : ctx_r290.chooseLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r290.hasFiles());
} }
'use strict';

    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __values = (this && this.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var FileUpload = /** @class */ (function () {
        function FileUpload(el, sanitizer, zone, http) {
            this.el = el;
            this.sanitizer = sanitizer;
            this.zone = zone;
            this.http = http;
            this.method = 'POST';
            this.invalidFileSizeMessageSummary = '{0}: Invalid file size, ';
            this.invalidFileSizeMessageDetail = 'maximum upload size is {0}.';
            this.invalidFileTypeMessageSummary = '{0}: Invalid file type, ';
            this.invalidFileTypeMessageDetail = 'allowed file types: {0}.';
            this.invalidFileLimitMessageDetail = 'limit is {0} at most.';
            this.invalidFileLimitMessageSummary = 'Maximum number of files exceeded, ';
            this.previewWidth = 50;
            this.chooseLabel = 'Choose';
            this.uploadLabel = 'Upload';
            this.cancelLabel = 'Cancel';
            this.chooseIcon = 'pi pi-plus';
            this.uploadIcon = 'pi pi-upload';
            this.cancelIcon = 'pi pi-times';
            this.showUploadButton = true;
            this.showCancelButton = true;
            this.mode = 'advanced';
            this.onBeforeUpload = new core.EventEmitter();
            this.onSend = new core.EventEmitter();
            this.onUpload = new core.EventEmitter();
            this.onError = new core.EventEmitter();
            this.onClear = new core.EventEmitter();
            this.onRemove = new core.EventEmitter();
            this.onSelect = new core.EventEmitter();
            this.onProgress = new core.EventEmitter();
            this.uploadHandler = new core.EventEmitter();
            this._files = [];
            this.progress = 0;
            this.uploadedFileCount = 0;
        }
        Object.defineProperty(FileUpload.prototype, "files", {
            get: function () {
                return this._files;
            },
            set: function (files) {
                this._files = [];
                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    if (this.validate(file)) {
                        if (this.isImage(file)) {
                            file.objectURL = this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(files[i])));
                        }
                        this._files.push(files[i]);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        FileUpload.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.templates.forEach(function (item) {
                switch (item.getType()) {
                    case 'file':
                        _this.fileTemplate = item.template;
                        break;
                    case 'content':
                        _this.contentTemplate = item.template;
                        break;
                    case 'toolbar':
                        _this.toolbarTemplate = item.template;
                        break;
                    default:
                        _this.fileTemplate = item.template;
                        break;
                }
            });
        };
        FileUpload.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.mode === 'advanced') {
                this.zone.runOutsideAngular(function () {
                    if (_this.content)
                        _this.content.nativeElement.addEventListener('dragover', _this.onDragOver.bind(_this));
                });
            }
        };
        FileUpload.prototype.onFileSelect = function (event) {
            if (event.type !== 'drop' && this.isIE11() && this.duplicateIEEvent) {
                this.duplicateIEEvent = false;
                return;
            }
            this.msgs = [];
            if (!this.multiple) {
                this.files = [];
            }
            var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                if (!this.isFileSelected(file)) {
                    if (this.validate(file)) {
                        if (this.isImage(file)) {
                            file.objectURL = this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(files[i])));
                        }
                        this.files.push(files[i]);
                    }
                }
            }
            this.onSelect.emit({ originalEvent: event, files: files, currentFiles: this.files });
            if (this.fileLimit && this.mode == "advanced") {
                this.checkFileLimit();
            }
            if (this.hasFiles() && this.auto && (!(this.mode === "advanced") || !this.isFileLimitExceeded())) {
                this.upload();
            }
            if (event.type !== 'drop' && this.isIE11()) {
                this.clearIEInput();
            }
            else {
                this.clearInputElement();
            }
        };
        FileUpload.prototype.isFileSelected = function (file) {
            var e_1, _a;
            try {
                for (var _b = __values(this.files), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sFile = _c.value;
                    if ((sFile.name + sFile.type + sFile.size) === (file.name + file.type + file.size)) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        };
        FileUpload.prototype.isIE11 = function () {
            return !!window['MSInputMethodContext'] && !!document['documentMode'];
        };
        FileUpload.prototype.validate = function (file) {
            if (this.accept && !this.isFileTypeValid(file)) {
                this.msgs.push({
                    severity: 'error',
                    summary: this.invalidFileTypeMessageSummary.replace('{0}', file.name),
                    detail: this.invalidFileTypeMessageDetail.replace('{0}', this.accept)
                });
                return false;
            }
            if (this.maxFileSize && file.size > this.maxFileSize) {
                this.msgs.push({
                    severity: 'error',
                    summary: this.invalidFileSizeMessageSummary.replace('{0}', file.name),
                    detail: this.invalidFileSizeMessageDetail.replace('{0}', this.formatSize(this.maxFileSize))
                });
                return false;
            }
            return true;
        };
        FileUpload.prototype.isFileTypeValid = function (file) {
            var e_2, _a;
            var acceptableTypes = this.accept.split(',').map(function (type) { return type.trim(); });
            try {
                for (var acceptableTypes_1 = __values(acceptableTypes), acceptableTypes_1_1 = acceptableTypes_1.next(); !acceptableTypes_1_1.done; acceptableTypes_1_1 = acceptableTypes_1.next()) {
                    var type = acceptableTypes_1_1.value;
                    var acceptable = this.isWildcard(type) ? this.getTypeClass(file.type) === this.getTypeClass(type)
                        : file.type == type || this.getFileExtension(file).toLowerCase() === type.toLowerCase();
                    if (acceptable) {
                        return true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (acceptableTypes_1_1 && !acceptableTypes_1_1.done && (_a = acceptableTypes_1.return)) _a.call(acceptableTypes_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return false;
        };
        FileUpload.prototype.getTypeClass = function (fileType) {
            return fileType.substring(0, fileType.indexOf('/'));
        };
        FileUpload.prototype.isWildcard = function (fileType) {
            return fileType.indexOf('*') !== -1;
        };
        FileUpload.prototype.getFileExtension = function (file) {
            return '.' + file.name.split('.').pop();
        };
        FileUpload.prototype.isImage = function (file) {
            return /^image\//.test(file.type);
        };
        FileUpload.prototype.onImageLoad = function (img) {
            window.URL.revokeObjectURL(img.src);
        };
        FileUpload.prototype.upload = function () {
            var _this = this;
            if (this.customUpload) {
                if (this.fileLimit) {
                    this.uploadedFileCount += this.files.length;
                }
                this.uploadHandler.emit({
                    files: this.files
                });
            }
            else {
                this.uploading = true;
                this.msgs = [];
                var formData_1 = new FormData();
                this.onBeforeUpload.emit({
                    'formData': formData_1
                });
                for (var i = 0; i < this.files.length; i++) {
                    formData_1.append(this.name, this.files[i], this.files[i].name);
                }
                this.http.post(this.url, formData_1, {
                    headers: this.headers, reportProgress: true, observe: 'events', withCredentials: this.withCredentials
                }).subscribe(function (event) {
                    switch (event.type) {
                        case http.HttpEventType.Sent:
                            _this.onSend.emit({
                                originalEvent: event,
                                'formData': formData_1
                            });
                            break;
                        case http.HttpEventType.Response:
                            _this.uploading = false;
                            _this.progress = 0;
                            if (event['status'] >= 200 && event['status'] < 300) {
                                if (_this.fileLimit) {
                                    _this.uploadedFileCount += _this.files.length;
                                }
                                _this.onUpload.emit({ originalEvent: event, files: _this.files });
                            }
                            else {
                                _this.onError.emit({ files: _this.files });
                            }
                            _this.clear();
                            break;
                        case http.HttpEventType.UploadProgress: {
                            if (event['loaded']) {
                                _this.progress = Math.round((event['loaded'] * 100) / event['total']);
                            }
                            _this.onProgress.emit({ originalEvent: event, progress: _this.progress });
                            break;
                        }
                    }
                }, function (error) {
                    _this.uploading = false;
                    _this.onError.emit({ files: _this.files, error: error });
                });
            }
        };
        FileUpload.prototype.clear = function () {
            this.files = [];
            this.onClear.emit();
            this.clearInputElement();
        };
        FileUpload.prototype.remove = function (event, index) {
            this.clearInputElement();
            this.onRemove.emit({ originalEvent: event, file: this.files[index] });
            this.files.splice(index, 1);
        };
        FileUpload.prototype.isFileLimitExceeded = function () {
            if (this.fileLimit && this.fileLimit <= this.files.length + this.uploadedFileCount && this.focus) {
                this.focus = false;
            }
            return this.fileLimit && this.fileLimit < this.files.length + this.uploadedFileCount;
        };
        FileUpload.prototype.isChooseDisabled = function () {
            return this.fileLimit && this.fileLimit <= this.files.length + this.uploadedFileCount;
        };
        FileUpload.prototype.checkFileLimit = function () {
            if (this.isFileLimitExceeded()) {
                this.msgs.push({
                    severity: 'error',
                    summary: this.invalidFileLimitMessageSummary.replace('{0}', this.fileLimit.toString()),
                    detail: this.invalidFileLimitMessageDetail.replace('{0}', this.fileLimit.toString())
                });
            }
        };
        FileUpload.prototype.clearInputElement = function () {
            if (this.advancedFileInput && this.advancedFileInput.nativeElement) {
                this.advancedFileInput.nativeElement.value = '';
            }
            if (this.basicFileInput && this.basicFileInput.nativeElement) {
                this.basicFileInput.nativeElement.value = '';
            }
        };
        FileUpload.prototype.clearIEInput = function () {
            if (this.advancedFileInput && this.advancedFileInput.nativeElement) {
                this.duplicateIEEvent = true; //IE11 fix to prevent onFileChange trigger again
                this.advancedFileInput.nativeElement.value = '';
            }
        };
        FileUpload.prototype.hasFiles = function () {
            return this.files && this.files.length > 0;
        };
        FileUpload.prototype.onDragEnter = function (e) {
            if (!this.disabled) {
                e.stopPropagation();
                e.preventDefault();
            }
        };
        FileUpload.prototype.onDragOver = function (e) {
            if (!this.disabled) {
                dom.DomHandler.addClass(this.content.nativeElement, 'ui-fileupload-highlight');
                this.dragHighlight = true;
                e.stopPropagation();
                e.preventDefault();
            }
        };
        FileUpload.prototype.onDragLeave = function (event) {
            if (!this.disabled) {
                dom.DomHandler.removeClass(this.content.nativeElement, 'ui-fileupload-highlight');
            }
        };
        FileUpload.prototype.onDrop = function (event) {
            if (!this.disabled) {
                dom.DomHandler.removeClass(this.content.nativeElement, 'ui-fileupload-highlight');
                event.stopPropagation();
                event.preventDefault();
                var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;
                var allowDrop = this.multiple || (files && files.length === 1);
                if (allowDrop) {
                    this.onFileSelect(event);
                }
            }
        };
        FileUpload.prototype.onFocus = function () {
            this.focus = true;
        };
        FileUpload.prototype.onBlur = function () {
            this.focus = false;
        };
        FileUpload.prototype.formatSize = function (bytes) {
            if (bytes == 0) {
                return '0 B';
            }
            var k = 1024, dm = 3, sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'], i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        };
        FileUpload.prototype.onSimpleUploaderClick = function (event) {
            if (this.hasFiles()) {
                this.upload();
            }
        };
        FileUpload.prototype.getBlockableElement = function () {
            return this.el.nativeElement.children[0];
        };
        FileUpload.prototype.ngOnDestroy = function () {
            if (this.content && this.content.nativeElement) {
                this.content.nativeElement.removeEventListener('dragover', this.onDragOver);
            }
        };
        FileUpload.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: platformBrowser.DomSanitizer },
            { type: core.NgZone },
            { type: http.HttpClient }
        ]; };
        __decorate([
            core.Input()
        ], FileUpload.prototype, "name", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "url", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "method", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "multiple", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "accept", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "disabled", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "auto", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "withCredentials", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "maxFileSize", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "invalidFileSizeMessageSummary", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "invalidFileSizeMessageDetail", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "invalidFileTypeMessageSummary", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "invalidFileTypeMessageDetail", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "invalidFileLimitMessageDetail", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "invalidFileLimitMessageSummary", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "style", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "styleClass", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "previewWidth", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "chooseLabel", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "uploadLabel", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "cancelLabel", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "chooseIcon", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "uploadIcon", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "cancelIcon", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "showUploadButton", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "showCancelButton", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "mode", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "headers", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "customUpload", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "fileLimit", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onBeforeUpload", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onSend", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onUpload", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onError", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onClear", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onRemove", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onSelect", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "onProgress", void 0);
        __decorate([
            core.Output()
        ], FileUpload.prototype, "uploadHandler", void 0);
        __decorate([
            core.ContentChildren(api.PrimeTemplate)
        ], FileUpload.prototype, "templates", void 0);
        __decorate([
            core.ViewChild('advancedfileinput')
        ], FileUpload.prototype, "advancedFileInput", void 0);
        __decorate([
            core.ViewChild('basicfileinput')
        ], FileUpload.prototype, "basicFileInput", void 0);
        __decorate([
            core.ViewChild('content')
        ], FileUpload.prototype, "content", void 0);
        __decorate([
            core.Input()
        ], FileUpload.prototype, "files", null);
FileUpload.ɵfac = function FileUpload_Factory(t) { return new (t || FileUpload)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.HttpClient)); };
FileUpload.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUpload, selectors: [["p-fileUpload"]], contentQueries: function FileUpload_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, api.PrimeTemplate, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);
    } }, viewQuery: function FileUpload_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.advancedFileInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.basicFileInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, inputs: { method: "method", invalidFileSizeMessageSummary: "invalidFileSizeMessageSummary", invalidFileSizeMessageDetail: "invalidFileSizeMessageDetail", invalidFileTypeMessageSummary: "invalidFileTypeMessageSummary", invalidFileTypeMessageDetail: "invalidFileTypeMessageDetail", invalidFileLimitMessageDetail: "invalidFileLimitMessageDetail", invalidFileLimitMessageSummary: "invalidFileLimitMessageSummary", previewWidth: "previewWidth", chooseLabel: "chooseLabel", uploadLabel: "uploadLabel", cancelLabel: "cancelLabel", chooseIcon: "chooseIcon", uploadIcon: "uploadIcon", cancelIcon: "cancelIcon", showUploadButton: "showUploadButton", showCancelButton: "showCancelButton", mode: "mode", files: "files", name: "name", url: "url", multiple: "multiple", accept: "accept", disabled: "disabled", auto: "auto", withCredentials: "withCredentials", maxFileSize: "maxFileSize", style: "style", styleClass: "styleClass", headers: "headers", customUpload: "customUpload", fileLimit: "fileLimit" }, outputs: { onBeforeUpload: "onBeforeUpload", onSend: "onSend", onUpload: "onUpload", onError: "onError", onClear: "onClear", onRemove: "onRemove", onSelect: "onSelect", onProgress: "onProgress", uploadHandler: "uploadHandler" }, decls: 2, vars: 2, consts: [[3, "ngClass", "ngStyle", "class", 4, "ngIf"], [3, "ngClass", "ngStyle", "class", "mouseup", 4, "ngIf"], [3, "ngClass", "ngStyle"], [1, "ui-fileupload-buttonbar", "ui-widget-header", "ui-corner-top"], ["pButton", "", 1, "ui-fileupload-choose", 3, "label", "icon", "ngClass"], ["type", "file", 3, "multiple", "accept", "disabled", "change", "focus", "blur"], ["advancedfileinput", ""], ["type", "button", 3, "label", "icon", "disabled", "onClick", 4, "ngIf"], [4, "ngTemplateOutlet"], [3, "ngClass", "dragenter", "dragleave", "drop"], ["content", ""], [3, "value", "showValue", 4, "ngIf"], [3, "value", "enableService"], ["class", "ui-fileupload-files", 4, "ngIf"], ["type", "button", 3, "label", "icon", "disabled", "onClick"], [3, "value", "showValue"], [1, "ui-fileupload-files"], [4, "ngIf"], ["class", "ui-fileupload-row", 4, "ngFor", "ngForOf"], [1, "ui-fileupload-row"], [3, "src", "width", 4, "ngIf"], ["type", "button", "icon", "pi pi-times", "pButton", "", 3, "disabled", "click"], [3, "src", "width"], ["ngFor", "", 3, "ngForOf", "ngForTemplate"], [3, "ngClass", "ngStyle", "mouseup"], [1, "ui-button-icon-left", "pi", 3, "ngClass"], [1, "ui-button-text", "ui-clickable"], ["type", "file", 3, "accept", "multiple", "disabled", "change", "focus", "blur", 4, "ngIf"], ["type", "file", 3, "accept", "multiple", "disabled", "change", "focus", "blur"], ["basicfileinput", ""]], template: function FileUpload_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FileUpload_div_0_Template, 14, 24, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FileUpload_span_1_Template, 5, 14, "span", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "advanced");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "basic");
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgClass, ɵngcc3.NgStyle, ɵngcc4.ButtonDirective, ɵngcc3.NgTemplateOutlet, ɵngcc5.Messages, ɵngcc4.Button, ɵngcc6.ProgressBar, ɵngcc3.NgForOf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUpload, [{
        type: core.Component,
        args: [{
                selector: 'p-fileUpload',
                template: "\n        <div [ngClass]=\"'ui-fileupload ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"mode === 'advanced'\">\n            <div class=\"ui-fileupload-buttonbar ui-widget-header ui-corner-top\">\n                <span class=\"ui-fileupload-choose\" [label]=\"chooseLabel\" [icon]=\"chooseIcon\" pButton [ngClass]=\"{'ui-state-focus': focus, 'ui-state-disabled':disabled || isChooseDisabled()}\"> \n                    <input #advancedfileinput type=\"file\" (change)=\"onFileSelect($event)\" [multiple]=\"multiple\" [accept]=\"accept\" [disabled]=\"disabled || isChooseDisabled()\" \n                        (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.title]=\"''\">\n                </span>\n\n                <p-button *ngIf=\"!auto&&showUploadButton\" type=\"button\" [label]=\"uploadLabel\" [icon]=\"uploadIcon\" (onClick)=\"upload()\" [disabled]=\"!hasFiles() || isFileLimitExceeded()\"></p-button>\n                <p-button *ngIf=\"!auto&&showCancelButton\" type=\"button\" [label]=\"cancelLabel\" [icon]=\"cancelIcon\" (onClick)=\"clear()\" [disabled]=\"!hasFiles() ||\u00A0uploading\"></p-button>\n\n                <ng-container *ngTemplateOutlet=\"toolbarTemplate\"></ng-container>\n            </div>\n            <div #content [ngClass]=\"{'ui-fileupload-content ui-widget-content ui-corner-bottom':true}\"\n                 (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\" (drop)=\"onDrop($event)\">\n                <p-progressBar [value]=\"progress\" [showValue]=\"false\" *ngIf=\"hasFiles()\"></p-progressBar>\n\n                <p-messages [value]=\"msgs\" [enableService]=\"false\"></p-messages>\n\n                <div class=\"ui-fileupload-files\" *ngIf=\"hasFiles()\">\n                    <div *ngIf=\"!fileTemplate\">\n                        <div class=\"ui-fileupload-row\" *ngFor=\"let file of files; let i = index;\">\n                            <div><img [src]=\"file.objectURL\" *ngIf=\"isImage(file)\" [width]=\"previewWidth\" /></div>\n                            <div>{{file.name}}</div>\n                            <div>{{formatSize(file.size)}}</div>\n                            <div>\n                                <button type=\"button\" icon=\"pi pi-times\" pButton (click)=\"remove($event,i)\" [disabled]=\"uploading\"></button>\n                            </div>\n                        </div>\n                    </div>\n                    <div *ngIf=\"fileTemplate\">\n                        <ng-template ngFor [ngForOf]=\"files\" [ngForTemplate]=\"fileTemplate\"></ng-template>\n                    </div>\n                </div>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n        </div>\n        <span *ngIf=\"mode === 'basic'\" [ngClass]=\"{'ui-button ui-fileupload-choose ui-widget ui-state-default ui-corner-all ui-button-text-icon-left': true, \n                'ui-fileupload-choose-selected': hasFiles(),'ui-state-focus': focus, 'ui-state-disabled':disabled}\"\n              [ngStyle]=\"style\" [class]=\"styleClass\" (mouseup)=\"onSimpleUploaderClick($event)\">\n            <span class=\"ui-button-icon-left pi\" [ngClass]=\"{'pi-plus': !hasFiles()||auto, 'pi-upload': hasFiles()&&!auto}\"></span>\n            <span class=\"ui-button-text ui-clickable\">{{auto ? chooseLabel : hasFiles() ? files[0].name : chooseLabel}}</span>\n            <input #basicfileinput type=\"file\" [accept]=\"accept\" [multiple]=\"multiple\" [disabled]=\"disabled\"\n                   (change)=\"onFileSelect($event)\" *ngIf=\"!hasFiles()\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n        </span>\n    ",
                changeDetection: core.ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.DomSanitizer }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.HttpClient }]; }, { method: [{
            type: core.Input
        }], invalidFileSizeMessageSummary: [{
            type: core.Input
        }], invalidFileSizeMessageDetail: [{
            type: core.Input
        }], invalidFileTypeMessageSummary: [{
            type: core.Input
        }], invalidFileTypeMessageDetail: [{
            type: core.Input
        }], invalidFileLimitMessageDetail: [{
            type: core.Input
        }], invalidFileLimitMessageSummary: [{
            type: core.Input
        }], previewWidth: [{
            type: core.Input
        }], chooseLabel: [{
            type: core.Input
        }], uploadLabel: [{
            type: core.Input
        }], cancelLabel: [{
            type: core.Input
        }], chooseIcon: [{
            type: core.Input
        }], uploadIcon: [{
            type: core.Input
        }], cancelIcon: [{
            type: core.Input
        }], showUploadButton: [{
            type: core.Input
        }], showCancelButton: [{
            type: core.Input
        }], mode: [{
            type: core.Input
        }], onBeforeUpload: [{
            type: core.Output
        }], onSend: [{
            type: core.Output
        }], onUpload: [{
            type: core.Output
        }], onError: [{
            type: core.Output
        }], onClear: [{
            type: core.Output
        }], onRemove: [{
            type: core.Output
        }], onSelect: [{
            type: core.Output
        }], onProgress: [{
            type: core.Output
        }], uploadHandler: [{
            type: core.Output
        }], files: [{
            type: core.Input
        }], name: [{
            type: core.Input
        }], url: [{
            type: core.Input
        }], multiple: [{
            type: core.Input
        }], accept: [{
            type: core.Input
        }], disabled: [{
            type: core.Input
        }], auto: [{
            type: core.Input
        }], withCredentials: [{
            type: core.Input
        }], maxFileSize: [{
            type: core.Input
        }], style: [{
            type: core.Input
        }], styleClass: [{
            type: core.Input
        }], headers: [{
            type: core.Input
        }], customUpload: [{
            type: core.Input
        }], fileLimit: [{
            type: core.Input
        }], templates: [{
            type: core.ContentChildren,
            args: [api.PrimeTemplate]
        }], advancedFileInput: [{
            type: core.ViewChild,
            args: ['advancedfileinput']
        }], basicFileInput: [{
            type: core.ViewChild,
            args: ['basicfileinput']
        }], content: [{
            type: core.ViewChild,
            args: ['content']
        }] }); })();
        return FileUpload;
    }());
    var FileUploadModule = /** @class */ (function () {
        function FileUploadModule() {
        }
FileUploadModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FileUploadModule });
FileUploadModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FileUploadModule_Factory(t) { return new (t || FileUploadModule)(); }, imports: [[common.CommonModule, api.SharedModule, button.ButtonModule, progressbar.ProgressBarModule, messages.MessagesModule], ɵngcc7.SharedModule, ɵngcc4.ButtonModule, ɵngcc6.ProgressBarModule, ɵngcc5.MessagesModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FileUploadModule, { declarations: [FileUpload], imports: [ɵngcc3.CommonModule, ɵngcc7.SharedModule, ɵngcc4.ButtonModule, ɵngcc6.ProgressBarModule, ɵngcc5.MessagesModule], exports: [FileUpload, ɵngcc7.SharedModule, ɵngcc4.ButtonModule, ɵngcc6.ProgressBarModule, ɵngcc5.MessagesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, api.SharedModule, button.ButtonModule, progressbar.ProgressBarModule, messages.MessagesModule],
                exports: [FileUpload, api.SharedModule, button.ButtonModule, progressbar.ProgressBarModule, messages.MessagesModule],
                declarations: [FileUpload]
            }]
    }], function () { return []; }, null); })();
        return FileUploadModule;
    }());

    exports.FileUpload = FileUpload;
    exports.FileUploadModule = FileUploadModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=primeng-fileupload.umd.js.map