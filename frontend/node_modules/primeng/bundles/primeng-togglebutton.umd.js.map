{"version":3,"file":"primeng-togglebutton.umd.js","sources":["ng:/primeng/togglebutton/togglebutton.ts"],"names":["NG_VALUE_ACCESSOR","forwardRef","EventEmitter","Input","Output","ViewChild","Component","ChangeDetectionStrategy","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,AfterViewInit,ViewChild,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleButton),\n  multi: true\n};\n\n@Component({\n    selector: 'p-toggleButton',\n    template: `\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon && !offIcon), \n                'ui-button-text-icon-left': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'left'), \n                'ui-button-text-icon-right': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'right'),'ui-button-icon-only': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \n                (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #checkbox type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.tabindex]=\"tabindex\"\n                    role=\"button\" [attr.aria-pressed]=\"checked\" [attr.aria-labelledby]=\"ariaLabelledBy\" [disabled]=\"disabled\">\n            </div>\n            <span *ngIf=\"onIcon||offIcon\" class=\"ui-button-icon-left\" [class]=\"checked ? this.onIcon : this.offIcon\" [ngClass]=\"{'ui-button-icon-left': (iconPos === 'left'), \n            'ui-button-icon-right': (iconPos === 'right')}\"></span>\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\n        </div>\n    `,\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class ToggleButton implements ControlValueAccessor,AfterViewInit {\n\n    @Input() onLabel: string = 'Yes';\n\n    @Input() offLabel: string = 'No';\n\n    @Input() onIcon: string;\n\n    @Input() offIcon: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() disabled: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() inputId: string;\n\n    @Input() tabindex: number;\n\n    @Input() iconPos: string = 'left';\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @ViewChild('checkbox') checkboxViewChild: ElementRef;\n    \n    checkbox: HTMLInputElement;\n    \n    checked: boolean = false;\n\n    focus: boolean = false;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    ngAfterViewInit() {\n        if (this.checkboxViewChild){\n            this.checkbox = <HTMLInputElement> this.checkboxViewChild.nativeElement;\n        }\n    }\n    \n    toggle(event: Event) {\n        if (!this.disabled) {\n            this.checked = !this.checked;\n            this.onModelChange(this.checked);\n            this.onModelTouched();\n            this.onChange.emit({\n                originalEvent: event,\n                checked: this.checked\n            });\n            if (this.checkbox) {\n                this.checkbox.focus();\n            }\n        }\n    }\n\n    onFocus() {\n        this.focus = true;\n    }\n    \n    onBlur() {\n        this.focus = false;\n        this.onModelTouched();\n    }\n    \n    writeValue(value: any) : void {\n        this.checked = value;\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    get hasOnLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n    \n    get hasOffLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ToggleButton],\n    declarations: [ToggleButton]\n})\nexport class ToggleButtonModule { }\n"]}