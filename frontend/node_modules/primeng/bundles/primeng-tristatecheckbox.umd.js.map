{"version":3,"file":"primeng-tristatecheckbox.umd.js","sources":["ng:/primeng/tristatecheckbox/tristatecheckbox.ts"],"names":["NG_VALUE_ACCESSOR","forwardRef","EventEmitter","ChangeDetectorRef","Input","Output","Component","ChangeDetectionStrategy","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'ui-chkbox ui-tristatechkbox ui-widget': true,'ui-chkbox-readonly': readonly}\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'ui-state-active':value!=null,'ui-state-disabled':disabled,'ui-state-focus':focus}\">\n                <span class=\"ui-chkbox-icon pi ui-clickable\" [ngClass]=\"{'pi-check':value==true,'pi-times':value==false}\"></span>\n            </div>\n        </div>\n        <label class=\"ui-chkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'ui-label-active':value!=null, 'ui-label-disabled':disabled, 'ui-label-focus':focus}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() label: string;\n\n    @Input() readonly: boolean;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    focus: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    onClick(event: Event, input: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focus = true;\n            input.focus();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n\n    onKeyup(event: KeyboardEvent) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    toggle(event: Event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n\n    onFocus() {\n        this.focus = true;\n    }\n\n    onBlur() {\n        this.focus = false;\n        this.onModelTouched();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }\n"]}