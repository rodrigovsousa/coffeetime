import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { NgModule, Directive, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
let CodeHighlighter = class CodeHighlighter {
    constructor(el) {
        this.el = el;
    }
    ngAfterViewInit() {
        if (window['Prism']) {
            window['Prism'].highlightElement(this.el.nativeElement);
        }
    }
};
CodeHighlighter.ɵfac = function CodeHighlighter_Factory(t) { return new (t || CodeHighlighter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CodeHighlighter.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CodeHighlighter, selectors: [["", "pCode", ""]] });
CodeHighlighter.ctorParameters = () => [
    { type: ElementRef }
];
export { CodeHighlighter };
let CodeHighlighterModule = class CodeHighlighterModule {
};
CodeHighlighterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CodeHighlighterModule });
CodeHighlighterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CodeHighlighterModule_Factory(t) { return new (t || CodeHighlighterModule)(); }, imports: [[CommonModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CodeHighlighter, [{
        type: Directive,
        args: [{
                selector: '[pCode]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodeHighlighterModule, { declarations: function () { return [CodeHighlighter]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CodeHighlighter]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CodeHighlighterModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [CodeHighlighter],
                declarations: [CodeHighlighter]
            }]
    }], null, null); })();
export { CodeHighlighterModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWhpZ2hsaWdodGVyLmpzIiwic291cmNlcyI6WyJuZzovcHJpbWVuZy9jb2RlaGlnaGxpZ2h0ZXIvY29kZWhpZ2hsaWdodGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUsvQyxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0FBQUcsSUFFM0IsWUFBbUIsRUFBYztBQUFJLFFBQWxCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxJQUFHLENBQUM7QUFDMUMsSUFDSSxlQUFlO0FBQ25CLFFBQVEsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0IsWUFBWSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsQ0FBQzs7MkdBQUE7QUFDRDtBQUU0QixZQVZELFVBQVU7QUFBRyxFQVF4QztBQVZhLGVBQWUsZkFXNUIsU0FYYSxlQUFlO09BSDNCLFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRSxTQUFTLE1BQ3RCLENBQUMsSUFDVyx6REFnQmIsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7QUFBRyxDQUFDLENBQUE7V0FoQlYsQ0FTM0IsWkFPWSxxQkFBcUIsb0JBTGpDLFFBQVEsQ0FBQyxVQUNOLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztNQUN2QixPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFDMUIsWUFBWSxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQ2xDLENBQUMsSUFDVyxxQkFBcUIsQ0FBSTs7Ozs7Ozs7Ozs7Ozs7OzBCQUN0QztBQUNBLFNBRmEscUJBQXFCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1twQ29kZV0nXG59KVxuZXhwb3J0IGNsYXNzIENvZGVIaWdobGlnaHRlciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmKSB7IH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgaWYgKHdpbmRvd1snUHJpc20nXSkge1xuICAgICAgICAgICAgd2luZG93WydQcmlzbSddLmhpZ2hsaWdodEVsZW1lbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbQ29kZUhpZ2hsaWdodGVyXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtDb2RlSGlnaGxpZ2h0ZXJdXG59KVxuZXhwb3J0IGNsYXNzIENvZGVIaWdobGlnaHRlck1vZHVsZSB7IH1cblxuIl19