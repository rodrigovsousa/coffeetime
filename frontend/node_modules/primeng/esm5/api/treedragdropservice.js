import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var TreeDragDropService = /** @class */ (function () {
    function TreeDragDropService() {
        this.dragStartSource = new Subject();
        this.dragStopSource = new Subject();
        this.dragStart$ = this.dragStartSource.asObservable();
        this.dragStop$ = this.dragStopSource.asObservable();
    }
    TreeDragDropService.prototype.startDrag = function (event) {
        this.dragStartSource.next(event);
    };
    TreeDragDropService.prototype.stopDrag = function (event) {
        this.dragStopSource.next(event);
    };
TreeDragDropService.ɵfac = function TreeDragDropService_Factory(t) { return new (t || TreeDragDropService)(); };
TreeDragDropService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeDragDropService, factory: function (t) { return TreeDragDropService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeDragDropService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return TreeDragDropService;
}());
export { TreeDragDropService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZWRyYWdkcm9wc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L3ByaW1lbmcvYXBpL3RyZWVkcmFnZHJvcHNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUkvQjtBQUVlLElBRmY7QUFBaUMsUUFFckIsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBcUIsQ0FBQztBQUMvRCxRQUFZLG1CQUFjLEdBQUcsSUFBSSxPQUFPLEVBQXFCLENBQUM7QUFDOUQsUUFDSSxlQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNyRCxRQUFJLGNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ25ELElBUUEsQ0FBQztBQUFDLElBUEUsdUNBQVMsR0FBVCxVQUFVLEtBQXdCO0FBQ3RDLFFBQVEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekMsSUFBSSxDQUFDO0FBQ0osSUFDRyxzQ0FBUSxHQUFSLFVBQVMsS0FBd0I7QUFDckMsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxJQUFJLENBQUM7SUFkUSxtQkFBbUIsd0JBRC9CLFVBQVUsRUFBRSxRQUNBLG1CQUFtQixDQWUvQjs7OztnREFBQztBQUFDLElBQUgsMEJBQUM7QUFBRSxDQUFGLEFBZkQsSUFlQztBQUFDLFNBZlcsbUJBQW1CO0FBQy9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVHJlZU5vZGVEcmFnRXZlbnQgfSBmcm9tICcuL3RyZWVub2RlZHJhZ2V2ZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyZWVEcmFnRHJvcFNlcnZpY2Uge1xuICAgIFxuICAgIHByaXZhdGUgZHJhZ1N0YXJ0U291cmNlID0gbmV3IFN1YmplY3Q8VHJlZU5vZGVEcmFnRXZlbnQ+KCk7XG4gICAgcHJpdmF0ZSBkcmFnU3RvcFNvdXJjZSA9IG5ldyBTdWJqZWN0PFRyZWVOb2RlRHJhZ0V2ZW50PigpO1xuICAgIFxuICAgIGRyYWdTdGFydCQgPSB0aGlzLmRyYWdTdGFydFNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgICBkcmFnU3RvcCQgPSB0aGlzLmRyYWdTdG9wU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICAgIFxuICAgIHN0YXJ0RHJhZyhldmVudDogVHJlZU5vZGVEcmFnRXZlbnQpIHtcbiAgICAgICAgdGhpcy5kcmFnU3RhcnRTb3VyY2UubmV4dChldmVudCk7XG4gICAgfVxuICAgIFxuICAgIHN0b3BEcmFnKGV2ZW50OiBUcmVlTm9kZURyYWdFdmVudCkge1xuICAgICAgICB0aGlzLmRyYWdTdG9wU291cmNlLm5leHQoZXZlbnQpO1xuICAgIH1cbn0iXX0=