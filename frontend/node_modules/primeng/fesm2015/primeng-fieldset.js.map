{"version":3,"file":"primeng-fieldset.js","sources":["ng:/primeng/fieldset/fieldset.ts","ng:/primeng/fieldset/primeng-fieldset.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng/api';\nimport {BlockableUI} from 'primeng/api';\n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-fieldset',\n    template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\">\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"ui-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{'pi-minus': !collapsed,'pi-plus':collapsed}\"></span>\n                    <span class=\"ui-fieldset-legend-text\">{{legend}}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                </ng-template>\n            </legend>\n            <div [attr.id]=\"id + '-content'\" class=\"ui-fieldset-content-wrapper\" [@fieldsetContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\" \n                        [attr.aria-labelledby]=\"id\" [ngClass]=\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\" [attr.aria-hidden]=\"collapsed\"\n                         (@fieldsetContent.done)=\"onToggleDone($event)\" role=\"region\">\n                <div class=\"ui-fieldset-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    `,\n    animations: [\n        trigger('fieldsetContent', [\n            state('hidden', style({\n                height: '0'\n            })),\n            state('void', style({\n                height: '{{height}}'\n            }), {params: {height: '0'}}),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible => hidden', animate('{{transitionParams}}')),\n            transition('hidden => visible', animate('{{transitionParams}}')),\n            transition('void => visible', animate('{{transitionParams}}'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Fieldset implements BlockableUI {\n\n    @Input() legend: string;\n\n    @Input() toggleable: boolean;\n\n    @Input() collapsed: boolean = false;\n\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n    \n    public animating: boolean;\n    \n    constructor(private el: ElementRef) {}\n    \n    id: string = `ui-fieldset-${idx++}`;\n        \n    toggle(event) {\n        if (this.animating) {\n            return false;\n        }\n        \n        this.animating = true;\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\n        \n        if (this.collapsed)\n            this.expand(event);\n        else\n            this.collapse(event);\n            \n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});   \n        event.preventDefault();\n    }\n    \n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onToggleDone(event: Event) {\n        this.animating = false;\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Fieldset,SharedModule],\n    declarations: [Fieldset]\n})\nexport class FieldsetModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}