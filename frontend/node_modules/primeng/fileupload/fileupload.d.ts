import { OnDestroy, EventEmitter, TemplateRef, AfterViewInit, AfterContentInit, QueryList, ElementRef, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Message } from 'primeng/api';
import { BlockableUI } from 'primeng/api';
import { HttpClient, HttpHeaders } from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from 'primeng/button';
import * as ɵngcc4 from 'primeng/progressbar';
import * as ɵngcc5 from 'primeng/messages';
export declare class FileUpload implements AfterViewInit, AfterContentInit, OnDestroy, BlockableUI {
    private el;
    sanitizer: DomSanitizer;
    zone: NgZone;
    private http;
    name: string;
    url: string;
    method: string;
    multiple: boolean;
    accept: string;
    disabled: boolean;
    auto: boolean;
    withCredentials: boolean;
    maxFileSize: number;
    invalidFileSizeMessageSummary: string;
    invalidFileSizeMessageDetail: string;
    invalidFileTypeMessageSummary: string;
    invalidFileTypeMessageDetail: string;
    invalidFileLimitMessageDetail: string;
    invalidFileLimitMessageSummary: string;
    style: any;
    styleClass: string;
    previewWidth: number;
    chooseLabel: string;
    uploadLabel: string;
    cancelLabel: string;
    chooseIcon: string;
    uploadIcon: string;
    cancelIcon: string;
    showUploadButton: boolean;
    showCancelButton: boolean;
    mode: string;
    headers: HttpHeaders;
    customUpload: boolean;
    fileLimit: number;
    onBeforeUpload: EventEmitter<any>;
    onSend: EventEmitter<any>;
    onUpload: EventEmitter<any>;
    onError: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onRemove: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onProgress: EventEmitter<any>;
    uploadHandler: EventEmitter<any>;
    templates: QueryList<any>;
    advancedFileInput: ElementRef;
    basicFileInput: ElementRef;
    content: ElementRef;
    files: File[];
    _files: File[];
    progress: number;
    dragHighlight: boolean;
    msgs: Message[];
    fileTemplate: TemplateRef<any>;
    contentTemplate: TemplateRef<any>;
    toolbarTemplate: TemplateRef<any>;
    uploadedFileCount: number;
    focus: boolean;
    uploading: boolean;
    duplicateIEEvent: boolean;
    constructor(el: ElementRef, sanitizer: DomSanitizer, zone: NgZone, http: HttpClient);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    onFileSelect(event: any): void;
    isFileSelected(file: File): boolean;
    isIE11(): boolean;
    validate(file: File): boolean;
    private isFileTypeValid;
    getTypeClass(fileType: string): string;
    isWildcard(fileType: string): boolean;
    getFileExtension(file: File): string;
    isImage(file: File): boolean;
    onImageLoad(img: any): void;
    upload(): void;
    clear(): void;
    remove(event: Event, index: number): void;
    isFileLimitExceeded(): boolean;
    isChooseDisabled(): boolean;
    checkFileLimit(): void;
    clearInputElement(): void;
    clearIEInput(): void;
    hasFiles(): boolean;
    onDragEnter(e: any): void;
    onDragOver(e: any): void;
    onDragLeave(event: any): void;
    onDrop(event: any): void;
    onFocus(): void;
    onBlur(): void;
    formatSize(bytes: any): string;
    onSimpleUploaderClick(event: Event): void;
    getBlockableElement(): HTMLElement;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileUpload, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileUpload, "p-fileUpload", never, { "method": "method"; "invalidFileSizeMessageSummary": "invalidFileSizeMessageSummary"; "invalidFileSizeMessageDetail": "invalidFileSizeMessageDetail"; "invalidFileTypeMessageSummary": "invalidFileTypeMessageSummary"; "invalidFileTypeMessageDetail": "invalidFileTypeMessageDetail"; "invalidFileLimitMessageDetail": "invalidFileLimitMessageDetail"; "invalidFileLimitMessageSummary": "invalidFileLimitMessageSummary"; "previewWidth": "previewWidth"; "chooseLabel": "chooseLabel"; "uploadLabel": "uploadLabel"; "cancelLabel": "cancelLabel"; "chooseIcon": "chooseIcon"; "uploadIcon": "uploadIcon"; "cancelIcon": "cancelIcon"; "showUploadButton": "showUploadButton"; "showCancelButton": "showCancelButton"; "mode": "mode"; "files": "files"; "name": "name"; "url": "url"; "multiple": "multiple"; "accept": "accept"; "disabled": "disabled"; "auto": "auto"; "withCredentials": "withCredentials"; "maxFileSize": "maxFileSize"; "style": "style"; "styleClass": "styleClass"; "headers": "headers"; "customUpload": "customUpload"; "fileLimit": "fileLimit"; }, { "onBeforeUpload": "onBeforeUpload"; "onSend": "onSend"; "onUpload": "onUpload"; "onError": "onError"; "onClear": "onClear"; "onRemove": "onRemove"; "onSelect": "onSelect"; "onProgress": "onProgress"; "uploadHandler": "uploadHandler"; }, ["templates"], never>;
}
export declare class FileUploadModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<FileUploadModule, [typeof FileUpload], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule], [typeof FileUpload, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<FileUploadModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXVwbG9hZC5kLnRzIiwic291cmNlcyI6WyJmaWxldXBsb2FkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBRdWVyeUxpc3QsIEVsZW1lbnRSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgQmxvY2thYmxlVUkgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlsZVVwbG9hZCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgQmxvY2thYmxlVUkge1xuICAgIHByaXZhdGUgZWw7XG4gICAgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXI7XG4gICAgem9uZTogTmdab25lO1xuICAgIHByaXZhdGUgaHR0cDtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgYWNjZXB0OiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgYXV0bzogYm9vbGVhbjtcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGJvb2xlYW47XG4gICAgbWF4RmlsZVNpemU6IG51bWJlcjtcbiAgICBpbnZhbGlkRmlsZVNpemVNZXNzYWdlU3VtbWFyeTogc3RyaW5nO1xuICAgIGludmFsaWRGaWxlU2l6ZU1lc3NhZ2VEZXRhaWw6IHN0cmluZztcbiAgICBpbnZhbGlkRmlsZVR5cGVNZXNzYWdlU3VtbWFyeTogc3RyaW5nO1xuICAgIGludmFsaWRGaWxlVHlwZU1lc3NhZ2VEZXRhaWw6IHN0cmluZztcbiAgICBpbnZhbGlkRmlsZUxpbWl0TWVzc2FnZURldGFpbDogc3RyaW5nO1xuICAgIGludmFsaWRGaWxlTGltaXRNZXNzYWdlU3VtbWFyeTogc3RyaW5nO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHByZXZpZXdXaWR0aDogbnVtYmVyO1xuICAgIGNob29zZUxhYmVsOiBzdHJpbmc7XG4gICAgdXBsb2FkTGFiZWw6IHN0cmluZztcbiAgICBjYW5jZWxMYWJlbDogc3RyaW5nO1xuICAgIGNob29zZUljb246IHN0cmluZztcbiAgICB1cGxvYWRJY29uOiBzdHJpbmc7XG4gICAgY2FuY2VsSWNvbjogc3RyaW5nO1xuICAgIHNob3dVcGxvYWRCdXR0b246IGJvb2xlYW47XG4gICAgc2hvd0NhbmNlbEJ1dHRvbjogYm9vbGVhbjtcbiAgICBtb2RlOiBzdHJpbmc7XG4gICAgaGVhZGVyczogSHR0cEhlYWRlcnM7XG4gICAgY3VzdG9tVXBsb2FkOiBib29sZWFuO1xuICAgIGZpbGVMaW1pdDogbnVtYmVyO1xuICAgIG9uQmVmb3JlVXBsb2FkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNlbmQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uVXBsb2FkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkVycm9yOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNsZWFyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblJlbW92ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUHJvZ3Jlc3M6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHVwbG9hZEhhbmRsZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PGFueT47XG4gICAgYWR2YW5jZWRGaWxlSW5wdXQ6IEVsZW1lbnRSZWY7XG4gICAgYmFzaWNGaWxlSW5wdXQ6IEVsZW1lbnRSZWY7XG4gICAgY29udGVudDogRWxlbWVudFJlZjtcbiAgICBmaWxlczogRmlsZVtdO1xuICAgIF9maWxlczogRmlsZVtdO1xuICAgIHByb2dyZXNzOiBudW1iZXI7XG4gICAgZHJhZ0hpZ2hsaWdodDogYm9vbGVhbjtcbiAgICBtc2dzOiBNZXNzYWdlW107XG4gICAgZmlsZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB0b29sYmFyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdXBsb2FkZWRGaWxlQ291bnQ6IG51bWJlcjtcbiAgICBmb2N1czogYm9vbGVhbjtcbiAgICB1cGxvYWRpbmc6IGJvb2xlYW47XG4gICAgZHVwbGljYXRlSUVFdmVudDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHpvbmU6IE5nWm9uZSwgaHR0cDogSHR0cENsaWVudCk7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgb25GaWxlU2VsZWN0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGlzRmlsZVNlbGVjdGVkKGZpbGU6IEZpbGUpOiBib29sZWFuO1xuICAgIGlzSUUxMSgpOiBib29sZWFuO1xuICAgIHZhbGlkYXRlKGZpbGU6IEZpbGUpOiBib29sZWFuO1xuICAgIHByaXZhdGUgaXNGaWxlVHlwZVZhbGlkO1xuICAgIGdldFR5cGVDbGFzcyhmaWxlVHlwZTogc3RyaW5nKTogc3RyaW5nO1xuICAgIGlzV2lsZGNhcmQoZmlsZVR5cGU6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgZ2V0RmlsZUV4dGVuc2lvbihmaWxlOiBGaWxlKTogc3RyaW5nO1xuICAgIGlzSW1hZ2UoZmlsZTogRmlsZSk6IGJvb2xlYW47XG4gICAgb25JbWFnZUxvYWQoaW1nOiBhbnkpOiB2b2lkO1xuICAgIHVwbG9hZCgpOiB2b2lkO1xuICAgIGNsZWFyKCk6IHZvaWQ7XG4gICAgcmVtb3ZlKGV2ZW50OiBFdmVudCwgaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgaXNGaWxlTGltaXRFeGNlZWRlZCgpOiBib29sZWFuO1xuICAgIGlzQ2hvb3NlRGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBjaGVja0ZpbGVMaW1pdCgpOiB2b2lkO1xuICAgIGNsZWFySW5wdXRFbGVtZW50KCk6IHZvaWQ7XG4gICAgY2xlYXJJRUlucHV0KCk6IHZvaWQ7XG4gICAgaGFzRmlsZXMoKTogYm9vbGVhbjtcbiAgICBvbkRyYWdFbnRlcihlOiBhbnkpOiB2b2lkO1xuICAgIG9uRHJhZ092ZXIoZTogYW55KTogdm9pZDtcbiAgICBvbkRyYWdMZWF2ZShldmVudDogYW55KTogdm9pZDtcbiAgICBvbkRyb3AoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Gb2N1cygpOiB2b2lkO1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIGZvcm1hdFNpemUoYnl0ZXM6IGFueSk6IHN0cmluZztcbiAgICBvblNpbXBsZVVwbG9hZGVyQ2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBnZXRCbG9ja2FibGVFbGVtZW50KCk6IEhUTUxFbGVtZW50O1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaWxlVXBsb2FkTW9kdWxlIHtcbn1cbiJdfQ==