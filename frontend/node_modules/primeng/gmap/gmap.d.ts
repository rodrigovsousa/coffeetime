import { ElementRef, AfterViewChecked, DoCheck, EventEmitter, IterableDiffers, ChangeDetectorRef, NgZone } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class GMap implements AfterViewChecked, DoCheck {
    el: ElementRef;
    cd: ChangeDetectorRef;
    zone: NgZone;
    style: any;
    styleClass: string;
    options: any;
    overlays: any[];
    onMapClick: EventEmitter<any>;
    onOverlayClick: EventEmitter<any>;
    onOverlayDblClick: EventEmitter<any>;
    onOverlayDragStart: EventEmitter<any>;
    onOverlayDrag: EventEmitter<any>;
    onOverlayDragEnd: EventEmitter<any>;
    onMapReady: EventEmitter<any>;
    onMapDragEnd: EventEmitter<any>;
    onZoomChanged: EventEmitter<any>;
    differ: any;
    map: any;
    constructor(el: ElementRef, differs: IterableDiffers, cd: ChangeDetectorRef, zone: NgZone);
    ngAfterViewChecked(): void;
    initialize(): void;
    bindOverlayEvents(overlay: any): void;
    ngDoCheck(): void;
    bindDragEvents(overlay: any): void;
    getMap(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GMap, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GMap, "p-gmap", never, { "style": "style"; "styleClass": "styleClass"; "options": "options"; "overlays": "overlays"; }, { "onMapClick": "onMapClick"; "onOverlayClick": "onOverlayClick"; "onOverlayDblClick": "onOverlayDblClick"; "onOverlayDragStart": "onOverlayDragStart"; "onOverlayDrag": "onOverlayDrag"; "onOverlayDragEnd": "onOverlayDragEnd"; "onMapReady": "onMapReady"; "onMapDragEnd": "onMapDragEnd"; "onZoomChanged": "onZoomChanged"; }, never, never>;
}
export declare class GMapModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<GMapModule, [typeof GMap], [typeof ɵngcc1.CommonModule], [typeof GMap]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<GMapModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ21hcC5kLnRzIiwic291cmNlcyI6WyJnbWFwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3Q2hlY2tlZCwgRG9DaGVjaywgRXZlbnRFbWl0dGVyLCBJdGVyYWJsZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdNYXAgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBEb0NoZWNrIHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgem9uZTogTmdab25lO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIG9wdGlvbnM6IGFueTtcbiAgICBvdmVybGF5czogYW55W107XG4gICAgb25NYXBDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25PdmVybGF5Q2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uT3ZlcmxheURibENsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk92ZXJsYXlEcmFnU3RhcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uT3ZlcmxheURyYWc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uT3ZlcmxheURyYWdFbmQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uTWFwUmVhZHk6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uTWFwRHJhZ0VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25ab29tQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGlmZmVyOiBhbnk7XG4gICAgbWFwOiBhbnk7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywgY2Q6IENoYW5nZURldGVjdG9yUmVmLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIGluaXRpYWxpemUoKTogdm9pZDtcbiAgICBiaW5kT3ZlcmxheUV2ZW50cyhvdmVybGF5OiBhbnkpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIGJpbmREcmFnRXZlbnRzKG92ZXJsYXk6IGFueSk6IHZvaWQ7XG4gICAgZ2V0TWFwKCk6IGFueTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdNYXBNb2R1bGUge1xufVxuIl19